
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008a84  08008a84  00009a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf0  08008bf0  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf0  08008bf0  00009bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf8  08008bf8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bfc  08008bfc  00009bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008c00  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000068  08008c68  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08008c68  0000a478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0fa  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003516  00000000  00000000  00024192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000276a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111c  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029df8  00000000  00000000  00029dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac0d  00000000  00000000  00053bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146a0  00000000  00000000  0006e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063c4  00000000  00000000  00182ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00189268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008a6c 	.word	0x08008a6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08008a6c 	.word	0x08008a6c

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b96a 	b.w	8000518 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9d08      	ldr	r5, [sp, #32]
 8000262:	460c      	mov	r4, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14e      	bne.n	8000306 <__udivmoddi4+0xaa>
 8000268:	4694      	mov	ip, r2
 800026a:	458c      	cmp	ip, r1
 800026c:	4686      	mov	lr, r0
 800026e:	fab2 f282 	clz	r2, r2
 8000272:	d962      	bls.n	800033a <__udivmoddi4+0xde>
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0320 	rsb	r3, r2, #32
 800027a:	4091      	lsls	r1, r2
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	fa0c fc02 	lsl.w	ip, ip, r2
 8000284:	4319      	orrs	r1, r3
 8000286:	fa00 fe02 	lsl.w	lr, r0, r2
 800028a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	fbb1 f4f7 	udiv	r4, r1, r7
 8000296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029a:	fb07 1114 	mls	r1, r7, r4, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb04 f106 	mul.w	r1, r4, r6
 80002a6:	4299      	cmp	r1, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x64>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b2:	f080 8112 	bcs.w	80004da <__udivmoddi4+0x27e>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 810f 	bls.w	80004da <__udivmoddi4+0x27e>
 80002bc:	3c02      	subs	r4, #2
 80002be:	4463      	add	r3, ip
 80002c0:	1a59      	subs	r1, r3, r1
 80002c2:	fa1f f38e 	uxth.w	r3, lr
 80002c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ca:	fb07 1110 	mls	r1, r7, r0, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb00 f606 	mul.w	r6, r0, r6
 80002d6:	429e      	cmp	r6, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x94>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e2:	f080 80fc 	bcs.w	80004de <__udivmoddi4+0x282>
 80002e6:	429e      	cmp	r6, r3
 80002e8:	f240 80f9 	bls.w	80004de <__udivmoddi4+0x282>
 80002ec:	4463      	add	r3, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	1b9b      	subs	r3, r3, r6
 80002f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa6>
 80002fa:	40d3      	lsrs	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xba>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb4>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa6>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x150>
 800031e:	42a3      	cmp	r3, r4
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xcc>
 8000322:	4290      	cmp	r0, r2
 8000324:	f0c0 80f0 	bcc.w	8000508 <__udivmoddi4+0x2ac>
 8000328:	1a86      	subs	r6, r0, r2
 800032a:	eb64 0303 	sbc.w	r3, r4, r3
 800032e:	2001      	movs	r0, #1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e6      	beq.n	8000302 <__udivmoddi4+0xa6>
 8000334:	e9c5 6300 	strd	r6, r3, [r5]
 8000338:	e7e3      	b.n	8000302 <__udivmoddi4+0xa6>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x204>
 8000340:	eba1 040c 	sub.w	r4, r1, ip
 8000344:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000348:	fa1f f78c 	uxth.w	r7, ip
 800034c:	2101      	movs	r1, #1
 800034e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	fb08 4416 	mls	r4, r8, r6, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb07 f006 	mul.w	r0, r7, r6
 8000362:	4298      	cmp	r0, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x11c>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 34ff 	add.w	r4, r6, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x11a>
 8000370:	4298      	cmp	r0, r3
 8000372:	f200 80cd 	bhi.w	8000510 <__udivmoddi4+0x2b4>
 8000376:	4626      	mov	r6, r4
 8000378:	1a1c      	subs	r4, r3, r0
 800037a:	fa1f f38e 	uxth.w	r3, lr
 800037e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000382:	fb08 4410 	mls	r4, r8, r0, r4
 8000386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038a:	fb00 f707 	mul.w	r7, r0, r7
 800038e:	429f      	cmp	r7, r3
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x148>
 8000392:	eb1c 0303 	adds.w	r3, ip, r3
 8000396:	f100 34ff 	add.w	r4, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x146>
 800039c:	429f      	cmp	r7, r3
 800039e:	f200 80b0 	bhi.w	8000502 <__udivmoddi4+0x2a6>
 80003a2:	4620      	mov	r0, r4
 80003a4:	1bdb      	subs	r3, r3, r7
 80003a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x9c>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003bc:	fa04 f301 	lsl.w	r3, r4, r1
 80003c0:	ea43 030c 	orr.w	r3, r3, ip
 80003c4:	40f4      	lsrs	r4, r6
 80003c6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ca:	0c38      	lsrs	r0, r7, #16
 80003cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d0:	fbb4 fef0 	udiv	lr, r4, r0
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	fb00 441e 	mls	r4, r0, lr, r4
 80003dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e0:	fb0e f90c 	mul.w	r9, lr, ip
 80003e4:	45a1      	cmp	r9, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x1a6>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f2:	f080 8084 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80003f6:	45a1      	cmp	r9, r4
 80003f8:	f240 8081 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80003fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000400:	443c      	add	r4, r7
 8000402:	eba4 0409 	sub.w	r4, r4, r9
 8000406:	fa1f f983 	uxth.w	r9, r3
 800040a:	fbb4 f3f0 	udiv	r3, r4, r0
 800040e:	fb00 4413 	mls	r4, r0, r3, r4
 8000412:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000416:	fb03 fc0c 	mul.w	ip, r3, ip
 800041a:	45a4      	cmp	ip, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1d2>
 800041e:	193c      	adds	r4, r7, r4
 8000420:	f103 30ff 	add.w	r0, r3, #4294967295
 8000424:	d267      	bcs.n	80004f6 <__udivmoddi4+0x29a>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d965      	bls.n	80004f6 <__udivmoddi4+0x29a>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000432:	fba0 9302 	umull	r9, r3, r0, r2
 8000436:	eba4 040c 	sub.w	r4, r4, ip
 800043a:	429c      	cmp	r4, r3
 800043c:	46ce      	mov	lr, r9
 800043e:	469c      	mov	ip, r3
 8000440:	d351      	bcc.n	80004e6 <__udivmoddi4+0x28a>
 8000442:	d04e      	beq.n	80004e2 <__udivmoddi4+0x286>
 8000444:	b155      	cbz	r5, 800045c <__udivmoddi4+0x200>
 8000446:	ebb8 030e 	subs.w	r3, r8, lr
 800044a:	eb64 040c 	sbc.w	r4, r4, ip
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431e      	orrs	r6, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	e9c5 6400 	strd	r6, r4, [r5]
 800045c:	2100      	movs	r1, #0
 800045e:	e750      	b.n	8000302 <__udivmoddi4+0xa6>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f103 	lsr.w	r1, r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa24 f303 	lsr.w	r3, r4, r3
 8000470:	4094      	lsls	r4, r2
 8000472:	430c      	orrs	r4, r1
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	fa00 fe02 	lsl.w	lr, r0, r2
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	fbb3 f0f8 	udiv	r0, r3, r8
 8000484:	fb08 3110 	mls	r1, r8, r0, r3
 8000488:	0c23      	lsrs	r3, r4, #16
 800048a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048e:	fb00 f107 	mul.w	r1, r0, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x24c>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 36ff 	add.w	r6, r0, #4294967295
 800049e:	d22c      	bcs.n	80004fa <__udivmoddi4+0x29e>
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d92a      	bls.n	80004fa <__udivmoddi4+0x29e>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b0:	fb08 3311 	mls	r3, r8, r1, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb01 f307 	mul.w	r3, r1, r7
 80004bc:	42a3      	cmp	r3, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x276>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c8:	d213      	bcs.n	80004f2 <__udivmoddi4+0x296>
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d911      	bls.n	80004f2 <__udivmoddi4+0x296>
 80004ce:	3902      	subs	r1, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	1ae4      	subs	r4, r4, r3
 80004d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d8:	e739      	b.n	800034e <__udivmoddi4+0xf2>
 80004da:	4604      	mov	r4, r0
 80004dc:	e6f0      	b.n	80002c0 <__udivmoddi4+0x64>
 80004de:	4608      	mov	r0, r1
 80004e0:	e706      	b.n	80002f0 <__udivmoddi4+0x94>
 80004e2:	45c8      	cmp	r8, r9
 80004e4:	d2ae      	bcs.n	8000444 <__udivmoddi4+0x1e8>
 80004e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7a8      	b.n	8000444 <__udivmoddi4+0x1e8>
 80004f2:	4631      	mov	r1, r6
 80004f4:	e7ed      	b.n	80004d2 <__udivmoddi4+0x276>
 80004f6:	4603      	mov	r3, r0
 80004f8:	e799      	b.n	800042e <__udivmoddi4+0x1d2>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e7d4      	b.n	80004a8 <__udivmoddi4+0x24c>
 80004fe:	46d6      	mov	lr, sl
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1a6>
 8000502:	4463      	add	r3, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e74d      	b.n	80003a4 <__udivmoddi4+0x148>
 8000508:	4606      	mov	r6, r0
 800050a:	4623      	mov	r3, r4
 800050c:	4608      	mov	r0, r1
 800050e:	e70f      	b.n	8000330 <__udivmoddi4+0xd4>
 8000510:	3e02      	subs	r6, #2
 8000512:	4463      	add	r3, ip
 8000514:	e730      	b.n	8000378 <__udivmoddi4+0x11c>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	@ 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f007 ffe5 	bl	8008504 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053a:	4b32      	ldr	r3, [pc, #200]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800053c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000542:	4b30      	ldr	r3, [pc, #192]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000544:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b2e      	ldr	r3, [pc, #184]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000556:	4b2b      	ldr	r3, [pc, #172]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055c:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000564:	2204      	movs	r2, #4
 8000566:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000576:	2201      	movs	r2, #1
 8000578:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000582:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000588:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_ADC1_Init+0xe8>)
 8000598:	2200      	movs	r2, #0
 800059a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_ADC1_Init+0xe8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <MX_ADC1_Init+0xe8>)
 80005a6:	f001 fa71 	bl	8001a8c <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005b0:	f000 fbce 	bl	8000d50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005bc:	4619      	mov	r1, r3
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <MX_ADC1_Init+0xe8>)
 80005c0:	f002 f886 	bl	80026d0 <HAL_ADCEx_MultiModeConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005ca:	f000 fbc1 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_ADC1_Init+0xec>)
 80005d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2306      	movs	r3, #6
 80005d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005da:	237f      	movs	r3, #127	@ 0x7f
 80005dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005de:	2304      	movs	r3, #4
 80005e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <MX_ADC1_Init+0xe8>)
 80005ec:	f001 fc0a 	bl	8001e04 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005f6:	f000 fbab 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	@ 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000084 	.word	0x20000084
 8000608:	21800100 	.word	0x21800100

0800060c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f007 ff73 	bl	8008504 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800061e:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000620:	4a2b      	ldr	r2, [pc, #172]	@ (80006d0 <MX_ADC2_Init+0xc4>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000638:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000646:	2204      	movs	r2, #4
 8000648:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000658:	2201      	movs	r2, #1
 800065a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_ADC2_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000686:	4811      	ldr	r0, [pc, #68]	@ (80006cc <MX_ADC2_Init+0xc0>)
 8000688:	f001 fa00 	bl	8001a8c <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000692:	f000 fb5d 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_ADC2_Init+0xc8>)
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <MX_ADC2_Init+0xc0>)
 80006b4:	f001 fba6 	bl	8001e04 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 fb47 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000f0 	.word	0x200000f0
 80006d0:	50000100 	.word	0x50000100
 80006d4:	19200040 	.word	0x19200040

080006d8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0a4      	sub	sp, #144	@ 0x90
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f4:	2254      	movs	r2, #84	@ 0x54
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f007 ff03 	bl	8008504 <memset>
  if(adcHandle->Instance==ADC1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000706:	d174      	bne.n	80007f2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000712:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fa53 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000724:	f000 fb14 	bl	8000d50 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000728:	4b63      	ldr	r3, [pc, #396]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a62      	ldr	r2, [pc, #392]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 8000730:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000732:	4b61      	ldr	r3, [pc, #388]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10b      	bne.n	8000752 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800073a:	4b60      	ldr	r3, [pc, #384]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a5f      	ldr	r2, [pc, #380]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000740:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b5d      	ldr	r3, [pc, #372]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a59      	ldr	r2, [pc, #356]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b57      	ldr	r3, [pc, #348]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b54      	ldr	r3, [pc, #336]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a53      	ldr	r2, [pc, #332]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b51      	ldr	r3, [pc, #324]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b4e      	ldr	r3, [pc, #312]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a4d      	ldr	r2, [pc, #308]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b4b      	ldr	r3, [pc, #300]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800079a:	2304      	movs	r3, #4
 800079c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079e:	2303      	movs	r3, #3
 80007a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007ae:	4619      	mov	r1, r3
 80007b0:	4843      	ldr	r0, [pc, #268]	@ (80008c0 <HAL_ADC_MspInit+0x1e8>)
 80007b2:	f002 fa35 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007b6:	2302      	movs	r3, #2
 80007b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f002 fa26 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d4:	2303      	movs	r3, #3
 80007d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d8:	2303      	movs	r3, #3
 80007da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007e8:	4619      	mov	r1, r3
 80007ea:	4836      	ldr	r0, [pc, #216]	@ (80008c4 <HAL_ADC_MspInit+0x1ec>)
 80007ec:	f002 fa18 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007f0:	e05e      	b.n	80008b0 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a34      	ldr	r2, [pc, #208]	@ (80008c8 <HAL_ADC_MspInit+0x1f0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d159      	bne.n	80008b0 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000802:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000806:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080c:	4618      	mov	r0, r3
 800080e:	f003 f9d9 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000818:	f000 fa9a 	bl	8000d50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a25      	ldr	r2, [pc, #148]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 8000824:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <HAL_ADC_MspInit+0x1e0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10b      	bne.n	8000846 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000834:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_ADC_MspInit+0x1e4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000876:	230b      	movs	r3, #11
 8000878:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087a:	2303      	movs	r3, #3
 800087c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <HAL_ADC_MspInit+0x1e8>)
 800088e:	f002 f9c7 	bl	8002c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f002 f9b8 	bl	8002c20 <HAL_GPIO_Init>
}
 80008b0:	bf00      	nop
 80008b2:	3790      	adds	r7, #144	@ 0x90
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000015c 	.word	0x2000015c
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000400 	.word	0x48000400
 80008c8:	50000100 	.word	0x50000100

080008cc <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b47      	ldr	r3, [pc, #284]	@ (8000a00 <MX_GPIO_Init+0x134>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a46      	ldr	r2, [pc, #280]	@ (8000a00 <MX_GPIO_Init+0x134>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b44      	ldr	r3, [pc, #272]	@ (8000a00 <MX_GPIO_Init+0x134>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b41      	ldr	r3, [pc, #260]	@ (8000a00 <MX_GPIO_Init+0x134>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a40      	ldr	r2, [pc, #256]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b3b      	ldr	r3, [pc, #236]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a3a      	ldr	r2, [pc, #232]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b38      	ldr	r3, [pc, #224]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <MX_GPIO_Init+0x134>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a34      	ldr	r2, [pc, #208]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a2e      	ldr	r2, [pc, #184]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_GPIO_Init+0x134>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f002 fadf 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2104      	movs	r1, #4
 800096a:	4826      	ldr	r0, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0x138>)
 800096c:	f002 fada 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4820      	ldr	r0, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0x13c>)
 8000988:	f002 f94a 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a6:	f002 f93b 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009bc:	2307      	movs	r3, #7
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4810      	ldr	r0, [pc, #64]	@ (8000a08 <MX_GPIO_Init+0x13c>)
 80009c8:	f002 f92a 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009cc:	2304      	movs	r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <MX_GPIO_Init+0x138>)
 80009e4:	f002 f91c 	bl	8002c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2028      	movs	r0, #40	@ 0x28
 80009ee:	f002 f82f 	bl	8002a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f2:	2028      	movs	r0, #40	@ 0x28
 80009f4:	f002 f846 	bl	8002a84 <HAL_NVIC_EnableIRQ>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000c00 	.word	0x48000c00
 8000a08:	48000800 	.word	0x48000800

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	@ 0x70
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	66bb      	str	r3, [r7, #104]	@ 0x68
	int32_t ch_MCC = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	667b      	str	r3, [r7, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1a:	f000 fe08 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1e:	f000 f895 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f7ff ff53 	bl	80008cc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000a26:	f7ff fdf1 	bl	800060c <MX_ADC2_Init>
  MX_ADC1_Init();
 8000a2a:	f7ff fd77 	bl	800051c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a2e:	f000 fb27 	bl	8001080 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a32:	f000 fbf1 	bl	8001218 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a36:	f000 fd25 	bl	8001484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2224      	movs	r2, #36	@ 0x24
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f007 fd5f 	bl	8008504 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	2240      	movs	r2, #64	@ 0x40
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 fd58 	bl	8008504 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 8000a54:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <main+0x118>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000a5a:	2240      	movs	r2, #64	@ 0x40
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4832      	ldr	r0, [pc, #200]	@ (8000b28 <main+0x11c>)
 8000a60:	f007 fd50 	bl	8008504 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a64:	2201      	movs	r2, #1
 8000a66:	492f      	ldr	r1, [pc, #188]	@ (8000b24 <main+0x118>)
 8000a68:	4830      	ldr	r0, [pc, #192]	@ (8000b2c <main+0x120>)
 8000a6a:	f005 fae3 	bl	8006034 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f000 fe14 	bl	800169c <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	225f      	movs	r2, #95	@ 0x5f
 8000a7a:	492d      	ldr	r1, [pc, #180]	@ (8000b30 <main+0x124>)
 8000a7c:	482b      	ldr	r0, [pc, #172]	@ (8000b2c <main+0x120>)
 8000a7e:	f005 fa4b 	bl	8005f18 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	2218      	movs	r2, #24
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <main+0x128>)
 8000a8a:	4828      	ldr	r0, [pc, #160]	@ (8000b2c <main+0x120>)
 8000a8c:	f005 fa44 	bl	8005f18 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uartRxReceived == 1)
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <main+0x12c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d1fb      	bne.n	8000a90 <main+0x84>
	  {
		  printf("OK \r\n");
 8000a98:	4828      	ldr	r0, [pc, #160]	@ (8000b3c <main+0x130>)
 8000a9a:	f007 fc53 	bl	8008344 <puts>
		  // Si caractère reçu est ENTER
		  if (uartRxBuffer[0] == ASCII_ENTER)
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <main+0x118>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b0d      	cmp	r3, #13
 8000aa4:	d128      	bne.n	8000af8 <main+0xec>
		  {
			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4924      	ldr	r1, [pc, #144]	@ (8000b40 <main+0x134>)
 8000aae:	481f      	ldr	r0, [pc, #124]	@ (8000b2c <main+0x120>)
 8000ab0:	f005 fa32 	bl	8005f18 <HAL_UART_Transmit>
			  cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8000ab4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aba:	4413      	add	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]

			  // Process the command
			  processCommand(cmdBuffer);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f88b 	bl	8000be0 <processCommand>

			  if(strcmp(Etat, "Start") == 0){
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <main+0x138>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	491e      	ldr	r1, [pc, #120]	@ (8000b48 <main+0x13c>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fba1 	bl	8000218 <strcmp>

			  }


			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2218      	movs	r2, #24
 8000adc:	4915      	ldr	r1, [pc, #84]	@ (8000b34 <main+0x128>)
 8000ade:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <main+0x120>)
 8000ae0:	f005 fa1a 	bl	8005f18 <HAL_UART_Transmit>
			  idx_cmd = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
			  memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	2240      	movs	r2, #64	@ 0x40
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fd07 	bl	8008504 <memset>
 8000af6:	e00b      	b.n	8000b10 <main+0x104>
		  }
		  else
		  {
			  // Si ce n'est pas ENTER, stocker le caractère dans le buffer
			  if (idx_cmd < CMD_BUFFER_SIZE - 1)
 8000af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8000afc:	dc08      	bgt.n	8000b10 <main+0x104>
			  {
				  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000b04:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <main+0x118>)
 8000b06:	7812      	ldrb	r2, [r2, #0]
 8000b08:	3370      	adds	r3, #112	@ 0x70
 8000b0a:	443b      	add	r3, r7
 8000b0c:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b10:	2201      	movs	r2, #1
 8000b12:	4904      	ldr	r1, [pc, #16]	@ (8000b24 <main+0x118>)
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <main+0x120>)
 8000b16:	f005 fa8d 	bl	8006034 <HAL_UART_Receive_IT>

		  uartRxReceived = 0;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <main+0x12c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
	  if (uartRxReceived == 1)
 8000b20:	e7b6      	b.n	8000a90 <main+0x84>
 8000b22:	bf00      	nop
 8000b24:	20000164 	.word	0x20000164
 8000b28:	20000168 	.word	0x20000168
 8000b2c:	20000294 	.word	0x20000294
 8000b30:	08008ad4 	.word	0x08008ad4
 8000b34:	08008abc 	.word	0x08008abc
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	08008a84 	.word	0x08008a84
 8000b40:	08008b34 	.word	0x08008b34
 8000b44:	200001a8 	.word	0x200001a8
 8000b48:	08008a8c 	.word	0x08008a8c

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	@ 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2238      	movs	r2, #56	@ 0x38
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 fcd2 	bl	8008504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f002 fa14 	bl	8002f9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	2303      	movs	r3, #3
 8000b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b86:	2306      	movs	r3, #6
 8000b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b8a:	2355      	movs	r3, #85	@ 0x55
 8000b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fab0 	bl	8003104 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000baa:	f000 f8d1 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fdae 	bl	8003728 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bd2:	f000 f8bd 	bl	8000d50 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3750      	adds	r7, #80	@ 0x50
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <processCommand>:

/* USER CODE BEGIN 4 */
void processCommand(char *cmd)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if (strcmp(cmd, "help") == 0) {
 8000be8:	4937      	ldr	r1, [pc, #220]	@ (8000cc8 <processCommand+0xe8>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fb14 	bl	8000218 <strcmp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d107      	bne.n	8000c06 <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	222f      	movs	r2, #47	@ 0x2f
 8000bfc:	4933      	ldr	r1, [pc, #204]	@ (8000ccc <processCommand+0xec>)
 8000bfe:	4834      	ldr	r0, [pc, #208]	@ (8000cd0 <processCommand+0xf0>)
 8000c00:	f005 f98a 	bl	8005f18 <HAL_UART_Transmit>
		Etat = "Stop";
	}
	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 8000c04:	e05b      	b.n	8000cbe <processCommand+0xde>
	else if (strcmp(cmd, "pinout") == 0) {
 8000c06:	4933      	ldr	r1, [pc, #204]	@ (8000cd4 <processCommand+0xf4>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fb05 	bl	8000218 <strcmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	221a      	movs	r2, #26
 8000c1a:	492f      	ldr	r1, [pc, #188]	@ (8000cd8 <processCommand+0xf8>)
 8000c1c:	482c      	ldr	r0, [pc, #176]	@ (8000cd0 <processCommand+0xf0>)
 8000c1e:	f005 f97b 	bl	8005f18 <HAL_UART_Transmit>
}
 8000c22:	e04c      	b.n	8000cbe <processCommand+0xde>
	else if (strcmp(cmd, "start") == 0) {
 8000c24:	492d      	ldr	r1, [pc, #180]	@ (8000cdc <processCommand+0xfc>)
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff faf6 	bl	8000218 <strcmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d11b      	bne.n	8000c6a <processCommand+0x8a>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	220a      	movs	r2, #10
 8000c38:	4929      	ldr	r1, [pc, #164]	@ (8000ce0 <processCommand+0x100>)
 8000c3a:	4825      	ldr	r0, [pc, #148]	@ (8000cd0 <processCommand+0xf0>)
 8000c3c:	f005 f96c 	bl	8005f18 <HAL_UART_Transmit>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <processCommand+0x104>)
 8000c44:	f003 fb3e 	bl	80042c4 <HAL_TIM_PWM_Start>
		  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <processCommand+0x104>)
 8000c4c:	f004 fe4c 	bl	80058e8 <HAL_TIMEx_PWMN_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c50:	2104      	movs	r1, #4
 8000c52:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <processCommand+0x104>)
 8000c54:	f003 fb36 	bl	80042c4 <HAL_TIM_PWM_Start>
		  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <processCommand+0x104>)
 8000c5c:	f004 fe44 	bl	80058e8 <HAL_TIMEx_PWMN_Start>
		Etat = "Start";
 8000c60:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <processCommand+0x108>)
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <processCommand+0x10c>)
 8000c66:	701a      	strb	r2, [r3, #0]
}
 8000c68:	e029      	b.n	8000cbe <processCommand+0xde>
	else if (strcmp(cmd, "stop") == 0) {
 8000c6a:	4921      	ldr	r1, [pc, #132]	@ (8000cf0 <processCommand+0x110>)
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fad3 	bl	8000218 <strcmp>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d11b      	bne.n	8000cb0 <processCommand+0xd0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	220b      	movs	r2, #11
 8000c7e:	491d      	ldr	r1, [pc, #116]	@ (8000cf4 <processCommand+0x114>)
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <processCommand+0xf0>)
 8000c82:	f005 f949 	bl	8005f18 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c86:	2100      	movs	r1, #0
 8000c88:	4816      	ldr	r0, [pc, #88]	@ (8000ce4 <processCommand+0x104>)
 8000c8a:	f003 fc2d 	bl	80044e8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4814      	ldr	r0, [pc, #80]	@ (8000ce4 <processCommand+0x104>)
 8000c92:	f004 feeb 	bl	8005a6c <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000c96:	2104      	movs	r1, #4
 8000c98:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <processCommand+0x104>)
 8000c9a:	f003 fc25 	bl	80044e8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	4810      	ldr	r0, [pc, #64]	@ (8000ce4 <processCommand+0x104>)
 8000ca2:	f004 fee3 	bl	8005a6c <HAL_TIMEx_PWMN_Stop>
		Etat = "Stop";
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <processCommand+0x118>)
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <processCommand+0x10c>)
 8000cac:	701a      	strb	r2, [r3, #0]
}
 8000cae:	e006      	b.n	8000cbe <processCommand+0xde>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2213      	movs	r2, #19
 8000cb6:	4911      	ldr	r1, [pc, #68]	@ (8000cfc <processCommand+0x11c>)
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <processCommand+0xf0>)
 8000cba:	f005 f92d 	bl	8005f18 <HAL_UART_Transmit>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08008a94 	.word	0x08008a94
 8000ccc:	08008b4c 	.word	0x08008b4c
 8000cd0:	20000294 	.word	0x20000294
 8000cd4:	08008a9c 	.word	0x08008a9c
 8000cd8:	08008b7c 	.word	0x08008b7c
 8000cdc:	08008aa4 	.word	0x08008aa4
 8000ce0:	08008b98 	.word	0x08008b98
 8000ce4:	200001fc 	.word	0x200001fc
 8000ce8:	08008a8c 	.word	0x08008a8c
 8000cec:	200001a8 	.word	0x200001a8
 8000cf0:	08008aac 	.word	0x08008aac
 8000cf4:	08008ba4 	.word	0x08008ba4
 8000cf8:	08008ab4 	.word	0x08008ab4
 8000cfc:	08008b38 	.word	0x08008b38

08000d00 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_UART_RxCpltCallback+0x20>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4904      	ldr	r1, [pc, #16]	@ (8000d24 <HAL_UART_RxCpltCallback+0x24>)
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_RxCpltCallback+0x28>)
 8000d14:	f005 f98e 	bl	8006034 <HAL_UART_Receive_IT>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000160 	.word	0x20000160
 8000d24:	20000164 	.word	0x20000164
 8000d28:	20000294 	.word	0x20000294

08000d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3e:	f000 fc8f 	bl	8001660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	4a0e      	ldr	r2, [pc, #56]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d92:	f002 f9a7 	bl	80030e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <HAL_InitTick+0xc4>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <HAL_InitTick+0xc4>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc0:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <HAL_InitTick+0xc4>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fe7c 	bl	8003ad4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ddc:	f002 fe4e 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8000de0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de4:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <HAL_InitTick+0xc8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3b01      	subs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000df2:	4a20      	ldr	r2, [pc, #128]	@ (8000e74 <HAL_InitTick+0xd0>)
 8000df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000df8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e10:	4817      	ldr	r0, [pc, #92]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000e12:	f003 f925 	bl	8004060 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11b      	bne.n	8000e5c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e24:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <HAL_InitTick+0xcc>)
 8000e26:	f003 f973 	bl	8004110 <HAL_TIM_Base_Start_IT>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d111      	bne.n	8000e5c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e38:	2036      	movs	r0, #54	@ 0x36
 8000e3a:	f001 fe23 	bl	8002a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d808      	bhi.n	8000e56 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2036      	movs	r0, #54	@ 0x36
 8000e4a:	f001 fe01 	bl	8002a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_InitTick+0xd4>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e002      	b.n	8000e5c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3730      	adds	r7, #48	@ 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	200001ac 	.word	0x200001ac
 8000e74:	40001000 	.word	0x40001000
 8000e78:	20000004 	.word	0x20000004

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <USART2_IRQHandler+0x10>)
 8000ee2:	f005 f8f3 	bl	80060cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000294 	.word	0x20000294

08000ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000ef4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ef8:	f002 f82c 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM6_DAC_IRQHandler+0x10>)
 8000f06:	f003 fb8b 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001ac 	.word	0x200001ac

08000f14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e009      	b.n	8000f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf1      	blt.n	8000f60 <_write+0x12>
  }
  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f007 fabe 	bl	80085a0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	200001f8 	.word	0x200001f8
 8001058:	20000478 	.word	0x20000478

0800105c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09c      	sub	sp, #112	@ 0x70
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2234      	movs	r2, #52	@ 0x34
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fa22 	bl	8008504 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010c0:	4b53      	ldr	r3, [pc, #332]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010c2:	4a54      	ldr	r2, [pc, #336]	@ (8001214 <MX_TIM1_Init+0x194>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80010c6:	4b52      	ldr	r3, [pc, #328]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010c8:	22a9      	movs	r2, #169	@ 0xa9
 80010ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b50      	ldr	r3, [pc, #320]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80010d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010d4:	2232      	movs	r2, #50	@ 0x32
 80010d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010de:	4b4c      	ldr	r3, [pc, #304]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ea:	4849      	ldr	r0, [pc, #292]	@ (8001210 <MX_TIM1_Init+0x190>)
 80010ec:	f002 ffb8 	bl	8004060 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010f6:	f7ff fe2b 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001104:	4619      	mov	r1, r3
 8001106:	4842      	ldr	r0, [pc, #264]	@ (8001210 <MX_TIM1_Init+0x190>)
 8001108:	f003 fcee 	bl	8004ae8 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001112:	f7ff fe1d 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001116:	483e      	ldr	r0, [pc, #248]	@ (8001210 <MX_TIM1_Init+0x190>)
 8001118:	f003 f872 	bl	8004200 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001122:	f7ff fe15 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001132:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001136:	4619      	mov	r1, r3
 8001138:	4835      	ldr	r0, [pc, #212]	@ (8001210 <MX_TIM1_Init+0x190>)
 800113a:	f004 fcf5 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001144:	f7ff fe04 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001148:	2360      	movs	r3, #96	@ 0x60
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 30;
 800114c:	231e      	movs	r3, #30
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001154:	2300      	movs	r3, #0
 8001156:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001164:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	4828      	ldr	r0, [pc, #160]	@ (8001210 <MX_TIM1_Init+0x190>)
 800116e:	f003 fba7 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001178:	f7ff fdea 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800117c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001180:	2204      	movs	r2, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4822      	ldr	r0, [pc, #136]	@ (8001210 <MX_TIM1_Init+0x190>)
 8001186:	f003 fb9b 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001190:	f7ff fdde 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001198:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119c:	2208      	movs	r2, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	481b      	ldr	r0, [pc, #108]	@ (8001210 <MX_TIM1_Init+0x190>)
 80011a2:	f003 fb8d 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80011ac:	f7ff fdd0 	bl	8000d50 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80011b0:	4817      	ldr	r0, [pc, #92]	@ (8001210 <MX_TIM1_Init+0x190>)
 80011b2:	f004 fde3 	bl	8005d7c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 80011c2:	2323      	movs	r3, #35	@ 0x23
 80011c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	@ (8001210 <MX_TIM1_Init+0x190>)
 80011f4:	f004 fd2e 	bl	8005c54 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x182>
  {
    Error_Handler();
 80011fe:	f7ff fda7 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <MX_TIM1_Init+0x190>)
 8001204:	f000 f8d6 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8001208:	bf00      	nop
 800120a:	3770      	adds	r7, #112	@ 0x70
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200001fc 	.word	0x200001fc
 8001214:	40012c00 	.word	0x40012c00

08001218 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <MX_TIM3_Init+0x94>)
 800123a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM3_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_TIM3_Init+0x90>)
 800124a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001274:	f004 fa89 	bl	800578a <HAL_TIMEx_HallSensor_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800127e:	f7ff fd67 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001282:	2350      	movs	r3, #80	@ 0x50
 8001284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_TIM3_Init+0x90>)
 8001290:	f004 fc4a 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800129a:	f7ff fd59 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000248 	.word	0x20000248
 80012ac:	40000400 	.word	0x40000400

080012b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <HAL_TIM_Base_MspInit+0x38>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10b      	bne.n	80012da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_TIM_Base_MspInit+0x3c>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <HAL_TIM_Base_MspInit+0x3c>)
 80012c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <HAL_TIM_Base_MspInit+0x3c>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d145      	bne.n	800139e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a25      	ldr	r2, [pc, #148]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a19      	ldr	r2, [pc, #100]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800135a:	2350      	movs	r3, #80	@ 0x50
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800136a:	2302      	movs	r3, #2
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f001 fc52 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800137c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800138e:	2302      	movs	r3, #2
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800139a:	f001 fc41 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40000400 	.word	0x40000400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000800 	.word	0x48000800

080013b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a29      	ldr	r2, [pc, #164]	@ (8001478 <HAL_TIM_MspPostInit+0xc4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d14b      	bne.n	800146e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b29      	ldr	r3, [pc, #164]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a28      	ldr	r2, [pc, #160]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_TIM_MspPostInit+0xc8>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001406:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001418:	2306      	movs	r3, #6
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4817      	ldr	r0, [pc, #92]	@ (8001480 <HAL_TIM_MspPostInit+0xcc>)
 8001424:	f001 fbfc 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800143a:	2304      	movs	r3, #4
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	480e      	ldr	r0, [pc, #56]	@ (8001480 <HAL_TIM_MspPostInit+0xcc>)
 8001446:	f001 fbeb 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800144a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800145c:	2306      	movs	r3, #6
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146a:	f001 fbd9 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000
 8001480:	48000400 	.word	0x48000400

08001484 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 800148a:	4a23      	ldr	r2, [pc, #140]	@ (8001518 <MX_USART2_UART_Init+0x94>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014cc:	4811      	ldr	r0, [pc, #68]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014ce:	f004 fcd3 	bl	8005e78 <HAL_UART_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014d8:	f7ff fc3a 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014e0:	f006 fd4d 	bl	8007f7e <HAL_UARTEx_SetTxFifoThreshold>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014ea:	f7ff fc31 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ee:	2100      	movs	r1, #0
 80014f0:	4808      	ldr	r0, [pc, #32]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 80014f2:	f006 fd82 	bl	8007ffa <HAL_UARTEx_SetRxFifoThreshold>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014fc:	f7ff fc28 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_USART2_UART_Init+0x90>)
 8001502:	f006 fd03 	bl	8007f0c <HAL_UARTEx_DisableFifoMode>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800150c:	f7ff fc20 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000294 	.word	0x20000294
 8001518:	40004400 	.word	0x40004400

0800151c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b09e      	sub	sp, #120	@ 0x78
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2254      	movs	r2, #84	@ 0x54
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f006 ffe1 	bl	8008504 <memset>
  if(uartHandle->Instance==USART2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <HAL_UART_MspInit+0xb8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d13e      	bne.n	80015ca <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800154c:	2302      	movs	r3, #2
 800154e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fb33 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001564:	f7ff fbf4 	bl	8000d50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 800156e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001572:	6593      	str	r3, [r2, #88]	@ 0x58
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_UART_MspInit+0xbc>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001598:	230c      	movs	r3, #12
 800159a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a8:	2307      	movs	r3, #7
 80015aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f001 fb33 	bl	8002c20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2026      	movs	r0, #38	@ 0x26
 80015c0:	f001 fa46 	bl	8002a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c4:	2026      	movs	r0, #38	@ 0x26
 80015c6:	f001 fa5d 	bl	8002a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015ca:	bf00      	nop
 80015cc:	3778      	adds	r7, #120	@ 0x78
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004400 	.word	0x40004400
 80015d8:	40021000 	.word	0x40021000

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fd3c 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f006 ffcf 	bl	80085ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7ff f9fd 	bl	8000a0c <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   r0, =_estack
 8001614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001620:	08008c00 	.word	0x08008c00
  ldr r2, =_sbss
 8001624:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001628:	20000478 	.word	0x20000478

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>

0800162e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f001 f9fe 	bl	8002a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff fbb0 	bl	8000da4 <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e001      	b.n	8001654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001650:	f7ff fb84 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001654:	79fb      	ldrb	r3, [r7, #7]

}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x1c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x20>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4413      	add	r3, r2
 800166e:	4a03      	ldr	r2, [pc, #12]	@ (800167c <HAL_IncTick+0x1c>)
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000328 	.word	0x20000328
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000328 	.word	0x20000328

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d004      	beq.n	80016c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_Delay+0x40>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c0:	bf00      	nop
 80016c2:	f7ff ffdf 	bl	8001684 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d8f7      	bhi.n	80016c2 <HAL_Delay+0x26>
  {
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000008 	.word	0x20000008

080016e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3360      	adds	r3, #96	@ 0x60
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <LL_ADC_SetOffset+0x44>)
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	4313      	orrs	r3, r2
 8001778:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	03fff000 	.word	0x03fff000

08001790 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3360      	adds	r3, #96	@ 0x60
 800179e:	461a      	mov	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3360      	adds	r3, #96	@ 0x60
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	@ 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3360      	adds	r3, #96	@ 0x60
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	615a      	str	r2, [r3, #20]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	461a      	mov	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	4413      	add	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	211f      	movs	r1, #31
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 011f 	and.w	r1, r3, #31
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3314      	adds	r3, #20
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0e5b      	lsrs	r3, r3, #25
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	0d1b      	lsrs	r3, r3, #20
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2107      	movs	r1, #7
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	0d1b      	lsrs	r3, r3, #20
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194c:	43db      	mvns	r3, r3
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0318 	and.w	r3, r3, #24
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001958:	40d9      	lsrs	r1, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	400b      	ands	r3, r1
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	431a      	orrs	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	0007ffff 	.word	0x0007ffff

0800197c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6093      	str	r3, [r2, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019b4:	d101      	bne.n	80019ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_IsEnabled+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_IsEnabled+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d101      	bne.n	8001a7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1a9      	b.n	8001dfa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fe0f 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff67 	bl	80019a0 <LL_ADC_IsDeepPowerDownEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff4d 	bl	800197c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff82 	bl	80019f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff66 	bl	80019c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001afc:	4b9c      	ldr	r3, [pc, #624]	@ (8001d70 <HAL_ADC_Init+0x2e4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	4a9c      	ldr	r2, [pc, #624]	@ (8001d74 <HAL_ADC_Init+0x2e8>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b10:	e002      	b.n	8001b18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff64 	bl	80019f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff75 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001b54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8142 	bne.w	8001de8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 813e 	bne.w	8001de8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b74:	f043 0202 	orr.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff49 	bl	8001a18 <LL_ADC_IsEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d141      	bne.n	8001c10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_Init+0x114>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a77      	ldr	r2, [pc, #476]	@ (8001d78 <HAL_ADC_Init+0x2ec>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_ADC_Init+0x134>
 8001ba0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ba4:	f7ff ff38 	bl	8001a18 <LL_ADC_IsEnabled>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	4873      	ldr	r0, [pc, #460]	@ (8001d78 <HAL_ADC_Init+0x2ec>)
 8001bac:	f7ff ff34 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4323      	orrs	r3, r4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e012      	b.n	8001be6 <HAL_ADC_Init+0x15a>
 8001bc0:	486e      	ldr	r0, [pc, #440]	@ (8001d7c <HAL_ADC_Init+0x2f0>)
 8001bc2:	f7ff ff29 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	486d      	ldr	r0, [pc, #436]	@ (8001d80 <HAL_ADC_Init+0x2f4>)
 8001bca:	f7ff ff25 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	431c      	orrs	r4, r3
 8001bd2:	486c      	ldr	r0, [pc, #432]	@ (8001d84 <HAL_ADC_Init+0x2f8>)
 8001bd4:	f7ff ff20 	bl	8001a18 <LL_ADC_IsEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bf2:	d004      	beq.n	8001bfe <HAL_ADC_Init+0x172>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d78 <HAL_ADC_Init+0x2ec>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x176>
 8001bfe:	4a62      	ldr	r2, [pc, #392]	@ (8001d88 <HAL_ADC_Init+0x2fc>)
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_Init+0x178>
 8001c02:	4a62      	ldr	r2, [pc, #392]	@ (8001d8c <HAL_ADC_Init+0x300>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff fd68 	bl	80016e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7f5b      	ldrb	r3, [r3, #29]
 8001c14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	045b      	lsls	r3, r3, #17
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	4b48      	ldr	r3, [pc, #288]	@ (8001d90 <HAL_ADC_Init+0x304>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fee4 	bl	8001a64 <LL_ADC_INJ_IsConversionOngoing>
 8001c9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d17f      	bne.n	8001da4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d17c      	bne.n	8001da4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cb6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cc6:	f023 0302 	bic.w	r3, r3, #2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d017      	beq.n	8001d0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001cea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cf4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6911      	ldr	r1, [r2, #16]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001d0a:	e013      	b.n	8001d34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001d1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12a      	bne.n	8001d94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d60:	430a      	orrs	r2, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	e019      	b.n	8001da4 <HAL_ADC_Init+0x318>
 8001d70:	20000000 	.word	0x20000000
 8001d74:	053e2d63 	.word	0x053e2d63
 8001d78:	50000100 	.word	0x50000100
 8001d7c:	50000400 	.word	0x50000400
 8001d80:	50000500 	.word	0x50000500
 8001d84:	50000600 	.word	0x50000600
 8001d88:	50000300 	.word	0x50000300
 8001d8c:	50000700 	.word	0x50000700
 8001d90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10c      	bne.n	8001dc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f023 010f 	bic.w	r1, r3, #15
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	1e5a      	subs	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc4:	e007      	b.n	8001dd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 020f 	bic.w	r2, r2, #15
 8001dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	f023 0303 	bic.w	r3, r3, #3
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001de6:	e007      	b.n	8001df8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop

08001e04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0b6      	sub	sp, #216	@ 0xd8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x24>
 8001e22:	2302      	movs	r3, #2
 8001e24:	f000 bc13 	b.w	800264e <HAL_ADC_ConfigChannel+0x84a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fe02 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 83f3 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fd18 	bl	8001884 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fdf0 	bl	8001a3e <LL_ADC_REG_IsConversionOngoing>
 8001e5e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fdfc 	bl	8001a64 <LL_ADC_INJ_IsConversionOngoing>
 8001e6c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f040 81d9 	bne.w	800222c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 81d4 	bne.w	800222c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e8c:	d10f      	bne.n	8001eae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7ff fd1f 	bl	80018dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fcd9 	bl	800185e <LL_ADC_SetSamplingTimeCommonConfig>
 8001eac:	e00e      	b.n	8001ecc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f7ff fd0e 	bl	80018dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fcc9 	bl	800185e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d022      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001efe:	f7ff fc23 	bl	8001748 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6919      	ldr	r1, [r3, #16]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff fc6f 	bl	80017f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d102      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x126>
 8001f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f28:	e000      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x128>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f7ff fc7b 	bl	8001828 <LL_ADC_SetOffsetSaturation>
 8001f32:	e17b      	b.n	800222c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc28 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x15c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc1d 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x19a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fc12 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x1b2>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e018      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1e4>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fbe1 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fbc5 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x222>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fbba 	bl	8001790 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	e01e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x260>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fbaf 	bl	8001790 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800204c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x278>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	e018      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2aa>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002090:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e004      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80020a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fb7e 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fb62 	bl	8001790 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x2e8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fb57 	bl	8001790 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	e01e      	b.n	800212a <HAL_ADC_ConfigChannel+0x326>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fb4c 	bl	8001790 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800210a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800210e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002112:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800211e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x33e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	e016      	b.n	8002170 <HAL_ADC_ConfigChannel+0x36c>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800215a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e004      	b.n	8002170 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002166:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002170:	429a      	cmp	r2, r3
 8002172:	d106      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb1d 	bl	80017bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2103      	movs	r1, #3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fb01 	bl	8001790 <LL_ADC_GetOffsetChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x3aa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2103      	movs	r1, #3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff faf6 	bl	8001790 <LL_ADC_GetOffsetChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	e017      	b.n	80021de <HAL_ADC_ConfigChannel+0x3da>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2103      	movs	r1, #3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff faeb 	bl	8001790 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x3f2>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	e011      	b.n	800221a <HAL_ADC_ConfigChannel+0x416>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002206:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800221a:	429a      	cmp	r2, r3
 800221c:	d106      	bne.n	800222c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fac8 	bl	80017bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fbf1 	bl	8001a18 <LL_ADC_IsEnabled>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 813d 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	461a      	mov	r2, r3
 800224c:	f7ff fb72 	bl	8001934 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4aa2      	ldr	r2, [pc, #648]	@ (80024e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f040 812e 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x480>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b09      	cmp	r3, #9
 800227a:	bf94      	ite	ls
 800227c:	2301      	movls	r3, #1
 800227e:	2300      	movhi	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e019      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x4b4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002294:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e003      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80022a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	bf94      	ite	ls
 80022b2:	2301      	movls	r3, #1
 80022b4:	2300      	movhi	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d079      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x4d4>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	3301      	adds	r3, #1
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d6:	e015      	b.n	8002304 <HAL_ADC_ConfigChannel+0x500>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80022ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80022f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x520>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x550>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002334:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x576>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	051b      	lsls	r3, r3, #20
 8002378:	e018      	b.n	80023ac <HAL_ADC_ConfigChannel+0x5a8>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800238c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e003      	b.n	800239e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	430b      	orrs	r3, r1
 80023ae:	e07e      	b.n	80024ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x5c8>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	3301      	adds	r3, #1
 80023c4:	069b      	lsls	r3, r3, #26
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ca:	e015      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5f4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x614>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	e017      	b.n	8002448 <HAL_ADC_ConfigChannel+0x644>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	61fb      	str	r3, [r7, #28]
  return result;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x670>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002472:	e01b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x6a8>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	613b      	str	r3, [r7, #16]
  return result;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	e003      	b.n	8002498 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fa12 	bl	80018dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80be 	beq.w	8002642 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ce:	d004      	beq.n	80024da <HAL_ADC_ConfigChannel+0x6d6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x6ec>
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <HAL_ADC_ConfigChannel+0x6e8>)
 80024dc:	e009      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x6ee>
 80024de:	bf00      	nop
 80024e0:	407f0000 	.word	0x407f0000
 80024e4:	80080000 	.word	0x80080000
 80024e8:	50000100 	.word	0x50000100
 80024ec:	50000300 	.word	0x50000300
 80024f0:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_ADC_ConfigChannel+0x854>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f91a 	bl	800172c <LL_ADC_GetCommonPathInternalCh>
 80024f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a56      	ldr	r2, [pc, #344]	@ (800265c <HAL_ADC_ConfigChannel+0x858>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x70c>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a55      	ldr	r2, [pc, #340]	@ (8002660 <HAL_ADC_ConfigChannel+0x85c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d13a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d134      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002524:	d005      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x72e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4e      	ldr	r2, [pc, #312]	@ (8002664 <HAL_ADC_ConfigChannel+0x860>)
 800252c:	4293      	cmp	r3, r2
 800252e:	f040 8085 	bne.w	800263c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253a:	d004      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x742>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a49      	ldr	r2, [pc, #292]	@ (8002668 <HAL_ADC_ConfigChannel+0x864>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x746>
 8002546:	4a49      	ldr	r2, [pc, #292]	@ (800266c <HAL_ADC_ConfigChannel+0x868>)
 8002548:	e000      	b.n	800254c <HAL_ADC_ConfigChannel+0x748>
 800254a:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_ADC_ConfigChannel+0x854>)
 800254c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002550:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f7ff f8d5 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255c:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <HAL_ADC_ConfigChannel+0x86c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	4a44      	ldr	r2, [pc, #272]	@ (8002674 <HAL_ADC_ConfigChannel+0x870>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002576:	e002      	b.n	800257e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002584:	e05a      	b.n	800263c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3b      	ldr	r2, [pc, #236]	@ (8002678 <HAL_ADC_ConfigChannel+0x874>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d125      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11f      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_ADC_ConfigChannel+0x864>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d104      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7ac>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a34      	ldr	r2, [pc, #208]	@ (800267c <HAL_ADC_ConfigChannel+0x878>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d047      	beq.n	8002640 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b8:	d004      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x7c0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2a      	ldr	r2, [pc, #168]	@ (8002668 <HAL_ADC_ConfigChannel+0x864>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x7c4>
 80025c4:	4a29      	ldr	r2, [pc, #164]	@ (800266c <HAL_ADC_ConfigChannel+0x868>)
 80025c6:	e000      	b.n	80025ca <HAL_ADC_ConfigChannel+0x7c6>
 80025c8:	4a23      	ldr	r2, [pc, #140]	@ (8002658 <HAL_ADC_ConfigChannel+0x854>)
 80025ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f7ff f896 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025da:	e031      	b.n	8002640 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_ADC_ConfigChannel+0x87c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d12d      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d127      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <HAL_ADC_ConfigChannel+0x864>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002604:	d004      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x80c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <HAL_ADC_ConfigChannel+0x864>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x810>
 8002610:	4a16      	ldr	r2, [pc, #88]	@ (800266c <HAL_ADC_ConfigChannel+0x868>)
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x812>
 8002614:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <HAL_ADC_ConfigChannel+0x854>)
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff f870 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
 8002626:	e00c      	b.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800263a:	e002      	b.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002640:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800264a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800264e:	4618      	mov	r0, r3
 8002650:	37d8      	adds	r7, #216	@ 0xd8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	50000700 	.word	0x50000700
 800265c:	c3210000 	.word	0xc3210000
 8002660:	90c00010 	.word	0x90c00010
 8002664:	50000600 	.word	0x50000600
 8002668:	50000100 	.word	0x50000100
 800266c:	50000300 	.word	0x50000300
 8002670:	20000000 	.word	0x20000000
 8002674:	053e2d63 	.word	0x053e2d63
 8002678:	c7520000 	.word	0xc7520000
 800267c:	50000500 	.word	0x50000500
 8002680:	cb840000 	.word	0xcb840000

08002684 <LL_ADC_IsEnabled>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <LL_ADC_IsEnabled+0x18>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <LL_ADC_IsEnabled+0x1a>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_REG_IsConversionOngoing>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d101      	bne.n	80026c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b0a1      	sub	sp, #132	@ 0x84
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0e7      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026f6:	2300      	movs	r3, #0
 80026f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026fa:	2300      	movs	r3, #0
 80026fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002706:	d102      	bne.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002708:	4b6f      	ldr	r3, [pc, #444]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e009      	b.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002718:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	e001      	b.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0be      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffb1 	bl	80026aa <LL_ADC_REG_IsConversionOngoing>
 8002748:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ffab 	bl	80026aa <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 80a0 	bne.w	800289c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800275c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 809c 	bne.w	800289c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800276c:	d004      	beq.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a55      	ldr	r2, [pc, #340]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002778:	4b56      	ldr	r3, [pc, #344]	@ (80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800277a:	e000      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800277c:	4b56      	ldr	r3, [pc, #344]	@ (80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800277e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d04b      	beq.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800279a:	035b      	lsls	r3, r3, #13
 800279c:	430b      	orrs	r3, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ac:	d004      	beq.n	80027b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a45      	ldr	r2, [pc, #276]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10f      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80027b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027bc:	f7ff ff62 	bl	8002684 <LL_ADC_IsEnabled>
 80027c0:	4604      	mov	r4, r0
 80027c2:	4841      	ldr	r0, [pc, #260]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027c4:	f7ff ff5e 	bl	8002684 <LL_ADC_IsEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4323      	orrs	r3, r4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e012      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80027d8:	483c      	ldr	r0, [pc, #240]	@ (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027da:	f7ff ff53 	bl	8002684 <LL_ADC_IsEnabled>
 80027de:	4604      	mov	r4, r0
 80027e0:	483b      	ldr	r0, [pc, #236]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027e2:	f7ff ff4f 	bl	8002684 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	431c      	orrs	r4, r3
 80027ea:	483c      	ldr	r0, [pc, #240]	@ (80028dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80027ec:	f7ff ff4a 	bl	8002684 <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4323      	orrs	r3, r4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d056      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	6811      	ldr	r1, [r2, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
 8002816:	430a      	orrs	r2, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800281c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800281e:	e047      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002834:	d004      	beq.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10f      	bne.n	8002860 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002840:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002844:	f7ff ff1e 	bl	8002684 <LL_ADC_IsEnabled>
 8002848:	4604      	mov	r4, r0
 800284a:	481f      	ldr	r0, [pc, #124]	@ (80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800284c:	f7ff ff1a 	bl	8002684 <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	4323      	orrs	r3, r4
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e012      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002860:	481a      	ldr	r0, [pc, #104]	@ (80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002862:	f7ff ff0f 	bl	8002684 <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4819      	ldr	r0, [pc, #100]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800286a:	f7ff ff0b 	bl	8002684 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	431c      	orrs	r4, r3
 8002872:	481a      	ldr	r0, [pc, #104]	@ (80028dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002874:	f7ff ff06 	bl	8002684 <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800288a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002892:	f023 030f 	bic.w	r3, r3, #15
 8002896:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002898:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800289a:	e009      	b.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028ae:	e000      	b.n	80028b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3784      	adds	r7, #132	@ 0x84
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	50000100 	.word	0x50000100
 80028cc:	50000400 	.word	0x50000400
 80028d0:	50000500 	.word	0x50000500
 80028d4:	50000300 	.word	0x50000300
 80028d8:	50000700 	.word	0x50000700
 80028dc:	50000600 	.word	0x50000600

080028e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800290c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	@ (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff4c 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5e:	f7ff ff63 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002a62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ffb3 	bl	80029d4 <NVIC_EncodePriority>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff82 	bl	8002980 <__NVIC_SetPriority>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff56 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d005      	beq.n	8002ac4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e037      	b.n	8002b34 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020e 	bic.w	r2, r2, #14
 8002ad2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ade:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	2101      	movs	r1, #1
 8002b02:	fa01 f202 	lsl.w	r2, r1, r2
 8002b06:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b10:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b28:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b32:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d00d      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e047      	b.n	8002c16 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 020e 	bic.w	r2, r2, #14
 8002b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bf4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
    }
  }
  return status;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c2e:	e15a      	b.n	8002ee6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 814c 	beq.w	8002ee0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d130      	bne.n	8002cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c96:	2201      	movs	r2, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0201 	and.w	r2, r3, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d017      	beq.n	8002cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d123      	bne.n	8002d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	6939      	ldr	r1, [r7, #16]
 8002d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0203 	and.w	r2, r3, #3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a6 	beq.w	8002ee0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d94:	4b5b      	ldr	r3, [pc, #364]	@ (8002f04 <HAL_GPIO_Init+0x2e4>)
 8002d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d98:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_GPIO_Init+0x2e4>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da0:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <HAL_GPIO_Init+0x2e4>)
 8002da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dac:	4a56      	ldr	r2, [pc, #344]	@ (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dd6:	d01f      	beq.n	8002e18 <HAL_GPIO_Init+0x1f8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d019      	beq.n	8002e14 <HAL_GPIO_Init+0x1f4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a4b      	ldr	r2, [pc, #300]	@ (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_GPIO_Init+0x1f0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_GPIO_Init+0x2f4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1ec>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a49      	ldr	r2, [pc, #292]	@ (8002f18 <HAL_GPIO_Init+0x2f8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1e8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a48      	ldr	r2, [pc, #288]	@ (8002f1c <HAL_GPIO_Init+0x2fc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1e4>
 8002e00:	2305      	movs	r3, #5
 8002e02:	e00a      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e04:	2306      	movs	r3, #6
 8002e06:	e008      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e006      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e004      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2a:	4937      	ldr	r1, [pc, #220]	@ (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e38:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e5c:	4a30      	ldr	r2, [pc, #192]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e86:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eda:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <HAL_GPIO_Init+0x300>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f ae9d 	bne.w	8002c30 <HAL_GPIO_Init+0x10>
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	48000400 	.word	0x48000400
 8002f10:	48000800 	.word	0x48000800
 8002f14:	48000c00 	.word	0x48000c00
 8002f18:	48001000 	.word	0x48001000
 8002f1c:	48001400 	.word	0x48001400
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f6a:	4a05      	ldr	r2, [pc, #20]	@ (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f806 	bl	8002f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d141      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002faa:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d131      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb8:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fbe:	4a46      	ldr	r2, [pc, #280]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc8:	4b43      	ldr	r3, [pc, #268]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2232      	movs	r2, #50	@ 0x32
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	0c9b      	lsrs	r3, r3, #18
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fee:	e002      	b.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff6:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d102      	bne.n	800300a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f2      	bne.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003016:	d158      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e057      	b.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800301c:	4b2e      	ldr	r3, [pc, #184]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003022:	4a2d      	ldr	r2, [pc, #180]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003028:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800302c:	e04d      	b.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003034:	d141      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003036:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003042:	d131      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003044:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800304a:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003054:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800305c:	4a1e      	ldr	r2, [pc, #120]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003062:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2232      	movs	r2, #50	@ 0x32
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	0c9b      	lsrs	r3, r3, #18
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307a:	e002      	b.n	8003082 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b01      	subs	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003082:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308e:	d102      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f2      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003096:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a2:	d112      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e011      	b.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030b8:	e007      	b.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030c2:	4a05      	ldr	r2, [pc, #20]	@ (80030d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40007000 	.word	0x40007000
 80030dc:	20000000 	.word	0x20000000
 80030e0:	431bde83 	.word	0x431bde83

080030e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f2:	6093      	str	r3, [r2, #8]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40007000 	.word	0x40007000

08003104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e2fe      	b.n	8003714 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b97      	ldr	r3, [pc, #604]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b94      	ldr	r3, [pc, #592]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x3e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d002      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b8d      	ldr	r3, [pc, #564]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e2d9      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x74>
 800316a:	4b85      	ldr	r3, [pc, #532]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a84      	ldr	r2, [pc, #528]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b7f      	ldr	r3, [pc, #508]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7e      	ldr	r2, [pc, #504]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b7c      	ldr	r3, [pc, #496]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7b      	ldr	r2, [pc, #492]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 800319c:	4b78      	ldr	r3, [pc, #480]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a77      	ldr	r2, [pc, #476]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b75      	ldr	r3, [pc, #468]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a74      	ldr	r2, [pc, #464]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fa62 	bl	8001684 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fa5e 	bl	8001684 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	@ 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e29e      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fa4e 	bl	8001684 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fa4a 	bl	8001684 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	@ 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e28a      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fe:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d075      	beq.n	8003306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321a:	4b59      	ldr	r3, [pc, #356]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003224:	4b56      	ldr	r3, [pc, #344]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	d102      	bne.n	800323a <HAL_RCC_OscConfig+0x136>
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d002      	beq.n	8003240 <HAL_RCC_OscConfig+0x13c>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d11f      	bne.n	8003280 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003240:	4b4f      	ldr	r3, [pc, #316]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_OscConfig+0x154>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e25d      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b49      	ldr	r3, [pc, #292]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	4946      	ldr	r1, [pc, #280]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800326c:	4b45      	ldr	r3, [pc, #276]	@ (8003384 <HAL_RCC_OscConfig+0x280>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd97 	bl	8000da4 <HAL_InitTick>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d043      	beq.n	8003304 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e249      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003288:	4b3d      	ldr	r3, [pc, #244]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3c      	ldr	r2, [pc, #240]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe f9f6 	bl	8001684 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe f9f2 	bl	8001684 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e232      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ae:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b31      	ldr	r3, [pc, #196]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	061b      	lsls	r3, r3, #24
 80032c8:	492d      	ldr	r1, [pc, #180]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
 80032ce:	e01a      	b.n	8003306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe f9d2 	bl	8001684 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fe f9ce 	bl	8001684 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e20e      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f6:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x1e0>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d041      	beq.n	8003396 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01c      	beq.n	8003354 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800331c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003320:	4a17      	ldr	r2, [pc, #92]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe f9ab 	bl	8001684 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe f9a7 	bl	8001684 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1e7      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0ef      	beq.n	8003332 <HAL_RCC_OscConfig+0x22e>
 8003352:	e020      	b.n	8003396 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 8003356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_OscConfig+0x27c>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe f98e 	bl	8001684 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800336a:	e00d      	b.n	8003388 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336c:	f7fe f98a 	bl	8001684 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d906      	bls.n	8003388 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1ca      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	4b8c      	ldr	r3, [pc, #560]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ea      	bne.n	800336c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a6 	beq.w	80034f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a8:	4b84      	ldr	r3, [pc, #528]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2b4>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x2b6>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b7f      	ldr	r3, [pc, #508]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	4a7e      	ldr	r2, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ca:	4b7c      	ldr	r3, [pc, #496]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033da:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_OscConfig+0x4bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e6:	4b76      	ldr	r3, [pc, #472]	@ (80035c0 <HAL_RCC_OscConfig+0x4bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	@ (80035c0 <HAL_RCC_OscConfig+0x4bc>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe f947 	bl	8001684 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe f943 	bl	8001684 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e183      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340c:	4b6c      	ldr	r3, [pc, #432]	@ (80035c0 <HAL_RCC_OscConfig+0x4bc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d108      	bne.n	8003432 <HAL_RCC_OscConfig+0x32e>
 8003420:	4b66      	ldr	r3, [pc, #408]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	4a65      	ldr	r2, [pc, #404]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003430:	e024      	b.n	800347c <HAL_RCC_OscConfig+0x378>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d110      	bne.n	800345c <HAL_RCC_OscConfig+0x358>
 800343a:	4b60      	ldr	r3, [pc, #384]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	4a5e      	ldr	r2, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800344a:	4b5c      	ldr	r3, [pc, #368]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003450:	4a5a      	ldr	r2, [pc, #360]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800345a:	e00f      	b.n	800347c <HAL_RCC_OscConfig+0x378>
 800345c:	4b57      	ldr	r3, [pc, #348]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	4a56      	ldr	r2, [pc, #344]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800346c:	4b53      	ldr	r3, [pc, #332]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	4a52      	ldr	r2, [pc, #328]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe f8fe 	bl	8001684 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe f8fa 	bl	8001684 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e138      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b46      	ldr	r3, [pc, #280]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ed      	beq.n	800348c <HAL_RCC_OscConfig+0x388>
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe f8e7 	bl	8001684 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f8e3 	bl	8001684 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e121      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	4b3a      	ldr	r3, [pc, #232]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ed      	bne.n	80034ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e8:	4a34      	ldr	r2, [pc, #208]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03c      	beq.n	8003576 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003504:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800350a:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe f8b6 	bl	8001684 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7fe f8b2 	bl	8001684 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0f2      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800352e:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003530:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <HAL_RCC_OscConfig+0x418>
 800353c:	e01b      	b.n	8003576 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800353e:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003544:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f899 	bl	8001684 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003556:	f7fe f895 	bl	8001684 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0d5      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003568:	4b14      	ldr	r3, [pc, #80]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800356a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80c9 	beq.w	8003712 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003580:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f000 8083 	beq.w	8003694 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d15e      	bne.n	8003654 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a08      	ldr	r2, [pc, #32]	@ (80035bc <HAL_RCC_OscConfig+0x4b8>)
 800359c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe f86f 	bl	8001684 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	e00c      	b.n	80035c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe f86b 	bl	8001684 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d905      	bls.n	80035c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0ab      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	4b55      	ldr	r3, [pc, #340]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ec      	bne.n	80035aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	4b52      	ldr	r3, [pc, #328]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	4b52      	ldr	r3, [pc, #328]	@ (8003720 <HAL_RCC_OscConfig+0x61c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6a11      	ldr	r1, [r2, #32]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035ea:	0212      	lsls	r2, r2, #8
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035f2:	0852      	lsrs	r2, r2, #1
 80035f4:	3a01      	subs	r2, #1
 80035f6:	0552      	lsls	r2, r2, #21
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035fe:	0852      	lsrs	r2, r2, #1
 8003600:	3a01      	subs	r2, #1
 8003602:	0652      	lsls	r2, r2, #25
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800360a:	06d2      	lsls	r2, r2, #27
 800360c:	430a      	orrs	r2, r1
 800360e:	4943      	ldr	r1, [pc, #268]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b41      	ldr	r3, [pc, #260]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a40      	ldr	r2, [pc, #256]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a3d      	ldr	r2, [pc, #244]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f82a 	bl	8001684 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003634:	f7fe f826 	bl	8001684 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e066      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x530>
 8003652:	e05e      	b.n	8003712 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a30      	ldr	r2, [pc, #192]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800365a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f810 	bl	8001684 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe f80c 	bl	8001684 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e04c      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367a:	4b28      	ldr	r3, [pc, #160]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003686:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4924      	ldr	r1, [pc, #144]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 800368c:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_RCC_OscConfig+0x620>)
 800368e:	4013      	ands	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
 8003692:	e03e      	b.n	8003712 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e039      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCC_OscConfig+0x618>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d12c      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d123      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11b      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d113      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d109      	bne.n	800370e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	019f800c 	.word	0x019f800c
 8003724:	feeefffc 	.word	0xfeeefffc

08003728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e11e      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b91      	ldr	r3, [pc, #580]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d910      	bls.n	8003770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b8e      	ldr	r3, [pc, #568]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	498c      	ldr	r1, [pc, #560]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b8a      	ldr	r3, [pc, #552]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e106      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d073      	beq.n	8003864 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d129      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003784:	4b81      	ldr	r3, [pc, #516]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0f4      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003794:	f000 f9d0 	bl	8003b38 <RCC_GetSysClockFreqFromPLLSource>
 8003798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a7c      	ldr	r2, [pc, #496]	@ (8003990 <HAL_RCC_ClockConfig+0x268>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d93f      	bls.n	8003822 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037a2:	4b7a      	ldr	r3, [pc, #488]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d033      	beq.n	8003822 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12f      	bne.n	8003822 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037c2:	4b72      	ldr	r3, [pc, #456]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ca:	4a70      	ldr	r2, [pc, #448]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80037cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e024      	b.n	8003822 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e0:	4b6a      	ldr	r3, [pc, #424]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0c6      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0be      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003800:	f000 f8ce 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8003804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4a61      	ldr	r2, [pc, #388]	@ (8003990 <HAL_RCC_ClockConfig+0x268>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d909      	bls.n	8003822 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800380e:	4b5f      	ldr	r3, [pc, #380]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003816:	4a5d      	ldr	r2, [pc, #372]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800381c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b5a      	ldr	r3, [pc, #360]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4957      	ldr	r1, [pc, #348]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003834:	f7fd ff26 	bl	8001684 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fd ff22 	bl	8001684 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e095      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b4e      	ldr	r3, [pc, #312]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b43      	ldr	r3, [pc, #268]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a42      	ldr	r2, [pc, #264]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003882:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003886:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003894:	4b3d      	ldr	r3, [pc, #244]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800389c:	4a3b      	ldr	r2, [pc, #236]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 800389e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a4:	4b39      	ldr	r3, [pc, #228]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4936      	ldr	r1, [pc, #216]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
 80038b6:	e008      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b80      	cmp	r3, #128	@ 0x80
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038be:	4b33      	ldr	r3, [pc, #204]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4a32      	ldr	r2, [pc, #200]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 80038c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d21d      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 020f 	bic.w	r2, r3, #15
 80038e0:	4929      	ldr	r1, [pc, #164]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038e8:	f7fd fecc 	bl	8001684 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd fec8 	bl	8001684 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e03b      	b.n	800397e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d1ed      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4917      	ldr	r1, [pc, #92]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490f      	ldr	r1, [pc, #60]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003952:	f000 f825 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <HAL_RCC_ClockConfig+0x264>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490c      	ldr	r1, [pc, #48]	@ (8003994 <HAL_RCC_ClockConfig+0x26c>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <HAL_RCC_ClockConfig+0x270>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003972:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x274>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fa14 	bl	8000da4 <HAL_InitTick>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
 8003990:	04c4b400 	.word	0x04c4b400
 8003994:	08008bb0 	.word	0x08008bb0
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d102      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e047      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039b8:	4b27      	ldr	r3, [pc, #156]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c4:	4b26      	ldr	r3, [pc, #152]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e03e      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039ca:	4b23      	ldr	r3, [pc, #140]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d136      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	3301      	adds	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	4a16      	ldr	r2, [pc, #88]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fe:	68d2      	ldr	r2, [r2, #12]
 8003a00:	0a12      	lsrs	r2, r2, #8
 8003a02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
      break;
 8003a0c:	e00c      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	0a12      	lsrs	r2, r2, #8
 8003a1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
      break;
 8003a26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0e5b      	lsrs	r3, r3, #25
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	e001      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a48:	693b      	ldr	r3, [r7, #16]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	016e3600 	.word	0x016e3600

08003a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000000 	.word	0x20000000

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08008bc0 	.word	0x08008bc0

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003aac:	f7ff ffda 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0adb      	lsrs	r3, r3, #11
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4904      	ldr	r1, [pc, #16]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08008bc0 	.word	0x08008bc0

08003ad4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003af0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <HAL_RCC_GetClockConfig+0x5c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003afc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <HAL_RCC_GetClockConfig+0x5c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <HAL_RCC_GetClockConfig+0x60>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40022000 	.word	0x40022000

08003b38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d10c      	bne.n	8003b76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b5c:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b66:	68d2      	ldr	r2, [r2, #12]
 8003b68:	0a12      	lsrs	r2, r2, #8
 8003b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
    break;
 8003b74:	e00c      	b.n	8003b90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b76:	4a12      	ldr	r2, [pc, #72]	@ (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	0a12      	lsrs	r2, r2, #8
 8003b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    break;
 8003b8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b90:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	0e5b      	lsrs	r3, r3, #25
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003baa:	687b      	ldr	r3, [r7, #4]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	016e3600 	.word	0x016e3600
 8003bc0:	00f42400 	.word	0x00f42400

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8098 	beq.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b40      	ldr	r3, [pc, #256]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a39      	ldr	r2, [pc, #228]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fd33 	bl	8001684 <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c20:	e009      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fd fd2f 	bl	8001684 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d902      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	74fb      	strb	r3, [r7, #19]
        break;
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c36:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ef      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d159      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c48:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01e      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d019      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c64:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c80:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c90:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fd fcef 	bl	8001684 <HAL_GetTick>
 8003ca6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fceb 	bl	8001684 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d902      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ec      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	4903      	ldr	r1, [pc, #12]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cec:	e008      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	74bb      	strb	r3, [r7, #18]
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d00:	7c7b      	ldrb	r3, [r7, #17]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d105      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d06:	4ba7      	ldr	r3, [pc, #668]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	4aa6      	ldr	r2, [pc, #664]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d1e:	4ba1      	ldr	r3, [pc, #644]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d24:	f023 0203 	bic.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	499d      	ldr	r1, [pc, #628]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d40:	4b98      	ldr	r3, [pc, #608]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d46:	f023 020c 	bic.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4995      	ldr	r1, [pc, #596]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d62:	4b90      	ldr	r3, [pc, #576]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	498c      	ldr	r1, [pc, #560]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d84:	4b87      	ldr	r3, [pc, #540]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	4984      	ldr	r1, [pc, #528]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003da6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	497b      	ldr	r1, [pc, #492]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dc8:	4b76      	ldr	r3, [pc, #472]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4973      	ldr	r1, [pc, #460]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dea:	4b6e      	ldr	r3, [pc, #440]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	496a      	ldr	r1, [pc, #424]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e0c:	4b65      	ldr	r3, [pc, #404]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4962      	ldr	r1, [pc, #392]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	4959      	ldr	r1, [pc, #356]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e50:	4b54      	ldr	r3, [pc, #336]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	4951      	ldr	r1, [pc, #324]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e72:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	4948      	ldr	r1, [pc, #288]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e94:	4b43      	ldr	r3, [pc, #268]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4940      	ldr	r1, [pc, #256]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ebe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ecc:	4b35      	ldr	r3, [pc, #212]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	4932      	ldr	r1, [pc, #200]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eec:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f04:	4b27      	ldr	r3, [pc, #156]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	4924      	ldr	r1, [pc, #144]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f24:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4a:	4916      	ldr	r1, [pc, #88]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d019      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	4908      	ldr	r1, [pc, #32]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a02      	ldr	r2, [pc, #8]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fb4:	4b29      	ldr	r3, [pc, #164]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	4926      	ldr	r1, [pc, #152]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fd4:	4b21      	ldr	r3, [pc, #132]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003fec:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffa:	4918      	ldr	r1, [pc, #96]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400a:	d105      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800400c:	4b13      	ldr	r3, [pc, #76]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a12      	ldr	r2, [pc, #72]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004016:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800402a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004032:	490a      	ldr	r1, [pc, #40]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a04      	ldr	r2, [pc, #16]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004050:	7cbb      	ldrb	r3, [r7, #18]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e049      	b.n	8004106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd f912 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fe60 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e054      	b.n	80041d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004152:	d01d      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a22      	ldr	r2, [pc, #136]	@ (80041e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1f      	ldr	r2, [pc, #124]	@ (80041ec <HAL_TIM_Base_Start_IT+0xdc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1e      	ldr	r2, [pc, #120]	@ (80041f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d115      	bne.n	80041bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_TIM_Base_Start_IT+0xec>)
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d015      	beq.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a8:	d011      	beq.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	e008      	b.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e000      	b.n	80041d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40013400 	.word	0x40013400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40015000 	.word	0x40015000
 80041fc:	00010007 	.word	0x00010007

08004200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e049      	b.n	80042a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f841 	bl	80042ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 fd90 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e03c      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e02f      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e022      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d109      	bne.n	8004336 <HAL_TIM_PWM_Start+0x72>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e015      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b10      	cmp	r3, #16
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start+0x8c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e008      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0a6      	b.n	80044b8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xb6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004378:	e023      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xc6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004388:	e01b      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xd6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004398:	e013      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0xe6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start+0xf6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b8:	e003      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f9b8 	bl	8005740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3a      	ldr	r2, [pc, #232]	@ (80044c0 <HAL_TIM_PWM_Start+0x1fc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_TIM_PWM_Start+0x148>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a39      	ldr	r2, [pc, #228]	@ (80044c4 <HAL_TIM_PWM_Start+0x200>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_TIM_PWM_Start+0x148>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a37      	ldr	r2, [pc, #220]	@ (80044c8 <HAL_TIM_PWM_Start+0x204>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_TIM_PWM_Start+0x148>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <HAL_TIM_PWM_Start+0x208>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_TIM_PWM_Start+0x148>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a34      	ldr	r2, [pc, #208]	@ (80044d0 <HAL_TIM_PWM_Start+0x20c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_PWM_Start+0x148>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a33      	ldr	r2, [pc, #204]	@ (80044d4 <HAL_TIM_PWM_Start+0x210>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Start+0x14c>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_TIM_PWM_Start+0x14e>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a25      	ldr	r2, [pc, #148]	@ (80044c0 <HAL_TIM_PWM_Start+0x1fc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a26      	ldr	r2, [pc, #152]	@ (80044d8 <HAL_TIM_PWM_Start+0x214>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a24      	ldr	r2, [pc, #144]	@ (80044dc <HAL_TIM_PWM_Start+0x218>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a23      	ldr	r2, [pc, #140]	@ (80044e0 <HAL_TIM_PWM_Start+0x21c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_TIM_PWM_Start+0x200>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_PWM_Start+0x204>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x1b2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <HAL_TIM_PWM_Start+0x210>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d115      	bne.n	80044a2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_TIM_PWM_Start+0x220>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d015      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1f0>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448e:	d011      	beq.n	80044b4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	e008      	b.n	80044b4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40013400 	.word	0x40013400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40014800 	.word	0x40014800
 80044d4:	40015000 	.word	0x40015000
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800
 80044e0:	40000c00 	.word	0x40000c00
 80044e4:	00010007 	.word	0x00010007

080044e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 f920 	bl	8005740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a40      	ldr	r2, [pc, #256]	@ (8004608 <HAL_TIM_PWM_Stop+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <HAL_TIM_PWM_Stop+0x54>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3f      	ldr	r2, [pc, #252]	@ (800460c <HAL_TIM_PWM_Stop+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_TIM_PWM_Stop+0x54>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3d      	ldr	r2, [pc, #244]	@ (8004610 <HAL_TIM_PWM_Stop+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_TIM_PWM_Stop+0x54>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a3c      	ldr	r2, [pc, #240]	@ (8004614 <HAL_TIM_PWM_Stop+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_TIM_PWM_Stop+0x54>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_TIM_PWM_Stop+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIM_PWM_Stop+0x54>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a39      	ldr	r2, [pc, #228]	@ (800461c <HAL_TIM_PWM_Stop+0x134>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_TIM_PWM_Stop+0x58>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_TIM_PWM_Stop+0x5a>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_TIM_PWM_Stop+0x8e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_TIM_PWM_Stop+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004574:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <HAL_TIM_PWM_Stop+0xbe>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_TIM_PWM_Stop+0xbe>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Stop+0xce>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b4:	e023      	b.n	80045fe <HAL_TIM_PWM_Stop+0x116>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Stop+0xde>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	e01b      	b.n	80045fe <HAL_TIM_PWM_Stop+0x116>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Stop+0xee>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d4:	e013      	b.n	80045fe <HAL_TIM_PWM_Stop+0x116>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_PWM_Stop+0xfe>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045e4:	e00b      	b.n	80045fe <HAL_TIM_PWM_Stop+0x116>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Stop+0x10e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f4:	e003      	b.n	80045fe <HAL_TIM_PWM_Stop+0x116>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800
 800461c:	40015000 	.word	0x40015000

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb5c 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb4e 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb5f 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0204 	mvn.w	r2, #4
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fb36 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb28 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb39 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0208 	mvn.w	r2, #8
 80046ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2204      	movs	r2, #4
 80046f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fb10 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fb02 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fb13 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d020      	beq.n	8004768 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0210 	mvn.w	r2, #16
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2208      	movs	r2, #8
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 faea 	bl	8004d28 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fadc 	bl	8004d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 faed 	bl	8004d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0201 	mvn.w	r2, #1
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fad0 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 fafe 	bl	8005db6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 faf6 	bl	8005dca <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00c      	beq.n	8004802 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 faa7 	bl	8004d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00c      	beq.n	8004826 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0220 	mvn.w	r2, #32
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 fabe 	bl	8005da2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 faca 	bl	8005dde <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 fac2 	bl	8005df2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 faba 	bl	8005e06 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00c      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 fab2 	bl	8005e1a <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e0ff      	b.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b14      	cmp	r3, #20
 80048ea:	f200 80f0 	bhi.w	8004ace <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048ee:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004949 	.word	0x08004949
 80048f8:	08004acf 	.word	0x08004acf
 80048fc:	08004acf 	.word	0x08004acf
 8004900:	08004acf 	.word	0x08004acf
 8004904:	08004989 	.word	0x08004989
 8004908:	08004acf 	.word	0x08004acf
 800490c:	08004acf 	.word	0x08004acf
 8004910:	08004acf 	.word	0x08004acf
 8004914:	080049cb 	.word	0x080049cb
 8004918:	08004acf 	.word	0x08004acf
 800491c:	08004acf 	.word	0x08004acf
 8004920:	08004acf 	.word	0x08004acf
 8004924:	08004a0b 	.word	0x08004a0b
 8004928:	08004acf 	.word	0x08004acf
 800492c:	08004acf 	.word	0x08004acf
 8004930:	08004acf 	.word	0x08004acf
 8004934:	08004a4d 	.word	0x08004a4d
 8004938:	08004acf 	.word	0x08004acf
 800493c:	08004acf 	.word	0x08004acf
 8004940:	08004acf 	.word	0x08004acf
 8004944:	08004a8d 	.word	0x08004a8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fabc 	bl	8004ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	619a      	str	r2, [r3, #24]
      break;
 8004986:	e0a5      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fb36 	bl	8005000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]
      break;
 80049c8:	e084      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fba9 	bl	8005128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0208 	orr.w	r2, r2, #8
 80049e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]
      break;
 8004a08:	e064      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fc1b 	bl	800524c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	61da      	str	r2, [r3, #28]
      break;
 8004a4a:	e043      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fc8e 	bl	8005374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a8a:	e023      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fcd8 	bl	8005448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004acc:	e002      	b.n	8004ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_ConfigClockSource+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0f6      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x20a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004b22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6f      	ldr	r2, [pc, #444]	@ (8004cfc <HAL_TIM_ConfigClockSource+0x214>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	f000 80c1 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b44:	4a6d      	ldr	r2, [pc, #436]	@ (8004cfc <HAL_TIM_ConfigClockSource+0x214>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f200 80c6 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b4c:	4a6c      	ldr	r2, [pc, #432]	@ (8004d00 <HAL_TIM_ConfigClockSource+0x218>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 80b9 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b54:	4a6a      	ldr	r2, [pc, #424]	@ (8004d00 <HAL_TIM_ConfigClockSource+0x218>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f200 80be 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b5c:	4a69      	ldr	r2, [pc, #420]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f000 80b1 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b64:	4a67      	ldr	r2, [pc, #412]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x21c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	f200 80b6 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b6c:	4a66      	ldr	r2, [pc, #408]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x220>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 80a9 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b74:	4a64      	ldr	r2, [pc, #400]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x220>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f200 80ae 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b7c:	4a63      	ldr	r2, [pc, #396]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x224>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	f000 80a1 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b84:	4a61      	ldr	r2, [pc, #388]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x224>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f200 80a6 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b8c:	4a60      	ldr	r2, [pc, #384]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x228>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	f000 8099 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004b94:	4a5e      	ldr	r2, [pc, #376]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x228>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f200 809e 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004b9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ba0:	f000 8091 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ba4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ba8:	f200 8096 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bb0:	f000 8089 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bb8:	f200 808e 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc0:	d03e      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0x158>
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc6:	f200 8087 	bhi.w	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bce:	f000 8086 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x1f6>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	d87f      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd8:	2b70      	cmp	r3, #112	@ 0x70
 8004bda:	d01a      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x12a>
 8004bdc:	2b70      	cmp	r3, #112	@ 0x70
 8004bde:	d87b      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be0:	2b60      	cmp	r3, #96	@ 0x60
 8004be2:	d050      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x19e>
 8004be4:	2b60      	cmp	r3, #96	@ 0x60
 8004be6:	d877      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004be8:	2b50      	cmp	r3, #80	@ 0x50
 8004bea:	d03c      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x17e>
 8004bec:	2b50      	cmp	r3, #80	@ 0x50
 8004bee:	d873      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d058      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x1be>
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d86f      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf8:	2b30      	cmp	r3, #48	@ 0x30
 8004bfa:	d064      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004bfc:	2b30      	cmp	r3, #48	@ 0x30
 8004bfe:	d86b      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d060      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d867      	bhi.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05c      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d05a      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c10:	e062      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c22:	f000 fd6d 	bl	8005700 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	609a      	str	r2, [r3, #8]
      break;
 8004c3e:	e04f      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c50:	f000 fd56 	bl	8005700 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c62:	609a      	str	r2, [r3, #8]
      break;
 8004c64:	e03c      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 fcc8 	bl	8005608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2150      	movs	r1, #80	@ 0x50
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fd21 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e02c      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 fce7 	bl	8005666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2160      	movs	r1, #96	@ 0x60
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fd11 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e01c      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fca8 	bl	8005608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2140      	movs	r1, #64	@ 0x40
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fd01 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e00c      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f000 fcf8 	bl	80056c6 <TIM_ITRx_SetConfig>
      break;
 8004cd6:	e003      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      break;
 8004cdc:	e000      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	00100070 	.word	0x00100070
 8004d00:	00100060 	.word	0x00100060
 8004d04:	00100050 	.word	0x00100050
 8004d08:	00100040 	.word	0x00100040
 8004d0c:	00100030 	.word	0x00100030
 8004d10:	00100020 	.word	0x00100020

08004d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a4c      	ldr	r2, [pc, #304]	@ (8004ea8 <TIM_Base_SetConfig+0x144>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d017      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d82:	d013      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a49      	ldr	r2, [pc, #292]	@ (8004eac <TIM_Base_SetConfig+0x148>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00f      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a48      	ldr	r2, [pc, #288]	@ (8004eb0 <TIM_Base_SetConfig+0x14c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00b      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a47      	ldr	r2, [pc, #284]	@ (8004eb4 <TIM_Base_SetConfig+0x150>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a46      	ldr	r2, [pc, #280]	@ (8004eb8 <TIM_Base_SetConfig+0x154>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0x48>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a45      	ldr	r2, [pc, #276]	@ (8004ebc <TIM_Base_SetConfig+0x158>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a39      	ldr	r2, [pc, #228]	@ (8004ea8 <TIM_Base_SetConfig+0x144>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d023      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dcc:	d01f      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a36      	ldr	r2, [pc, #216]	@ (8004eac <TIM_Base_SetConfig+0x148>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01b      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	@ (8004eb0 <TIM_Base_SetConfig+0x14c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d017      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a34      	ldr	r2, [pc, #208]	@ (8004eb4 <TIM_Base_SetConfig+0x150>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a33      	ldr	r2, [pc, #204]	@ (8004eb8 <TIM_Base_SetConfig+0x154>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a33      	ldr	r2, [pc, #204]	@ (8004ec0 <TIM_Base_SetConfig+0x15c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <TIM_Base_SetConfig+0x160>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a31      	ldr	r2, [pc, #196]	@ (8004ec8 <TIM_Base_SetConfig+0x164>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_Base_SetConfig+0xaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2c      	ldr	r2, [pc, #176]	@ (8004ebc <TIM_Base_SetConfig+0x158>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <TIM_Base_SetConfig+0x144>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <TIM_Base_SetConfig+0x110>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <TIM_Base_SetConfig+0x154>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00f      	beq.n	8004e74 <TIM_Base_SetConfig+0x110>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <TIM_Base_SetConfig+0x15c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_Base_SetConfig+0x110>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <TIM_Base_SetConfig+0x160>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_Base_SetConfig+0x110>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a18      	ldr	r2, [pc, #96]	@ (8004ec8 <TIM_Base_SetConfig+0x164>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_Base_SetConfig+0x110>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a13      	ldr	r2, [pc, #76]	@ (8004ebc <TIM_Base_SetConfig+0x158>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d103      	bne.n	8004e7c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40015000 	.word	0x40015000
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 0201 	bic.w	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0302 	bic.w	r3, r3, #2
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a30      	ldr	r2, [pc, #192]	@ (8004fe8 <TIM_OC1_SetConfig+0x11c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <TIM_OC1_SetConfig+0x88>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fec <TIM_OC1_SetConfig+0x120>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC1_SetConfig+0x88>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff0 <TIM_OC1_SetConfig+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC1_SetConfig+0x88>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff4 <TIM_OC1_SetConfig+0x128>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC1_SetConfig+0x88>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <TIM_OC1_SetConfig+0x12c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC1_SetConfig+0x88>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ffc <TIM_OC1_SetConfig+0x130>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10c      	bne.n	8004f6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0308 	bic.w	r3, r3, #8
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <TIM_OC1_SetConfig+0x11c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <TIM_OC1_SetConfig+0xd2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <TIM_OC1_SetConfig+0x120>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_OC1_SetConfig+0xd2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <TIM_OC1_SetConfig+0x124>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_OC1_SetConfig+0xd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff4 <TIM_OC1_SetConfig+0x128>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_OC1_SetConfig+0xd2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <TIM_OC1_SetConfig+0x12c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_OC1_SetConfig+0xd2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <TIM_OC1_SetConfig+0x130>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40013400 	.word	0x40013400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40015000 	.word	0x40015000

08005000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0210 	bic.w	r2, r3, #16
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0320 	bic.w	r3, r3, #32
 800504e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <TIM_OC2_SetConfig+0x110>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_OC2_SetConfig+0x74>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2b      	ldr	r2, [pc, #172]	@ (8005114 <TIM_OC2_SetConfig+0x114>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0x74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2a      	ldr	r2, [pc, #168]	@ (8005118 <TIM_OC2_SetConfig+0x118>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1f      	ldr	r2, [pc, #124]	@ (8005110 <TIM_OC2_SetConfig+0x110>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <TIM_OC2_SetConfig+0xc0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a1e      	ldr	r2, [pc, #120]	@ (8005114 <TIM_OC2_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_OC2_SetConfig+0xc0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <TIM_OC2_SetConfig+0x11c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_OC2_SetConfig+0xc0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <TIM_OC2_SetConfig+0x120>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_OC2_SetConfig+0xc0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005124 <TIM_OC2_SetConfig+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC2_SetConfig+0xc0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <TIM_OC2_SetConfig+0x118>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d113      	bne.n	80050e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40015000 	.word	0x40015000
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800

08005128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2b      	ldr	r2, [pc, #172]	@ (8005234 <TIM_OC3_SetConfig+0x10c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_OC3_SetConfig+0x72>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <TIM_OC3_SetConfig+0x110>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC3_SetConfig+0x72>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a29      	ldr	r2, [pc, #164]	@ (800523c <TIM_OC3_SetConfig+0x114>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10d      	bne.n	80051b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005234 <TIM_OC3_SetConfig+0x10c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_OC3_SetConfig+0xbe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005238 <TIM_OC3_SetConfig+0x110>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_OC3_SetConfig+0xbe>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <TIM_OC3_SetConfig+0x118>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_OC3_SetConfig+0xbe>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <TIM_OC3_SetConfig+0x11c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_OC3_SetConfig+0xbe>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <TIM_OC3_SetConfig+0x120>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC3_SetConfig+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <TIM_OC3_SetConfig+0x114>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d113      	bne.n	800520e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40015000 	.word	0x40015000
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800

0800524c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800529a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2c      	ldr	r2, [pc, #176]	@ (800535c <TIM_OC4_SetConfig+0x110>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC4_SetConfig+0x74>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005360 <TIM_OC4_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC4_SetConfig+0x74>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005364 <TIM_OC4_SetConfig+0x118>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <TIM_OC4_SetConfig+0x110>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <TIM_OC4_SetConfig+0xc0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005360 <TIM_OC4_SetConfig+0x114>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_OC4_SetConfig+0xc0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005368 <TIM_OC4_SetConfig+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_OC4_SetConfig+0xc0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1d      	ldr	r2, [pc, #116]	@ (800536c <TIM_OC4_SetConfig+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_OC4_SetConfig+0xc0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005370 <TIM_OC4_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC4_SetConfig+0xc0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a17      	ldr	r2, [pc, #92]	@ (8005364 <TIM_OC4_SetConfig+0x118>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d113      	bne.n	8005334 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005312:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800531a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40013400 	.word	0x40013400
 8005364:	40015000 	.word	0x40015000
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	@ (8005430 <TIM_OC5_SetConfig+0xbc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_OC5_SetConfig+0x82>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <TIM_OC5_SetConfig+0xc0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_OC5_SetConfig+0x82>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <TIM_OC5_SetConfig+0xc4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_OC5_SetConfig+0x82>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <TIM_OC5_SetConfig+0xc8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_OC5_SetConfig+0x82>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <TIM_OC5_SetConfig+0xcc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC5_SetConfig+0x82>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	@ (8005444 <TIM_OC5_SetConfig+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d109      	bne.n	800540a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800
 8005444:	40015000 	.word	0x40015000

08005448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800548e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	051b      	lsls	r3, r3, #20
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1a      	ldr	r2, [pc, #104]	@ (8005508 <TIM_OC6_SetConfig+0xc0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <TIM_OC6_SetConfig+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <TIM_OC6_SetConfig+0xc4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC6_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <TIM_OC6_SetConfig+0xc8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC6_SetConfig+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <TIM_OC6_SetConfig+0xcc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC6_SetConfig+0x84>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a16      	ldr	r2, [pc, #88]	@ (8005518 <TIM_OC6_SetConfig+0xd0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x84>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a15      	ldr	r2, [pc, #84]	@ (800551c <TIM_OC6_SetConfig+0xd4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800
 800551c:	40015000 	.word	0x40015000

08005520 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 0201 	bic.w	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <TIM_TI1_SetConfig+0xcc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d017      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <TIM_TI1_SetConfig+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <TIM_TI1_SetConfig+0xd4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <TIM_TI1_SetConfig+0xd8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <TIM_TI1_SetConfig+0xdc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <TIM_TI1_SetConfig+0xe0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_TI1_SetConfig+0x66>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <TIM_TI1_SetConfig+0xe4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <TIM_TI1_SetConfig+0x6a>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <TIM_TI1_SetConfig+0x6c>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e003      	b.n	80055aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 030a 	bic.w	r3, r3, #10
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 030a 	and.w	r3, r3, #10
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40013400 	.word	0x40013400
 8005600:	40014000 	.word	0x40014000
 8005604:	40015000 	.word	0x40015000

08005608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0201 	bic.w	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 030a 	bic.w	r3, r3, #10
 8005644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005666:	b480      	push	{r7}
 8005668:	b087      	sub	sp, #28
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f023 0210 	bic.w	r2, r3, #16
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f043 0307 	orr.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800571a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	431a      	orrs	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2201      	movs	r2, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1a      	ldr	r2, [r3, #32]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b08a      	sub	sp, #40	@ 0x28
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e0a0      	b.n	80058e0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fb fd9c 	bl	80012f0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7ff faca 	bl	8004d64 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2203      	movs	r2, #3
 80057de:	f7ff fe9f 	bl	8005520 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 020c 	bic.w	r2, r2, #12
 80057f0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6999      	ldr	r1, [r3, #24]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005812:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005836:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0204 	orr.w	r2, r2, #4
 800585a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005864:	2370      	movs	r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f107 020c 	add.w	r2, r7, #12
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fbbb 	bl	8005000 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80058ac:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3728      	adds	r7, #40	@ 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_TIMEx_PWMN_Start+0x24>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e022      	b.n	8005952 <HAL_TIMEx_PWMN_Start+0x6a>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b04      	cmp	r3, #4
 8005910:	d109      	bne.n	8005926 <HAL_TIMEx_PWMN_Start+0x3e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e015      	b.n	8005952 <HAL_TIMEx_PWMN_Start+0x6a>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d109      	bne.n	8005940 <HAL_TIMEx_PWMN_Start+0x58>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e008      	b.n	8005952 <HAL_TIMEx_PWMN_Start+0x6a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e073      	b.n	8005a42 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_TIMEx_PWMN_Start+0x82>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005968:	e013      	b.n	8005992 <HAL_TIMEx_PWMN_Start+0xaa>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b04      	cmp	r3, #4
 800596e:	d104      	bne.n	800597a <HAL_TIMEx_PWMN_Start+0x92>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005978:	e00b      	b.n	8005992 <HAL_TIMEx_PWMN_Start+0xaa>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b08      	cmp	r3, #8
 800597e:	d104      	bne.n	800598a <HAL_TIMEx_PWMN_Start+0xa2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005988:	e003      	b.n	8005992 <HAL_TIMEx_PWMN_Start+0xaa>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2204      	movs	r2, #4
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fa47 	bl	8005e2e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a25      	ldr	r2, [pc, #148]	@ (8005a4c <HAL_TIMEx_PWMN_Start+0x164>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c2:	d01d      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a21      	ldr	r2, [pc, #132]	@ (8005a50 <HAL_TIMEx_PWMN_Start+0x168>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a20      	ldr	r2, [pc, #128]	@ (8005a54 <HAL_TIMEx_PWMN_Start+0x16c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <HAL_TIMEx_PWMN_Start+0x170>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <HAL_TIMEx_PWMN_Start+0x174>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a60 <HAL_TIMEx_PWMN_Start+0x178>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIMEx_PWMN_Start+0x118>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <HAL_TIMEx_PWMN_Start+0x17c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d115      	bne.n	8005a2c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_TIMEx_PWMN_Start+0x180>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d015      	beq.n	8005a3e <HAL_TIMEx_PWMN_Start+0x156>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a18:	d011      	beq.n	8005a3e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e008      	b.n	8005a3e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e000      	b.n	8005a40 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40015000 	.word	0x40015000
 8005a68:	00010007 	.word	0x00010007

08005a6c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f9d5 	bl	8005e2e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10f      	bne.n	8005ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <HAL_TIMEx_PWMN_Stop+0x48>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_TIMEx_PWMN_Stop+0x88>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af2:	e013      	b.n	8005b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d104      	bne.n	8005b04 <HAL_TIMEx_PWMN_Stop+0x98>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b02:	e00b      	b.n	8005b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d104      	bne.n	8005b14 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b12:	e003      	b.n	8005b1c <HAL_TIMEx_PWMN_Stop+0xb0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e074      	b.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a34      	ldr	r2, [pc, #208]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a33      	ldr	r2, [pc, #204]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a31      	ldr	r2, [pc, #196]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc0:	d01d      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1c      	ldr	r2, [pc, #112]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a15      	ldr	r2, [pc, #84]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a18      	ldr	r2, [pc, #96]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a11      	ldr	r2, [pc, #68]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10c      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40015000 	.word	0x40015000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40014000 	.word	0x40014000

08005c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e078      	b.n	8005d62 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d70 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1b      	ldr	r2, [pc, #108]	@ (8005d74 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d11c      	bne.n	8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	051b      	lsls	r3, r3, #20
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40013400 	.word	0x40013400
 8005d78:	40015000 	.word	0x40015000

08005d7c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	2204      	movs	r2, #4
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	401a      	ands	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e042      	b.n	8005f10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fb fb3d 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2224      	movs	r2, #36	@ 0x24
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 ff60 	bl	8006d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fc61 	bl	8006790 <UART_SetConfig>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e01b      	b.n	8005f10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 ffdf 	bl	8006ecc <UART_CheckIdleState>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d17b      	bne.n	800602a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_Transmit+0x26>
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e074      	b.n	800602c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fb fb97 	bl	8001684 <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f70:	d108      	bne.n	8005f84 <HAL_UART_Transmit+0x6c>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e003      	b.n	8005f8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f8c:	e030      	b.n	8005ff0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	@ 0x80
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f001 f841 	bl	8007020 <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e03d      	b.n	800602c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e007      	b.n	8005fde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1c8      	bne.n	8005f8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 f80a 	bl	8007020 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e006      	b.n	800602c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	@ 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006048:	2b20      	cmp	r3, #32
 800604a:	d137      	bne.n	80060bc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_UART_Receive_IT+0x24>
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e030      	b.n	80060be <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	@ (80060c8 <HAL_UART_Receive_IT+0x94>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d01f      	beq.n	80060ac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	613b      	str	r3, [r7, #16]
   return(result);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f001 f822 	bl	80070fc <UART_Start_Receive_IT>
 80060b8:	4603      	mov	r3, r0
 80060ba:	e000      	b.n	80060be <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3728      	adds	r7, #40	@ 0x28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40008000 	.word	0x40008000

080060cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b0ba      	sub	sp, #232	@ 0xe8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80060f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80060fa:	4013      	ands	r3, r2
 80060fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11b      	bne.n	8006140 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8300 	beq.w	8006736 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
      }
      return;
 800613e:	e2fa      	b.n	8006736 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8123 	beq.w	8006390 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800614a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800614e:	4b8d      	ldr	r3, [pc, #564]	@ (8006384 <HAL_UART_IRQHandler+0x2b8>)
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800615a:	4b8b      	ldr	r3, [pc, #556]	@ (8006388 <HAL_UART_IRQHandler+0x2bc>)
 800615c:	4013      	ands	r3, r2
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8116 	beq.w	8006390 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d011      	beq.n	8006194 <HAL_UART_IRQHandler+0xc8>
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d011      	beq.n	80061c4 <HAL_UART_IRQHandler+0xf8>
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2202      	movs	r2, #2
 80061b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <HAL_UART_IRQHandler+0x128>
 80061d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2204      	movs	r2, #4
 80061e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800620c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006210:	4b5c      	ldr	r3, [pc, #368]	@ (8006384 <HAL_UART_IRQHandler+0x2b8>)
 8006212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <HAL_UART_IRQHandler+0x196>
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8266 	beq.w	800673a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d013      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d054      	beq.n	8006370 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f83a 	bl	8007340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d146      	bne.n	8006368 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800630a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800631e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d9      	bne.n	80062da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632c:	2b00      	cmp	r3, #0
 800632e:	d017      	beq.n	8006360 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006336:	4a15      	ldr	r2, [pc, #84]	@ (800638c <HAL_UART_IRQHandler+0x2c0>)
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006340:	4618      	mov	r0, r3
 8006342:	f7fc fc06 	bl	8002b52 <HAL_DMA_Abort_IT>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d019      	beq.n	8006380 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800635a:	4610      	mov	r0, r2
 800635c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635e:	e00f      	b.n	8006380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9ff 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006366:	e00b      	b.n	8006380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f9fb 	bl	8006764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636e:	e007      	b.n	8006380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f9f7 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800637e:	e1dc      	b.n	800673a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	bf00      	nop
    return;
 8006382:	e1da      	b.n	800673a <HAL_UART_IRQHandler+0x66e>
 8006384:	10000001 	.word	0x10000001
 8006388:	04000120 	.word	0x04000120
 800638c:	0800740d 	.word	0x0800740d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 8170 	bne.w	800667a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8169 	beq.w	800667a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8162 	beq.w	800667a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2210      	movs	r2, #16
 80063bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c8:	2b40      	cmp	r3, #64	@ 0x40
 80063ca:	f040 80d8 	bne.w	800657e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80af 	beq.w	8006544 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063f0:	429a      	cmp	r2, r3
 80063f2:	f080 80a7 	bcs.w	8006544 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 8087 	bne.w	8006522 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800642c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006442:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800644a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1da      	bne.n	8006414 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800646e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006482:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006486:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800648a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e1      	bne.n	800645e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006504:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e4      	bne.n	80064e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc fabf 	bl	8002aa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006534:	b29b      	uxth	r3, r3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	b29b      	uxth	r3, r3
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f91b 	bl	8006778 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006542:	e0fc      	b.n	800673e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800654a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800654e:	429a      	cmp	r2, r3
 8006550:	f040 80f5 	bne.w	800673e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b20      	cmp	r3, #32
 8006564:	f040 80eb 	bne.w	800673e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8fe 	bl	8006778 <HAL_UARTEx_RxEventCallback>
      return;
 800657c:	e0df      	b.n	800673e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800658a:	b29b      	uxth	r3, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80d1 	beq.w	8006742 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80065a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80cc 	beq.w	8006742 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e4      	bne.n	80065aa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3308      	adds	r3, #8
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	623b      	str	r3, [r7, #32]
   return(result);
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006608:	633a      	str	r2, [r7, #48]	@ 0x30
 800660a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800660e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e1      	bne.n	80065e0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	60fb      	str	r3, [r7, #12]
   return(result);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 0310 	bic.w	r3, r3, #16
 8006644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	69b9      	ldr	r1, [r7, #24]
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	617b      	str	r3, [r7, #20]
   return(result);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e4      	bne.n	8006630 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f880 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006678:	e063      	b.n	8006742 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <HAL_UART_IRQHandler+0x5d8>
 8006686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800668a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800669a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fc17 	bl	8007ed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a2:	e051      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d014      	beq.n	80066da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03a      	beq.n	8006746 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
    }
    return;
 80066d8:	e035      	b.n	8006746 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_UART_IRQHandler+0x62e>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fea0 	bl	8007438 <UART_EndTransmit_IT>
    return;
 80066f8:	e026      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <HAL_UART_IRQHandler+0x64e>
 8006706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fbf0 	bl	8007ef8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006718:	e016      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <HAL_UART_IRQHandler+0x67c>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672a:	2b00      	cmp	r3, #0
 800672c:	da0c      	bge.n	8006748 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fbd8 	bl	8007ee4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006734:	e008      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
      return;
 8006736:	bf00      	nop
 8006738:	e006      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
    return;
 800673a:	bf00      	nop
 800673c:	e004      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
      return;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
      return;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <HAL_UART_IRQHandler+0x67c>
    return;
 8006746:	bf00      	nop
  }
}
 8006748:	37e8      	adds	r7, #232	@ 0xe8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop

08006750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006794:	b08c      	sub	sp, #48	@ 0x30
 8006796:	af00      	add	r7, sp, #0
 8006798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4baa      	ldr	r3, [pc, #680]	@ (8006a68 <UART_SetConfig+0x2d8>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a9f      	ldr	r2, [pc, #636]	@ (8006a6c <UART_SetConfig+0x2dc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067f8:	4313      	orrs	r3, r2
 80067fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006806:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006810:	430b      	orrs	r3, r1
 8006812:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f023 010f 	bic.w	r1, r3, #15
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a90      	ldr	r2, [pc, #576]	@ (8006a70 <UART_SetConfig+0x2e0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d125      	bne.n	8006880 <UART_SetConfig+0xf0>
 8006834:	4b8f      	ldr	r3, [pc, #572]	@ (8006a74 <UART_SetConfig+0x2e4>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	2b03      	cmp	r3, #3
 8006840:	d81a      	bhi.n	8006878 <UART_SetConfig+0xe8>
 8006842:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <UART_SetConfig+0xb8>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006859 	.word	0x08006859
 800684c:	08006869 	.word	0x08006869
 8006850:	08006861 	.word	0x08006861
 8006854:	08006871 	.word	0x08006871
 8006858:	2301      	movs	r3, #1
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685e:	e116      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006860:	2302      	movs	r3, #2
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006866:	e112      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006868:	2304      	movs	r3, #4
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686e:	e10e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006870:	2308      	movs	r3, #8
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006876:	e10a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006878:	2310      	movs	r3, #16
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687e:	e106      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7c      	ldr	r2, [pc, #496]	@ (8006a78 <UART_SetConfig+0x2e8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d138      	bne.n	80068fc <UART_SetConfig+0x16c>
 800688a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a74 <UART_SetConfig+0x2e4>)
 800688c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d82d      	bhi.n	80068f4 <UART_SetConfig+0x164>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x110>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068d5 	.word	0x080068d5
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	080068f5 	.word	0x080068f5
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	080068f5 	.word	0x080068f5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068f5 	.word	0x080068f5
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068ed 	.word	0x080068ed
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e0d8      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068dc:	2302      	movs	r3, #2
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e0d4      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068e4:	2304      	movs	r3, #4
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	e0d0      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068ec:	2308      	movs	r3, #8
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f2:	e0cc      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068f4:	2310      	movs	r3, #16
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fa:	e0c8      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a5e      	ldr	r2, [pc, #376]	@ (8006a7c <UART_SetConfig+0x2ec>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d125      	bne.n	8006952 <UART_SetConfig+0x1c2>
 8006906:	4b5b      	ldr	r3, [pc, #364]	@ (8006a74 <UART_SetConfig+0x2e4>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006910:	2b30      	cmp	r3, #48	@ 0x30
 8006912:	d016      	beq.n	8006942 <UART_SetConfig+0x1b2>
 8006914:	2b30      	cmp	r3, #48	@ 0x30
 8006916:	d818      	bhi.n	800694a <UART_SetConfig+0x1ba>
 8006918:	2b20      	cmp	r3, #32
 800691a:	d00a      	beq.n	8006932 <UART_SetConfig+0x1a2>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d814      	bhi.n	800694a <UART_SetConfig+0x1ba>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <UART_SetConfig+0x19a>
 8006924:	2b10      	cmp	r3, #16
 8006926:	d008      	beq.n	800693a <UART_SetConfig+0x1aa>
 8006928:	e00f      	b.n	800694a <UART_SetConfig+0x1ba>
 800692a:	2300      	movs	r3, #0
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006930:	e0ad      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006932:	2302      	movs	r3, #2
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006938:	e0a9      	b.n	8006a8e <UART_SetConfig+0x2fe>
 800693a:	2304      	movs	r3, #4
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006940:	e0a5      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006942:	2308      	movs	r3, #8
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006948:	e0a1      	b.n	8006a8e <UART_SetConfig+0x2fe>
 800694a:	2310      	movs	r3, #16
 800694c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006950:	e09d      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4a      	ldr	r2, [pc, #296]	@ (8006a80 <UART_SetConfig+0x2f0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d125      	bne.n	80069a8 <UART_SetConfig+0x218>
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <UART_SetConfig+0x2e4>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006966:	2bc0      	cmp	r3, #192	@ 0xc0
 8006968:	d016      	beq.n	8006998 <UART_SetConfig+0x208>
 800696a:	2bc0      	cmp	r3, #192	@ 0xc0
 800696c:	d818      	bhi.n	80069a0 <UART_SetConfig+0x210>
 800696e:	2b80      	cmp	r3, #128	@ 0x80
 8006970:	d00a      	beq.n	8006988 <UART_SetConfig+0x1f8>
 8006972:	2b80      	cmp	r3, #128	@ 0x80
 8006974:	d814      	bhi.n	80069a0 <UART_SetConfig+0x210>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <UART_SetConfig+0x1f0>
 800697a:	2b40      	cmp	r3, #64	@ 0x40
 800697c:	d008      	beq.n	8006990 <UART_SetConfig+0x200>
 800697e:	e00f      	b.n	80069a0 <UART_SetConfig+0x210>
 8006980:	2300      	movs	r3, #0
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e082      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698e:	e07e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006996:	e07a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e076      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a6:	e072      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a35      	ldr	r2, [pc, #212]	@ (8006a84 <UART_SetConfig+0x2f4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d12a      	bne.n	8006a08 <UART_SetConfig+0x278>
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <UART_SetConfig+0x2e4>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c0:	d01a      	beq.n	80069f8 <UART_SetConfig+0x268>
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c6:	d81b      	bhi.n	8006a00 <UART_SetConfig+0x270>
 80069c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069cc:	d00c      	beq.n	80069e8 <UART_SetConfig+0x258>
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d2:	d815      	bhi.n	8006a00 <UART_SetConfig+0x270>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <UART_SetConfig+0x250>
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069dc:	d008      	beq.n	80069f0 <UART_SetConfig+0x260>
 80069de:	e00f      	b.n	8006a00 <UART_SetConfig+0x270>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e052      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e04e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e04a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e046      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e042      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a17      	ldr	r2, [pc, #92]	@ (8006a6c <UART_SetConfig+0x2dc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d13a      	bne.n	8006a88 <UART_SetConfig+0x2f8>
 8006a12:	4b18      	ldr	r3, [pc, #96]	@ (8006a74 <UART_SetConfig+0x2e4>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a20:	d01a      	beq.n	8006a58 <UART_SetConfig+0x2c8>
 8006a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a26:	d81b      	bhi.n	8006a60 <UART_SetConfig+0x2d0>
 8006a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2c:	d00c      	beq.n	8006a48 <UART_SetConfig+0x2b8>
 8006a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a32:	d815      	bhi.n	8006a60 <UART_SetConfig+0x2d0>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <UART_SetConfig+0x2b0>
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a3c:	d008      	beq.n	8006a50 <UART_SetConfig+0x2c0>
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x2d0>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e022      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e01e      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e01a      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e016      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e012      	b.n	8006a8e <UART_SetConfig+0x2fe>
 8006a68:	cfff69f3 	.word	0xcfff69f3
 8006a6c:	40008000 	.word	0x40008000
 8006a70:	40013800 	.word	0x40013800
 8006a74:	40021000 	.word	0x40021000
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	40004800 	.word	0x40004800
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	40005000 	.word	0x40005000
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4aae      	ldr	r2, [pc, #696]	@ (8006d4c <UART_SetConfig+0x5bc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	f040 8097 	bne.w	8006bc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d823      	bhi.n	8006aea <UART_SetConfig+0x35a>
 8006aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <UART_SetConfig+0x318>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006aeb 	.word	0x08006aeb
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006aeb 	.word	0x08006aeb
 8006ab8:	08006adb 	.word	0x08006adb
 8006abc:	08006aeb 	.word	0x08006aeb
 8006ac0:	08006aeb 	.word	0x08006aeb
 8006ac4:	08006aeb 	.word	0x08006aeb
 8006ac8:	08006ae3 	.word	0x08006ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006acc:	f7fc ffd6 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ad2:	e010      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8006d50 <UART_SetConfig+0x5c0>)
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ad8:	e00d      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ada:	f7fc ff61 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8006ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ae0:	e009      	b.n	8006af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ae8:	e005      	b.n	8006af6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8130 	beq.w	8006d5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	4a94      	ldr	r2, [pc, #592]	@ (8006d54 <UART_SetConfig+0x5c4>)
 8006b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d305      	bcc.n	8006b2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b34:	e113      	b.n	8006d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	2200      	movs	r2, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
 8006b3c:	60fa      	str	r2, [r7, #12]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	4a84      	ldr	r2, [pc, #528]	@ (8006d54 <UART_SetConfig+0x5c4>)
 8006b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b58:	f7f9 fb68 	bl	800022c <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4610      	mov	r0, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	020b      	lsls	r3, r1, #8
 8006b6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b72:	0202      	lsls	r2, r0, #8
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	6849      	ldr	r1, [r1, #4]
 8006b78:	0849      	lsrs	r1, r1, #1
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4605      	mov	r5, r0
 8006b80:	eb12 0804 	adds.w	r8, r2, r4
 8006b84:	eb43 0905 	adc.w	r9, r3, r5
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	469a      	mov	sl, r3
 8006b90:	4693      	mov	fp, r2
 8006b92:	4652      	mov	r2, sl
 8006b94:	465b      	mov	r3, fp
 8006b96:	4640      	mov	r0, r8
 8006b98:	4649      	mov	r1, r9
 8006b9a:	f7f9 fb47 	bl	800022c <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bac:	d308      	bcc.n	8006bc0 <UART_SetConfig+0x430>
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb4:	d204      	bcs.n	8006bc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	60da      	str	r2, [r3, #12]
 8006bbe:	e0ce      	b.n	8006d5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bc6:	e0ca      	b.n	8006d5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd0:	d166      	bne.n	8006ca0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d827      	bhi.n	8006c2a <UART_SetConfig+0x49a>
 8006bda:	a201      	add	r2, pc, #4	@ (adr r2, 8006be0 <UART_SetConfig+0x450>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c1b 	.word	0x08006c1b
 8006bf4:	08006c2b 	.word	0x08006c2b
 8006bf8:	08006c2b 	.word	0x08006c2b
 8006bfc:	08006c2b 	.word	0x08006c2b
 8006c00:	08006c23 	.word	0x08006c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c04:	f7fc ff3a 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c0a:	e014      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fc ff4c 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c12:	e010      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c14:	4b4e      	ldr	r3, [pc, #312]	@ (8006d50 <UART_SetConfig+0x5c0>)
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c18:	e00d      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fc fec1 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8006c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c20:	e009      	b.n	8006c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c28:	e005      	b.n	8006c36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8090 	beq.w	8006d5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c42:	4a44      	ldr	r2, [pc, #272]	@ (8006d54 <UART_SetConfig+0x5c4>)
 8006c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c50:	005a      	lsls	r2, r3, #1
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	441a      	add	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d916      	bls.n	8006c98 <UART_SetConfig+0x508>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c70:	d212      	bcs.n	8006c98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f023 030f 	bic.w	r3, r3, #15
 8006c7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	8bfb      	ldrh	r3, [r7, #30]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	8bfa      	ldrh	r2, [r7, #30]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e062      	b.n	8006d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c9e:	e05e      	b.n	8006d5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d828      	bhi.n	8006cfa <UART_SetConfig+0x56a>
 8006ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <UART_SetConfig+0x520>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	08006cfb 	.word	0x08006cfb
 8006cc0:	08006ceb 	.word	0x08006ceb
 8006cc4:	08006cfb 	.word	0x08006cfb
 8006cc8:	08006cfb 	.word	0x08006cfb
 8006ccc:	08006cfb 	.word	0x08006cfb
 8006cd0:	08006cf3 	.word	0x08006cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f7fc fed2 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cda:	e014      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cdc:	f7fc fee4 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8006ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce2:	e010      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d50 <UART_SetConfig+0x5c0>)
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ce8:	e00d      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cea:	f7fc fe59 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8006cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf0:	e009      	b.n	8006d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf8:	e005      	b.n	8006d06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d04:	bf00      	nop
    }

    if (pclk != 0U)
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d028      	beq.n	8006d5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	4a10      	ldr	r2, [pc, #64]	@ (8006d54 <UART_SetConfig+0x5c4>)
 8006d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	441a      	add	r2, r3
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	2b0f      	cmp	r3, #15
 8006d34:	d910      	bls.n	8006d58 <UART_SetConfig+0x5c8>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d3c:	d20c      	bcs.n	8006d58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	e009      	b.n	8006d5e <UART_SetConfig+0x5ce>
 8006d4a:	bf00      	nop
 8006d4c:	40008000 	.word	0x40008000
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	08008bc8 	.word	0x08008bc8
      }
      else
      {
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2200      	movs	r2, #0
 8006d78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d7a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	@ 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01a      	beq.n	8006e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e86:	d10a      	bne.n	8006e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b098      	sub	sp, #96	@ 0x60
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006edc:	f7fa fbd2 	bl	8001684 <HAL_GetTick>
 8006ee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d12f      	bne.n	8006f50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f88e 	bl	8007020 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d022      	beq.n	8006f50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e6      	bne.n	8006f0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e063      	b.n	8007018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d149      	bne.n	8006ff2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f66:	2200      	movs	r2, #0
 8006f68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f857 	bl	8007020 <UART_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d03c      	beq.n	8006ff2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	623b      	str	r3, [r7, #32]
   return(result);
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e6      	bne.n	8006f78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fca:	61fa      	str	r2, [r7, #28]
 8006fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	e841 2300 	strex	r3, r2, [r1]
 8006fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e5      	bne.n	8006faa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e012      	b.n	8007018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3758      	adds	r7, #88	@ 0x58
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	4613      	mov	r3, r2
 800702e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007030:	e04f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d04b      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703a:	f7fa fb23 	bl	8001684 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	429a      	cmp	r2, r3
 8007048:	d302      	bcc.n	8007050 <UART_WaitOnFlagUntilTimeout+0x30>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e04e      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d037      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b80      	cmp	r3, #128	@ 0x80
 8007066:	d034      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	d031      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d110      	bne.n	800709e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2208      	movs	r2, #8
 8007082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f95b 	bl	8007340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2208      	movs	r2, #8
 800708e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e029      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ac:	d111      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f941 	bl	8007340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e00f      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d0a0      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b0a3      	sub	sp, #140	@ 0x8c
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712e:	d10e      	bne.n	800714e <UART_Start_Receive_IT+0x52>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d105      	bne.n	8007144 <UART_Start_Receive_IT+0x48>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800713e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007142:	e02d      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	22ff      	movs	r2, #255	@ 0xff
 8007148:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800714c:	e028      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10d      	bne.n	8007172 <UART_Start_Receive_IT+0x76>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <UART_Start_Receive_IT+0x6c>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	22ff      	movs	r2, #255	@ 0xff
 8007162:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007166:	e01b      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	227f      	movs	r2, #127	@ 0x7f
 800716c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007170:	e016      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800717a:	d10d      	bne.n	8007198 <UART_Start_Receive_IT+0x9c>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <UART_Start_Receive_IT+0x92>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	227f      	movs	r2, #127	@ 0x7f
 8007188:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800718c:	e008      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	223f      	movs	r2, #63	@ 0x3f
 8007192:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007196:	e003      	b.n	80071a0 <UART_Start_Receive_IT+0xa4>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2222      	movs	r2, #34	@ 0x22
 80071ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3308      	adds	r3, #8
 80071b6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80071c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80071d4:	673a      	str	r2, [r7, #112]	@ 0x70
 80071d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80071da:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80071e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e3      	bne.n	80071b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071f0:	d14f      	bne.n	8007292 <UART_Start_Receive_IT+0x196>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071f8:	88fa      	ldrh	r2, [r7, #6]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d349      	bcc.n	8007292 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007206:	d107      	bne.n	8007218 <UART_Start_Receive_IT+0x11c>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a47      	ldr	r2, [pc, #284]	@ (8007330 <UART_Start_Receive_IT+0x234>)
 8007214:	675a      	str	r2, [r3, #116]	@ 0x74
 8007216:	e002      	b.n	800721e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4a46      	ldr	r2, [pc, #280]	@ (8007334 <UART_Start_Receive_IT+0x238>)
 800721c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01a      	beq.n	800725c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800723a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800724a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800724e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800727c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800727e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800728a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <UART_Start_Receive_IT+0x160>
 8007290:	e046      	b.n	8007320 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	d107      	bne.n	80072ac <UART_Start_Receive_IT+0x1b0>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a24      	ldr	r2, [pc, #144]	@ (8007338 <UART_Start_Receive_IT+0x23c>)
 80072a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80072aa:	e002      	b.n	80072b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a23      	ldr	r2, [pc, #140]	@ (800733c <UART_Start_Receive_IT+0x240>)
 80072b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d019      	beq.n	80072ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c2:	e853 3f00 	ldrex	r3, [r3]
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80072ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e6      	bne.n	80072ba <UART_Start_Receive_IT+0x1be>
 80072ec:	e018      	b.n	8007320 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	613b      	str	r3, [r7, #16]
   return(result);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f043 0320 	orr.w	r3, r3, #32
 8007302:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800730c:	623b      	str	r3, [r7, #32]
 800730e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	6a3a      	ldr	r2, [r7, #32]
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	61bb      	str	r3, [r7, #24]
   return(result);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e6      	bne.n	80072ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	378c      	adds	r7, #140	@ 0x8c
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	08007b65 	.word	0x08007b65
 8007334:	08007801 	.word	0x08007801
 8007338:	08007649 	.word	0x08007649
 800733c:	08007491 	.word	0x08007491

08007340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b095      	sub	sp, #84	@ 0x54
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800735c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007366:	643b      	str	r3, [r7, #64]	@ 0x40
 8007368:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800736c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	61fb      	str	r3, [r7, #28]
   return(result);
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007390:	f023 0301 	bic.w	r3, r3, #1
 8007394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800739e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e3      	bne.n	800737a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d118      	bne.n	80073ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f023 0310 	bic.w	r3, r3, #16
 80073ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6979      	ldr	r1, [r7, #20]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	613b      	str	r3, [r7, #16]
   return(result);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e6      	bne.n	80073ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007400:	bf00      	nop
 8007402:	3754      	adds	r7, #84	@ 0x54
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff f99a 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	60bb      	str	r3, [r7, #8]
   return(result);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	613b      	str	r3, [r7, #16]
   return(result);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff f965 	bl	8006750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007486:	bf00      	nop
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b09c      	sub	sp, #112	@ 0x70
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800749e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074a8:	2b22      	cmp	r3, #34	@ 0x22
 80074aa:	f040 80be 	bne.w	800762a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80074bc:	b2d9      	uxtb	r1, r3
 80074be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	400a      	ands	r2, r1
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f040 80a1 	bne.w	800763a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800750c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007518:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800751c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e6      	bne.n	80074f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800753a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	667b      	str	r3, [r7, #100]	@ 0x64
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800754a:	647a      	str	r2, [r7, #68]	@ 0x44
 800754c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <UART_RxISR_8BIT+0x1b4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01f      	beq.n	80075bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d018      	beq.n	80075bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	623b      	str	r3, [r7, #32]
   return(result);
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800759e:	663b      	str	r3, [r7, #96]	@ 0x60
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d12e      	bne.n	8007622 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0310 	bic.w	r3, r3, #16
 80075de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075e8:	61fb      	str	r3, [r7, #28]
 80075ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	617b      	str	r3, [r7, #20]
   return(result);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	2b10      	cmp	r3, #16
 8007608:	d103      	bne.n	8007612 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2210      	movs	r2, #16
 8007610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff f8ac 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007620:	e00b      	b.n	800763a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7f9 fb6c 	bl	8000d00 <HAL_UART_RxCpltCallback>
}
 8007628:	e007      	b.n	800763a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0208 	orr.w	r2, r2, #8
 8007638:	619a      	str	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	3770      	adds	r7, #112	@ 0x70
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40008000 	.word	0x40008000

08007648 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b09c      	sub	sp, #112	@ 0x70
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007656:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007660:	2b22      	cmp	r3, #34	@ 0x22
 8007662:	f040 80be 	bne.w	80077e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007676:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800767a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800767e:	4013      	ands	r3, r2
 8007680:	b29a      	uxth	r2, r3
 8007682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007684:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768a:	1c9a      	adds	r2, r3, #2
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 80a1 	bne.w	80077f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80076d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e6      	bne.n	80076b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	f023 0301 	bic.w	r3, r3, #1
 80076f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007702:	643a      	str	r2, [r7, #64]	@ 0x40
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a33      	ldr	r2, [pc, #204]	@ (80077fc <UART_RxISR_16BIT+0x1b4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d01f      	beq.n	8007774 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d018      	beq.n	8007774 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007756:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007762:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e6      	bne.n	8007742 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d12e      	bne.n	80077da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6979      	ldr	r1, [r7, #20]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	613b      	str	r3, [r7, #16]
   return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e6      	bne.n	8007782 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d103      	bne.n	80077ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2210      	movs	r2, #16
 80077c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fe ffd0 	bl	8006778 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077d8:	e00b      	b.n	80077f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7f9 fa90 	bl	8000d00 <HAL_UART_RxCpltCallback>
}
 80077e0:	e007      	b.n	80077f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0208 	orr.w	r2, r2, #8
 80077f0:	619a      	str	r2, [r3, #24]
}
 80077f2:	bf00      	nop
 80077f4:	3770      	adds	r7, #112	@ 0x70
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40008000 	.word	0x40008000

08007800 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b0ac      	sub	sp, #176	@ 0xb0
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800780e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007836:	2b22      	cmp	r3, #34	@ 0x22
 8007838:	f040 8183 	bne.w	8007b42 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007842:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007846:	e126      	b.n	8007a96 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007852:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007856:	b2d9      	uxtb	r1, r3
 8007858:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007862:	400a      	ands	r2, r1
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800788e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b00      	cmp	r3, #0
 8007898:	d053      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800789a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80078a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2201      	movs	r2, #1
 80078b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c0:	f043 0201 	orr.w	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d011      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2202      	movs	r2, #2
 80078e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f0:	f043 0204 	orr.w	r2, r3, #4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d011      	beq.n	800792a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2204      	movs	r2, #4
 8007918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007920:	f043 0202 	orr.w	r2, r3, #2
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007930:	2b00      	cmp	r3, #0
 8007932:	d006      	beq.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fe ff15 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 80a3 	bne.w	8007a96 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800795e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007964:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007972:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007974:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007978:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e4      	bne.n	8007950 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80079b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80079b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80079bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e1      	bne.n	8007986 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a60      	ldr	r2, [pc, #384]	@ (8007b5c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d021      	beq.n	8007a24 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01a      	beq.n	8007a24 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a10:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a12:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e4      	bne.n	80079ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d130      	bne.n	8007a8e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e4      	bne.n	8007a32 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d103      	bne.n	8007a7e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2210      	movs	r2, #16
 8007a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fe fe76 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007a8c:	e00e      	b.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7f9 f936 	bl	8000d00 <HAL_UART_RxCpltCallback>
        break;
 8007a94:	e00a      	b.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a96:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d006      	beq.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f47f aece 	bne.w	8007848 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ab2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ab6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d049      	beq.n	8007b52 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ac4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d242      	bcs.n	8007b52 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e3      	bne.n	8007acc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a16      	ldr	r2, [pc, #88]	@ (8007b60 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007b08:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f043 0320 	orr.w	r3, r3, #32
 8007b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b2c:	61bb      	str	r3, [r7, #24]
 8007b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6979      	ldr	r1, [r7, #20]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e4      	bne.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b40:	e007      	b.n	8007b52 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0208 	orr.w	r2, r2, #8
 8007b50:	619a      	str	r2, [r3, #24]
}
 8007b52:	bf00      	nop
 8007b54:	37b0      	adds	r7, #176	@ 0xb0
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40008000 	.word	0x40008000
 8007b60:	08007491 	.word	0x08007491

08007b64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b0ae      	sub	sp, #184	@ 0xb8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b72:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9a:	2b22      	cmp	r3, #34	@ 0x22
 8007b9c:	f040 8187 	bne.w	8007eae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ba6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007baa:	e12a      	b.n	8007e02 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007bbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007bc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bfa:	f003 0307 	and.w	r3, r3, #7
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d053      	beq.n	8007caa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d011      	beq.n	8007c32 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d011      	beq.n	8007c62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c58:	f043 0204 	orr.w	r2, r3, #4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2204      	movs	r2, #4
 8007c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c88:	f043 0202 	orr.w	r2, r3, #2
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d006      	beq.n	8007caa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fe fd61 	bl	8006764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80a5 	bne.w	8007e02 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cde:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e2      	bne.n	8007cb8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007d1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e1      	bne.n	8007cf2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a60      	ldr	r2, [pc, #384]	@ (8007ec8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d021      	beq.n	8007d90 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01a      	beq.n	8007d90 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e4      	bne.n	8007d5a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d130      	bne.n	8007dfa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dae:	f023 0310 	bic.w	r3, r3, #16
 8007db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e4      	bne.n	8007d9e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0310 	and.w	r3, r3, #16
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d103      	bne.n	8007dea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2210      	movs	r2, #16
 8007de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fe fcc0 	bl	8006778 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007df8:	e00e      	b.n	8007e18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7f8 ff80 	bl	8000d00 <HAL_UART_RxCpltCallback>
        break;
 8007e00:	e00a      	b.n	8007e18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e02:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d006      	beq.n	8007e18 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f47f aeca 	bne.w	8007bac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e1e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d049      	beq.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e30:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d242      	bcs.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	623b      	str	r3, [r7, #32]
   return(result);
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007e5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e3      	bne.n	8007e38 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a16      	ldr	r2, [pc, #88]	@ (8007ecc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007e74:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f043 0320 	orr.w	r3, r3, #32
 8007e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e4      	bne.n	8007e76 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eac:	e007      	b.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0208 	orr.w	r2, r2, #8
 8007ebc:	619a      	str	r2, [r3, #24]
}
 8007ebe:	bf00      	nop
 8007ec0:	37b8      	adds	r7, #184	@ 0xb8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40008000 	.word	0x40008000
 8007ecc:	08007649 	.word	0x08007649

08007ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e027      	b.n	8007f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	@ 0x24
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e02d      	b.n	8007ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	@ 0x24
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f850 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800800e:	2302      	movs	r3, #2
 8008010:	e02d      	b.n	800806e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	@ 0x24
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f812 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008098:	e031      	b.n	80080fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800809a:	2308      	movs	r3, #8
 800809c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800809e:	2308      	movs	r3, #8
 80080a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	0e5b      	lsrs	r3, r3, #25
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	0f5b      	lsrs	r3, r3, #29
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	7b3a      	ldrb	r2, [r7, #12]
 80080c6:	4911      	ldr	r1, [pc, #68]	@ (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080c8:	5c8a      	ldrb	r2, [r1, r2]
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ce:	7b3a      	ldrb	r2, [r7, #12]
 80080d0:	490f      	ldr	r1, [pc, #60]	@ (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	7b7a      	ldrb	r2, [r7, #13]
 80080e4:	4909      	ldr	r1, [pc, #36]	@ (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080e6:	5c8a      	ldrb	r2, [r1, r2]
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080ec:	7b7a      	ldrb	r2, [r7, #13]
 80080ee:	4908      	ldr	r1, [pc, #32]	@ (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	08008be0 	.word	0x08008be0
 8008110:	08008be8 	.word	0x08008be8

08008114 <std>:
 8008114:	2300      	movs	r3, #0
 8008116:	b510      	push	{r4, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	e9c0 3300 	strd	r3, r3, [r0]
 800811e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008122:	6083      	str	r3, [r0, #8]
 8008124:	8181      	strh	r1, [r0, #12]
 8008126:	6643      	str	r3, [r0, #100]	@ 0x64
 8008128:	81c2      	strh	r2, [r0, #14]
 800812a:	6183      	str	r3, [r0, #24]
 800812c:	4619      	mov	r1, r3
 800812e:	2208      	movs	r2, #8
 8008130:	305c      	adds	r0, #92	@ 0x5c
 8008132:	f000 f9e7 	bl	8008504 <memset>
 8008136:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <std+0x58>)
 8008138:	6263      	str	r3, [r4, #36]	@ 0x24
 800813a:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <std+0x5c>)
 800813c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <std+0x60>)
 8008140:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008142:	4b0d      	ldr	r3, [pc, #52]	@ (8008178 <std+0x64>)
 8008144:	6323      	str	r3, [r4, #48]	@ 0x30
 8008146:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <std+0x68>)
 8008148:	6224      	str	r4, [r4, #32]
 800814a:	429c      	cmp	r4, r3
 800814c:	d006      	beq.n	800815c <std+0x48>
 800814e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008152:	4294      	cmp	r4, r2
 8008154:	d002      	beq.n	800815c <std+0x48>
 8008156:	33d0      	adds	r3, #208	@ 0xd0
 8008158:	429c      	cmp	r4, r3
 800815a:	d105      	bne.n	8008168 <std+0x54>
 800815c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008164:	f000 ba46 	b.w	80085f4 <__retarget_lock_init_recursive>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	bf00      	nop
 800816c:	08008355 	.word	0x08008355
 8008170:	08008377 	.word	0x08008377
 8008174:	080083af 	.word	0x080083af
 8008178:	080083d3 	.word	0x080083d3
 800817c:	2000032c 	.word	0x2000032c

08008180 <stdio_exit_handler>:
 8008180:	4a02      	ldr	r2, [pc, #8]	@ (800818c <stdio_exit_handler+0xc>)
 8008182:	4903      	ldr	r1, [pc, #12]	@ (8008190 <stdio_exit_handler+0x10>)
 8008184:	4803      	ldr	r0, [pc, #12]	@ (8008194 <stdio_exit_handler+0x14>)
 8008186:	f000 b869 	b.w	800825c <_fwalk_sglue>
 800818a:	bf00      	nop
 800818c:	2000000c 	.word	0x2000000c
 8008190:	080088f5 	.word	0x080088f5
 8008194:	2000001c 	.word	0x2000001c

08008198 <cleanup_stdio>:
 8008198:	6841      	ldr	r1, [r0, #4]
 800819a:	4b0c      	ldr	r3, [pc, #48]	@ (80081cc <cleanup_stdio+0x34>)
 800819c:	4299      	cmp	r1, r3
 800819e:	b510      	push	{r4, lr}
 80081a0:	4604      	mov	r4, r0
 80081a2:	d001      	beq.n	80081a8 <cleanup_stdio+0x10>
 80081a4:	f000 fba6 	bl	80088f4 <_fflush_r>
 80081a8:	68a1      	ldr	r1, [r4, #8]
 80081aa:	4b09      	ldr	r3, [pc, #36]	@ (80081d0 <cleanup_stdio+0x38>)
 80081ac:	4299      	cmp	r1, r3
 80081ae:	d002      	beq.n	80081b6 <cleanup_stdio+0x1e>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 fb9f 	bl	80088f4 <_fflush_r>
 80081b6:	68e1      	ldr	r1, [r4, #12]
 80081b8:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <cleanup_stdio+0x3c>)
 80081ba:	4299      	cmp	r1, r3
 80081bc:	d004      	beq.n	80081c8 <cleanup_stdio+0x30>
 80081be:	4620      	mov	r0, r4
 80081c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c4:	f000 bb96 	b.w	80088f4 <_fflush_r>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	bf00      	nop
 80081cc:	2000032c 	.word	0x2000032c
 80081d0:	20000394 	.word	0x20000394
 80081d4:	200003fc 	.word	0x200003fc

080081d8 <global_stdio_init.part.0>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <global_stdio_init.part.0+0x30>)
 80081dc:	4c0b      	ldr	r4, [pc, #44]	@ (800820c <global_stdio_init.part.0+0x34>)
 80081de:	4a0c      	ldr	r2, [pc, #48]	@ (8008210 <global_stdio_init.part.0+0x38>)
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	4620      	mov	r0, r4
 80081e4:	2200      	movs	r2, #0
 80081e6:	2104      	movs	r1, #4
 80081e8:	f7ff ff94 	bl	8008114 <std>
 80081ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081f0:	2201      	movs	r2, #1
 80081f2:	2109      	movs	r1, #9
 80081f4:	f7ff ff8e 	bl	8008114 <std>
 80081f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081fc:	2202      	movs	r2, #2
 80081fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008202:	2112      	movs	r1, #18
 8008204:	f7ff bf86 	b.w	8008114 <std>
 8008208:	20000464 	.word	0x20000464
 800820c:	2000032c 	.word	0x2000032c
 8008210:	08008181 	.word	0x08008181

08008214 <__sfp_lock_acquire>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__sfp_lock_acquire+0x8>)
 8008216:	f000 b9ee 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	2000046d 	.word	0x2000046d

08008220 <__sfp_lock_release>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__sfp_lock_release+0x8>)
 8008222:	f000 b9e9 	b.w	80085f8 <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	2000046d 	.word	0x2000046d

0800822c <__sinit>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4604      	mov	r4, r0
 8008230:	f7ff fff0 	bl	8008214 <__sfp_lock_acquire>
 8008234:	6a23      	ldr	r3, [r4, #32]
 8008236:	b11b      	cbz	r3, 8008240 <__sinit+0x14>
 8008238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823c:	f7ff bff0 	b.w	8008220 <__sfp_lock_release>
 8008240:	4b04      	ldr	r3, [pc, #16]	@ (8008254 <__sinit+0x28>)
 8008242:	6223      	str	r3, [r4, #32]
 8008244:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <__sinit+0x2c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f5      	bne.n	8008238 <__sinit+0xc>
 800824c:	f7ff ffc4 	bl	80081d8 <global_stdio_init.part.0>
 8008250:	e7f2      	b.n	8008238 <__sinit+0xc>
 8008252:	bf00      	nop
 8008254:	08008199 	.word	0x08008199
 8008258:	20000464 	.word	0x20000464

0800825c <_fwalk_sglue>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4607      	mov	r7, r0
 8008262:	4688      	mov	r8, r1
 8008264:	4614      	mov	r4, r2
 8008266:	2600      	movs	r6, #0
 8008268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800826c:	f1b9 0901 	subs.w	r9, r9, #1
 8008270:	d505      	bpl.n	800827e <_fwalk_sglue+0x22>
 8008272:	6824      	ldr	r4, [r4, #0]
 8008274:	2c00      	cmp	r4, #0
 8008276:	d1f7      	bne.n	8008268 <_fwalk_sglue+0xc>
 8008278:	4630      	mov	r0, r6
 800827a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d907      	bls.n	8008294 <_fwalk_sglue+0x38>
 8008284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008288:	3301      	adds	r3, #1
 800828a:	d003      	beq.n	8008294 <_fwalk_sglue+0x38>
 800828c:	4629      	mov	r1, r5
 800828e:	4638      	mov	r0, r7
 8008290:	47c0      	blx	r8
 8008292:	4306      	orrs	r6, r0
 8008294:	3568      	adds	r5, #104	@ 0x68
 8008296:	e7e9      	b.n	800826c <_fwalk_sglue+0x10>

08008298 <_puts_r>:
 8008298:	6a03      	ldr	r3, [r0, #32]
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	6884      	ldr	r4, [r0, #8]
 800829e:	4605      	mov	r5, r0
 80082a0:	460e      	mov	r6, r1
 80082a2:	b90b      	cbnz	r3, 80082a8 <_puts_r+0x10>
 80082a4:	f7ff ffc2 	bl	800822c <__sinit>
 80082a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082aa:	07db      	lsls	r3, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_puts_r+0x22>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	0598      	lsls	r0, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_puts_r+0x22>
 80082b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b6:	f000 f99e 	bl	80085f6 <__retarget_lock_acquire_recursive>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0719      	lsls	r1, r3, #28
 80082be:	d502      	bpl.n	80082c6 <_puts_r+0x2e>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d135      	bne.n	8008332 <_puts_r+0x9a>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 f8c5 	bl	8008458 <__swsetup_r>
 80082ce:	b380      	cbz	r0, 8008332 <_puts_r+0x9a>
 80082d0:	f04f 35ff 	mov.w	r5, #4294967295
 80082d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082d6:	07da      	lsls	r2, r3, #31
 80082d8:	d405      	bmi.n	80082e6 <_puts_r+0x4e>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	059b      	lsls	r3, r3, #22
 80082de:	d402      	bmi.n	80082e6 <_puts_r+0x4e>
 80082e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082e2:	f000 f989 	bl	80085f8 <__retarget_lock_release_recursive>
 80082e6:	4628      	mov	r0, r5
 80082e8:	bd70      	pop	{r4, r5, r6, pc}
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da04      	bge.n	80082f8 <_puts_r+0x60>
 80082ee:	69a2      	ldr	r2, [r4, #24]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	dc17      	bgt.n	8008324 <_puts_r+0x8c>
 80082f4:	290a      	cmp	r1, #10
 80082f6:	d015      	beq.n	8008324 <_puts_r+0x8c>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	7019      	strb	r1, [r3, #0]
 8008300:	68a3      	ldr	r3, [r4, #8]
 8008302:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008306:	3b01      	subs	r3, #1
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	2900      	cmp	r1, #0
 800830c:	d1ed      	bne.n	80082ea <_puts_r+0x52>
 800830e:	2b00      	cmp	r3, #0
 8008310:	da11      	bge.n	8008336 <_puts_r+0x9e>
 8008312:	4622      	mov	r2, r4
 8008314:	210a      	movs	r1, #10
 8008316:	4628      	mov	r0, r5
 8008318:	f000 f85f 	bl	80083da <__swbuf_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d0d7      	beq.n	80082d0 <_puts_r+0x38>
 8008320:	250a      	movs	r5, #10
 8008322:	e7d7      	b.n	80082d4 <_puts_r+0x3c>
 8008324:	4622      	mov	r2, r4
 8008326:	4628      	mov	r0, r5
 8008328:	f000 f857 	bl	80083da <__swbuf_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d1e7      	bne.n	8008300 <_puts_r+0x68>
 8008330:	e7ce      	b.n	80082d0 <_puts_r+0x38>
 8008332:	3e01      	subs	r6, #1
 8008334:	e7e4      	b.n	8008300 <_puts_r+0x68>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	6022      	str	r2, [r4, #0]
 800833c:	220a      	movs	r2, #10
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e7ee      	b.n	8008320 <_puts_r+0x88>
	...

08008344 <puts>:
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <puts+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7ff bfa5 	b.w	8008298 <_puts_r>
 800834e:	bf00      	nop
 8008350:	20000018 	.word	0x20000018

08008354 <__sread>:
 8008354:	b510      	push	{r4, lr}
 8008356:	460c      	mov	r4, r1
 8008358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835c:	f000 f8fc 	bl	8008558 <_read_r>
 8008360:	2800      	cmp	r0, #0
 8008362:	bfab      	itete	ge
 8008364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008366:	89a3      	ldrhlt	r3, [r4, #12]
 8008368:	181b      	addge	r3, r3, r0
 800836a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800836e:	bfac      	ite	ge
 8008370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008372:	81a3      	strhlt	r3, [r4, #12]
 8008374:	bd10      	pop	{r4, pc}

08008376 <__swrite>:
 8008376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837a:	461f      	mov	r7, r3
 800837c:	898b      	ldrh	r3, [r1, #12]
 800837e:	05db      	lsls	r3, r3, #23
 8008380:	4605      	mov	r5, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4616      	mov	r6, r2
 8008386:	d505      	bpl.n	8008394 <__swrite+0x1e>
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	2302      	movs	r3, #2
 800838e:	2200      	movs	r2, #0
 8008390:	f000 f8d0 	bl	8008534 <_lseek_r>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	f000 b8e7 	b.w	800857c <_write_r>

080083ae <__sseek>:
 80083ae:	b510      	push	{r4, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b6:	f000 f8bd 	bl	8008534 <_lseek_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	bf15      	itete	ne
 80083c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083ca:	81a3      	strheq	r3, [r4, #12]
 80083cc:	bf18      	it	ne
 80083ce:	81a3      	strhne	r3, [r4, #12]
 80083d0:	bd10      	pop	{r4, pc}

080083d2 <__sclose>:
 80083d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d6:	f000 b89d 	b.w	8008514 <_close_r>

080083da <__swbuf_r>:
 80083da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083dc:	460e      	mov	r6, r1
 80083de:	4614      	mov	r4, r2
 80083e0:	4605      	mov	r5, r0
 80083e2:	b118      	cbz	r0, 80083ec <__swbuf_r+0x12>
 80083e4:	6a03      	ldr	r3, [r0, #32]
 80083e6:	b90b      	cbnz	r3, 80083ec <__swbuf_r+0x12>
 80083e8:	f7ff ff20 	bl	800822c <__sinit>
 80083ec:	69a3      	ldr	r3, [r4, #24]
 80083ee:	60a3      	str	r3, [r4, #8]
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	071a      	lsls	r2, r3, #28
 80083f4:	d501      	bpl.n	80083fa <__swbuf_r+0x20>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	b943      	cbnz	r3, 800840c <__swbuf_r+0x32>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f82b 	bl	8008458 <__swsetup_r>
 8008402:	b118      	cbz	r0, 800840c <__swbuf_r+0x32>
 8008404:	f04f 37ff 	mov.w	r7, #4294967295
 8008408:	4638      	mov	r0, r7
 800840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	6922      	ldr	r2, [r4, #16]
 8008410:	1a98      	subs	r0, r3, r2
 8008412:	6963      	ldr	r3, [r4, #20]
 8008414:	b2f6      	uxtb	r6, r6
 8008416:	4283      	cmp	r3, r0
 8008418:	4637      	mov	r7, r6
 800841a:	dc05      	bgt.n	8008428 <__swbuf_r+0x4e>
 800841c:	4621      	mov	r1, r4
 800841e:	4628      	mov	r0, r5
 8008420:	f000 fa68 	bl	80088f4 <_fflush_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	d1ed      	bne.n	8008404 <__swbuf_r+0x2a>
 8008428:	68a3      	ldr	r3, [r4, #8]
 800842a:	3b01      	subs	r3, #1
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	701e      	strb	r6, [r3, #0]
 8008436:	6962      	ldr	r2, [r4, #20]
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	429a      	cmp	r2, r3
 800843c:	d004      	beq.n	8008448 <__swbuf_r+0x6e>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	07db      	lsls	r3, r3, #31
 8008442:	d5e1      	bpl.n	8008408 <__swbuf_r+0x2e>
 8008444:	2e0a      	cmp	r6, #10
 8008446:	d1df      	bne.n	8008408 <__swbuf_r+0x2e>
 8008448:	4621      	mov	r1, r4
 800844a:	4628      	mov	r0, r5
 800844c:	f000 fa52 	bl	80088f4 <_fflush_r>
 8008450:	2800      	cmp	r0, #0
 8008452:	d0d9      	beq.n	8008408 <__swbuf_r+0x2e>
 8008454:	e7d6      	b.n	8008404 <__swbuf_r+0x2a>
	...

08008458 <__swsetup_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <__swsetup_r+0xa8>)
 800845c:	4605      	mov	r5, r0
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	460c      	mov	r4, r1
 8008462:	b118      	cbz	r0, 800846c <__swsetup_r+0x14>
 8008464:	6a03      	ldr	r3, [r0, #32]
 8008466:	b90b      	cbnz	r3, 800846c <__swsetup_r+0x14>
 8008468:	f7ff fee0 	bl	800822c <__sinit>
 800846c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008470:	0719      	lsls	r1, r3, #28
 8008472:	d422      	bmi.n	80084ba <__swsetup_r+0x62>
 8008474:	06da      	lsls	r2, r3, #27
 8008476:	d407      	bmi.n	8008488 <__swsetup_r+0x30>
 8008478:	2209      	movs	r2, #9
 800847a:	602a      	str	r2, [r5, #0]
 800847c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	e033      	b.n	80084f0 <__swsetup_r+0x98>
 8008488:	0758      	lsls	r0, r3, #29
 800848a:	d512      	bpl.n	80084b2 <__swsetup_r+0x5a>
 800848c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800848e:	b141      	cbz	r1, 80084a2 <__swsetup_r+0x4a>
 8008490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008494:	4299      	cmp	r1, r3
 8008496:	d002      	beq.n	800849e <__swsetup_r+0x46>
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f8af 	bl	80085fc <_free_r>
 800849e:	2300      	movs	r3, #0
 80084a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6063      	str	r3, [r4, #4]
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	f043 0308 	orr.w	r3, r3, #8
 80084b8:	81a3      	strh	r3, [r4, #12]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	b94b      	cbnz	r3, 80084d2 <__swsetup_r+0x7a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c8:	d003      	beq.n	80084d2 <__swsetup_r+0x7a>
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 fa5f 	bl	8008990 <__smakebuf_r>
 80084d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d6:	f013 0201 	ands.w	r2, r3, #1
 80084da:	d00a      	beq.n	80084f2 <__swsetup_r+0x9a>
 80084dc:	2200      	movs	r2, #0
 80084de:	60a2      	str	r2, [r4, #8]
 80084e0:	6962      	ldr	r2, [r4, #20]
 80084e2:	4252      	negs	r2, r2
 80084e4:	61a2      	str	r2, [r4, #24]
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	b942      	cbnz	r2, 80084fc <__swsetup_r+0xa4>
 80084ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084ee:	d1c5      	bne.n	800847c <__swsetup_r+0x24>
 80084f0:	bd38      	pop	{r3, r4, r5, pc}
 80084f2:	0799      	lsls	r1, r3, #30
 80084f4:	bf58      	it	pl
 80084f6:	6962      	ldrpl	r2, [r4, #20]
 80084f8:	60a2      	str	r2, [r4, #8]
 80084fa:	e7f4      	b.n	80084e6 <__swsetup_r+0x8e>
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7f7      	b.n	80084f0 <__swsetup_r+0x98>
 8008500:	20000018 	.word	0x20000018

08008504 <memset>:
 8008504:	4402      	add	r2, r0
 8008506:	4603      	mov	r3, r0
 8008508:	4293      	cmp	r3, r2
 800850a:	d100      	bne.n	800850e <memset+0xa>
 800850c:	4770      	bx	lr
 800850e:	f803 1b01 	strb.w	r1, [r3], #1
 8008512:	e7f9      	b.n	8008508 <memset+0x4>

08008514 <_close_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d06      	ldr	r5, [pc, #24]	@ (8008530 <_close_r+0x1c>)
 8008518:	2300      	movs	r3, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	602b      	str	r3, [r5, #0]
 8008520:	f7f8 fd31 	bl	8000f86 <_close>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_close_r+0x1a>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_close_r+0x1a>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20000468 	.word	0x20000468

08008534 <_lseek_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	@ (8008554 <_lseek_r+0x20>)
 8008538:	4604      	mov	r4, r0
 800853a:	4608      	mov	r0, r1
 800853c:	4611      	mov	r1, r2
 800853e:	2200      	movs	r2, #0
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7f8 fd46 	bl	8000fd4 <_lseek>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_lseek_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_lseek_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000468 	.word	0x20000468

08008558 <_read_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4d07      	ldr	r5, [pc, #28]	@ (8008578 <_read_r+0x20>)
 800855c:	4604      	mov	r4, r0
 800855e:	4608      	mov	r0, r1
 8008560:	4611      	mov	r1, r2
 8008562:	2200      	movs	r2, #0
 8008564:	602a      	str	r2, [r5, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7f8 fcd4 	bl	8000f14 <_read>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_read_r+0x1e>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_read_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20000468 	.word	0x20000468

0800857c <_write_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	@ (800859c <_write_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7f8 fcdf 	bl	8000f4e <_write>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_write_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_write_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000468 	.word	0x20000468

080085a0 <__errno>:
 80085a0:	4b01      	ldr	r3, [pc, #4]	@ (80085a8 <__errno+0x8>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20000018 	.word	0x20000018

080085ac <__libc_init_array>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4d0d      	ldr	r5, [pc, #52]	@ (80085e4 <__libc_init_array+0x38>)
 80085b0:	4c0d      	ldr	r4, [pc, #52]	@ (80085e8 <__libc_init_array+0x3c>)
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	2600      	movs	r6, #0
 80085b8:	42a6      	cmp	r6, r4
 80085ba:	d109      	bne.n	80085d0 <__libc_init_array+0x24>
 80085bc:	4d0b      	ldr	r5, [pc, #44]	@ (80085ec <__libc_init_array+0x40>)
 80085be:	4c0c      	ldr	r4, [pc, #48]	@ (80085f0 <__libc_init_array+0x44>)
 80085c0:	f000 fa54 	bl	8008a6c <_init>
 80085c4:	1b64      	subs	r4, r4, r5
 80085c6:	10a4      	asrs	r4, r4, #2
 80085c8:	2600      	movs	r6, #0
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	d105      	bne.n	80085da <__libc_init_array+0x2e>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d4:	4798      	blx	r3
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7ee      	b.n	80085b8 <__libc_init_array+0xc>
 80085da:	f855 3b04 	ldr.w	r3, [r5], #4
 80085de:	4798      	blx	r3
 80085e0:	3601      	adds	r6, #1
 80085e2:	e7f2      	b.n	80085ca <__libc_init_array+0x1e>
 80085e4:	08008bf8 	.word	0x08008bf8
 80085e8:	08008bf8 	.word	0x08008bf8
 80085ec:	08008bf8 	.word	0x08008bf8
 80085f0:	08008bfc 	.word	0x08008bfc

080085f4 <__retarget_lock_init_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <__retarget_lock_acquire_recursive>:
 80085f6:	4770      	bx	lr

080085f8 <__retarget_lock_release_recursive>:
 80085f8:	4770      	bx	lr
	...

080085fc <_free_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4605      	mov	r5, r0
 8008600:	2900      	cmp	r1, #0
 8008602:	d041      	beq.n	8008688 <_free_r+0x8c>
 8008604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008608:	1f0c      	subs	r4, r1, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	bfb8      	it	lt
 800860e:	18e4      	addlt	r4, r4, r3
 8008610:	f000 f8e0 	bl	80087d4 <__malloc_lock>
 8008614:	4a1d      	ldr	r2, [pc, #116]	@ (800868c <_free_r+0x90>)
 8008616:	6813      	ldr	r3, [r2, #0]
 8008618:	b933      	cbnz	r3, 8008628 <_free_r+0x2c>
 800861a:	6063      	str	r3, [r4, #4]
 800861c:	6014      	str	r4, [r2, #0]
 800861e:	4628      	mov	r0, r5
 8008620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008624:	f000 b8dc 	b.w	80087e0 <__malloc_unlock>
 8008628:	42a3      	cmp	r3, r4
 800862a:	d908      	bls.n	800863e <_free_r+0x42>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	1821      	adds	r1, r4, r0
 8008630:	428b      	cmp	r3, r1
 8008632:	bf01      	itttt	eq
 8008634:	6819      	ldreq	r1, [r3, #0]
 8008636:	685b      	ldreq	r3, [r3, #4]
 8008638:	1809      	addeq	r1, r1, r0
 800863a:	6021      	streq	r1, [r4, #0]
 800863c:	e7ed      	b.n	800861a <_free_r+0x1e>
 800863e:	461a      	mov	r2, r3
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b10b      	cbz	r3, 8008648 <_free_r+0x4c>
 8008644:	42a3      	cmp	r3, r4
 8008646:	d9fa      	bls.n	800863e <_free_r+0x42>
 8008648:	6811      	ldr	r1, [r2, #0]
 800864a:	1850      	adds	r0, r2, r1
 800864c:	42a0      	cmp	r0, r4
 800864e:	d10b      	bne.n	8008668 <_free_r+0x6c>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	4401      	add	r1, r0
 8008654:	1850      	adds	r0, r2, r1
 8008656:	4283      	cmp	r3, r0
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	d1e0      	bne.n	800861e <_free_r+0x22>
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	6053      	str	r3, [r2, #4]
 8008662:	4408      	add	r0, r1
 8008664:	6010      	str	r0, [r2, #0]
 8008666:	e7da      	b.n	800861e <_free_r+0x22>
 8008668:	d902      	bls.n	8008670 <_free_r+0x74>
 800866a:	230c      	movs	r3, #12
 800866c:	602b      	str	r3, [r5, #0]
 800866e:	e7d6      	b.n	800861e <_free_r+0x22>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	1821      	adds	r1, r4, r0
 8008674:	428b      	cmp	r3, r1
 8008676:	bf04      	itt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	bf04      	itt	eq
 8008680:	1809      	addeq	r1, r1, r0
 8008682:	6021      	streq	r1, [r4, #0]
 8008684:	6054      	str	r4, [r2, #4]
 8008686:	e7ca      	b.n	800861e <_free_r+0x22>
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	20000474 	.word	0x20000474

08008690 <sbrk_aligned>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4e0f      	ldr	r6, [pc, #60]	@ (80086d0 <sbrk_aligned+0x40>)
 8008694:	460c      	mov	r4, r1
 8008696:	6831      	ldr	r1, [r6, #0]
 8008698:	4605      	mov	r5, r0
 800869a:	b911      	cbnz	r1, 80086a2 <sbrk_aligned+0x12>
 800869c:	f000 f9d6 	bl	8008a4c <_sbrk_r>
 80086a0:	6030      	str	r0, [r6, #0]
 80086a2:	4621      	mov	r1, r4
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f9d1 	bl	8008a4c <_sbrk_r>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d103      	bne.n	80086b6 <sbrk_aligned+0x26>
 80086ae:	f04f 34ff 	mov.w	r4, #4294967295
 80086b2:	4620      	mov	r0, r4
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
 80086b6:	1cc4      	adds	r4, r0, #3
 80086b8:	f024 0403 	bic.w	r4, r4, #3
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d0f8      	beq.n	80086b2 <sbrk_aligned+0x22>
 80086c0:	1a21      	subs	r1, r4, r0
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f9c2 	bl	8008a4c <_sbrk_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1f2      	bne.n	80086b2 <sbrk_aligned+0x22>
 80086cc:	e7ef      	b.n	80086ae <sbrk_aligned+0x1e>
 80086ce:	bf00      	nop
 80086d0:	20000470 	.word	0x20000470

080086d4 <_malloc_r>:
 80086d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	1ccd      	adds	r5, r1, #3
 80086da:	f025 0503 	bic.w	r5, r5, #3
 80086de:	3508      	adds	r5, #8
 80086e0:	2d0c      	cmp	r5, #12
 80086e2:	bf38      	it	cc
 80086e4:	250c      	movcc	r5, #12
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	4606      	mov	r6, r0
 80086ea:	db01      	blt.n	80086f0 <_malloc_r+0x1c>
 80086ec:	42a9      	cmp	r1, r5
 80086ee:	d904      	bls.n	80086fa <_malloc_r+0x26>
 80086f0:	230c      	movs	r3, #12
 80086f2:	6033      	str	r3, [r6, #0]
 80086f4:	2000      	movs	r0, #0
 80086f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d0 <_malloc_r+0xfc>
 80086fe:	f000 f869 	bl	80087d4 <__malloc_lock>
 8008702:	f8d8 3000 	ldr.w	r3, [r8]
 8008706:	461c      	mov	r4, r3
 8008708:	bb44      	cbnz	r4, 800875c <_malloc_r+0x88>
 800870a:	4629      	mov	r1, r5
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff ffbf 	bl	8008690 <sbrk_aligned>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	4604      	mov	r4, r0
 8008716:	d158      	bne.n	80087ca <_malloc_r+0xf6>
 8008718:	f8d8 4000 	ldr.w	r4, [r8]
 800871c:	4627      	mov	r7, r4
 800871e:	2f00      	cmp	r7, #0
 8008720:	d143      	bne.n	80087aa <_malloc_r+0xd6>
 8008722:	2c00      	cmp	r4, #0
 8008724:	d04b      	beq.n	80087be <_malloc_r+0xea>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	4639      	mov	r1, r7
 800872a:	4630      	mov	r0, r6
 800872c:	eb04 0903 	add.w	r9, r4, r3
 8008730:	f000 f98c 	bl	8008a4c <_sbrk_r>
 8008734:	4581      	cmp	r9, r0
 8008736:	d142      	bne.n	80087be <_malloc_r+0xea>
 8008738:	6821      	ldr	r1, [r4, #0]
 800873a:	1a6d      	subs	r5, r5, r1
 800873c:	4629      	mov	r1, r5
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff ffa6 	bl	8008690 <sbrk_aligned>
 8008744:	3001      	adds	r0, #1
 8008746:	d03a      	beq.n	80087be <_malloc_r+0xea>
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	442b      	add	r3, r5
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	f8d8 3000 	ldr.w	r3, [r8]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	bb62      	cbnz	r2, 80087b0 <_malloc_r+0xdc>
 8008756:	f8c8 7000 	str.w	r7, [r8]
 800875a:	e00f      	b.n	800877c <_malloc_r+0xa8>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	1b52      	subs	r2, r2, r5
 8008760:	d420      	bmi.n	80087a4 <_malloc_r+0xd0>
 8008762:	2a0b      	cmp	r2, #11
 8008764:	d917      	bls.n	8008796 <_malloc_r+0xc2>
 8008766:	1961      	adds	r1, r4, r5
 8008768:	42a3      	cmp	r3, r4
 800876a:	6025      	str	r5, [r4, #0]
 800876c:	bf18      	it	ne
 800876e:	6059      	strne	r1, [r3, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	bf08      	it	eq
 8008774:	f8c8 1000 	streq.w	r1, [r8]
 8008778:	5162      	str	r2, [r4, r5]
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f82f 	bl	80087e0 <__malloc_unlock>
 8008782:	f104 000b 	add.w	r0, r4, #11
 8008786:	1d23      	adds	r3, r4, #4
 8008788:	f020 0007 	bic.w	r0, r0, #7
 800878c:	1ac2      	subs	r2, r0, r3
 800878e:	bf1c      	itt	ne
 8008790:	1a1b      	subne	r3, r3, r0
 8008792:	50a3      	strne	r3, [r4, r2]
 8008794:	e7af      	b.n	80086f6 <_malloc_r+0x22>
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	42a3      	cmp	r3, r4
 800879a:	bf0c      	ite	eq
 800879c:	f8c8 2000 	streq.w	r2, [r8]
 80087a0:	605a      	strne	r2, [r3, #4]
 80087a2:	e7eb      	b.n	800877c <_malloc_r+0xa8>
 80087a4:	4623      	mov	r3, r4
 80087a6:	6864      	ldr	r4, [r4, #4]
 80087a8:	e7ae      	b.n	8008708 <_malloc_r+0x34>
 80087aa:	463c      	mov	r4, r7
 80087ac:	687f      	ldr	r7, [r7, #4]
 80087ae:	e7b6      	b.n	800871e <_malloc_r+0x4a>
 80087b0:	461a      	mov	r2, r3
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d1fb      	bne.n	80087b0 <_malloc_r+0xdc>
 80087b8:	2300      	movs	r3, #0
 80087ba:	6053      	str	r3, [r2, #4]
 80087bc:	e7de      	b.n	800877c <_malloc_r+0xa8>
 80087be:	230c      	movs	r3, #12
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f80c 	bl	80087e0 <__malloc_unlock>
 80087c8:	e794      	b.n	80086f4 <_malloc_r+0x20>
 80087ca:	6005      	str	r5, [r0, #0]
 80087cc:	e7d6      	b.n	800877c <_malloc_r+0xa8>
 80087ce:	bf00      	nop
 80087d0:	20000474 	.word	0x20000474

080087d4 <__malloc_lock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	@ (80087dc <__malloc_lock+0x8>)
 80087d6:	f7ff bf0e 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 80087da:	bf00      	nop
 80087dc:	2000046c 	.word	0x2000046c

080087e0 <__malloc_unlock>:
 80087e0:	4801      	ldr	r0, [pc, #4]	@ (80087e8 <__malloc_unlock+0x8>)
 80087e2:	f7ff bf09 	b.w	80085f8 <__retarget_lock_release_recursive>
 80087e6:	bf00      	nop
 80087e8:	2000046c 	.word	0x2000046c

080087ec <__sflush_r>:
 80087ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	0716      	lsls	r6, r2, #28
 80087f6:	4605      	mov	r5, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	d454      	bmi.n	80088a6 <__sflush_r+0xba>
 80087fc:	684b      	ldr	r3, [r1, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dc02      	bgt.n	8008808 <__sflush_r+0x1c>
 8008802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	dd48      	ble.n	800889a <__sflush_r+0xae>
 8008808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800880a:	2e00      	cmp	r6, #0
 800880c:	d045      	beq.n	800889a <__sflush_r+0xae>
 800880e:	2300      	movs	r3, #0
 8008810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008814:	682f      	ldr	r7, [r5, #0]
 8008816:	6a21      	ldr	r1, [r4, #32]
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	d030      	beq.n	800887e <__sflush_r+0x92>
 800881c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0759      	lsls	r1, r3, #29
 8008822:	d505      	bpl.n	8008830 <__sflush_r+0x44>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800882a:	b10b      	cbz	r3, 8008830 <__sflush_r+0x44>
 800882c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	2300      	movs	r3, #0
 8008832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	4628      	mov	r0, r5
 8008838:	47b0      	blx	r6
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	d106      	bne.n	800884e <__sflush_r+0x62>
 8008840:	6829      	ldr	r1, [r5, #0]
 8008842:	291d      	cmp	r1, #29
 8008844:	d82b      	bhi.n	800889e <__sflush_r+0xb2>
 8008846:	4a2a      	ldr	r2, [pc, #168]	@ (80088f0 <__sflush_r+0x104>)
 8008848:	410a      	asrs	r2, r1
 800884a:	07d6      	lsls	r6, r2, #31
 800884c:	d427      	bmi.n	800889e <__sflush_r+0xb2>
 800884e:	2200      	movs	r2, #0
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	04d9      	lsls	r1, r3, #19
 8008854:	6922      	ldr	r2, [r4, #16]
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	d504      	bpl.n	8008864 <__sflush_r+0x78>
 800885a:	1c42      	adds	r2, r0, #1
 800885c:	d101      	bne.n	8008862 <__sflush_r+0x76>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	b903      	cbnz	r3, 8008864 <__sflush_r+0x78>
 8008862:	6560      	str	r0, [r4, #84]	@ 0x54
 8008864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008866:	602f      	str	r7, [r5, #0]
 8008868:	b1b9      	cbz	r1, 800889a <__sflush_r+0xae>
 800886a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__sflush_r+0x8c>
 8008872:	4628      	mov	r0, r5
 8008874:	f7ff fec2 	bl	80085fc <_free_r>
 8008878:	2300      	movs	r3, #0
 800887a:	6363      	str	r3, [r4, #52]	@ 0x34
 800887c:	e00d      	b.n	800889a <__sflush_r+0xae>
 800887e:	2301      	movs	r3, #1
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	4602      	mov	r2, r0
 8008886:	1c50      	adds	r0, r2, #1
 8008888:	d1c9      	bne.n	800881e <__sflush_r+0x32>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0c6      	beq.n	800881e <__sflush_r+0x32>
 8008890:	2b1d      	cmp	r3, #29
 8008892:	d001      	beq.n	8008898 <__sflush_r+0xac>
 8008894:	2b16      	cmp	r3, #22
 8008896:	d11e      	bne.n	80088d6 <__sflush_r+0xea>
 8008898:	602f      	str	r7, [r5, #0]
 800889a:	2000      	movs	r0, #0
 800889c:	e022      	b.n	80088e4 <__sflush_r+0xf8>
 800889e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a2:	b21b      	sxth	r3, r3
 80088a4:	e01b      	b.n	80088de <__sflush_r+0xf2>
 80088a6:	690f      	ldr	r7, [r1, #16]
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	d0f6      	beq.n	800889a <__sflush_r+0xae>
 80088ac:	0793      	lsls	r3, r2, #30
 80088ae:	680e      	ldr	r6, [r1, #0]
 80088b0:	bf08      	it	eq
 80088b2:	694b      	ldreq	r3, [r1, #20]
 80088b4:	600f      	str	r7, [r1, #0]
 80088b6:	bf18      	it	ne
 80088b8:	2300      	movne	r3, #0
 80088ba:	eba6 0807 	sub.w	r8, r6, r7
 80088be:	608b      	str	r3, [r1, #8]
 80088c0:	f1b8 0f00 	cmp.w	r8, #0
 80088c4:	dde9      	ble.n	800889a <__sflush_r+0xae>
 80088c6:	6a21      	ldr	r1, [r4, #32]
 80088c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ca:	4643      	mov	r3, r8
 80088cc:	463a      	mov	r2, r7
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b0      	blx	r6
 80088d2:	2800      	cmp	r0, #0
 80088d4:	dc08      	bgt.n	80088e8 <__sflush_r+0xfc>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	4407      	add	r7, r0
 80088ea:	eba8 0800 	sub.w	r8, r8, r0
 80088ee:	e7e7      	b.n	80088c0 <__sflush_r+0xd4>
 80088f0:	dfbffffe 	.word	0xdfbffffe

080088f4 <_fflush_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b913      	cbnz	r3, 8008904 <_fflush_r+0x10>
 80088fe:	2500      	movs	r5, #0
 8008900:	4628      	mov	r0, r5
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	b118      	cbz	r0, 800890e <_fflush_r+0x1a>
 8008906:	6a03      	ldr	r3, [r0, #32]
 8008908:	b90b      	cbnz	r3, 800890e <_fflush_r+0x1a>
 800890a:	f7ff fc8f 	bl	800822c <__sinit>
 800890e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f3      	beq.n	80088fe <_fflush_r+0xa>
 8008916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008918:	07d0      	lsls	r0, r2, #31
 800891a:	d404      	bmi.n	8008926 <_fflush_r+0x32>
 800891c:	0599      	lsls	r1, r3, #22
 800891e:	d402      	bmi.n	8008926 <_fflush_r+0x32>
 8008920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008922:	f7ff fe68 	bl	80085f6 <__retarget_lock_acquire_recursive>
 8008926:	4628      	mov	r0, r5
 8008928:	4621      	mov	r1, r4
 800892a:	f7ff ff5f 	bl	80087ec <__sflush_r>
 800892e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008930:	07da      	lsls	r2, r3, #31
 8008932:	4605      	mov	r5, r0
 8008934:	d4e4      	bmi.n	8008900 <_fflush_r+0xc>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	059b      	lsls	r3, r3, #22
 800893a:	d4e1      	bmi.n	8008900 <_fflush_r+0xc>
 800893c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800893e:	f7ff fe5b 	bl	80085f8 <__retarget_lock_release_recursive>
 8008942:	e7dd      	b.n	8008900 <_fflush_r+0xc>

08008944 <__swhatbuf_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2900      	cmp	r1, #0
 800894e:	b096      	sub	sp, #88	@ 0x58
 8008950:	4615      	mov	r5, r2
 8008952:	461e      	mov	r6, r3
 8008954:	da0d      	bge.n	8008972 <__swhatbuf_r+0x2e>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800895c:	f04f 0100 	mov.w	r1, #0
 8008960:	bf14      	ite	ne
 8008962:	2340      	movne	r3, #64	@ 0x40
 8008964:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008968:	2000      	movs	r0, #0
 800896a:	6031      	str	r1, [r6, #0]
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	b016      	add	sp, #88	@ 0x58
 8008970:	bd70      	pop	{r4, r5, r6, pc}
 8008972:	466a      	mov	r2, sp
 8008974:	f000 f848 	bl	8008a08 <_fstat_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	dbec      	blt.n	8008956 <__swhatbuf_r+0x12>
 800897c:	9901      	ldr	r1, [sp, #4]
 800897e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008986:	4259      	negs	r1, r3
 8008988:	4159      	adcs	r1, r3
 800898a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800898e:	e7eb      	b.n	8008968 <__swhatbuf_r+0x24>

08008990 <__smakebuf_r>:
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008994:	079d      	lsls	r5, r3, #30
 8008996:	4606      	mov	r6, r0
 8008998:	460c      	mov	r4, r1
 800899a:	d507      	bpl.n	80089ac <__smakebuf_r+0x1c>
 800899c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	2301      	movs	r3, #1
 80089a6:	6163      	str	r3, [r4, #20]
 80089a8:	b003      	add	sp, #12
 80089aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ac:	ab01      	add	r3, sp, #4
 80089ae:	466a      	mov	r2, sp
 80089b0:	f7ff ffc8 	bl	8008944 <__swhatbuf_r>
 80089b4:	9f00      	ldr	r7, [sp, #0]
 80089b6:	4605      	mov	r5, r0
 80089b8:	4639      	mov	r1, r7
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff fe8a 	bl	80086d4 <_malloc_r>
 80089c0:	b948      	cbnz	r0, 80089d6 <__smakebuf_r+0x46>
 80089c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c6:	059a      	lsls	r2, r3, #22
 80089c8:	d4ee      	bmi.n	80089a8 <__smakebuf_r+0x18>
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	f043 0302 	orr.w	r3, r3, #2
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	e7e2      	b.n	800899c <__smakebuf_r+0xc>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	6020      	str	r0, [r4, #0]
 80089da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089e6:	b15b      	cbz	r3, 8008a00 <__smakebuf_r+0x70>
 80089e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 f81d 	bl	8008a2c <_isatty_r>
 80089f2:	b128      	cbz	r0, 8008a00 <__smakebuf_r+0x70>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	431d      	orrs	r5, r3
 8008a04:	81a5      	strh	r5, [r4, #12]
 8008a06:	e7cf      	b.n	80089a8 <__smakebuf_r+0x18>

08008a08 <_fstat_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d07      	ldr	r5, [pc, #28]	@ (8008a28 <_fstat_r+0x20>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	f7f8 fac2 	bl	8000f9e <_fstat>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	d102      	bne.n	8008a24 <_fstat_r+0x1c>
 8008a1e:	682b      	ldr	r3, [r5, #0]
 8008a20:	b103      	cbz	r3, 8008a24 <_fstat_r+0x1c>
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000468 	.word	0x20000468

08008a2c <_isatty_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	@ (8008a48 <_isatty_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f8 fac1 	bl	8000fbe <_isatty>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_isatty_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_isatty_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20000468 	.word	0x20000468

08008a4c <_sbrk_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d06      	ldr	r5, [pc, #24]	@ (8008a68 <_sbrk_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f7f8 faca 	bl	8000ff0 <_sbrk>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_sbrk_r+0x1a>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_sbrk_r+0x1a>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000468 	.word	0x20000468

08008a6c <_init>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	bf00      	nop
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr

08008a78 <_fini>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr
