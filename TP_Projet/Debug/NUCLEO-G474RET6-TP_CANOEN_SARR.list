
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d98  08009d98  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009d98  08009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009da0  08009da0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009da0  08009da0  0000ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009da4  08009da4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009da8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000068  08009e10  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009e10  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a78b  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003561  00000000  00000000  00025823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00028d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112a  00000000  00000000  0002a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dfe  00000000  00000000  0002b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ace1  00000000  00000000  000552a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114759  00000000  00000000  0006ff89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001846e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000669c  00000000  00000000  00184728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0018adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ab8 	.word	0x08009ab8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08009ab8 	.word	0x08009ab8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 fc53 	bl	8008ea4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb95 	bl	8001d98 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fc9a 	bl	8000fac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 fc38 	bl	8002ef8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fc8d 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 ff26 	bl	8002500 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fc77 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000084 	.word	0x20000084
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fbe1 	bl	8008ea4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fb24 	bl	8001d98 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fc29 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fec2 	bl	8002500 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fc13 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f0 	.word	0x200000f0
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 fb71 	bl	8008ea4 <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fe05 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 fbe0 	bl	8000fac <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fde7 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fdd8 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fdca 	bl	8003448 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fd8b 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 fb66 	bl	8000fac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fd79 	bl	8003448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fd6a 	bl	8003448 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000015c 	.word	0x2000015c
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a46      	ldr	r2, [pc, #280]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b41      	ldr	r3, [pc, #260]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a40      	ldr	r2, [pc, #256]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a34      	ldr	r2, [pc, #208]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fe91 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4826      	ldr	r0, [pc, #152]	@ (8000ac8 <MX_GPIO_Init+0x138>)
 8000a30:	f002 fe8c 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4820      	ldr	r0, [pc, #128]	@ (8000acc <MX_GPIO_Init+0x13c>)
 8000a4c:	f002 fcfc 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fced 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4810      	ldr	r0, [pc, #64]	@ (8000acc <MX_GPIO_Init+0x13c>)
 8000a8c:	f002 fcdc 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <MX_GPIO_Init+0x138>)
 8000aa8:	f002 fcce 	bl	8003448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2028      	movs	r0, #40	@ 0x28
 8000ab2:	f002 fbe1 	bl	8003278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab6:	2028      	movs	r0, #40	@ 0x28
 8000ab8:	f002 fbf8 	bl	80032ac <HAL_NVIC_EnableIRQ>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000c00 	.word	0x48000c00
 8000acc:	48000800 	.word	0x48000800

08000ad0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	@ 0x70
 8000ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
	int32_t ch_MCC = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ade:	f000 fed6 	bl	800188e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ae2:	f000 f88b 	bl	8000bfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae6:	f7ff ff53 	bl	8000990 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000aea:	f7ff fdf1 	bl	80006d0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000aee:	f7ff fd77 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000af2:	f000 fbf3 	bl	80012dc <MX_TIM1_Init>
	MX_TIM3_Init();
 8000af6:	f000 fcbf 	bl	8001478 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000afa:	f000 fdf3 	bl	80016e4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000afe:	463b      	mov	r3, r7
 8000b00:	2224      	movs	r2, #36	@ 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f008 f9cd 	bl	8008ea4 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	2240      	movs	r2, #64	@ 0x40
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f008 f9c6 	bl	8008ea4 <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <main+0x10c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000b1e:	2240      	movs	r2, #64	@ 0x40
 8000b20:	2100      	movs	r1, #0
 8000b22:	482f      	ldr	r0, [pc, #188]	@ (8000be0 <main+0x110>)
 8000b24:	f008 f9be 	bl	8008ea4 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	492c      	ldr	r1, [pc, #176]	@ (8000bdc <main+0x10c>)
 8000b2c:	482d      	ldr	r0, [pc, #180]	@ (8000be4 <main+0x114>)
 8000b2e:	f005 fe95 	bl	800685c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000b32:	200a      	movs	r0, #10
 8000b34:	f000 fee2 	bl	80018fc <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	225f      	movs	r2, #95	@ 0x5f
 8000b3e:	492a      	ldr	r1, [pc, #168]	@ (8000be8 <main+0x118>)
 8000b40:	4828      	ldr	r0, [pc, #160]	@ (8000be4 <main+0x114>)
 8000b42:	f005 fdfd 	bl	8006740 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2218      	movs	r2, #24
 8000b4c:	4927      	ldr	r1, [pc, #156]	@ (8000bec <main+0x11c>)
 8000b4e:	4825      	ldr	r0, [pc, #148]	@ (8000be4 <main+0x114>)
 8000b50:	f005 fdf6 	bl	8006740 <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (uartRxReceived == 1)
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <main+0x120>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1fb      	bne.n	8000b54 <main+0x84>
		{
			printf("OK \r\n");
 8000b5c:	4825      	ldr	r0, [pc, #148]	@ (8000bf4 <main+0x124>)
 8000b5e:	f008 f88d 	bl	8008c7c <puts>
			// Si caractère reçu est ENTER
			if (uartRxBuffer[0] == ASCII_ENTER)
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <main+0x10c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b0d      	cmp	r3, #13
 8000b68:	d122      	bne.n	8000bb0 <main+0xe0>
			{
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4921      	ldr	r1, [pc, #132]	@ (8000bf8 <main+0x128>)
 8000b72:	481c      	ldr	r0, [pc, #112]	@ (8000be4 <main+0x114>)
 8000b74:	f005 fde4 	bl	8006740 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8000b78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b7e:	4413      	add	r3, r2
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

				// Process the command
				processCommand(cmdBuffer);
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f881 	bl	8000c90 <processCommand>



				HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2218      	movs	r2, #24
 8000b94:	4915      	ldr	r1, [pc, #84]	@ (8000bec <main+0x11c>)
 8000b96:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <main+0x114>)
 8000b98:	f005 fdd2 	bl	8006740 <HAL_UART_Transmit>
				idx_cmd = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
				memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	2240      	movs	r2, #64	@ 0x40
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 f97b 	bl	8008ea4 <memset>
 8000bae:	e00b      	b.n	8000bc8 <main+0xf8>
			}
			else
			{
				// Si ce n'est pas ENTER, stocker le caractère dans le buffer
				if (idx_cmd < CMD_BUFFER_SIZE - 1)
 8000bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bb4:	dc08      	bgt.n	8000bc8 <main+0xf8>
				{
					cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <main+0x10c>)
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	3370      	adds	r3, #112	@ 0x70
 8000bc2:	443b      	add	r3, r7
 8000bc4:	f803 2c4c 	strb.w	r2, [r3, #-76]
				}
			}
			HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4904      	ldr	r1, [pc, #16]	@ (8000bdc <main+0x10c>)
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <main+0x114>)
 8000bce:	f005 fe45 	bl	800685c <HAL_UART_Receive_IT>

			uartRxReceived = 0;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <main+0x120>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		if (uartRxReceived == 1)
 8000bd8:	e7bc      	b.n	8000b54 <main+0x84>
 8000bda:	bf00      	nop
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	20000168 	.word	0x20000168
 8000be4:	20000294 	.word	0x20000294
 8000be8:	08009b40 	.word	0x08009b40
 8000bec:	08009b28 	.word	0x08009b28
 8000bf0:	20000160 	.word	0x20000160
 8000bf4:	08009ad0 	.word	0x08009ad0
 8000bf8:	08009ba0 	.word	0x08009ba0

08000bfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2238      	movs	r2, #56	@ 0x38
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 f94a 	bl	8008ea4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f002 fdd0 	bl	80037c4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	2303      	movs	r3, #3
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c36:	2306      	movs	r3, #6
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c3a:	2355      	movs	r3, #85	@ 0x55
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fe6c 	bl	800392c <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000c5a:	f000 f9a7 	bl	8000fac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2104      	movs	r1, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 f96a 	bl	8003f50 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000c82:	f000 f993 	bl	8000fac <Error_Handler>
	}
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	@ 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <processCommand>:

/* USER CODE BEGIN 4 */

void processCommand(char *cmd)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b096      	sub	sp, #88	@ 0x58
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

	if (strcmp(cmd, "help") == 0) {
 8000c98:	499d      	ldr	r1, [pc, #628]	@ (8000f10 <processCommand+0x280>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fac0 	bl	8000220 <strcmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d107      	bne.n	8000cb6 <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	2236      	movs	r2, #54	@ 0x36
 8000cac:	4999      	ldr	r1, [pc, #612]	@ (8000f14 <processCommand+0x284>)
 8000cae:	489a      	ldr	r0, [pc, #616]	@ (8000f18 <processCommand+0x288>)
 8000cb0:	f005 fd46 	bl	8006740 <HAL_UART_Transmit>


	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 8000cb4:	e128      	b.n	8000f08 <processCommand+0x278>
	else if (strcmp(cmd, "pinout") == 0) {
 8000cb6:	4999      	ldr	r1, [pc, #612]	@ (8000f1c <processCommand+0x28c>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fab1 	bl	8000220 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	221a      	movs	r2, #26
 8000cca:	4995      	ldr	r1, [pc, #596]	@ (8000f20 <processCommand+0x290>)
 8000ccc:	4892      	ldr	r0, [pc, #584]	@ (8000f18 <processCommand+0x288>)
 8000cce:	f005 fd37 	bl	8006740 <HAL_UART_Transmit>
}
 8000cd2:	e119      	b.n	8000f08 <processCommand+0x278>
	else if (strcmp(cmd, "start") == 0) {
 8000cd4:	4993      	ldr	r1, [pc, #588]	@ (8000f24 <processCommand+0x294>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff faa2 	bl	8000220 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d121      	bne.n	8000d26 <processCommand+0x96>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 8000ce2:	4b91      	ldr	r3, [pc, #580]	@ (8000f28 <processCommand+0x298>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cea:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 8000cec:	4b8e      	ldr	r3, [pc, #568]	@ (8000f28 <processCommand+0x298>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf4:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	220a      	movs	r2, #10
 8000cfc:	498b      	ldr	r1, [pc, #556]	@ (8000f2c <processCommand+0x29c>)
 8000cfe:	4886      	ldr	r0, [pc, #536]	@ (8000f18 <processCommand+0x288>)
 8000d00:	f005 fd1e 	bl	8006740 <HAL_UART_Transmit>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	4888      	ldr	r0, [pc, #544]	@ (8000f28 <processCommand+0x298>)
 8000d08:	f003 fef0 	bl	8004aec <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4886      	ldr	r0, [pc, #536]	@ (8000f28 <processCommand+0x298>)
 8000d10:	f005 f9fe 	bl	8006110 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d14:	2104      	movs	r1, #4
 8000d16:	4884      	ldr	r0, [pc, #528]	@ (8000f28 <processCommand+0x298>)
 8000d18:	f003 fee8 	bl	8004aec <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4882      	ldr	r0, [pc, #520]	@ (8000f28 <processCommand+0x298>)
 8000d20:	f005 f9f6 	bl	8006110 <HAL_TIMEx_PWMN_Start>
}
 8000d24:	e0f0      	b.n	8000f08 <processCommand+0x278>
	else if (strcmp(cmd, "stop") == 0) {
 8000d26:	4982      	ldr	r1, [pc, #520]	@ (8000f30 <processCommand+0x2a0>)
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fa79 	bl	8000220 <strcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d11a      	bne.n	8000d6a <processCommand+0xda>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	220b      	movs	r2, #11
 8000d3a:	497e      	ldr	r1, [pc, #504]	@ (8000f34 <processCommand+0x2a4>)
 8000d3c:	4876      	ldr	r0, [pc, #472]	@ (8000f18 <processCommand+0x288>)
 8000d3e:	f005 fcff 	bl	8006740 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d42:	2100      	movs	r1, #0
 8000d44:	4878      	ldr	r0, [pc, #480]	@ (8000f28 <processCommand+0x298>)
 8000d46:	f003 ffe3 	bl	8004d10 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4876      	ldr	r0, [pc, #472]	@ (8000f28 <processCommand+0x298>)
 8000d4e:	f005 faa1 	bl	8006294 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d52:	2104      	movs	r1, #4
 8000d54:	4874      	ldr	r0, [pc, #464]	@ (8000f28 <processCommand+0x298>)
 8000d56:	f003 ffdb 	bl	8004d10 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4872      	ldr	r0, [pc, #456]	@ (8000f28 <processCommand+0x298>)
 8000d5e:	f005 fa99 	bl	8006294 <HAL_TIMEx_PWMN_Stop>
		former_speed = 0;
 8000d62:	4b75      	ldr	r3, [pc, #468]	@ (8000f38 <processCommand+0x2a8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	e0ce      	b.n	8000f08 <processCommand+0x278>
	else if (strncmp(cmd, "speed", 5) == 0) {
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	4973      	ldr	r1, [pc, #460]	@ (8000f3c <processCommand+0x2ac>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f008 f8a0 	bl	8008eb4 <strncmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d17c      	bne.n	8000e74 <processCommand+0x1e4>
		int speed_value = atoi(cmd + 6);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3306      	adds	r3, #6
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 fddc 	bl	800893c <atoi>
 8000d84:	6578      	str	r0, [r7, #84]	@ 0x54
		if (speed_value > MAX_SPEED) {
 8000d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d8c:	dd10      	ble.n	8000db0 <processCommand+0x120>
			speed_value = MAX_SPEED;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d92:	657b      	str	r3, [r7, #84]	@ 0x54
			char maxSpeedMsg[] = "Max Speed\r\n";
 8000d94:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <processCommand+0x2b0>)
 8000d96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, (uint8_t *)maxSpeedMsg, sizeof(maxSpeedMsg) - 1, HAL_MAX_DELAY);
 8000da0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	220b      	movs	r2, #11
 8000daa:	485b      	ldr	r0, [pc, #364]	@ (8000f18 <processCommand+0x288>)
 8000dac:	f005 fcc8 	bl	8006740 <HAL_UART_Transmit>
		int i = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
		uint32_t pwm_value = (speed_value * MAX_SPEED) / 100;
 8000db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4a62      	ldr	r2, [pc, #392]	@ (8000f44 <processCommand+0x2b4>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1152      	asrs	r2, r2, #5
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	647b      	str	r3, [r7, #68]	@ 0x44
		uint32_t former_pwm_value = (former_speed * MAX_SPEED) / 100;
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <processCommand+0x2a8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	029b      	lsls	r3, r3, #10
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8000f44 <processCommand+0x2b4>)
 8000dce:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd2:	1152      	asrs	r2, r2, #5
 8000dd4:	17db      	asrs	r3, r3, #31
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	643b      	str	r3, [r7, #64]	@ 0x40
		if(pwm_value >= former_pwm_value){
 8000dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d317      	bcc.n	8000e12 <processCommand+0x182>
			for(i = former_pwm_value; i < pwm_value; i++){
 8000de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000de4:	653b      	str	r3, [r7, #80]	@ 0x50
 8000de6:	e00f      	b.n	8000e08 <processCommand+0x178>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000de8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f28 <processCommand+0x298>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 8000df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000df2:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8000df6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <processCommand+0x298>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f000 fd7d 	bl	80018fc <HAL_Delay>
			for(i = former_pwm_value; i < pwm_value; i++){
 8000e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e04:	3301      	adds	r3, #1
 8000e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8eb      	bhi.n	8000de8 <processCommand+0x158>
 8000e10:	e016      	b.n	8000e40 <processCommand+0x1b0>
			for(i = former_pwm_value; i > pwm_value; i--){
 8000e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e14:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e16:	e00f      	b.n	8000e38 <processCommand+0x1a8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000e18:	4b43      	ldr	r3, [pc, #268]	@ (8000f28 <processCommand+0x298>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e1e:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 8000e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e22:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8000e26:	4b40      	ldr	r3, [pc, #256]	@ (8000f28 <processCommand+0x298>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f000 fd65 	bl	80018fc <HAL_Delay>
			for(i = former_pwm_value; i > pwm_value; i--){
 8000e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e34:	3b01      	subs	r3, #1
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3eb      	bcc.n	8000e18 <processCommand+0x188>
		former_speed = speed_value;
 8000e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <processCommand+0x2a8>)
 8000e46:	701a      	strb	r2, [r3, #0]
		snprintf(speedMsg, sizeof(speedMsg), "Speed : %d\r\n", speed_value);
 8000e48:	f107 0008 	add.w	r0, r7, #8
 8000e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f48 <processCommand+0x2b8>)
 8000e50:	2120      	movs	r1, #32
 8000e52:	f007 ff1b 	bl	8008c8c <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)speedMsg, strlen(speedMsg), HAL_MAX_DELAY);
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9ea 	bl	8000234 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	f107 0108 	add.w	r1, r7, #8
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	482a      	ldr	r0, [pc, #168]	@ (8000f18 <processCommand+0x288>)
 8000e6e:	f005 fc67 	bl	8006740 <HAL_UART_Transmit>
}
 8000e72:	e049      	b.n	8000f08 <processCommand+0x278>
	else if (strcmp(cmd, "ADC") == 0) {
 8000e74:	4935      	ldr	r1, [pc, #212]	@ (8000f4c <processCommand+0x2bc>)
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff f9d2 	bl	8000220 <strcmp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d13b      	bne.n	8000efa <processCommand+0x26a>
			HAL_Delay(1000);
 8000e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e86:	f000 fd39 	bl	80018fc <HAL_Delay>
			HAL_ADC_Start(&hadc1);
 8000e8a:	4831      	ldr	r0, [pc, #196]	@ (8000f50 <processCommand+0x2c0>)
 8000e8c:	f001 f940 	bl	8002110 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	482e      	ldr	r0, [pc, #184]	@ (8000f50 <processCommand+0x2c0>)
 8000e96:	f001 fa1f 	bl	80022d8 <HAL_ADC_PollForConversion>
			uint32_t ADC_value = HAL_ADC_GetValue(&hadc1);
 8000e9a:	482d      	ldr	r0, [pc, #180]	@ (8000f50 <processCommand+0x2c0>)
 8000e9c:	f001 fb22 	bl	80024e4 <HAL_ADC_GetValue>
 8000ea0:	64f8      	str	r0, [r7, #76]	@ 0x4c
			HAL_Delay(10);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f000 fd2a 	bl	80018fc <HAL_Delay>
			uint8_t sensivity = 50;
 8000ea8:	2332      	movs	r3, #50	@ 0x32
 8000eaa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t V_offset = 5;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
			uint8_t I_current = ((ADC_value*3300/4096) - V_offset) / sensivity ;
 8000eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eb6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	0b1a      	lsrs	r2, r3, #12
 8000ec0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000ec4:	1ad2      	subs	r2, r2, r3
 8000ec6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
			uint8_t taille = snprintf(buffer_adc, sizeof(buffer_adc), "%d\r\n", ADC_value);
 8000ed2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <processCommand+0x2c4>)
 8000eda:	2109      	movs	r1, #9
 8000edc:	f007 fed6 	bl	8008c8c <sniprintf>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer_adc, taille, 100);
 8000ee6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	4809      	ldr	r0, [pc, #36]	@ (8000f18 <processCommand+0x288>)
 8000ef4:	f005 fc24 	bl	8006740 <HAL_UART_Transmit>
}
 8000ef8:	e006      	b.n	8000f08 <processCommand+0x278>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	2213      	movs	r2, #19
 8000f00:	4915      	ldr	r1, [pc, #84]	@ (8000f58 <processCommand+0x2c8>)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <processCommand+0x288>)
 8000f04:	f005 fc1c 	bl	8006740 <HAL_UART_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3758      	adds	r7, #88	@ 0x58
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08009ad8 	.word	0x08009ad8
 8000f14:	08009bb8 	.word	0x08009bb8
 8000f18:	20000294 	.word	0x20000294
 8000f1c:	08009ae0 	.word	0x08009ae0
 8000f20:	08009bf0 	.word	0x08009bf0
 8000f24:	08009ae8 	.word	0x08009ae8
 8000f28:	200001fc 	.word	0x200001fc
 8000f2c:	08009c0c 	.word	0x08009c0c
 8000f30:	08009af0 	.word	0x08009af0
 8000f34:	08009c18 	.word	0x08009c18
 8000f38:	200001a8 	.word	0x200001a8
 8000f3c:	08009af8 	.word	0x08009af8
 8000f40:	08009b1c 	.word	0x08009b1c
 8000f44:	51eb851f 	.word	0x51eb851f
 8000f48:	08009b00 	.word	0x08009b00
 8000f4c:	08009b10 	.word	0x08009b10
 8000f50:	20000084 	.word	0x20000084
 8000f54:	08009b14 	.word	0x08009b14
 8000f58:	08009ba4 	.word	0x08009ba4

08000f5c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_UART_RxCpltCallback+0x20>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4904      	ldr	r1, [pc, #16]	@ (8000f80 <HAL_UART_RxCpltCallback+0x24>)
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <HAL_UART_RxCpltCallback+0x28>)
 8000f70:	f005 fc74 	bl	800685c <HAL_UART_Receive_IT>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000160 	.word	0x20000160
 8000f80:	20000164 	.word	0x20000164
 8000f84:	20000294 	.word	0x20000294

08000f88 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f9a:	f000 fc91 	bl	80018c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40001000 	.word	0x40001000

08000fac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fee:	f002 fc8d 	bl	800390c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001010:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <HAL_InitTick+0xc4>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <HAL_InitTick+0xc4>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6593      	str	r3, [r2, #88]	@ 0x58
 800101c:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <HAL_InitTick+0xc4>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f962 	bl	80042fc <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001038:	f003 f934 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 800103c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800103e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001040:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <HAL_InitTick+0xc8>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9b      	lsrs	r3, r3, #18
 8001048:	3b01      	subs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <HAL_InitTick+0xcc>)
 800104e:	4a20      	ldr	r2, [pc, #128]	@ (80010d0 <HAL_InitTick+0xd0>)
 8001050:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <HAL_InitTick+0xcc>)
 8001054:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001058:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800105a:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <HAL_InitTick+0xcc>)
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <HAL_InitTick+0xcc>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_InitTick+0xcc>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800106c:	4817      	ldr	r0, [pc, #92]	@ (80010cc <HAL_InitTick+0xcc>)
 800106e:	f003 fc0b 	bl	8004888 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001078:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11b      	bne.n	80010b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001080:	4812      	ldr	r0, [pc, #72]	@ (80010cc <HAL_InitTick+0xcc>)
 8001082:	f003 fc59 	bl	8004938 <HAL_TIM_Base_Start_IT>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800108c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001090:	2b00      	cmp	r3, #0
 8001092:	d111      	bne.n	80010b8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001094:	2036      	movs	r0, #54	@ 0x36
 8001096:	f002 f909 	bl	80032ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d808      	bhi.n	80010b2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2036      	movs	r0, #54	@ 0x36
 80010a6:	f002 f8e7 	bl	8003278 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_InitTick+0xd4>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	e002      	b.n	80010b8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3730      	adds	r7, #48	@ 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	200001ac 	.word	0x200001ac
 80010d0:	40001000 	.word	0x40001000
 80010d4:	20000004 	.word	0x20000004

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f005 fbd9 	bl	80068f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000294 	.word	0x20000294

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001150:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001154:	f002 fb12 	bl	800377c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f003 fe71 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001ac 	.word	0x200001ac

08001170 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00a      	b.n	8001198 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001182:	f3af 8000 	nop.w
 8001186:	4601      	mov	r1, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf0      	blt.n	8001182 <_read+0x12>
  }

  return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	e009      	b.n	80011d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf1      	blt.n	80011bc <_write+0x12>
  }
  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_close>:

int _close(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800120a:	605a      	str	r2, [r3, #4]
  return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_isatty>:

int _isatty(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f007 fe72 	bl	8008f64 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20020000 	.word	0x20020000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200001f8 	.word	0x200001f8
 80012b4:	20000478 	.word	0x20000478

080012b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b09c      	sub	sp, #112	@ 0x70
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	615a      	str	r2, [r3, #20]
 800130e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2234      	movs	r2, #52	@ 0x34
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f007 fdc4 	bl	8008ea4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131c:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <MX_TIM1_Init+0x194>)
 800131e:	4a55      	ldr	r2, [pc, #340]	@ (8001474 <MX_TIM1_Init+0x198>)
 8001320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001322:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001324:	2207      	movs	r2, #7
 8001326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001328:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <MX_TIM1_Init+0x194>)
 800132a:	2220      	movs	r2, #32
 800132c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800132e:	4b50      	ldr	r3, [pc, #320]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001330:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133c:	4b4c      	ldr	r3, [pc, #304]	@ (8001470 <MX_TIM1_Init+0x194>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001348:	4849      	ldr	r0, [pc, #292]	@ (8001470 <MX_TIM1_Init+0x194>)
 800134a:	f003 fa9d 	bl	8004888 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001354:	f7ff fe2a 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001362:	4619      	mov	r1, r3
 8001364:	4842      	ldr	r0, [pc, #264]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001366:	f003 ffd3 	bl	8005310 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001370:	f7ff fe1c 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001374:	483e      	ldr	r0, [pc, #248]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001376:	f003 fb57 	bl	8004a28 <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001380:	f7ff fe14 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001394:	4619      	mov	r1, r3
 8001396:	4836      	ldr	r0, [pc, #216]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001398:	f004 ffda 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013a2:	f7ff fe03 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 512;
 80013aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	4828      	ldr	r0, [pc, #160]	@ (8001470 <MX_TIM1_Init+0x194>)
 80013ce:	f003 fe8b 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80013d8:	f7ff fde8 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013e0:	2204      	movs	r2, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4822      	ldr	r0, [pc, #136]	@ (8001470 <MX_TIM1_Init+0x194>)
 80013e6:	f003 fe7f 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80013f0:	f7ff fddc 	bl	8000fac <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fc:	2208      	movs	r2, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	481b      	ldr	r0, [pc, #108]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001402:	f003 fe71 	bl	80050e8 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800140c:	f7ff fdce 	bl	8000fac <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001410:	4817      	ldr	r0, [pc, #92]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001412:	f005 f8c7 	bl	80065a4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 8001422:	2323      	movs	r3, #35	@ 0x23
 8001424:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800142a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800143c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001454:	f005 f812 	bl	800647c <HAL_TIMEx_ConfigBreakDeadTime>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 800145e:	f7ff fda5 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001462:	4803      	ldr	r0, [pc, #12]	@ (8001470 <MX_TIM1_Init+0x194>)
 8001464:	f000 f8d6 	bl	8001614 <HAL_TIM_MspPostInit>

}
 8001468:	bf00      	nop
 800146a:	3770      	adds	r7, #112	@ 0x70
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200001fc 	.word	0x200001fc
 8001474:	40012c00 	.word	0x40012c00

08001478 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_TIM3_Init+0x90>)
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <MX_TIM3_Init+0x94>)
 800149a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_TIM3_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014d4:	f004 fd6d 	bl	8005fb2 <HAL_TIMEx_HallSensor_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80014de:	f7ff fd65 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80014e2:	2350      	movs	r3, #80	@ 0x50
 80014e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	@ (8001508 <MX_TIM3_Init+0x90>)
 80014f0:	f004 ff2e 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80014fa:	f7ff fd57 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000248 	.word	0x20000248
 800150c:	40000400 	.word	0x40000400

08001510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_TIM_Base_MspInit+0x38>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10b      	bne.n	800153a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001528:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800152c:	6613      	str	r3, [r2, #96]	@ 0x60
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_TIM_Base_MspInit+0x3c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40012c00 	.word	0x40012c00
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d145      	bne.n	80015fe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001572:	4b26      	ldr	r3, [pc, #152]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	4a25      	ldr	r2, [pc, #148]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6593      	str	r3, [r2, #88]	@ 0x58
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a19      	ldr	r2, [pc, #100]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015ba:	2350      	movs	r3, #80	@ 0x50
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ca:	2302      	movs	r3, #2
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f001 ff36 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ee:	2302      	movs	r3, #2
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80015fa:	f001 ff25 	bl	8003448 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	@ 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40000400 	.word	0x40000400
 800160c:	40021000 	.word	0x40021000
 8001610:	48000800 	.word	0x48000800

08001614 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a29      	ldr	r2, [pc, #164]	@ (80016d8 <HAL_TIM_MspPostInit+0xc4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d14b      	bne.n	80016ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_TIM_MspPostInit+0xc8>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001666:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001678:	2306      	movs	r3, #6
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <HAL_TIM_MspPostInit+0xcc>)
 8001684:	f001 fee0 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001688:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800169a:	2304      	movs	r3, #4
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <HAL_TIM_MspPostInit+0xcc>)
 80016a6:	f001 fecf 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80016aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016bc:	2306      	movs	r3, #6
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ca:	f001 febd 	bl	8003448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400

080016e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016ea:	4a23      	ldr	r2, [pc, #140]	@ (8001778 <MX_USART2_UART_Init+0x94>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172c:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800172e:	f004 ffb7 	bl	80066a0 <HAL_UART_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001738:	f7ff fc38 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001740:	f007 f831 	bl	80087a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800174a:	f7ff fc2f 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001752:	f007 f866 	bl	8008822 <HAL_UARTEx_SetRxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800175c:	f7ff fc26 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001762:	f006 ffe7 	bl	8008734 <HAL_UARTEx_DisableFifoMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800176c:	f7ff fc1e 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000294 	.word	0x20000294
 8001778:	40004400 	.word	0x40004400

0800177c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b09e      	sub	sp, #120	@ 0x78
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2254      	movs	r2, #84	@ 0x54
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f007 fb81 	bl	8008ea4 <memset>
  if(uartHandle->Instance==USART2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <HAL_UART_MspInit+0xb8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d13e      	bne.n	800182a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fe17 	bl	80043ec <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c4:	f7ff fbf2 	bl	8000fac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_UART_MspInit+0xbc>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f8:	230c      	movs	r3, #12
 80017fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	2307      	movs	r3, #7
 800180a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f001 fe17 	bl	8003448 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2026      	movs	r0, #38	@ 0x26
 8001820:	f001 fd2a 	bl	8003278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001824:	2026      	movs	r0, #38	@ 0x26
 8001826:	f001 fd41 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3778      	adds	r7, #120	@ 0x78
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40004400 	.word	0x40004400
 8001838:	40021000 	.word	0x40021000

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800183e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff fd3a 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	@ (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	@ (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f007 fb81 	bl	8008f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff f92f 	bl	8000ad0 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   r0, =_estack
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001880:	08009da8 	.word	0x08009da8
  ldr r2, =_sbss
 8001884:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001888:	20000478 	.word	0x20000478

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>

0800188e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f001 fce2 	bl	8003262 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	200f      	movs	r0, #15
 80018a0:	f7ff fbae 	bl	8001000 <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e001      	b.n	80018b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b0:	f7ff fb82 	bl	8000fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b4:	79fb      	ldrb	r3, [r7, #7]

}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_IncTick+0x1c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_IncTick+0x20>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a03      	ldr	r2, [pc, #12]	@ (80018dc <HAL_IncTick+0x1c>)
 80018d0:	6013      	str	r3, [r2, #0]
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	20000328 	.word	0x20000328
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000328 	.word	0x20000328

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d004      	beq.n	8001920 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_Delay+0x40>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001920:	bf00      	nop
 8001922:	f7ff ffdf 	bl	80018e4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	429a      	cmp	r2, r3
 8001930:	d8f7      	bhi.n	8001922 <HAL_Delay+0x26>
  {
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000008 	.word	0x20000008

08001940 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3360      	adds	r3, #96	@ 0x60
 80019ba:	461a      	mov	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <LL_ADC_SetOffset+0x44>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	03fff000 	.word	0x03fff000

080019f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3360      	adds	r3, #96	@ 0x60
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3360      	adds	r3, #96	@ 0x60
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3360      	adds	r3, #96	@ 0x60
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3360      	adds	r3, #96	@ 0x60
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3330      	adds	r3, #48	@ 0x30
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	4413      	add	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	211f      	movs	r1, #31
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	f003 011f 	and.w	r1, r3, #31
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3314      	adds	r3, #20
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0e5b      	lsrs	r3, r3, #25
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	0d1b      	lsrs	r3, r3, #20
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	2107      	movs	r1, #7
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	0d1b      	lsrs	r3, r3, #20
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0318 	and.w	r3, r3, #24
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bdc:	40d9      	lsrs	r1, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	400b      	ands	r3, r1
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	0007ffff 	.word	0x0007ffff

08001c00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6093      	str	r3, [r2, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_IsEnabled+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_IsEnabled+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1a9      	b.n	8002106 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe fceb 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff3f 	bl	8001c5c <LL_ADC_IsDeepPowerDownEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff25 	bl	8001c38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff5a 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d115      	bne.n	8001e2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff3e 	bl	8001c84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e08:	4b9c      	ldr	r3, [pc, #624]	@ (800207c <HAL_ADC_Init+0x2e4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	4a9c      	ldr	r2, [pc, #624]	@ (8002080 <HAL_ADC_Init+0x2e8>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e1c:	e002      	b.n	8001e24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f9      	bne.n	8001e1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff3c 	bl	8001cac <LL_ADC_IsInternalRegulatorEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff75 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8001e60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8142 	bne.w	80020f4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 813e 	bne.w	80020f4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d141      	bne.n	8001f1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_Init+0x114>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	@ (8002084 <HAL_ADC_Init+0x2ec>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10f      	bne.n	8001ecc <HAL_ADC_Init+0x134>
 8001eac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001eb0:	f7ff ff24 	bl	8001cfc <LL_ADC_IsEnabled>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	4873      	ldr	r0, [pc, #460]	@ (8002084 <HAL_ADC_Init+0x2ec>)
 8001eb8:	f7ff ff20 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e012      	b.n	8001ef2 <HAL_ADC_Init+0x15a>
 8001ecc:	486e      	ldr	r0, [pc, #440]	@ (8002088 <HAL_ADC_Init+0x2f0>)
 8001ece:	f7ff ff15 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	486d      	ldr	r0, [pc, #436]	@ (800208c <HAL_ADC_Init+0x2f4>)
 8001ed6:	f7ff ff11 	bl	8001cfc <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	431c      	orrs	r4, r3
 8001ede:	486c      	ldr	r0, [pc, #432]	@ (8002090 <HAL_ADC_Init+0x2f8>)
 8001ee0:	f7ff ff0c 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x172>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5f      	ldr	r2, [pc, #380]	@ (8002084 <HAL_ADC_Init+0x2ec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Init+0x176>
 8001f0a:	4a62      	ldr	r2, [pc, #392]	@ (8002094 <HAL_ADC_Init+0x2fc>)
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_Init+0x178>
 8001f0e:	4a62      	ldr	r2, [pc, #392]	@ (8002098 <HAL_ADC_Init+0x300>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fd12 	bl	8001940 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7f5b      	ldrb	r3, [r3, #29]
 8001f20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d106      	bne.n	8001f58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	045b      	lsls	r3, r3, #17
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b48      	ldr	r3, [pc, #288]	@ (800209c <HAL_ADC_Init+0x304>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fee4 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 8001fa8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d17f      	bne.n	80020b0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d17c      	bne.n	80020b0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ff6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002000:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6911      	ldr	r1, [r2, #16]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002016:	e013      	b.n	8002040 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800203c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12a      	bne.n	80020a0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800206c:	430a      	orrs	r2, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e019      	b.n	80020b0 <HAL_ADC_Init+0x318>
 800207c:	20000000 	.word	0x20000000
 8002080:	053e2d63 	.word	0x053e2d63
 8002084:	50000100 	.word	0x50000100
 8002088:	50000400 	.word	0x50000400
 800208c:	50000500 	.word	0x50000500
 8002090:	50000600 	.word	0x50000600
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10c      	bne.n	80020d2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f023 010f 	bic.w	r1, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d0:	e007      	b.n	80020e2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020f 	bic.w	r2, r2, #15
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020f2:	e007      	b.n	8002104 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002104:	7ffb      	ldrb	r3, [r7, #31]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop

08002110 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002120:	d004      	beq.n	800212c <HAL_ADC_Start+0x1c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a67      	ldr	r2, [pc, #412]	@ (80022c4 <HAL_ADC_Start+0x1b4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_ADC_Start+0x20>
 800212c:	4b66      	ldr	r3, [pc, #408]	@ (80022c8 <HAL_ADC_Start+0x1b8>)
 800212e:	e000      	b.n	8002132 <HAL_ADC_Start+0x22>
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_ADC_Start+0x1bc>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fd64 	bl	8001c00 <LL_ADC_GetMultimode>
 8002138:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fe03 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80b4 	bne.w	80022b4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_ADC_Start+0x4a>
 8002156:	2302      	movs	r3, #2
 8002158:	e0af      	b.n	80022ba <HAL_ADC_Start+0x1aa>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fe0c 	bl	8002d80 <ADC_Enable>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 809b 	bne.w	80022aa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4d      	ldr	r2, [pc, #308]	@ (80022c4 <HAL_ADC_Start+0x1b4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_ADC_Start+0x96>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4e      	ldr	r2, [pc, #312]	@ (80022d0 <HAL_ADC_Start+0x1c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d002      	beq.n	80021a2 <HAL_ADC_Start+0x92>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e003      	b.n	80021aa <HAL_ADC_Start+0x9a>
 80021a2:	4b4c      	ldr	r3, [pc, #304]	@ (80022d4 <HAL_ADC_Start+0x1c4>)
 80021a4:	e001      	b.n	80021aa <HAL_ADC_Start+0x9a>
 80021a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d002      	beq.n	80021b8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021d0:	d106      	bne.n	80021e0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f023 0206 	bic.w	r2, r3, #6
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80021de:	e002      	b.n	80021e6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	221c      	movs	r2, #28
 80021ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a32      	ldr	r2, [pc, #200]	@ (80022c4 <HAL_ADC_Start+0x1b4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_ADC_Start+0x104>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a32      	ldr	r2, [pc, #200]	@ (80022d0 <HAL_ADC_Start+0x1c0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d002      	beq.n	8002210 <HAL_ADC_Start+0x100>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	e003      	b.n	8002218 <HAL_ADC_Start+0x108>
 8002210:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <HAL_ADC_Start+0x1c4>)
 8002212:	e001      	b.n	8002218 <HAL_ADC_Start+0x108>
 8002214:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	4293      	cmp	r3, r2
 800221e:	d008      	beq.n	8002232 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b05      	cmp	r3, #5
 800222a:	d002      	beq.n	8002232 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b09      	cmp	r3, #9
 8002230:	d114      	bne.n	800225c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002248:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fd64 	bl	8001d22 <LL_ADC_REG_StartConversion>
 800225a:	e02d      	b.n	80022b8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <HAL_ADC_Start+0x1b4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_ADC_Start+0x176>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a16      	ldr	r2, [pc, #88]	@ (80022d0 <HAL_ADC_Start+0x1c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d002      	beq.n	8002282 <HAL_ADC_Start+0x172>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e003      	b.n	800228a <HAL_ADC_Start+0x17a>
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_ADC_Start+0x1c4>)
 8002284:	e001      	b.n	800228a <HAL_ADC_Start+0x17a>
 8002286:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800228a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00f      	beq.n	80022b8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022a8:	e006      	b.n	80022b8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022b2:	e001      	b.n	80022b8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	50000100 	.word	0x50000100
 80022c8:	50000300 	.word	0x50000300
 80022cc:	50000700 	.word	0x50000700
 80022d0:	50000500 	.word	0x50000500
 80022d4:	50000400 	.word	0x50000400

080022d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ea:	d004      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x1e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a77      	ldr	r2, [pc, #476]	@ (80024d0 <HAL_ADC_PollForConversion+0x1f8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_PollForConversion+0x22>
 80022f6:	4b77      	ldr	r3, [pc, #476]	@ (80024d4 <HAL_ADC_PollForConversion+0x1fc>)
 80022f8:	e000      	b.n	80022fc <HAL_ADC_PollForConversion+0x24>
 80022fa:	4b77      	ldr	r3, [pc, #476]	@ (80024d8 <HAL_ADC_PollForConversion+0x200>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fc7f 	bl	8001c00 <LL_ADC_GetMultimode>
 8002302:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d102      	bne.n	8002312 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800230c:	2308      	movs	r3, #8
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	e037      	b.n	8002382 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b05      	cmp	r3, #5
 800231c:	d002      	beq.n	8002324 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d111      	bne.n	8002348 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0c1      	b.n	80024c6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002342:	2304      	movs	r3, #4
 8002344:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002346:	e01c      	b.n	8002382 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002350:	d004      	beq.n	800235c <HAL_ADC_PollForConversion+0x84>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5e      	ldr	r2, [pc, #376]	@ (80024d0 <HAL_ADC_PollForConversion+0x1f8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_ADC_PollForConversion+0x88>
 800235c:	4b5d      	ldr	r3, [pc, #372]	@ (80024d4 <HAL_ADC_PollForConversion+0x1fc>)
 800235e:	e000      	b.n	8002362 <HAL_ADC_PollForConversion+0x8a>
 8002360:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <HAL_ADC_PollForConversion+0x200>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc5a 	bl	8001c1c <LL_ADC_GetMultiDMATransfer>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0a3      	b.n	80024c6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800237e:	2304      	movs	r3, #4
 8002380:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002382:	f7ff faaf 	bl	80018e4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002388:	e021      	b.n	80023ce <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d01d      	beq.n	80023ce <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002392:	f7ff faa7 	bl	80018e4 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <HAL_ADC_PollForConversion+0xd0>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e07b      	b.n	80024c6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0d6      	beq.n	800238a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fb79 	bl	8001ae4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7f5b      	ldrb	r3, [r3, #29]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d111      	bne.n	8002432 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_ADC_PollForConversion+0x1f8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_ADC_PollForConversion+0x178>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <HAL_ADC_PollForConversion+0x204>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d002      	beq.n	800244c <HAL_ADC_PollForConversion+0x174>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	e003      	b.n	8002454 <HAL_ADC_PollForConversion+0x17c>
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_ADC_PollForConversion+0x208>)
 800244e:	e001      	b.n	8002454 <HAL_ADC_PollForConversion+0x17c>
 8002450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	4293      	cmp	r3, r2
 800245a:	d008      	beq.n	800246e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d002      	beq.n	800246e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b09      	cmp	r3, #9
 800246c:	d104      	bne.n	8002478 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e014      	b.n	80024a2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_ADC_PollForConversion+0x1f8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_ADC_PollForConversion+0x1be>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <HAL_ADC_PollForConversion+0x204>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d002      	beq.n	8002492 <HAL_ADC_PollForConversion+0x1ba>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e003      	b.n	800249a <HAL_ADC_PollForConversion+0x1c2>
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <HAL_ADC_PollForConversion+0x208>)
 8002494:	e001      	b.n	800249a <HAL_ADC_PollForConversion+0x1c2>
 8002496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800249a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d104      	bne.n	80024b2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2208      	movs	r2, #8
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e008      	b.n	80024c4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	220c      	movs	r2, #12
 80024c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	50000100 	.word	0x50000100
 80024d4:	50000300 	.word	0x50000300
 80024d8:	50000700 	.word	0x50000700
 80024dc:	50000500 	.word	0x50000500
 80024e0:	50000400 	.word	0x50000400

080024e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0b6      	sub	sp, #216	@ 0xd8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x24>
 800251e:	2302      	movs	r3, #2
 8002520:	f000 bc13 	b.w	8002d4a <HAL_ADC_ConfigChannel+0x84a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fc0a 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 83f3 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff fadd 	bl	8001b0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fbf8 	bl	8001d4a <LL_ADC_REG_IsConversionOngoing>
 800255a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fc04 	bl	8001d70 <LL_ADC_INJ_IsConversionOngoing>
 8002568:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800256c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 81d9 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 81d4 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002588:	d10f      	bne.n	80025aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff fae4 	bl	8001b62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fa8b 	bl	8001abe <LL_ADC_SetSamplingTimeCommonConfig>
 80025a8:	e00e      	b.n	80025c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7ff fad3 	bl	8001b62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fa7b 	bl	8001abe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	08db      	lsrs	r3, r3, #3
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d022      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025fa:	f7ff f9d5 	bl	80019a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	461a      	mov	r2, r3
 800260c:	f7ff fa21 	bl	8001a52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x126>
 8002620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002624:	e000      	b.n	8002628 <HAL_ADC_ConfigChannel+0x128>
 8002626:	2300      	movs	r3, #0
 8002628:	461a      	mov	r2, r3
 800262a:	f7ff fa2d 	bl	8001a88 <LL_ADC_SetOffsetSaturation>
 800262e:	e17b      	b.n	8002928 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9da 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0x15c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff f9cf 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 021f 	and.w	r2, r3, #31
 800265a:	e01e      	b.n	800269a <HAL_ADC_ConfigChannel+0x19a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f9c4 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800267a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800267e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800268e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x1b2>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e018      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x1e4>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80026c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80026ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80026da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f993 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f977 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x222>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f96c 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x260>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f961 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002740:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x278>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	e018      	b.n	80027aa <HAL_ADC_ConfigChannel+0x2aa>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800278c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002794:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80027a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f930 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2102      	movs	r1, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f914 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x2e8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f909 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	e01e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x326>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8fe 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800280a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800280e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800281a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_ConfigChannel+0x33e>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	e016      	b.n	800286c <HAL_ADC_ConfigChannel+0x36c>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002850:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002856:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e004      	b.n	800286c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002862:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f8cf 	bl	8001a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2103      	movs	r1, #3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f8b3 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x3aa>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2103      	movs	r1, #3
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f8a8 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e017      	b.n	80028da <HAL_ADC_ConfigChannel+0x3da>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2103      	movs	r1, #3
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f89d 	bl	80019f0 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80028c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80028c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80028d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x3f2>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	e011      	b.n	8002916 <HAL_ADC_ConfigChannel+0x416>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002902:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800290e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002916:	429a      	cmp	r2, r3
 8002918:	d106      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f87a 	bl	8001a1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff f9e5 	bl	8001cfc <LL_ADC_IsEnabled>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 813d 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	461a      	mov	r2, r3
 8002948:	f7ff f936 	bl	8001bb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4aa2      	ldr	r2, [pc, #648]	@ (8002bdc <HAL_ADC_ConfigChannel+0x6dc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f040 812e 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x480>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2b09      	cmp	r3, #9
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e019      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x4b4>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800298e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002990:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800299c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	bf94      	ite	ls
 80029ae:	2301      	movls	r3, #1
 80029b0:	2300      	movhi	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d079      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x4d4>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	069b      	lsls	r3, r3, #26
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d2:	e015      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x500>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80029e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80029f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x520>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	e017      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x550>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	ea42 0103 	orr.w	r1, r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x576>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	e018      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x5a8>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	e07e      	b.n	8002baa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x5c8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac6:	e015      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x5f4>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x614>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	e017      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x644>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	61fb      	str	r3, [r7, #28]
  return result;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	ea42 0103 	orr.w	r1, r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x670>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	3b1e      	subs	r3, #30
 8002b68:	051b      	lsls	r3, r3, #20
 8002b6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	e01b      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x6a8>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	613b      	str	r3, [r7, #16]
  return result;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e003      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b1e      	subs	r3, #30
 8002ba2:	051b      	lsls	r3, r3, #20
 8002ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f7fe ffd7 	bl	8001b62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_ADC_ConfigChannel+0x6e0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80be 	beq.w	8002d3e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x6d6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x6ec>
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002bd8:	e009      	b.n	8002bee <HAL_ADC_ConfigChannel+0x6ee>
 8002bda:	bf00      	nop
 8002bdc:	407f0000 	.word	0x407f0000
 8002be0:	80080000 	.word	0x80080000
 8002be4:	50000100 	.word	0x50000100
 8002be8:	50000300 	.word	0x50000300
 8002bec:	4b59      	ldr	r3, [pc, #356]	@ (8002d54 <HAL_ADC_ConfigChannel+0x854>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fecc 	bl	800198c <LL_ADC_GetCommonPathInternalCh>
 8002bf4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_ADC_ConfigChannel+0x858>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x70c>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a55      	ldr	r2, [pc, #340]	@ (8002d5c <HAL_ADC_ConfigChannel+0x85c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d13a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d134      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c20:	d005      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x72e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4e      	ldr	r2, [pc, #312]	@ (8002d60 <HAL_ADC_ConfigChannel+0x860>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f040 8085 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x742>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	@ (8002d64 <HAL_ADC_ConfigChannel+0x864>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x746>
 8002c42:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <HAL_ADC_ConfigChannel+0x868>)
 8002c44:	e000      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x748>
 8002c46:	4a43      	ldr	r2, [pc, #268]	@ (8002d54 <HAL_ADC_ConfigChannel+0x854>)
 8002c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7fe fe87 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c58:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_ADC_ConfigChannel+0x86c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	4a44      	ldr	r2, [pc, #272]	@ (8002d70 <HAL_ADC_ConfigChannel+0x870>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c72:	e002      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	e05a      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_ADC_ConfigChannel+0x874>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d125      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11f      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <HAL_ADC_ConfigChannel+0x864>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d104      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x7ac>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a34      	ldr	r2, [pc, #208]	@ (8002d78 <HAL_ADC_ConfigChannel+0x878>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d047      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x7c0>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2a      	ldr	r2, [pc, #168]	@ (8002d64 <HAL_ADC_ConfigChannel+0x864>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x7c4>
 8002cc0:	4a29      	ldr	r2, [pc, #164]	@ (8002d68 <HAL_ADC_ConfigChannel+0x868>)
 8002cc2:	e000      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x7c6>
 8002cc4:	4a23      	ldr	r2, [pc, #140]	@ (8002d54 <HAL_ADC_ConfigChannel+0x854>)
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fe fe48 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd6:	e031      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <HAL_ADC_ConfigChannel+0x87c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d12d      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d127      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <HAL_ADC_ConfigChannel+0x864>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x80c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <HAL_ADC_ConfigChannel+0x864>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x810>
 8002d0c:	4a16      	ldr	r2, [pc, #88]	@ (8002d68 <HAL_ADC_ConfigChannel+0x868>)
 8002d0e:	e000      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x812>
 8002d10:	4a10      	ldr	r2, [pc, #64]	@ (8002d54 <HAL_ADC_ConfigChannel+0x854>)
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe fe22 	bl	8001966 <LL_ADC_SetCommonPathInternalCh>
 8002d22:	e00c      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f043 0220 	orr.w	r2, r3, #32
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d36:	e002      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	37d8      	adds	r7, #216	@ 0xd8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	50000700 	.word	0x50000700
 8002d58:	c3210000 	.word	0xc3210000
 8002d5c:	90c00010 	.word	0x90c00010
 8002d60:	50000600 	.word	0x50000600
 8002d64:	50000100 	.word	0x50000100
 8002d68:	50000300 	.word	0x50000300
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	c7520000 	.word	0xc7520000
 8002d78:	50000500 	.word	0x50000500
 8002d7c:	cb840000 	.word	0xcb840000

08002d80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe ffb3 	bl	8001cfc <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d176      	bne.n	8002e8a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4b3c      	ldr	r3, [pc, #240]	@ (8002e94 <ADC_Enable+0x114>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	f043 0210 	orr.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e062      	b.n	8002e8c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe ff82 	bl	8001cd4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd8:	d004      	beq.n	8002de4 <ADC_Enable+0x64>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2e      	ldr	r2, [pc, #184]	@ (8002e98 <ADC_Enable+0x118>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <ADC_Enable+0x68>
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <ADC_Enable+0x11c>)
 8002de6:	e000      	b.n	8002dea <ADC_Enable+0x6a>
 8002de8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <ADC_Enable+0x120>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fdce 	bl	800198c <LL_ADC_GetCommonPathInternalCh>
 8002df0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d013      	beq.n	8002e22 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <ADC_Enable+0x124>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	4a29      	ldr	r2, [pc, #164]	@ (8002ea8 <ADC_Enable+0x128>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e14:	e002      	b.n	8002e1c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f9      	bne.n	8002e16 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e22:	f7fe fd5f 	bl	80018e4 <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e28:	e028      	b.n	8002e7c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe ff64 	bl	8001cfc <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe ff48 	bl	8001cd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e44:	f7fe fd4e 	bl	80018e4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d914      	bls.n	8002e7c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d00d      	beq.n	8002e7c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f043 0210 	orr.w	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d1cf      	bne.n	8002e2a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	8000003f 	.word	0x8000003f
 8002e98:	50000100 	.word	0x50000100
 8002e9c:	50000300 	.word	0x50000300
 8002ea0:	50000700 	.word	0x50000700
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	053e2d63 	.word	0x053e2d63

08002eac <LL_ADC_IsEnabled>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <LL_ADC_IsEnabled+0x18>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <LL_ADC_IsEnabled+0x1a>
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d101      	bne.n	8002eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b0a1      	sub	sp, #132	@ 0x84
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0e7      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f22:	2300      	movs	r3, #0
 8002f24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f2e:	d102      	bne.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	e009      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f40:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	e001      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0be      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ffb1 	bl	8002ed2 <LL_ADC_REG_IsConversionOngoing>
 8002f70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ffab 	bl	8002ed2 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 80a0 	bne.w	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 809c 	bne.w	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a55      	ldr	r2, [pc, #340]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fa0:	4b56      	ldr	r3, [pc, #344]	@ (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fa4:	4b56      	ldr	r3, [pc, #344]	@ (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002fa6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04b      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fc2:	035b      	lsls	r3, r3, #13
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a45      	ldr	r2, [pc, #276]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10f      	bne.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002fe0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fe4:	f7ff ff62 	bl	8002eac <LL_ADC_IsEnabled>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	4841      	ldr	r0, [pc, #260]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fec:	f7ff ff5e 	bl	8002eac <LL_ADC_IsEnabled>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4323      	orrs	r3, r4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003000:	483c      	ldr	r0, [pc, #240]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003002:	f7ff ff53 	bl	8002eac <LL_ADC_IsEnabled>
 8003006:	4604      	mov	r4, r0
 8003008:	483b      	ldr	r0, [pc, #236]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800300a:	f7ff ff4f 	bl	8002eac <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	431c      	orrs	r4, r3
 8003012:	483c      	ldr	r0, [pc, #240]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003014:	f7ff ff4a 	bl	8002eac <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d056      	beq.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800302a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003032:	f023 030f 	bic.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003044:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003046:	e047      	b.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003048:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003052:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305c:	d004      	beq.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10f      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003068:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800306c:	f7ff ff1e 	bl	8002eac <LL_ADC_IsEnabled>
 8003070:	4604      	mov	r4, r0
 8003072:	481f      	ldr	r0, [pc, #124]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003074:	f7ff ff1a 	bl	8002eac <LL_ADC_IsEnabled>
 8003078:	4603      	mov	r3, r0
 800307a:	4323      	orrs	r3, r4
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e012      	b.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003088:	481a      	ldr	r0, [pc, #104]	@ (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800308a:	f7ff ff0f 	bl	8002eac <LL_ADC_IsEnabled>
 800308e:	4604      	mov	r4, r0
 8003090:	4819      	ldr	r0, [pc, #100]	@ (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003092:	f7ff ff0b 	bl	8002eac <LL_ADC_IsEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	431c      	orrs	r4, r3
 800309a:	481a      	ldr	r0, [pc, #104]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800309c:	f7ff ff06 	bl	8002eac <LL_ADC_IsEnabled>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4323      	orrs	r3, r4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d012      	beq.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ba:	f023 030f 	bic.w	r3, r3, #15
 80030be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c2:	e009      	b.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030d6:	e000      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3784      	adds	r7, #132	@ 0x84
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	bf00      	nop
 80030f0:	50000100 	.word	0x50000100
 80030f4:	50000400 	.word	0x50000400
 80030f8:	50000500 	.word	0x50000500
 80030fc:	50000300 	.word	0x50000300
 8003100:	50000700 	.word	0x50000700
 8003104:	50000600 	.word	0x50000600

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ff4c 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003286:	f7ff ff63 	bl	8003150 <__NVIC_GetPriorityGrouping>
 800328a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7ff ffb3 	bl	80031fc <NVIC_EncodePriority>
 8003296:	4602      	mov	r2, r0
 8003298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff82 	bl	80031a8 <__NVIC_SetPriority>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff56 	bl	800316c <__NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d005      	beq.n	80032ec <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2204      	movs	r2, #4
 80032e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e037      	b.n	800335c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020e 	bic.w	r2, r2, #14
 80032fa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003306:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800330a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003338:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003350:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800335a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d00d      	beq.n	80033ae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e047      	b.n	800343e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 020e 	bic.w	r2, r2, #14
 80033bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003412:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800341c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
    }
  }
  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003456:	e15a      	b.n	800370e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 814c 	beq.w	8003708 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d005      	beq.n	8003488 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003484:	2b02      	cmp	r3, #2
 8003486:	d130      	bne.n	80034ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034be:	2201      	movs	r2, #1
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0201 	and.w	r2, r3, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d017      	beq.n	8003526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d123      	bne.n	800357a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	08da      	lsrs	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3208      	adds	r2, #8
 8003574:	6939      	ldr	r1, [r7, #16]
 8003576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a6 	beq.w	8003708 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035bc:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_GPIO_Init+0x2e4>)
 80035be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c0:	4a5a      	ldr	r2, [pc, #360]	@ (800372c <HAL_GPIO_Init+0x2e4>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80035c8:	4b58      	ldr	r3, [pc, #352]	@ (800372c <HAL_GPIO_Init+0x2e4>)
 80035ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d4:	4a56      	ldr	r2, [pc, #344]	@ (8003730 <HAL_GPIO_Init+0x2e8>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035fe:	d01f      	beq.n	8003640 <HAL_GPIO_Init+0x1f8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_GPIO_Init+0x2ec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d019      	beq.n	800363c <HAL_GPIO_Init+0x1f4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a4b      	ldr	r2, [pc, #300]	@ (8003738 <HAL_GPIO_Init+0x2f0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_GPIO_Init+0x1f0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <HAL_GPIO_Init+0x2f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00d      	beq.n	8003634 <HAL_GPIO_Init+0x1ec>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a49      	ldr	r2, [pc, #292]	@ (8003740 <HAL_GPIO_Init+0x2f8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <HAL_GPIO_Init+0x1e8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a48      	ldr	r2, [pc, #288]	@ (8003744 <HAL_GPIO_Init+0x2fc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_GPIO_Init+0x1e4>
 8003628:	2305      	movs	r3, #5
 800362a:	e00a      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 800362c:	2306      	movs	r3, #6
 800362e:	e008      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 8003630:	2304      	movs	r3, #4
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 8003634:	2303      	movs	r3, #3
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x1fa>
 8003640:	2300      	movs	r3, #0
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003652:	4937      	ldr	r1, [pc, #220]	@ (8003730 <HAL_GPIO_Init+0x2e8>)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003660:	4b39      	ldr	r3, [pc, #228]	@ (8003748 <HAL_GPIO_Init+0x300>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003684:	4a30      	ldr	r2, [pc, #192]	@ (8003748 <HAL_GPIO_Init+0x300>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800368a:	4b2f      	ldr	r3, [pc, #188]	@ (8003748 <HAL_GPIO_Init+0x300>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ae:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036b4:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_GPIO_Init+0x300>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003702:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <HAL_GPIO_Init+0x300>)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3301      	adds	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f ae9d 	bne.w	8003458 <HAL_GPIO_Init+0x10>
  }
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	40010000 	.word	0x40010000
 8003734:	48000400 	.word	0x48000400
 8003738:	48000800 	.word	0x48000800
 800373c:	48000c00 	.word	0x48000c00
 8003740:	48001000 	.word	0x48001000
 8003744:	48001400 	.word	0x48001400
 8003748:	40010400 	.word	0x40010400

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003768:	e002      	b.n	8003770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003786:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003792:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f806 	bl	80037ac <HAL_GPIO_EXTI_Callback>
  }
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40010400 	.word	0x40010400

080037ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d141      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037de:	d131      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e0:	4b47      	ldr	r3, [pc, #284]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e6:	4a46      	ldr	r2, [pc, #280]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f0:	4b43      	ldr	r3, [pc, #268]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f8:	4a41      	ldr	r2, [pc, #260]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003800:	4b40      	ldr	r3, [pc, #256]	@ (8003904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2232      	movs	r2, #50	@ 0x32
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	4a3f      	ldr	r2, [pc, #252]	@ (8003908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	0c9b      	lsrs	r3, r3, #18
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003816:	e002      	b.n	800381e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3b01      	subs	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381e:	4b38      	ldr	r3, [pc, #224]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382a:	d102      	bne.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f2      	bne.n	8003818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003832:	4b33      	ldr	r3, [pc, #204]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383e:	d158      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e057      	b.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003844:	4b2e      	ldr	r3, [pc, #184]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800384a:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003850:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003854:	e04d      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d141      	bne.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800385e:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386a:	d131      	bne.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800386c:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003872:	4a23      	ldr	r2, [pc, #140]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800387c:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003884:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800388a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2232      	movs	r2, #50	@ 0x32
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	0c9b      	lsrs	r3, r3, #18
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a2:	e002      	b.n	80038aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b6:	d102      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f2      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038be:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d112      	bne.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e011      	b.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038e0:	e007      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038e2:	4b07      	ldr	r3, [pc, #28]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038ea:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40007000 	.word	0x40007000
 8003904:	20000000 	.word	0x20000000
 8003908:	431bde83 	.word	0x431bde83

0800390c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800391a:	6093      	str	r3, [r2, #8]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40007000 	.word	0x40007000

0800392c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e2fe      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d075      	beq.n	8003a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b97      	ldr	r3, [pc, #604]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b94      	ldr	r3, [pc, #592]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d102      	bne.n	800396a <HAL_RCC_OscConfig+0x3e>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d002      	beq.n	8003970 <HAL_RCC_OscConfig+0x44>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d10b      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x108>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d157      	bne.n	8003a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e2d9      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x74>
 8003992:	4b85      	ldr	r3, [pc, #532]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a84      	ldr	r2, [pc, #528]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7e      	ldr	r2, [pc, #504]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039c4:	4b78      	ldr	r3, [pc, #480]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a77      	ldr	r2, [pc, #476]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b75      	ldr	r3, [pc, #468]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a74      	ldr	r2, [pc, #464]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd ff7e 	bl	80018e4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fd ff7a 	bl	80018e4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e29e      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xc0>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd ff6a 	bl	80018e4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd ff66 	bl	80018e4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e28a      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	4b60      	ldr	r3, [pc, #384]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0xe8>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d075      	beq.n	8003b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a42:	4b59      	ldr	r3, [pc, #356]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a4c:	4b56      	ldr	r3, [pc, #344]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_OscConfig+0x136>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_OscConfig+0x13c>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d11f      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x154>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e25d      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b49      	ldr	r3, [pc, #292]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4946      	ldr	r1, [pc, #280]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a94:	4b45      	ldr	r3, [pc, #276]	@ (8003bac <HAL_RCC_OscConfig+0x280>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fab1 	bl	8001000 <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d043      	beq.n	8003b2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e249      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d023      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd ff12 	bl	80018e4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fd ff0e 	bl	80018e4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e232      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b31      	ldr	r3, [pc, #196]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	492d      	ldr	r1, [pc, #180]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
 8003af6:	e01a      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd feee 	bl	80018e4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fd feea 	bl	80018e4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e20e      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1e0>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d041      	beq.n	8003bbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b48:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fd fec7 	bl	80018e4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fd fec3 	bl	80018e4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1e7      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ef      	beq.n	8003b5a <HAL_RCC_OscConfig+0x22e>
 8003b7a:	e020      	b.n	8003bbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b82:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd feaa 	bl	80018e4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b92:	e00d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd fea6 	bl	80018e4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d906      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1ca      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ea      	bne.n	8003b94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80a6 	beq.w	8003d18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd0:	4b84      	ldr	r3, [pc, #528]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2b4>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x2b6>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	4a7e      	ldr	r2, [pc, #504]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c02:	4b79      	ldr	r3, [pc, #484]	@ (8003de8 <HAL_RCC_OscConfig+0x4bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0e:	4b76      	ldr	r3, [pc, #472]	@ (8003de8 <HAL_RCC_OscConfig+0x4bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a75      	ldr	r2, [pc, #468]	@ (8003de8 <HAL_RCC_OscConfig+0x4bc>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd fe63 	bl	80018e4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fd fe5f 	bl	80018e4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e183      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	4b6c      	ldr	r3, [pc, #432]	@ (8003de8 <HAL_RCC_OscConfig+0x4bc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d108      	bne.n	8003c5a <HAL_RCC_OscConfig+0x32e>
 8003c48:	4b66      	ldr	r3, [pc, #408]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	4a65      	ldr	r2, [pc, #404]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c58:	e024      	b.n	8003ca4 <HAL_RCC_OscConfig+0x378>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d110      	bne.n	8003c84 <HAL_RCC_OscConfig+0x358>
 8003c62:	4b60      	ldr	r3, [pc, #384]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c68:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c78:	4a5a      	ldr	r2, [pc, #360]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x378>
 8003c84:	4b57      	ldr	r3, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	4a56      	ldr	r2, [pc, #344]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c94:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd fe1a 	bl	80018e4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd fe16 	bl	80018e4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e138      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b46      	ldr	r3, [pc, #280]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ed      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x388>
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fd fe03 	bl	80018e4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fd fdff 	bl	80018e4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e121      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ed      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	4a34      	ldr	r2, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01c      	beq.n	8003d66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d32:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fdd2 	bl	80018e4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d44:	f7fd fdce 	bl	80018e4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0f2      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d56:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ef      	beq.n	8003d44 <HAL_RCC_OscConfig+0x418>
 8003d64:	e01b      	b.n	8003d9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d66:	4b1f      	ldr	r3, [pc, #124]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd fdb5 	bl	80018e4 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d7e:	f7fd fdb1 	bl	80018e4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0d5      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d90:	4b14      	ldr	r3, [pc, #80]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ef      	bne.n	8003d7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80c9 	beq.w	8003f3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da8:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	f000 8083 	beq.w	8003ebc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d15e      	bne.n	8003e7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd fd8b 	bl	80018e4 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd0:	e00c      	b.n	8003dec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd fd87 	bl	80018e4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d905      	bls.n	8003dec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0ab      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dec:	4b55      	ldr	r3, [pc, #340]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ec      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df8:	4b52      	ldr	r3, [pc, #328]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	4b52      	ldr	r3, [pc, #328]	@ (8003f48 <HAL_RCC_OscConfig+0x61c>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6a11      	ldr	r1, [r2, #32]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0112      	lsls	r2, r2, #4
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e12:	0212      	lsls	r2, r2, #8
 8003e14:	4311      	orrs	r1, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e1a:	0852      	lsrs	r2, r2, #1
 8003e1c:	3a01      	subs	r2, #1
 8003e1e:	0552      	lsls	r2, r2, #21
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0652      	lsls	r2, r2, #25
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e32:	06d2      	lsls	r2, r2, #27
 8003e34:	430a      	orrs	r2, r1
 8003e36:	4943      	ldr	r1, [pc, #268]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b41      	ldr	r3, [pc, #260]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a40      	ldr	r2, [pc, #256]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e48:	4b3e      	ldr	r3, [pc, #248]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd fd46 	bl	80018e4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fd42 	bl	80018e4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e066      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	4b35      	ldr	r3, [pc, #212]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x530>
 8003e7a:	e05e      	b.n	8003f3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b31      	ldr	r3, [pc, #196]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a30      	ldr	r2, [pc, #192]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fd2c 	bl	80018e4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fd28 	bl	80018e4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04c      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea2:	4b28      	ldr	r3, [pc, #160]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4924      	ldr	r1, [pc, #144]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003eb4:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <HAL_RCC_OscConfig+0x620>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60cb      	str	r3, [r1, #12]
 8003eba:	e03e      	b.n	8003f3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e039      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <HAL_RCC_OscConfig+0x618>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0203 	and.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d12c      	bne.n	8003f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d123      	bne.n	8003f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d11b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d113      	bne.n	8003f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	019f800c 	.word	0x019f800c
 8003f4c:	feeefffc 	.word	0xfeeefffc

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e11e      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b91      	ldr	r3, [pc, #580]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b8e      	ldr	r3, [pc, #568]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 020f 	bic.w	r2, r3, #15
 8003f7e:	498c      	ldr	r1, [pc, #560]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b8a      	ldr	r3, [pc, #552]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e106      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d073      	beq.n	800408c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d129      	bne.n	8004000 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fac:	4b81      	ldr	r3, [pc, #516]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0f4      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fbc:	f000 f9d0 	bl	8004360 <RCC_GetSysClockFreqFromPLLSource>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80041b8 <HAL_RCC_ClockConfig+0x268>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d93f      	bls.n	800404a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fca:	4b7a      	ldr	r3, [pc, #488]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d033      	beq.n	800404a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d12f      	bne.n	800404a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fea:	4b72      	ldr	r3, [pc, #456]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ff2:	4a70      	ldr	r2, [pc, #448]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e024      	b.n	800404a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d107      	bne.n	8004018 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004008:	4b6a      	ldr	r3, [pc, #424]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0c6      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0be      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004028:	f000 f8ce 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 800402c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4a61      	ldr	r2, [pc, #388]	@ (80041b8 <HAL_RCC_ClockConfig+0x268>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d909      	bls.n	800404a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004036:	4b5f      	ldr	r3, [pc, #380]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403e:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004044:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004046:	2380      	movs	r3, #128	@ 0x80
 8004048:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800404a:	4b5a      	ldr	r3, [pc, #360]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0203 	bic.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4957      	ldr	r1, [pc, #348]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd fc42 	bl	80018e4 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fd fc3e 	bl	80018e4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e095      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	4b4e      	ldr	r3, [pc, #312]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 020c 	and.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d1eb      	bne.n	8004064 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d023      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b43      	ldr	r3, [pc, #268]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a42      	ldr	r2, [pc, #264]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040bc:	4b3d      	ldr	r3, [pc, #244]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040c4:	4a3b      	ldr	r2, [pc, #236]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4936      	ldr	r1, [pc, #216]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
 80040de:	e008      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d105      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80040e6:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	4a32      	ldr	r2, [pc, #200]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f2:	4b2f      	ldr	r3, [pc, #188]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d21d      	bcs.n	800413c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 020f 	bic.w	r2, r3, #15
 8004108:	4929      	ldr	r1, [pc, #164]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004110:	f7fd fbe8 	bl	80018e4 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fd fbe4 	bl	80018e4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e03b      	b.n	80041a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <HAL_RCC_ClockConfig+0x260>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d1ed      	bne.n	8004118 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4917      	ldr	r1, [pc, #92]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490f      	ldr	r1, [pc, #60]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800417a:	f000 f825 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <HAL_RCC_ClockConfig+0x264>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490c      	ldr	r1, [pc, #48]	@ (80041bc <HAL_RCC_ClockConfig+0x26c>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x270>)
 8004198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_RCC_ClockConfig+0x274>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc ff2e 	bl	8001000 <HAL_InitTick>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40022000 	.word	0x40022000
 80041b4:	40021000 	.word	0x40021000
 80041b8:	04c4b400 	.word	0x04c4b400
 80041bc:	08009c24 	.word	0x08009c24
 80041c0:	20000000 	.word	0x20000000
 80041c4:	20000004 	.word	0x20000004

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041da:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e047      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041e0:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041ec:	4b26      	ldr	r3, [pc, #152]	@ (8004288 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e03e      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041f2:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d136      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041fe:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004208:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3301      	adds	r3, #1
 8004214:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d10c      	bne.n	8004236 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800421c:	4a1a      	ldr	r2, [pc, #104]	@ (8004288 <HAL_RCC_GetSysClockFreq+0xc0>)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004226:	68d2      	ldr	r2, [r2, #12]
 8004228:	0a12      	lsrs	r2, r2, #8
 800422a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	617b      	str	r3, [r7, #20]
      break;
 8004234:	e00c      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004236:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4a10      	ldr	r2, [pc, #64]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	0a12      	lsrs	r2, r2, #8
 8004244:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]
      break;
 800424e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0e5b      	lsrs	r3, r3, #25
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	e001      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004270:	693b      	ldr	r3, [r7, #16]
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	00f42400 	.word	0x00f42400
 8004288:	016e3600 	.word	0x016e3600

0800428c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4904      	ldr	r1, [pc, #16]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08009c34 	.word	0x08009c34

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042d4:	f7ff ffda 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0adb      	lsrs	r3, r3, #11
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4904      	ldr	r1, [pc, #16]	@ (80042f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	08009c34 	.word	0x08009c34

080042fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	220f      	movs	r2, #15
 800430a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800430c:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <HAL_RCC_GetClockConfig+0x5c>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004318:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004330:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800433e:	4b07      	ldr	r3, [pc, #28]	@ (800435c <HAL_RCC_GetClockConfig+0x60>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 020f 	and.w	r2, r3, #15
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	40022000 	.word	0x40022000

08004360 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004366:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d10c      	bne.n	800439e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004384:	4a17      	ldr	r2, [pc, #92]	@ (80043e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	0a12      	lsrs	r2, r2, #8
 8004392:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
    break;
 800439c:	e00c      	b.n	80043b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800439e:	4a12      	ldr	r2, [pc, #72]	@ (80043e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043a8:	68d2      	ldr	r2, [r2, #12]
 80043aa:	0a12      	lsrs	r2, r2, #8
 80043ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
    break;
 80043b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0e5b      	lsrs	r3, r3, #25
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043d2:	687b      	ldr	r3, [r7, #4]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40021000 	.word	0x40021000
 80043e4:	016e3600 	.word	0x016e3600
 80043e8:	00f42400 	.word	0x00f42400

080043ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f4:	2300      	movs	r3, #0
 80043f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8098 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b43      	ldr	r3, [pc, #268]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b40      	ldr	r3, [pc, #256]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441e:	4a3f      	ldr	r2, [pc, #252]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6593      	str	r3, [r2, #88]	@ 0x58
 8004426:	4b3d      	ldr	r3, [pc, #244]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004436:	4b3a      	ldr	r3, [pc, #232]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a39      	ldr	r2, [pc, #228]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004442:	f7fd fa4f 	bl	80018e4 <HAL_GetTick>
 8004446:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004448:	e009      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fd fa4b 	bl	80018e4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d902      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	74fb      	strb	r3, [r7, #19]
        break;
 800445c:	e005      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445e:	4b30      	ldr	r3, [pc, #192]	@ (8004520 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ef      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d159      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004470:	4b2a      	ldr	r3, [pc, #168]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01e      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	d019      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800448c:	4b23      	ldr	r3, [pc, #140]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004498:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044a8:	4b1c      	ldr	r3, [pc, #112]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ae:	4a1b      	ldr	r2, [pc, #108]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044b8:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd fa0b 	bl	80018e4 <HAL_GetTick>
 80044ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d0:	e00b      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fd fa07 	bl	80018e4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d902      	bls.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	74fb      	strb	r3, [r7, #19]
            break;
 80044e8:	e006      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ec      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fe:	4b07      	ldr	r3, [pc, #28]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450c:	4903      	ldr	r1, [pc, #12]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004514:	e008      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	74bb      	strb	r3, [r7, #18]
 800451a:	e005      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004528:	7c7b      	ldrb	r3, [r7, #17]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	4ba7      	ldr	r3, [pc, #668]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	4aa6      	ldr	r2, [pc, #664]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004538:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004546:	4ba1      	ldr	r3, [pc, #644]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454c:	f023 0203 	bic.w	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	499d      	ldr	r1, [pc, #628]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004568:	4b98      	ldr	r3, [pc, #608]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f023 020c 	bic.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4995      	ldr	r1, [pc, #596]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800458a:	4b90      	ldr	r3, [pc, #576]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004590:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	498c      	ldr	r1, [pc, #560]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ac:	4b87      	ldr	r3, [pc, #540]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	4984      	ldr	r1, [pc, #528]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ce:	4b7f      	ldr	r3, [pc, #508]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	497b      	ldr	r1, [pc, #492]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f0:	4b76      	ldr	r3, [pc, #472]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	4973      	ldr	r1, [pc, #460]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004612:	4b6e      	ldr	r3, [pc, #440]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004618:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	496a      	ldr	r1, [pc, #424]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004634:	4b65      	ldr	r3, [pc, #404]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	4962      	ldr	r1, [pc, #392]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004656:	4b5d      	ldr	r3, [pc, #372]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	4959      	ldr	r1, [pc, #356]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004678:	4b54      	ldr	r3, [pc, #336]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	4951      	ldr	r1, [pc, #324]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800469a:	4b4c      	ldr	r3, [pc, #304]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	4948      	ldr	r1, [pc, #288]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046bc:	4b43      	ldr	r3, [pc, #268]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	4940      	ldr	r1, [pc, #256]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d105      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a3a      	ldr	r2, [pc, #232]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d015      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f4:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	4932      	ldr	r1, [pc, #200]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004714:	4b2d      	ldr	r3, [pc, #180]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a2c      	ldr	r2, [pc, #176]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800471e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472c:	4b27      	ldr	r3, [pc, #156]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004732:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473a:	4924      	ldr	r1, [pc, #144]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800474a:	d105      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004764:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4916      	ldr	r1, [pc, #88]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004784:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a10      	ldr	r2, [pc, #64]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800478e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d019      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	4908      	ldr	r1, [pc, #32]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ba:	d109      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a02      	ldr	r2, [pc, #8]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
 80047c8:	e002      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047dc:	4b29      	ldr	r3, [pc, #164]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	4926      	ldr	r1, [pc, #152]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047fc:	4b21      	ldr	r3, [pc, #132]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004806:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004814:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004822:	4918      	ldr	r1, [pc, #96]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004832:	d105      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004834:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800483a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800484c:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800484e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	490a      	ldr	r1, [pc, #40]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004876:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004878:	7cbb      	ldrb	r3, [r7, #18]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000

08004888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e049      	b.n	800492e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fe2e 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fe60 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d001      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e054      	b.n	80049fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <HAL_TIM_Base_Start_IT+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497a:	d01d      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a22      	ldr	r2, [pc, #136]	@ (8004a0c <HAL_TIM_Base_Start_IT+0xd4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <HAL_TIM_Base_Start_IT+0xd8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <HAL_TIM_Base_Start_IT+0xdc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <HAL_TIM_Base_Start_IT+0xe0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <HAL_TIM_Base_Start_IT+0xe4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x80>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <HAL_TIM_Base_Start_IT+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d115      	bne.n	80049e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_TIM_Base_Start_IT+0xec>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d015      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0xbe>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d011      	beq.n	80049f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e008      	b.n	80049f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e000      	b.n	80049f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40015000 	.word	0x40015000
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e049      	b.n	8004ace <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f841 	bl	8004ad6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f000 fd90 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_TIM_PWM_Start+0x24>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e03c      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d109      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x3e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	e02f      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x58>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x72>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x8c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x9e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0a6      	b.n	8004ce0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0xb6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba0:	e023      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xc6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	e01b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xd6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0xe6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xf6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be0:	e003      	b.n	8004bea <HAL_TIM_PWM_Start+0xfe>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f9b8 	bl	8005f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ce8 <HAL_TIM_PWM_Start+0x1fc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a39      	ldr	r2, [pc, #228]	@ (8004cec <HAL_TIM_PWM_Start+0x200>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a37      	ldr	r2, [pc, #220]	@ (8004cf0 <HAL_TIM_PWM_Start+0x204>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	@ (8004cf4 <HAL_TIM_PWM_Start+0x208>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a34      	ldr	r2, [pc, #208]	@ (8004cf8 <HAL_TIM_PWM_Start+0x20c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_PWM_Start+0x148>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	@ (8004cfc <HAL_TIM_PWM_Start+0x210>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_PWM_Start+0x14c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start+0x14e>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a25      	ldr	r2, [pc, #148]	@ (8004ce8 <HAL_TIM_PWM_Start+0x1fc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <HAL_TIM_PWM_Start+0x214>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a24      	ldr	r2, [pc, #144]	@ (8004d04 <HAL_TIM_PWM_Start+0x218>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a23      	ldr	r2, [pc, #140]	@ (8004d08 <HAL_TIM_PWM_Start+0x21c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	@ (8004cec <HAL_TIM_PWM_Start+0x200>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	@ (8004cf0 <HAL_TIM_PWM_Start+0x204>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x1b2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a18      	ldr	r2, [pc, #96]	@ (8004cfc <HAL_TIM_PWM_Start+0x210>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d115      	bne.n	8004cca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	4b19      	ldr	r3, [pc, #100]	@ (8004d0c <HAL_TIM_PWM_Start+0x220>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d015      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x1f0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb6:	d011      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	e008      	b.n	8004cdc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e000      	b.n	8004cde <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40015000 	.word	0x40015000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	00010007 	.word	0x00010007

08004d10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 f920 	bl	8005f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a40      	ldr	r2, [pc, #256]	@ (8004e30 <HAL_TIM_PWM_Stop+0x120>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <HAL_TIM_PWM_Stop+0x54>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a3f      	ldr	r2, [pc, #252]	@ (8004e34 <HAL_TIM_PWM_Stop+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_TIM_PWM_Stop+0x54>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3d      	ldr	r2, [pc, #244]	@ (8004e38 <HAL_TIM_PWM_Stop+0x128>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_TIM_PWM_Stop+0x54>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e3c <HAL_TIM_PWM_Stop+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_TIM_PWM_Stop+0x54>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3a      	ldr	r2, [pc, #232]	@ (8004e40 <HAL_TIM_PWM_Stop+0x130>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_TIM_PWM_Stop+0x54>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a39      	ldr	r2, [pc, #228]	@ (8004e44 <HAL_TIM_PWM_Stop+0x134>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_PWM_Stop+0x58>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_Stop+0x5a>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a1a      	ldr	r2, [r3, #32]
 8004d74:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_TIM_PWM_Stop+0x8e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_PWM_Stop+0x8e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_TIM_PWM_Stop+0xbe>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_TIM_PWM_Stop+0xbe>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Stop+0xce>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ddc:	e023      	b.n	8004e26 <HAL_TIM_PWM_Stop+0x116>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Stop+0xde>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dec:	e01b      	b.n	8004e26 <HAL_TIM_PWM_Stop+0x116>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Stop+0xee>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dfc:	e013      	b.n	8004e26 <HAL_TIM_PWM_Stop+0x116>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	d104      	bne.n	8004e0e <HAL_TIM_PWM_Stop+0xfe>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e0c:	e00b      	b.n	8004e26 <HAL_TIM_PWM_Stop+0x116>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Stop+0x10e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1c:	e003      	b.n	8004e26 <HAL_TIM_PWM_Stop+0x116>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40015000 	.word	0x40015000

08004e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0202 	mvn.w	r2, #2
 8004e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fb5c 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fb4e 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb5f 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d020      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0204 	mvn.w	r2, #4
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb36 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb28 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb39 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0208 	mvn.w	r2, #8
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2204      	movs	r2, #4
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb10 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fb02 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fb13 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01b      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 faea 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fadc 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 faed 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0201 	mvn.w	r2, #1
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb ffea 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 fafe 	bl	80065de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00c      	beq.n	8005006 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 faf6 	bl	80065f2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 faa7 	bl	8005578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0220 	mvn.w	r2, #32
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 fabe 	bl	80065ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 faca 	bl	8006606 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fac2 	bl	800661a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00c      	beq.n	80050ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f001 faba 	bl	800662e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fab2 	bl	8006642 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005102:	2302      	movs	r3, #2
 8005104:	e0ff      	b.n	8005306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b14      	cmp	r3, #20
 8005112:	f200 80f0 	bhi.w	80052f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005116:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005171 	.word	0x08005171
 8005120:	080052f7 	.word	0x080052f7
 8005124:	080052f7 	.word	0x080052f7
 8005128:	080052f7 	.word	0x080052f7
 800512c:	080051b1 	.word	0x080051b1
 8005130:	080052f7 	.word	0x080052f7
 8005134:	080052f7 	.word	0x080052f7
 8005138:	080052f7 	.word	0x080052f7
 800513c:	080051f3 	.word	0x080051f3
 8005140:	080052f7 	.word	0x080052f7
 8005144:	080052f7 	.word	0x080052f7
 8005148:	080052f7 	.word	0x080052f7
 800514c:	08005233 	.word	0x08005233
 8005150:	080052f7 	.word	0x080052f7
 8005154:	080052f7 	.word	0x080052f7
 8005158:	080052f7 	.word	0x080052f7
 800515c:	08005275 	.word	0x08005275
 8005160:	080052f7 	.word	0x080052f7
 8005164:	080052f7 	.word	0x080052f7
 8005168:	080052f7 	.word	0x080052f7
 800516c:	080052b5 	.word	0x080052b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fabc 	bl	80056f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	619a      	str	r2, [r3, #24]
      break;
 80051ae:	e0a5      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb36 	bl	8005828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]
      break;
 80051f0:	e084      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fba9 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0208 	orr.w	r2, r2, #8
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0204 	bic.w	r2, r2, #4
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
      break;
 8005230:	e064      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fc1b 	bl	8005a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
      break;
 8005272:	e043      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc8e 	bl	8005b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052b2:	e023      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fcd8 	bl	8005c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052f4:	e002      	b.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
      break;
 80052fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop

08005310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x1c>
 8005328:	2302      	movs	r3, #2
 800532a:	e0f6      	b.n	800551a <HAL_TIM_ConfigClockSource+0x20a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800534a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800534e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6f      	ldr	r2, [pc, #444]	@ (8005524 <HAL_TIM_ConfigClockSource+0x214>)
 8005366:	4293      	cmp	r3, r2
 8005368:	f000 80c1 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 800536c:	4a6d      	ldr	r2, [pc, #436]	@ (8005524 <HAL_TIM_ConfigClockSource+0x214>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f200 80c6 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005374:	4a6c      	ldr	r2, [pc, #432]	@ (8005528 <HAL_TIM_ConfigClockSource+0x218>)
 8005376:	4293      	cmp	r3, r2
 8005378:	f000 80b9 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 800537c:	4a6a      	ldr	r2, [pc, #424]	@ (8005528 <HAL_TIM_ConfigClockSource+0x218>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f200 80be 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005384:	4a69      	ldr	r2, [pc, #420]	@ (800552c <HAL_TIM_ConfigClockSource+0x21c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	f000 80b1 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 800538c:	4a67      	ldr	r2, [pc, #412]	@ (800552c <HAL_TIM_ConfigClockSource+0x21c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	f200 80b6 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005394:	4a66      	ldr	r2, [pc, #408]	@ (8005530 <HAL_TIM_ConfigClockSource+0x220>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f000 80a9 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 800539c:	4a64      	ldr	r2, [pc, #400]	@ (8005530 <HAL_TIM_ConfigClockSource+0x220>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	f200 80ae 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053a4:	4a63      	ldr	r2, [pc, #396]	@ (8005534 <HAL_TIM_ConfigClockSource+0x224>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f000 80a1 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 80053ac:	4a61      	ldr	r2, [pc, #388]	@ (8005534 <HAL_TIM_ConfigClockSource+0x224>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f200 80a6 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053b4:	4a60      	ldr	r2, [pc, #384]	@ (8005538 <HAL_TIM_ConfigClockSource+0x228>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f000 8099 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 80053bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005538 <HAL_TIM_ConfigClockSource+0x228>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f200 809e 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80053c8:	f000 8091 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 80053cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80053d0:	f200 8096 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d8:	f000 8089 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 80053dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053e0:	f200 808e 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e8:	d03e      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0x158>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ee:	f200 8087 	bhi.w	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	f000 8086 	beq.w	8005506 <HAL_TIM_ConfigClockSource+0x1f6>
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fe:	d87f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005400:	2b70      	cmp	r3, #112	@ 0x70
 8005402:	d01a      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x12a>
 8005404:	2b70      	cmp	r3, #112	@ 0x70
 8005406:	d87b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d050      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x19e>
 800540c:	2b60      	cmp	r3, #96	@ 0x60
 800540e:	d877      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005410:	2b50      	cmp	r3, #80	@ 0x50
 8005412:	d03c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x17e>
 8005414:	2b50      	cmp	r3, #80	@ 0x50
 8005416:	d873      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005418:	2b40      	cmp	r3, #64	@ 0x40
 800541a:	d058      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x1be>
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d86f      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d064      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 8005424:	2b30      	cmp	r3, #48	@ 0x30
 8005426:	d86b      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d060      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d867      	bhi.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d05c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d05a      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x1de>
 8005438:	e062      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800544a:	f000 fd6d 	bl	8005f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800545c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
      break;
 8005466:	e04f      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	f000 fd56 	bl	8005f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800548a:	609a      	str	r2, [r3, #8]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fcc8 	bl	8005e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2150      	movs	r1, #80	@ 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fd21 	bl	8005eee <TIM_ITRx_SetConfig>
      break;
 80054ac:	e02c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ba:	461a      	mov	r2, r3
 80054bc:	f000 fce7 	bl	8005e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2160      	movs	r1, #96	@ 0x60
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fd11 	bl	8005eee <TIM_ITRx_SetConfig>
      break;
 80054cc:	e01c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	461a      	mov	r2, r3
 80054dc:	f000 fca8 	bl	8005e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	@ 0x40
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fd01 	bl	8005eee <TIM_ITRx_SetConfig>
      break;
 80054ec:	e00c      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f000 fcf8 	bl	8005eee <TIM_ITRx_SetConfig>
      break;
 80054fe:	e003      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e000      	b.n	8005508 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	00100070 	.word	0x00100070
 8005528:	00100060 	.word	0x00100060
 800552c:	00100050 	.word	0x00100050
 8005530:	00100040 	.word	0x00100040
 8005534:	00100030 	.word	0x00100030
 8005538:	00100020 	.word	0x00100020

0800553c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a4c      	ldr	r2, [pc, #304]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d017      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d013      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a49      	ldr	r2, [pc, #292]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a48      	ldr	r2, [pc, #288]	@ (80056d8 <TIM_Base_SetConfig+0x14c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a47      	ldr	r2, [pc, #284]	@ (80056dc <TIM_Base_SetConfig+0x150>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a46      	ldr	r2, [pc, #280]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a45      	ldr	r2, [pc, #276]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a39      	ldr	r2, [pc, #228]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d023      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d01f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a36      	ldr	r2, [pc, #216]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a35      	ldr	r2, [pc, #212]	@ (80056d8 <TIM_Base_SetConfig+0x14c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a34      	ldr	r2, [pc, #208]	@ (80056dc <TIM_Base_SetConfig+0x150>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a33      	ldr	r2, [pc, #204]	@ (80056e8 <TIM_Base_SetConfig+0x15c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a32      	ldr	r2, [pc, #200]	@ (80056ec <TIM_Base_SetConfig+0x160>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a31      	ldr	r2, [pc, #196]	@ (80056f0 <TIM_Base_SetConfig+0x164>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1a      	ldr	r2, [pc, #104]	@ (80056e8 <TIM_Base_SetConfig+0x15c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <TIM_Base_SetConfig+0x160>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <TIM_Base_SetConfig+0x164>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
  }
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40015000 	.word	0x40015000
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 0302 	bic.w	r3, r3, #2
 8005740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a30      	ldr	r2, [pc, #192]	@ (8005810 <TIM_OC1_SetConfig+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2f      	ldr	r2, [pc, #188]	@ (8005814 <TIM_OC1_SetConfig+0x120>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2e      	ldr	r2, [pc, #184]	@ (8005818 <TIM_OC1_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2d      	ldr	r2, [pc, #180]	@ (800581c <TIM_OC1_SetConfig+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2c      	ldr	r2, [pc, #176]	@ (8005820 <TIM_OC1_SetConfig+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <TIM_OC1_SetConfig+0x130>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <TIM_OC1_SetConfig+0x11c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <TIM_OC1_SetConfig+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <TIM_OC1_SetConfig+0x124>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <TIM_OC1_SetConfig+0x128>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <TIM_OC1_SetConfig+0x12c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <TIM_OC1_SetConfig+0x130>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d111      	bne.n	80057ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800
 8005824:	40015000 	.word	0x40015000

08005828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0320 	bic.w	r3, r3, #32
 8005876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a2c      	ldr	r2, [pc, #176]	@ (8005938 <TIM_OC2_SetConfig+0x110>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC2_SetConfig+0x74>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2b      	ldr	r2, [pc, #172]	@ (800593c <TIM_OC2_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <TIM_OC2_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <TIM_OC2_SetConfig+0x110>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1e      	ldr	r2, [pc, #120]	@ (800593c <TIM_OC2_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005944 <TIM_OC2_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <TIM_OC2_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <TIM_OC2_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <TIM_OC2_SetConfig+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d113      	bne.n	8005910 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40015000 	.word	0x40015000
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800599c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2b      	ldr	r2, [pc, #172]	@ (8005a5c <TIM_OC3_SetConfig+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC3_SetConfig+0x72>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a60 <TIM_OC3_SetConfig+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC3_SetConfig+0x72>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a29      	ldr	r2, [pc, #164]	@ (8005a64 <TIM_OC3_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a5c <TIM_OC3_SetConfig+0x10c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <TIM_OC3_SetConfig+0x110>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a68 <TIM_OC3_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <TIM_OC3_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <TIM_OC3_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a16      	ldr	r2, [pc, #88]	@ (8005a64 <TIM_OC3_SetConfig+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400
 8005a64:	40015000 	.word	0x40015000
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800

08005a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	031b      	lsls	r3, r3, #12
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b84 <TIM_OC4_SetConfig+0x110>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x74>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <TIM_OC4_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x74>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b8c <TIM_OC4_SetConfig+0x118>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <TIM_OC4_SetConfig+0x110>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b88 <TIM_OC4_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1e      	ldr	r2, [pc, #120]	@ (8005b90 <TIM_OC4_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b94 <TIM_OC4_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <TIM_OC4_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC4_SetConfig+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40015000 	.word	0x40015000
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <TIM_OC5_SetConfig+0xbc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <TIM_OC5_SetConfig+0xc0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <TIM_OC5_SetConfig+0xc4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <TIM_OC5_SetConfig+0xc8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <TIM_OC5_SetConfig+0xcc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a14      	ldr	r2, [pc, #80]	@ (8005c6c <TIM_OC5_SetConfig+0xd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d109      	bne.n	8005c32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40013400 	.word	0x40013400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	40015000 	.word	0x40015000

08005c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	051b      	lsls	r3, r3, #20
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <TIM_OC6_SetConfig+0xc0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <TIM_OC6_SetConfig+0xc4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00f      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <TIM_OC6_SetConfig+0xc8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <TIM_OC6_SetConfig+0xcc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a16      	ldr	r2, [pc, #88]	@ (8005d40 <TIM_OC6_SetConfig+0xd0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <TIM_OC6_SetConfig+0xd4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40015000 	.word	0x40015000

08005d48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0201 	bic.w	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a28      	ldr	r2, [pc, #160]	@ (8005e14 <TIM_TI1_SetConfig+0xcc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01b      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7c:	d017      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a25      	ldr	r2, [pc, #148]	@ (8005e18 <TIM_TI1_SetConfig+0xd0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a24      	ldr	r2, [pc, #144]	@ (8005e1c <TIM_TI1_SetConfig+0xd4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00f      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a23      	ldr	r2, [pc, #140]	@ (8005e20 <TIM_TI1_SetConfig+0xd8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a22      	ldr	r2, [pc, #136]	@ (8005e24 <TIM_TI1_SetConfig+0xdc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a21      	ldr	r2, [pc, #132]	@ (8005e28 <TIM_TI1_SetConfig+0xe0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_TI1_SetConfig+0x66>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a20      	ldr	r2, [pc, #128]	@ (8005e2c <TIM_TI1_SetConfig+0xe4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d101      	bne.n	8005db2 <TIM_TI1_SetConfig+0x6a>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <TIM_TI1_SetConfig+0x6c>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e003      	b.n	8005dd2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f023 030a 	bic.w	r3, r3, #10
 8005dec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 030a 	and.w	r3, r3, #10
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40015000 	.word	0x40015000

08005e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0201 	bic.w	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 030a 	bic.w	r3, r3, #10
 8005e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f023 0210 	bic.w	r2, r3, #16
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	031b      	lsls	r3, r3, #12
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f043 0307 	orr.w	r3, r3, #7
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	021a      	lsls	r2, r3, #8
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1a      	ldr	r2, [r3, #32]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	@ 0x28
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e0a0      	b.n	8006108 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb fab8 	bl	8001550 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7ff faca 	bl	800558c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2203      	movs	r2, #3
 8006006:	f7ff fe9f 	bl	8005d48 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 020c 	bic.w	r2, r2, #12
 8006018:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6999      	ldr	r1, [r3, #24]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800603a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800605e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	f023 0307 	bic.w	r3, r3, #7
 8006072:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0204 	orr.w	r2, r2, #4
 8006082:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800608c:	2370      	movs	r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006090:	2300      	movs	r3, #0
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006094:	2300      	movs	r3, #0
 8006096:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f107 020c 	add.w	r2, r7, #12
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fbbb 	bl	8005828 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80060d4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3728      	adds	r7, #40	@ 0x28
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_TIMEx_PWMN_Start+0x24>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e022      	b.n	800617a <HAL_TIMEx_PWMN_Start+0x6a>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b04      	cmp	r3, #4
 8006138:	d109      	bne.n	800614e <HAL_TIMEx_PWMN_Start+0x3e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	e015      	b.n	800617a <HAL_TIMEx_PWMN_Start+0x6a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d109      	bne.n	8006168 <HAL_TIMEx_PWMN_Start+0x58>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	bf14      	ite	ne
 8006160:	2301      	movne	r3, #1
 8006162:	2300      	moveq	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e008      	b.n	800617a <HAL_TIMEx_PWMN_Start+0x6a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e073      	b.n	800626a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <HAL_TIMEx_PWMN_Start+0x82>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006190:	e013      	b.n	80061ba <HAL_TIMEx_PWMN_Start+0xaa>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b04      	cmp	r3, #4
 8006196:	d104      	bne.n	80061a2 <HAL_TIMEx_PWMN_Start+0x92>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061a0:	e00b      	b.n	80061ba <HAL_TIMEx_PWMN_Start+0xaa>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d104      	bne.n	80061b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061b0:	e003      	b.n	80061ba <HAL_TIMEx_PWMN_Start+0xaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2204      	movs	r2, #4
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa47 	bl	8006656 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	@ (8006274 <HAL_TIMEx_PWMN_Start+0x164>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <HAL_TIMEx_PWMN_Start+0x168>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a20      	ldr	r2, [pc, #128]	@ (800627c <HAL_TIMEx_PWMN_Start+0x16c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <HAL_TIMEx_PWMN_Start+0x170>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <HAL_TIMEx_PWMN_Start+0x174>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <HAL_TIMEx_PWMN_Start+0x178>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIMEx_PWMN_Start+0x118>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1a      	ldr	r2, [pc, #104]	@ (800628c <HAL_TIMEx_PWMN_Start+0x17c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d115      	bne.n	8006254 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	4b18      	ldr	r3, [pc, #96]	@ (8006290 <HAL_TIMEx_PWMN_Start+0x180>)
 8006230:	4013      	ands	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d015      	beq.n	8006266 <HAL_TIMEx_PWMN_Start+0x156>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006240:	d011      	beq.n	8006266 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	e008      	b.n	8006266 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e000      	b.n	8006268 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40015000 	.word	0x40015000
 8006290:	00010007 	.word	0x00010007

08006294 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f9d5 	bl	8006656 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10f      	bne.n	80062dc <HAL_TIMEx_PWMN_Stop+0x48>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_TIMEx_PWMN_Stop+0x48>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <HAL_TIMEx_PWMN_Stop+0x78>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d107      	bne.n	800630c <HAL_TIMEx_PWMN_Stop+0x78>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <HAL_TIMEx_PWMN_Stop+0x88>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800631a:	e013      	b.n	8006344 <HAL_TIMEx_PWMN_Stop+0xb0>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b04      	cmp	r3, #4
 8006320:	d104      	bne.n	800632c <HAL_TIMEx_PWMN_Stop+0x98>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800632a:	e00b      	b.n	8006344 <HAL_TIMEx_PWMN_Stop+0xb0>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b08      	cmp	r3, #8
 8006330:	d104      	bne.n	800633c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800633a:	e003      	b.n	8006344 <HAL_TIMEx_PWMN_Stop+0xb0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e074      	b.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a34      	ldr	r2, [pc, #208]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a33      	ldr	r2, [pc, #204]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a31      	ldr	r2, [pc, #196]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d108      	bne.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d022      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e8:	d01d      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d018      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a11      	ldr	r2, [pc, #68]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d10c      	bne.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40015000 	.word	0x40015000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40014000 	.word	0x40014000

0800647c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006494:	2302      	movs	r3, #2
 8006496:	e078      	b.n	800658a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d009      	beq.n	800653e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1b      	ldr	r2, [pc, #108]	@ (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d004      	beq.n	800653e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d11c      	bne.n	8006578 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40015000 	.word	0x40015000

080065a4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80065ba:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006656:	b480      	push	{r7}
 8006658:	b087      	sub	sp, #28
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2204      	movs	r2, #4
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	43db      	mvns	r3, r3
 8006678:	401a      	ands	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	431a      	orrs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e042      	b.n	8006738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb f859 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2224      	movs	r2, #36	@ 0x24
 80066ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ff60 	bl	80075b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fc61 	bl	8006fb8 <UART_SetConfig>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e01b      	b.n	8006738 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800670e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800671e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 ffdf 	bl	80076f4 <UART_CheckIdleState>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	@ 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006756:	2b20      	cmp	r3, #32
 8006758:	d17b      	bne.n	8006852 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_UART_Transmit+0x26>
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e074      	b.n	8006854 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2221      	movs	r2, #33	@ 0x21
 8006776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800677a:	f7fb f8b3 	bl	80018e4 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b4:	e030      	b.n	8006818 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	@ 0x80
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 f841 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e03d      	b.n	8006854 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1c8      	bne.n	80067b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f001 f80a 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	@ 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006870:	2b20      	cmp	r3, #32
 8006872:	d137      	bne.n	80068e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Receive_IT+0x24>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e030      	b.n	80068e6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a18      	ldr	r2, [pc, #96]	@ (80068f0 <HAL_UART_Receive_IT+0x94>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01f      	beq.n	80068d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	613b      	str	r3, [r7, #16]
   return(result);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	623b      	str	r3, [r7, #32]
 80068c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	461a      	mov	r2, r3
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 f822 	bl	8007924 <UART_Start_Receive_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	e000      	b.n	80068e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068e4:	2302      	movs	r3, #2
  }
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3728      	adds	r7, #40	@ 0x28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40008000 	.word	0x40008000

080068f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b0ba      	sub	sp, #232	@ 0xe8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800691a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800691e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006922:	4013      	ands	r3, r2
 8006924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11b      	bne.n	8006968 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d015      	beq.n	8006968 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800694c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8300 	beq.w	8006f5e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
      }
      return;
 8006966:	e2fa      	b.n	8006f5e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8123 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006972:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006976:	4b8d      	ldr	r3, [pc, #564]	@ (8006bac <HAL_UART_IRQHandler+0x2b8>)
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800697e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006982:	4b8b      	ldr	r3, [pc, #556]	@ (8006bb0 <HAL_UART_IRQHandler+0x2bc>)
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8116 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d011      	beq.n	80069bc <HAL_UART_IRQHandler+0xc8>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2201      	movs	r2, #1
 80069aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <HAL_UART_IRQHandler+0xf8>
 80069c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2202      	movs	r2, #2
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e2:	f043 0204 	orr.w	r2, r3, #4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d011      	beq.n	8006a1c <HAL_UART_IRQHandler+0x128>
 80069f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	f043 0202 	orr.w	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a38:	4b5c      	ldr	r3, [pc, #368]	@ (8006bac <HAL_UART_IRQHandler+0x2b8>)
 8006a3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2208      	movs	r2, #8
 8006a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <HAL_UART_IRQHandler+0x196>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8266 	beq.w	8006f62 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d013      	beq.n	8006aca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d105      	bne.n	8006aba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d054      	beq.n	8006b98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f83a 	bl	8007b68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b40      	cmp	r3, #64	@ 0x40
 8006b00:	d146      	bne.n	8006b90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1d9      	bne.n	8006b02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d017      	beq.n	8006b88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5e:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <HAL_UART_IRQHandler+0x2c0>)
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fc fc06 	bl	800337a <HAL_DMA_Abort_IT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d019      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b82:	4610      	mov	r0, r2
 8006b84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b86:	e00f      	b.n	8006ba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f9ff 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8e:	e00b      	b.n	8006ba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f9fb 	bl	8006f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b96:	e007      	b.n	8006ba8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9f7 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ba6:	e1dc      	b.n	8006f62 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	bf00      	nop
    return;
 8006baa:	e1da      	b.n	8006f62 <HAL_UART_IRQHandler+0x66e>
 8006bac:	10000001 	.word	0x10000001
 8006bb0:	04000120 	.word	0x04000120
 8006bb4:	08007c35 	.word	0x08007c35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	f040 8170 	bne.w	8006ea2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8169 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd4:	f003 0310 	and.w	r3, r3, #16
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8162 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2210      	movs	r2, #16
 8006be4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf0:	2b40      	cmp	r3, #64	@ 0x40
 8006bf2:	f040 80d8 	bne.w	8006da6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80af 	beq.w	8006d6c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	f080 80a7 	bcs.w	8006d6c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 8087 	bne.w	8006d4a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1da      	bne.n	8006c3c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e1      	bne.n	8006c86 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e3      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e4      	bne.n	8006d08 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fc fabf 	bl	80032c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f91b 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d6a:	e0fc      	b.n	8006f66 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d76:	429a      	cmp	r2, r3
 8006d78:	f040 80f5 	bne.w	8006f66 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f040 80eb 	bne.w	8006f66 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f8fe 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
      return;
 8006da4:	e0df      	b.n	8006f66 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80d1 	beq.w	8006f6a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80cc 	beq.w	8006f6a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006df6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e4      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	623b      	str	r3, [r7, #32]
   return(result);
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e30:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e1      	bne.n	8006e08 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 0310 	bic.w	r3, r3, #16
 8006e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69b9      	ldr	r1, [r7, #24]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	617b      	str	r3, [r7, #20]
   return(result);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e4      	bne.n	8006e58 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f880 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ea0:	e063      	b.n	8006f6a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00e      	beq.n	8006ecc <HAL_UART_IRQHandler+0x5d8>
 8006eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ec2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fc17 	bl	80086f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eca:	e051      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d014      	beq.n	8006f02 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d03a      	beq.n	8006f6e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
    }
    return;
 8006f00:	e035      	b.n	8006f6e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_UART_IRQHandler+0x62e>
 8006f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fea0 	bl	8007c60 <UART_EndTransmit_IT>
    return;
 8006f20:	e026      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <HAL_UART_IRQHandler+0x64e>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fbf0 	bl	8008720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f40:	e016      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <HAL_UART_IRQHandler+0x67c>
 8006f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da0c      	bge.n	8006f70 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fbd8 	bl	800870c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f5c:	e008      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f5e:	bf00      	nop
 8006f60:	e006      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f62:	bf00      	nop
 8006f64:	e004      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f6e:	bf00      	nop
  }
}
 8006f70:	37e8      	adds	r7, #232	@ 0xe8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop

08006f78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fbc:	b08c      	sub	sp, #48	@ 0x30
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4baa      	ldr	r3, [pc, #680]	@ (8007290 <UART_SetConfig+0x2d8>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a9f      	ldr	r2, [pc, #636]	@ (8007294 <UART_SetConfig+0x2dc>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d004      	beq.n	8007024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007020:	4313      	orrs	r3, r2
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800702e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007038:	430b      	orrs	r3, r1
 800703a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007042:	f023 010f 	bic.w	r1, r3, #15
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a90      	ldr	r2, [pc, #576]	@ (8007298 <UART_SetConfig+0x2e0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d125      	bne.n	80070a8 <UART_SetConfig+0xf0>
 800705c:	4b8f      	ldr	r3, [pc, #572]	@ (800729c <UART_SetConfig+0x2e4>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	2b03      	cmp	r3, #3
 8007068:	d81a      	bhi.n	80070a0 <UART_SetConfig+0xe8>
 800706a:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <UART_SetConfig+0xb8>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007081 	.word	0x08007081
 8007074:	08007091 	.word	0x08007091
 8007078:	08007089 	.word	0x08007089
 800707c:	08007099 	.word	0x08007099
 8007080:	2301      	movs	r3, #1
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007086:	e116      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007088:	2302      	movs	r3, #2
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708e:	e112      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007090:	2304      	movs	r3, #4
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007096:	e10e      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007098:	2308      	movs	r3, #8
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709e:	e10a      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a6:	e106      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7c      	ldr	r2, [pc, #496]	@ (80072a0 <UART_SetConfig+0x2e8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d138      	bne.n	8007124 <UART_SetConfig+0x16c>
 80070b2:	4b7a      	ldr	r3, [pc, #488]	@ (800729c <UART_SetConfig+0x2e4>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b8:	f003 030c 	and.w	r3, r3, #12
 80070bc:	2b0c      	cmp	r3, #12
 80070be:	d82d      	bhi.n	800711c <UART_SetConfig+0x164>
 80070c0:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x110>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070fd 	.word	0x080070fd
 80070cc:	0800711d 	.word	0x0800711d
 80070d0:	0800711d 	.word	0x0800711d
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	0800710d 	.word	0x0800710d
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	0800711d 	.word	0x0800711d
 80070e4:	0800711d 	.word	0x0800711d
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007115 	.word	0x08007115
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007102:	e0d8      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007104:	2302      	movs	r3, #2
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710a:	e0d4      	b.n	80072b6 <UART_SetConfig+0x2fe>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007112:	e0d0      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711a:	e0cc      	b.n	80072b6 <UART_SetConfig+0x2fe>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007122:	e0c8      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5e      	ldr	r2, [pc, #376]	@ (80072a4 <UART_SetConfig+0x2ec>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d125      	bne.n	800717a <UART_SetConfig+0x1c2>
 800712e:	4b5b      	ldr	r3, [pc, #364]	@ (800729c <UART_SetConfig+0x2e4>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007134:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007138:	2b30      	cmp	r3, #48	@ 0x30
 800713a:	d016      	beq.n	800716a <UART_SetConfig+0x1b2>
 800713c:	2b30      	cmp	r3, #48	@ 0x30
 800713e:	d818      	bhi.n	8007172 <UART_SetConfig+0x1ba>
 8007140:	2b20      	cmp	r3, #32
 8007142:	d00a      	beq.n	800715a <UART_SetConfig+0x1a2>
 8007144:	2b20      	cmp	r3, #32
 8007146:	d814      	bhi.n	8007172 <UART_SetConfig+0x1ba>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <UART_SetConfig+0x19a>
 800714c:	2b10      	cmp	r3, #16
 800714e:	d008      	beq.n	8007162 <UART_SetConfig+0x1aa>
 8007150:	e00f      	b.n	8007172 <UART_SetConfig+0x1ba>
 8007152:	2300      	movs	r3, #0
 8007154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007158:	e0ad      	b.n	80072b6 <UART_SetConfig+0x2fe>
 800715a:	2302      	movs	r3, #2
 800715c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007160:	e0a9      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007162:	2304      	movs	r3, #4
 8007164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007168:	e0a5      	b.n	80072b6 <UART_SetConfig+0x2fe>
 800716a:	2308      	movs	r3, #8
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007170:	e0a1      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007172:	2310      	movs	r3, #16
 8007174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007178:	e09d      	b.n	80072b6 <UART_SetConfig+0x2fe>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a4a      	ldr	r2, [pc, #296]	@ (80072a8 <UART_SetConfig+0x2f0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d125      	bne.n	80071d0 <UART_SetConfig+0x218>
 8007184:	4b45      	ldr	r3, [pc, #276]	@ (800729c <UART_SetConfig+0x2e4>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800718e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007190:	d016      	beq.n	80071c0 <UART_SetConfig+0x208>
 8007192:	2bc0      	cmp	r3, #192	@ 0xc0
 8007194:	d818      	bhi.n	80071c8 <UART_SetConfig+0x210>
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d00a      	beq.n	80071b0 <UART_SetConfig+0x1f8>
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d814      	bhi.n	80071c8 <UART_SetConfig+0x210>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <UART_SetConfig+0x1f0>
 80071a2:	2b40      	cmp	r3, #64	@ 0x40
 80071a4:	d008      	beq.n	80071b8 <UART_SetConfig+0x200>
 80071a6:	e00f      	b.n	80071c8 <UART_SetConfig+0x210>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ae:	e082      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80071b0:	2302      	movs	r3, #2
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b6:	e07e      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80071b8:	2304      	movs	r3, #4
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071be:	e07a      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80071c0:	2308      	movs	r3, #8
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e076      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80071c8:	2310      	movs	r3, #16
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e072      	b.n	80072b6 <UART_SetConfig+0x2fe>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a35      	ldr	r2, [pc, #212]	@ (80072ac <UART_SetConfig+0x2f4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d12a      	bne.n	8007230 <UART_SetConfig+0x278>
 80071da:	4b30      	ldr	r3, [pc, #192]	@ (800729c <UART_SetConfig+0x2e4>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071e8:	d01a      	beq.n	8007220 <UART_SetConfig+0x268>
 80071ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ee:	d81b      	bhi.n	8007228 <UART_SetConfig+0x270>
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f4:	d00c      	beq.n	8007210 <UART_SetConfig+0x258>
 80071f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071fa:	d815      	bhi.n	8007228 <UART_SetConfig+0x270>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <UART_SetConfig+0x250>
 8007200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007204:	d008      	beq.n	8007218 <UART_SetConfig+0x260>
 8007206:	e00f      	b.n	8007228 <UART_SetConfig+0x270>
 8007208:	2300      	movs	r3, #0
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720e:	e052      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007210:	2302      	movs	r3, #2
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e04e      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e04a      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e046      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e042      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a17      	ldr	r2, [pc, #92]	@ (8007294 <UART_SetConfig+0x2dc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d13a      	bne.n	80072b0 <UART_SetConfig+0x2f8>
 800723a:	4b18      	ldr	r3, [pc, #96]	@ (800729c <UART_SetConfig+0x2e4>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007240:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007244:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007248:	d01a      	beq.n	8007280 <UART_SetConfig+0x2c8>
 800724a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800724e:	d81b      	bhi.n	8007288 <UART_SetConfig+0x2d0>
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007254:	d00c      	beq.n	8007270 <UART_SetConfig+0x2b8>
 8007256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800725a:	d815      	bhi.n	8007288 <UART_SetConfig+0x2d0>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <UART_SetConfig+0x2b0>
 8007260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007264:	d008      	beq.n	8007278 <UART_SetConfig+0x2c0>
 8007266:	e00f      	b.n	8007288 <UART_SetConfig+0x2d0>
 8007268:	2300      	movs	r3, #0
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726e:	e022      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007276:	e01e      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007278:	2304      	movs	r3, #4
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727e:	e01a      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007280:	2308      	movs	r3, #8
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007286:	e016      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007288:	2310      	movs	r3, #16
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728e:	e012      	b.n	80072b6 <UART_SetConfig+0x2fe>
 8007290:	cfff69f3 	.word	0xcfff69f3
 8007294:	40008000 	.word	0x40008000
 8007298:	40013800 	.word	0x40013800
 800729c:	40021000 	.word	0x40021000
 80072a0:	40004400 	.word	0x40004400
 80072a4:	40004800 	.word	0x40004800
 80072a8:	40004c00 	.word	0x40004c00
 80072ac:	40005000 	.word	0x40005000
 80072b0:	2310      	movs	r3, #16
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4aae      	ldr	r2, [pc, #696]	@ (8007574 <UART_SetConfig+0x5bc>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	f040 8097 	bne.w	80073f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d823      	bhi.n	8007312 <UART_SetConfig+0x35a>
 80072ca:	a201      	add	r2, pc, #4	@ (adr r2, 80072d0 <UART_SetConfig+0x318>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	08007313 	.word	0x08007313
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	08007313 	.word	0x08007313
 80072e0:	08007303 	.word	0x08007303
 80072e4:	08007313 	.word	0x08007313
 80072e8:	08007313 	.word	0x08007313
 80072ec:	08007313 	.word	0x08007313
 80072f0:	0800730b 	.word	0x0800730b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f4:	f7fc ffd6 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 80072f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072fa:	e010      	b.n	800731e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007578 <UART_SetConfig+0x5c0>)
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007300:	e00d      	b.n	800731e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007302:	f7fc ff61 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8007306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007308:	e009      	b.n	800731e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007310:	e005      	b.n	800731e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800731c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8130 	beq.w	8007586 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732a:	4a94      	ldr	r2, [pc, #592]	@ (800757c <UART_SetConfig+0x5c4>)
 800732c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007330:	461a      	mov	r2, r3
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	fbb3 f3f2 	udiv	r3, r3, r2
 8007338:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	429a      	cmp	r2, r3
 8007348:	d305      	bcc.n	8007356 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800735c:	e113      	b.n	8007586 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	2200      	movs	r2, #0
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	60fa      	str	r2, [r7, #12]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	4a84      	ldr	r2, [pc, #528]	@ (800757c <UART_SetConfig+0x5c4>)
 800736c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007370:	b29b      	uxth	r3, r3
 8007372:	2200      	movs	r2, #0
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800737c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007380:	f7f8 ffb6 	bl	80002f0 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4610      	mov	r0, r2
 800738a:	4619      	mov	r1, r3
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	020b      	lsls	r3, r1, #8
 8007396:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800739a:	0202      	lsls	r2, r0, #8
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	6849      	ldr	r1, [r1, #4]
 80073a0:	0849      	lsrs	r1, r1, #1
 80073a2:	2000      	movs	r0, #0
 80073a4:	460c      	mov	r4, r1
 80073a6:	4605      	mov	r5, r0
 80073a8:	eb12 0804 	adds.w	r8, r2, r4
 80073ac:	eb43 0905 	adc.w	r9, r3, r5
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	469a      	mov	sl, r3
 80073b8:	4693      	mov	fp, r2
 80073ba:	4652      	mov	r2, sl
 80073bc:	465b      	mov	r3, fp
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f8 ff95 	bl	80002f0 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4613      	mov	r3, r2
 80073cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d4:	d308      	bcc.n	80073e8 <UART_SetConfig+0x430>
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073dc:	d204      	bcs.n	80073e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	e0ce      	b.n	8007586 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073ee:	e0ca      	b.n	8007586 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f8:	d166      	bne.n	80074c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d827      	bhi.n	8007452 <UART_SetConfig+0x49a>
 8007402:	a201      	add	r2, pc, #4	@ (adr r2, 8007408 <UART_SetConfig+0x450>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800742d 	.word	0x0800742d
 800740c:	08007435 	.word	0x08007435
 8007410:	0800743d 	.word	0x0800743d
 8007414:	08007453 	.word	0x08007453
 8007418:	08007443 	.word	0x08007443
 800741c:	08007453 	.word	0x08007453
 8007420:	08007453 	.word	0x08007453
 8007424:	08007453 	.word	0x08007453
 8007428:	0800744b 	.word	0x0800744b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800742c:	f7fc ff3a 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007432:	e014      	b.n	800745e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007434:	f7fc ff4c 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8007438:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800743a:	e010      	b.n	800745e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800743c:	4b4e      	ldr	r3, [pc, #312]	@ (8007578 <UART_SetConfig+0x5c0>)
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007440:	e00d      	b.n	800745e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007442:	f7fc fec1 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8007446:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007448:	e009      	b.n	800745e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800744a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007450:	e005      	b.n	800745e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800745c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8090 	beq.w	8007586 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	4a44      	ldr	r2, [pc, #272]	@ (800757c <UART_SetConfig+0x5c4>)
 800746c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007470:	461a      	mov	r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	fbb3 f3f2 	udiv	r3, r3, r2
 8007478:	005a      	lsls	r2, r3, #1
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	441a      	add	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d916      	bls.n	80074c0 <UART_SetConfig+0x508>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007498:	d212      	bcs.n	80074c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f023 030f 	bic.w	r3, r3, #15
 80074a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	8bfb      	ldrh	r3, [r7, #30]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	8bfa      	ldrh	r2, [r7, #30]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	e062      	b.n	8007586 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074c6:	e05e      	b.n	8007586 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d828      	bhi.n	8007522 <UART_SetConfig+0x56a>
 80074d0:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <UART_SetConfig+0x520>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007523 	.word	0x08007523
 80074e8:	08007513 	.word	0x08007513
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
 80074f8:	0800751b 	.word	0x0800751b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fc fed2 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8007500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007502:	e014      	b.n	800752e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fc fee4 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8007508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800750a:	e010      	b.n	800752e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800750c:	4b1a      	ldr	r3, [pc, #104]	@ (8007578 <UART_SetConfig+0x5c0>)
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007510:	e00d      	b.n	800752e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007512:	f7fc fe59 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8007516:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007518:	e009      	b.n	800752e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007520:	e005      	b.n	800752e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800752c:	bf00      	nop
    }

    if (pclk != 0U)
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d028      	beq.n	8007586 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	4a10      	ldr	r2, [pc, #64]	@ (800757c <UART_SetConfig+0x5c4>)
 800753a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800753e:	461a      	mov	r2, r3
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	fbb3 f2f2 	udiv	r2, r3, r2
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	441a      	add	r2, r3
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	2b0f      	cmp	r3, #15
 800755c:	d910      	bls.n	8007580 <UART_SetConfig+0x5c8>
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007564:	d20c      	bcs.n	8007580 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	b29a      	uxth	r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	e009      	b.n	8007586 <UART_SetConfig+0x5ce>
 8007572:	bf00      	nop
 8007574:	40008000 	.word	0x40008000
 8007578:	00f42400 	.word	0x00f42400
 800757c:	08009c3c 	.word	0x08009c3c
      }
      else
      {
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2201      	movs	r2, #1
 800758a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2201      	movs	r2, #1
 8007592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3730      	adds	r7, #48	@ 0x30
 80075aa:	46bd      	mov	sp, r7
 80075ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01a      	beq.n	80076c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ae:	d10a      	bne.n	80076c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
  }
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b098      	sub	sp, #96	@ 0x60
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007704:	f7fa f8ee 	bl	80018e4 <HAL_GetTick>
 8007708:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b08      	cmp	r3, #8
 8007716:	d12f      	bne.n	8007778 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007720:	2200      	movs	r2, #0
 8007722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f88e 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d022      	beq.n	8007778 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007746:	653b      	str	r3, [r7, #80]	@ 0x50
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007750:	647b      	str	r3, [r7, #68]	@ 0x44
 8007752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800775e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e063      	b.n	8007840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b04      	cmp	r3, #4
 8007784:	d149      	bne.n	800781a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007786:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800778e:	2200      	movs	r2, #0
 8007790:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f857 	bl	8007848 <UART_WaitOnFlagUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d03c      	beq.n	800781a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	623b      	str	r3, [r7, #32]
   return(result);
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30
 80077c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f2:	61fa      	str	r2, [r7, #28]
 80077f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	69b9      	ldr	r1, [r7, #24]
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e012      	b.n	8007840 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3758      	adds	r7, #88	@ 0x58
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007858:	e04f      	b.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d04b      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007862:	f7fa f83f 	bl	80018e4 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	429a      	cmp	r2, r3
 8007870:	d302      	bcc.n	8007878 <UART_WaitOnFlagUntilTimeout+0x30>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e04e      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d037      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b80      	cmp	r3, #128	@ 0x80
 800788e:	d034      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	d031      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d110      	bne.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2208      	movs	r2, #8
 80078aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f95b 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2208      	movs	r2, #8
 80078b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e029      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d4:	d111      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f941 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e00f      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	429a      	cmp	r2, r3
 8007916:	d0a0      	beq.n	800785a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007924:	b480      	push	{r7}
 8007926:	b0a3      	sub	sp, #140	@ 0x8c
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007956:	d10e      	bne.n	8007976 <UART_Start_Receive_IT+0x52>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <UART_Start_Receive_IT+0x48>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007966:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800796a:	e02d      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	22ff      	movs	r2, #255	@ 0xff
 8007970:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007974:	e028      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10d      	bne.n	800799a <UART_Start_Receive_IT+0x76>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <UART_Start_Receive_IT+0x6c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	22ff      	movs	r2, #255	@ 0xff
 800798a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800798e:	e01b      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	227f      	movs	r2, #127	@ 0x7f
 8007994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007998:	e016      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079a2:	d10d      	bne.n	80079c0 <UART_Start_Receive_IT+0x9c>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <UART_Start_Receive_IT+0x92>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	227f      	movs	r2, #127	@ 0x7f
 80079b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079b4:	e008      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	223f      	movs	r2, #63	@ 0x3f
 80079ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079be:	e003      	b.n	80079c8 <UART_Start_Receive_IT+0xa4>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2222      	movs	r2, #34	@ 0x22
 80079d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80079e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079fc:	673a      	str	r2, [r7, #112]	@ 0x70
 80079fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007a02:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e3      	bne.n	80079d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a18:	d14f      	bne.n	8007aba <UART_Start_Receive_IT+0x196>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d349      	bcc.n	8007aba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a2e:	d107      	bne.n	8007a40 <UART_Start_Receive_IT+0x11c>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a47      	ldr	r2, [pc, #284]	@ (8007b58 <UART_Start_Receive_IT+0x234>)
 8007a3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a3e:	e002      	b.n	8007a46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a46      	ldr	r2, [pc, #280]	@ (8007b5c <UART_Start_Receive_IT+0x238>)
 8007a44:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01a      	beq.n	8007a84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a72:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e4      	bne.n	8007a4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007aa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e5      	bne.n	8007a84 <UART_Start_Receive_IT+0x160>
 8007ab8:	e046      	b.n	8007b48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac2:	d107      	bne.n	8007ad4 <UART_Start_Receive_IT+0x1b0>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a24      	ldr	r2, [pc, #144]	@ (8007b60 <UART_Start_Receive_IT+0x23c>)
 8007ad0:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ad2:	e002      	b.n	8007ada <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4a23      	ldr	r2, [pc, #140]	@ (8007b64 <UART_Start_Receive_IT+0x240>)
 8007ad8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d019      	beq.n	8007b16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007af6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_Start_Receive_IT+0x1be>
 8007b14:	e018      	b.n	8007b48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	613b      	str	r3, [r7, #16]
   return(result);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f043 0320 	orr.w	r3, r3, #32
 8007b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b34:	623b      	str	r3, [r7, #32]
 8007b36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	69f9      	ldr	r1, [r7, #28]
 8007b3a:	6a3a      	ldr	r2, [r7, #32]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	378c      	adds	r7, #140	@ 0x8c
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	0800838d 	.word	0x0800838d
 8007b5c:	08008029 	.word	0x08008029
 8007b60:	08007e71 	.word	0x08007e71
 8007b64:	08007cb9 	.word	0x08007cb9

08007b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b095      	sub	sp, #84	@ 0x54
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb8:	f023 0301 	bic.w	r3, r3, #1
 8007bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d118      	bne.n	8007c14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f023 0310 	bic.w	r3, r3, #16
 8007bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6979      	ldr	r1, [r7, #20]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e6      	bne.n	8007be2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c28:	bf00      	nop
 8007c2a:	3754      	adds	r7, #84	@ 0x54
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff f99a 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	61bb      	str	r3, [r7, #24]
 8007c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6979      	ldr	r1, [r7, #20]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	613b      	str	r3, [r7, #16]
   return(result);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff f965 	bl	8006f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cae:	bf00      	nop
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b09c      	sub	sp, #112	@ 0x70
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cc6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd0:	2b22      	cmp	r3, #34	@ 0x22
 8007cd2:	f040 80be 	bne.w	8007e52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ce0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ce4:	b2d9      	uxtb	r1, r3
 8007ce6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf0:	400a      	ands	r2, r1
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 80a1 	bne.w	8007e62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e6      	bne.n	8007d20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d72:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e5      	bne.n	8007d52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a33      	ldr	r2, [pc, #204]	@ (8007e6c <UART_RxISR_8BIT+0x1b4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d01f      	beq.n	8007de4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d018      	beq.n	8007de4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d12e      	bne.n	8007e4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	69b9      	ldr	r1, [r7, #24]
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e6      	bne.n	8007df2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d103      	bne.n	8007e3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2210      	movs	r2, #16
 8007e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff f8ac 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e48:	e00b      	b.n	8007e62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7f9 f886 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 8007e50:	e007      	b.n	8007e62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0208 	orr.w	r2, r2, #8
 8007e60:	619a      	str	r2, [r3, #24]
}
 8007e62:	bf00      	nop
 8007e64:	3770      	adds	r7, #112	@ 0x70
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40008000 	.word	0x40008000

08007e70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b09c      	sub	sp, #112	@ 0x70
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e88:	2b22      	cmp	r3, #34	@ 0x22
 8007e8a:	f040 80be 	bne.w	800800a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007ea2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007eac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 80a1 	bne.w	800801a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ef6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ef8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007efc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e6      	bne.n	8007ed8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e5      	bne.n	8007f0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a33      	ldr	r2, [pc, #204]	@ (8008024 <UART_RxISR_16BIT+0x1b4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d01f      	beq.n	8007f9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d018      	beq.n	8007f9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d12e      	bne.n	8008002 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f023 0310 	bic.w	r3, r3, #16
 8007fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6979      	ldr	r1, [r7, #20]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e6      	bne.n	8007faa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d103      	bne.n	8007ff2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe ffd0 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008000:	e00b      	b.n	800801a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7f8 ffaa 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 8008008:	e007      	b.n	800801a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0208 	orr.w	r2, r2, #8
 8008018:	619a      	str	r2, [r3, #24]
}
 800801a:	bf00      	nop
 800801c:	3770      	adds	r7, #112	@ 0x70
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40008000 	.word	0x40008000

08008028 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b0ac      	sub	sp, #176	@ 0xb0
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008036:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800805e:	2b22      	cmp	r3, #34	@ 0x22
 8008060:	f040 8183 	bne.w	800836a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800806a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800806e:	e126      	b.n	80082be <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008076:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800807a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800807e:	b2d9      	uxtb	r1, r3
 8008080:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008084:	b2da      	uxtb	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	400a      	ands	r2, r1
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d053      	beq.n	800816a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d011      	beq.n	80080f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80080ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e8:	f043 0201 	orr.w	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d011      	beq.n	8008122 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2202      	movs	r2, #2
 8008110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008118:	f043 0204 	orr.w	r2, r3, #4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800812e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008148:	f043 0202 	orr.w	r2, r3, #2
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7fe ff15 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	f040 80a3 	bne.w	80082be <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800818c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800819a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800819c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80081a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80081a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e4      	bne.n	8008178 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80081be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081d6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80081d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80081dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80081e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e1      	bne.n	80081ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a60      	ldr	r2, [pc, #384]	@ (8008384 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d021      	beq.n	800824c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01a      	beq.n	800824c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800822a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008238:	657b      	str	r3, [r7, #84]	@ 0x54
 800823a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800823e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d130      	bne.n	80082b6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800827c:	643b      	str	r3, [r7, #64]	@ 0x40
 800827e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b10      	cmp	r3, #16
 800829c:	d103      	bne.n	80082a6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2210      	movs	r2, #16
 80082a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fe fe76 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80082b4:	e00e      	b.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7f8 fe50 	bl	8000f5c <HAL_UART_RxCpltCallback>
        break;
 80082bc:	e00a      	b.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d006      	beq.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80082c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f47f aece 	bne.w	8008070 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d049      	beq.n	800837a <UART_RxISR_8BIT_FIFOEN+0x352>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082ec:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d242      	bcs.n	800837a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	61fb      	str	r3, [r7, #28]
   return(result);
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800830a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800831e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e3      	bne.n	80082f4 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a16      	ldr	r2, [pc, #88]	@ (8008388 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008330:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f043 0320 	orr.w	r3, r3, #32
 8008346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e4      	bne.n	8008332 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008368:	e007      	b.n	800837a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0208 	orr.w	r2, r2, #8
 8008378:	619a      	str	r2, [r3, #24]
}
 800837a:	bf00      	nop
 800837c:	37b0      	adds	r7, #176	@ 0xb0
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40008000 	.word	0x40008000
 8008388:	08007cb9 	.word	0x08007cb9

0800838c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b0ae      	sub	sp, #184	@ 0xb8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800839a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c2:	2b22      	cmp	r3, #34	@ 0x22
 80083c4:	f040 8187 	bne.w	80086d6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083d2:	e12a      	b.n	800862a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80083e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80083ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80083ee:	4013      	ands	r3, r2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fc:	1c9a      	adds	r2, r3, #2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800841e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d053      	beq.n	80084d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800842a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d011      	beq.n	800845a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800843a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2201      	movs	r2, #1
 8008448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008450:	f043 0201 	orr.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800845a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d011      	beq.n	800848a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2202      	movs	r2, #2
 8008478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008480:	f043 0204 	orr.w	r2, r3, #4
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800848a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d011      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2204      	movs	r2, #4
 80084a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b0:	f043 0202 	orr.w	r2, r3, #2
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d006      	beq.n	80084d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fe fd61 	bl	8006f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 80a5 	bne.w	800862a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008506:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800850a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e2      	bne.n	80084e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3308      	adds	r3, #8
 8008520:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800852a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800852c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e1      	bne.n	800851a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a60      	ldr	r2, [pc, #384]	@ (80086f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d021      	beq.n	80085b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01a      	beq.n	80085b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008592:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e4      	bne.n	8008582 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d130      	bne.n	8008622 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d6:	f023 0310 	bic.w	r3, r3, #16
 80085da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b10      	cmp	r3, #16
 8008608:	d103      	bne.n	8008612 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2210      	movs	r2, #16
 8008610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fe fcc0 	bl	8006fa0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008620:	e00e      	b.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7f8 fc9a 	bl	8000f5c <HAL_UART_RxCpltCallback>
        break;
 8008628:	e00a      	b.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800862a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800862e:	2b00      	cmp	r3, #0
 8008630:	d006      	beq.n	8008640 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8008632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	f47f aeca 	bne.w	80083d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008646:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800864a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800864e:	2b00      	cmp	r3, #0
 8008650:	d049      	beq.n	80086e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008658:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800865c:	429a      	cmp	r2, r3
 800865e:	d242      	bcs.n	80086e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	623b      	str	r3, [r7, #32]
   return(result);
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008684:	633a      	str	r2, [r7, #48]	@ 0x30
 8008686:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e3      	bne.n	8008660 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a16      	ldr	r2, [pc, #88]	@ (80086f4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800869c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f043 0320 	orr.w	r3, r3, #32
 80086b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	69b9      	ldr	r1, [r7, #24]
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	617b      	str	r3, [r7, #20]
   return(result);
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e4      	bne.n	800869e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086d4:	e007      	b.n	80086e6 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0208 	orr.w	r2, r2, #8
 80086e4:	619a      	str	r2, [r3, #24]
}
 80086e6:	bf00      	nop
 80086e8:	37b8      	adds	r7, #184	@ 0xb8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	40008000 	.word	0x40008000
 80086f4:	08007e71 	.word	0x08007e71

080086f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008742:	2b01      	cmp	r3, #1
 8008744:	d101      	bne.n	800874a <HAL_UARTEx_DisableFifoMode+0x16>
 8008746:	2302      	movs	r3, #2
 8008748:	e027      	b.n	800879a <HAL_UARTEx_DisableFifoMode+0x66>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2224      	movs	r2, #36	@ 0x24
 8008756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0201 	bic.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e02d      	b.n	800881a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2224      	movs	r2, #36	@ 0x24
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f850 	bl	80088a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008836:	2302      	movs	r3, #2
 8008838:	e02d      	b.n	8008896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2224      	movs	r2, #36	@ 0x24
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f812 	bl	80088a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d108      	bne.n	80088c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088c0:	e031      	b.n	8008926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088c2:	2308      	movs	r3, #8
 80088c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088c6:	2308      	movs	r3, #8
 80088c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	0e5b      	lsrs	r3, r3, #25
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	0f5b      	lsrs	r3, r3, #29
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	7b3a      	ldrb	r2, [r7, #12]
 80088ee:	4911      	ldr	r1, [pc, #68]	@ (8008934 <UARTEx_SetNbDataToProcess+0x94>)
 80088f0:	5c8a      	ldrb	r2, [r1, r2]
 80088f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088f6:	7b3a      	ldrb	r2, [r7, #12]
 80088f8:	490f      	ldr	r1, [pc, #60]	@ (8008938 <UARTEx_SetNbDataToProcess+0x98>)
 80088fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	7b7a      	ldrb	r2, [r7, #13]
 800890c:	4909      	ldr	r1, [pc, #36]	@ (8008934 <UARTEx_SetNbDataToProcess+0x94>)
 800890e:	5c8a      	ldrb	r2, [r1, r2]
 8008910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008914:	7b7a      	ldrb	r2, [r7, #13]
 8008916:	4908      	ldr	r1, [pc, #32]	@ (8008938 <UARTEx_SetNbDataToProcess+0x98>)
 8008918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800891a:	fb93 f3f2 	sdiv	r3, r3, r2
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	08009c54 	.word	0x08009c54
 8008938:	08009c5c 	.word	0x08009c5c

0800893c <atoi>:
 800893c:	220a      	movs	r2, #10
 800893e:	2100      	movs	r1, #0
 8008940:	f000 b87a 	b.w	8008a38 <strtol>

08008944 <_strtol_l.constprop.0>:
 8008944:	2b24      	cmp	r3, #36	@ 0x24
 8008946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800894a:	4686      	mov	lr, r0
 800894c:	4690      	mov	r8, r2
 800894e:	d801      	bhi.n	8008954 <_strtol_l.constprop.0+0x10>
 8008950:	2b01      	cmp	r3, #1
 8008952:	d106      	bne.n	8008962 <_strtol_l.constprop.0+0x1e>
 8008954:	f000 fb06 	bl	8008f64 <__errno>
 8008958:	2316      	movs	r3, #22
 800895a:	6003      	str	r3, [r0, #0]
 800895c:	2000      	movs	r0, #0
 800895e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008962:	4834      	ldr	r0, [pc, #208]	@ (8008a34 <_strtol_l.constprop.0+0xf0>)
 8008964:	460d      	mov	r5, r1
 8008966:	462a      	mov	r2, r5
 8008968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800896c:	5d06      	ldrb	r6, [r0, r4]
 800896e:	f016 0608 	ands.w	r6, r6, #8
 8008972:	d1f8      	bne.n	8008966 <_strtol_l.constprop.0+0x22>
 8008974:	2c2d      	cmp	r4, #45	@ 0x2d
 8008976:	d12d      	bne.n	80089d4 <_strtol_l.constprop.0+0x90>
 8008978:	782c      	ldrb	r4, [r5, #0]
 800897a:	2601      	movs	r6, #1
 800897c:	1c95      	adds	r5, r2, #2
 800897e:	f033 0210 	bics.w	r2, r3, #16
 8008982:	d109      	bne.n	8008998 <_strtol_l.constprop.0+0x54>
 8008984:	2c30      	cmp	r4, #48	@ 0x30
 8008986:	d12a      	bne.n	80089de <_strtol_l.constprop.0+0x9a>
 8008988:	782a      	ldrb	r2, [r5, #0]
 800898a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800898e:	2a58      	cmp	r2, #88	@ 0x58
 8008990:	d125      	bne.n	80089de <_strtol_l.constprop.0+0x9a>
 8008992:	786c      	ldrb	r4, [r5, #1]
 8008994:	2310      	movs	r3, #16
 8008996:	3502      	adds	r5, #2
 8008998:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800899c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80089a0:	2200      	movs	r2, #0
 80089a2:	fbbc f9f3 	udiv	r9, ip, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80089ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80089b0:	2f09      	cmp	r7, #9
 80089b2:	d81b      	bhi.n	80089ec <_strtol_l.constprop.0+0xa8>
 80089b4:	463c      	mov	r4, r7
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	dd27      	ble.n	8008a0a <_strtol_l.constprop.0+0xc6>
 80089ba:	1c57      	adds	r7, r2, #1
 80089bc:	d007      	beq.n	80089ce <_strtol_l.constprop.0+0x8a>
 80089be:	4581      	cmp	r9, r0
 80089c0:	d320      	bcc.n	8008a04 <_strtol_l.constprop.0+0xc0>
 80089c2:	d101      	bne.n	80089c8 <_strtol_l.constprop.0+0x84>
 80089c4:	45a2      	cmp	sl, r4
 80089c6:	db1d      	blt.n	8008a04 <_strtol_l.constprop.0+0xc0>
 80089c8:	fb00 4003 	mla	r0, r0, r3, r4
 80089cc:	2201      	movs	r2, #1
 80089ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089d2:	e7eb      	b.n	80089ac <_strtol_l.constprop.0+0x68>
 80089d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80089d6:	bf04      	itt	eq
 80089d8:	782c      	ldrbeq	r4, [r5, #0]
 80089da:	1c95      	addeq	r5, r2, #2
 80089dc:	e7cf      	b.n	800897e <_strtol_l.constprop.0+0x3a>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1da      	bne.n	8008998 <_strtol_l.constprop.0+0x54>
 80089e2:	2c30      	cmp	r4, #48	@ 0x30
 80089e4:	bf0c      	ite	eq
 80089e6:	2308      	moveq	r3, #8
 80089e8:	230a      	movne	r3, #10
 80089ea:	e7d5      	b.n	8008998 <_strtol_l.constprop.0+0x54>
 80089ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80089f0:	2f19      	cmp	r7, #25
 80089f2:	d801      	bhi.n	80089f8 <_strtol_l.constprop.0+0xb4>
 80089f4:	3c37      	subs	r4, #55	@ 0x37
 80089f6:	e7de      	b.n	80089b6 <_strtol_l.constprop.0+0x72>
 80089f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80089fc:	2f19      	cmp	r7, #25
 80089fe:	d804      	bhi.n	8008a0a <_strtol_l.constprop.0+0xc6>
 8008a00:	3c57      	subs	r4, #87	@ 0x57
 8008a02:	e7d8      	b.n	80089b6 <_strtol_l.constprop.0+0x72>
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295
 8008a08:	e7e1      	b.n	80089ce <_strtol_l.constprop.0+0x8a>
 8008a0a:	1c53      	adds	r3, r2, #1
 8008a0c:	d108      	bne.n	8008a20 <_strtol_l.constprop.0+0xdc>
 8008a0e:	2322      	movs	r3, #34	@ 0x22
 8008a10:	f8ce 3000 	str.w	r3, [lr]
 8008a14:	4660      	mov	r0, ip
 8008a16:	f1b8 0f00 	cmp.w	r8, #0
 8008a1a:	d0a0      	beq.n	800895e <_strtol_l.constprop.0+0x1a>
 8008a1c:	1e69      	subs	r1, r5, #1
 8008a1e:	e006      	b.n	8008a2e <_strtol_l.constprop.0+0xea>
 8008a20:	b106      	cbz	r6, 8008a24 <_strtol_l.constprop.0+0xe0>
 8008a22:	4240      	negs	r0, r0
 8008a24:	f1b8 0f00 	cmp.w	r8, #0
 8008a28:	d099      	beq.n	800895e <_strtol_l.constprop.0+0x1a>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d1f6      	bne.n	8008a1c <_strtol_l.constprop.0+0xd8>
 8008a2e:	f8c8 1000 	str.w	r1, [r8]
 8008a32:	e794      	b.n	800895e <_strtol_l.constprop.0+0x1a>
 8008a34:	08009c65 	.word	0x08009c65

08008a38 <strtol>:
 8008a38:	4613      	mov	r3, r2
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4802      	ldr	r0, [pc, #8]	@ (8008a48 <strtol+0x10>)
 8008a40:	6800      	ldr	r0, [r0, #0]
 8008a42:	f7ff bf7f 	b.w	8008944 <_strtol_l.constprop.0>
 8008a46:	bf00      	nop
 8008a48:	20000018 	.word	0x20000018

08008a4c <std>:
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	4604      	mov	r4, r0
 8008a52:	e9c0 3300 	strd	r3, r3, [r0]
 8008a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a5a:	6083      	str	r3, [r0, #8]
 8008a5c:	8181      	strh	r1, [r0, #12]
 8008a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a60:	81c2      	strh	r2, [r0, #14]
 8008a62:	6183      	str	r3, [r0, #24]
 8008a64:	4619      	mov	r1, r3
 8008a66:	2208      	movs	r2, #8
 8008a68:	305c      	adds	r0, #92	@ 0x5c
 8008a6a:	f000 fa1b 	bl	8008ea4 <memset>
 8008a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa4 <std+0x58>)
 8008a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a72:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <std+0x5c>)
 8008a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a76:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <std+0x60>)
 8008a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <std+0x64>)
 8008a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <std+0x68>)
 8008a80:	6224      	str	r4, [r4, #32]
 8008a82:	429c      	cmp	r4, r3
 8008a84:	d006      	beq.n	8008a94 <std+0x48>
 8008a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a8a:	4294      	cmp	r4, r2
 8008a8c:	d002      	beq.n	8008a94 <std+0x48>
 8008a8e:	33d0      	adds	r3, #208	@ 0xd0
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d105      	bne.n	8008aa0 <std+0x54>
 8008a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9c:	f000 ba8c 	b.w	8008fb8 <__retarget_lock_init_recursive>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	08008cf5 	.word	0x08008cf5
 8008aa8:	08008d17 	.word	0x08008d17
 8008aac:	08008d4f 	.word	0x08008d4f
 8008ab0:	08008d73 	.word	0x08008d73
 8008ab4:	2000032c 	.word	0x2000032c

08008ab8 <stdio_exit_handler>:
 8008ab8:	4a02      	ldr	r2, [pc, #8]	@ (8008ac4 <stdio_exit_handler+0xc>)
 8008aba:	4903      	ldr	r1, [pc, #12]	@ (8008ac8 <stdio_exit_handler+0x10>)
 8008abc:	4803      	ldr	r0, [pc, #12]	@ (8008acc <stdio_exit_handler+0x14>)
 8008abe:	f000 b869 	b.w	8008b94 <_fwalk_sglue>
 8008ac2:	bf00      	nop
 8008ac4:	2000000c 	.word	0x2000000c
 8008ac8:	08009885 	.word	0x08009885
 8008acc:	2000001c 	.word	0x2000001c

08008ad0 <cleanup_stdio>:
 8008ad0:	6841      	ldr	r1, [r0, #4]
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <cleanup_stdio+0x34>)
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	d001      	beq.n	8008ae0 <cleanup_stdio+0x10>
 8008adc:	f000 fed2 	bl	8009884 <_fflush_r>
 8008ae0:	68a1      	ldr	r1, [r4, #8]
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <cleanup_stdio+0x38>)
 8008ae4:	4299      	cmp	r1, r3
 8008ae6:	d002      	beq.n	8008aee <cleanup_stdio+0x1e>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fecb 	bl	8009884 <_fflush_r>
 8008aee:	68e1      	ldr	r1, [r4, #12]
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <cleanup_stdio+0x3c>)
 8008af2:	4299      	cmp	r1, r3
 8008af4:	d004      	beq.n	8008b00 <cleanup_stdio+0x30>
 8008af6:	4620      	mov	r0, r4
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f000 bec2 	b.w	8009884 <_fflush_r>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	2000032c 	.word	0x2000032c
 8008b08:	20000394 	.word	0x20000394
 8008b0c:	200003fc 	.word	0x200003fc

08008b10 <global_stdio_init.part.0>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	4b0b      	ldr	r3, [pc, #44]	@ (8008b40 <global_stdio_init.part.0+0x30>)
 8008b14:	4c0b      	ldr	r4, [pc, #44]	@ (8008b44 <global_stdio_init.part.0+0x34>)
 8008b16:	4a0c      	ldr	r2, [pc, #48]	@ (8008b48 <global_stdio_init.part.0+0x38>)
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2104      	movs	r1, #4
 8008b20:	f7ff ff94 	bl	8008a4c <std>
 8008b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b28:	2201      	movs	r2, #1
 8008b2a:	2109      	movs	r1, #9
 8008b2c:	f7ff ff8e 	bl	8008a4c <std>
 8008b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b34:	2202      	movs	r2, #2
 8008b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3a:	2112      	movs	r1, #18
 8008b3c:	f7ff bf86 	b.w	8008a4c <std>
 8008b40:	20000464 	.word	0x20000464
 8008b44:	2000032c 	.word	0x2000032c
 8008b48:	08008ab9 	.word	0x08008ab9

08008b4c <__sfp_lock_acquire>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	@ (8008b54 <__sfp_lock_acquire+0x8>)
 8008b4e:	f000 ba34 	b.w	8008fba <__retarget_lock_acquire_recursive>
 8008b52:	bf00      	nop
 8008b54:	2000046d 	.word	0x2000046d

08008b58 <__sfp_lock_release>:
 8008b58:	4801      	ldr	r0, [pc, #4]	@ (8008b60 <__sfp_lock_release+0x8>)
 8008b5a:	f000 ba2f 	b.w	8008fbc <__retarget_lock_release_recursive>
 8008b5e:	bf00      	nop
 8008b60:	2000046d 	.word	0x2000046d

08008b64 <__sinit>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	f7ff fff0 	bl	8008b4c <__sfp_lock_acquire>
 8008b6c:	6a23      	ldr	r3, [r4, #32]
 8008b6e:	b11b      	cbz	r3, 8008b78 <__sinit+0x14>
 8008b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b74:	f7ff bff0 	b.w	8008b58 <__sfp_lock_release>
 8008b78:	4b04      	ldr	r3, [pc, #16]	@ (8008b8c <__sinit+0x28>)
 8008b7a:	6223      	str	r3, [r4, #32]
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <__sinit+0x2c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f5      	bne.n	8008b70 <__sinit+0xc>
 8008b84:	f7ff ffc4 	bl	8008b10 <global_stdio_init.part.0>
 8008b88:	e7f2      	b.n	8008b70 <__sinit+0xc>
 8008b8a:	bf00      	nop
 8008b8c:	08008ad1 	.word	0x08008ad1
 8008b90:	20000464 	.word	0x20000464

08008b94 <_fwalk_sglue>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4607      	mov	r7, r0
 8008b9a:	4688      	mov	r8, r1
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ba8:	d505      	bpl.n	8008bb6 <_fwalk_sglue+0x22>
 8008baa:	6824      	ldr	r4, [r4, #0]
 8008bac:	2c00      	cmp	r4, #0
 8008bae:	d1f7      	bne.n	8008ba0 <_fwalk_sglue+0xc>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d907      	bls.n	8008bcc <_fwalk_sglue+0x38>
 8008bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	d003      	beq.n	8008bcc <_fwalk_sglue+0x38>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	47c0      	blx	r8
 8008bca:	4306      	orrs	r6, r0
 8008bcc:	3568      	adds	r5, #104	@ 0x68
 8008bce:	e7e9      	b.n	8008ba4 <_fwalk_sglue+0x10>

08008bd0 <_puts_r>:
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	6884      	ldr	r4, [r0, #8]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	460e      	mov	r6, r1
 8008bda:	b90b      	cbnz	r3, 8008be0 <_puts_r+0x10>
 8008bdc:	f7ff ffc2 	bl	8008b64 <__sinit>
 8008be0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d405      	bmi.n	8008bf2 <_puts_r+0x22>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	0598      	lsls	r0, r3, #22
 8008bea:	d402      	bmi.n	8008bf2 <_puts_r+0x22>
 8008bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bee:	f000 f9e4 	bl	8008fba <__retarget_lock_acquire_recursive>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	0719      	lsls	r1, r3, #28
 8008bf6:	d502      	bpl.n	8008bfe <_puts_r+0x2e>
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d135      	bne.n	8008c6a <_puts_r+0x9a>
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f8f9 	bl	8008df8 <__swsetup_r>
 8008c06:	b380      	cbz	r0, 8008c6a <_puts_r+0x9a>
 8008c08:	f04f 35ff 	mov.w	r5, #4294967295
 8008c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c0e:	07da      	lsls	r2, r3, #31
 8008c10:	d405      	bmi.n	8008c1e <_puts_r+0x4e>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	059b      	lsls	r3, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_puts_r+0x4e>
 8008c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1a:	f000 f9cf 	bl	8008fbc <__retarget_lock_release_recursive>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da04      	bge.n	8008c30 <_puts_r+0x60>
 8008c26:	69a2      	ldr	r2, [r4, #24]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	dc17      	bgt.n	8008c5c <_puts_r+0x8c>
 8008c2c:	290a      	cmp	r1, #10
 8008c2e:	d015      	beq.n	8008c5c <_puts_r+0x8c>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	7019      	strb	r1, [r3, #0]
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	2900      	cmp	r1, #0
 8008c44:	d1ed      	bne.n	8008c22 <_puts_r+0x52>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	da11      	bge.n	8008c6e <_puts_r+0x9e>
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	210a      	movs	r1, #10
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f893 	bl	8008d7a <__swbuf_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0d7      	beq.n	8008c08 <_puts_r+0x38>
 8008c58:	250a      	movs	r5, #10
 8008c5a:	e7d7      	b.n	8008c0c <_puts_r+0x3c>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 f88b 	bl	8008d7a <__swbuf_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1e7      	bne.n	8008c38 <_puts_r+0x68>
 8008c68:	e7ce      	b.n	8008c08 <_puts_r+0x38>
 8008c6a:	3e01      	subs	r6, #1
 8008c6c:	e7e4      	b.n	8008c38 <_puts_r+0x68>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	220a      	movs	r2, #10
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e7ee      	b.n	8008c58 <_puts_r+0x88>
	...

08008c7c <puts>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	@ (8008c88 <puts+0xc>)
 8008c7e:	4601      	mov	r1, r0
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f7ff bfa5 	b.w	8008bd0 <_puts_r>
 8008c86:	bf00      	nop
 8008c88:	20000018 	.word	0x20000018

08008c8c <sniprintf>:
 8008c8c:	b40c      	push	{r2, r3}
 8008c8e:	b530      	push	{r4, r5, lr}
 8008c90:	4b17      	ldr	r3, [pc, #92]	@ (8008cf0 <sniprintf+0x64>)
 8008c92:	1e0c      	subs	r4, r1, #0
 8008c94:	681d      	ldr	r5, [r3, #0]
 8008c96:	b09d      	sub	sp, #116	@ 0x74
 8008c98:	da08      	bge.n	8008cac <sniprintf+0x20>
 8008c9a:	238b      	movs	r3, #139	@ 0x8b
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	b01d      	add	sp, #116	@ 0x74
 8008ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca8:	b002      	add	sp, #8
 8008caa:	4770      	bx	lr
 8008cac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008cb4:	bf14      	ite	ne
 8008cb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cba:	4623      	moveq	r3, r4
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cc4:	9002      	str	r0, [sp, #8]
 8008cc6:	9006      	str	r0, [sp, #24]
 8008cc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ccc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008cce:	ab21      	add	r3, sp, #132	@ 0x84
 8008cd0:	a902      	add	r1, sp, #8
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	f000 fac7 	bl	8009268 <_svfiprintf_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	bfbc      	itt	lt
 8008cde:	238b      	movlt	r3, #139	@ 0x8b
 8008ce0:	602b      	strlt	r3, [r5, #0]
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	d0dd      	beq.n	8008ca2 <sniprintf+0x16>
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	701a      	strb	r2, [r3, #0]
 8008cec:	e7d9      	b.n	8008ca2 <sniprintf+0x16>
 8008cee:	bf00      	nop
 8008cf0:	20000018 	.word	0x20000018

08008cf4 <__sread>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f90e 	bl	8008f1c <_read_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bfab      	itete	ge
 8008d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d06:	89a3      	ldrhlt	r3, [r4, #12]
 8008d08:	181b      	addge	r3, r3, r0
 8008d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d0e:	bfac      	ite	ge
 8008d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d12:	81a3      	strhlt	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__swrite>:
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	05db      	lsls	r3, r3, #23
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	4616      	mov	r6, r2
 8008d26:	d505      	bpl.n	8008d34 <__swrite+0x1e>
 8008d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f000 f8e2 	bl	8008ef8 <_lseek_r>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	4628      	mov	r0, r5
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f000 b8f9 	b.w	8008f40 <_write_r>

08008d4e <__sseek>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 f8cf 	bl	8008ef8 <_lseek_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	bf15      	itete	ne
 8008d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d6a:	81a3      	strheq	r3, [r4, #12]
 8008d6c:	bf18      	it	ne
 8008d6e:	81a3      	strhne	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__sclose>:
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 b8af 	b.w	8008ed8 <_close_r>

08008d7a <__swbuf_r>:
 8008d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7c:	460e      	mov	r6, r1
 8008d7e:	4614      	mov	r4, r2
 8008d80:	4605      	mov	r5, r0
 8008d82:	b118      	cbz	r0, 8008d8c <__swbuf_r+0x12>
 8008d84:	6a03      	ldr	r3, [r0, #32]
 8008d86:	b90b      	cbnz	r3, 8008d8c <__swbuf_r+0x12>
 8008d88:	f7ff feec 	bl	8008b64 <__sinit>
 8008d8c:	69a3      	ldr	r3, [r4, #24]
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	071a      	lsls	r2, r3, #28
 8008d94:	d501      	bpl.n	8008d9a <__swbuf_r+0x20>
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	b943      	cbnz	r3, 8008dac <__swbuf_r+0x32>
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f000 f82b 	bl	8008df8 <__swsetup_r>
 8008da2:	b118      	cbz	r0, 8008dac <__swbuf_r+0x32>
 8008da4:	f04f 37ff 	mov.w	r7, #4294967295
 8008da8:	4638      	mov	r0, r7
 8008daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	6922      	ldr	r2, [r4, #16]
 8008db0:	1a98      	subs	r0, r3, r2
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b2f6      	uxtb	r6, r6
 8008db6:	4283      	cmp	r3, r0
 8008db8:	4637      	mov	r7, r6
 8008dba:	dc05      	bgt.n	8008dc8 <__swbuf_r+0x4e>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 fd60 	bl	8009884 <_fflush_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d1ed      	bne.n	8008da4 <__swbuf_r+0x2a>
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	6022      	str	r2, [r4, #0]
 8008dd4:	701e      	strb	r6, [r3, #0]
 8008dd6:	6962      	ldr	r2, [r4, #20]
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d004      	beq.n	8008de8 <__swbuf_r+0x6e>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	07db      	lsls	r3, r3, #31
 8008de2:	d5e1      	bpl.n	8008da8 <__swbuf_r+0x2e>
 8008de4:	2e0a      	cmp	r6, #10
 8008de6:	d1df      	bne.n	8008da8 <__swbuf_r+0x2e>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 fd4a 	bl	8009884 <_fflush_r>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d0d9      	beq.n	8008da8 <__swbuf_r+0x2e>
 8008df4:	e7d6      	b.n	8008da4 <__swbuf_r+0x2a>
	...

08008df8 <__swsetup_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ea0 <__swsetup_r+0xa8>)
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	460c      	mov	r4, r1
 8008e02:	b118      	cbz	r0, 8008e0c <__swsetup_r+0x14>
 8008e04:	6a03      	ldr	r3, [r0, #32]
 8008e06:	b90b      	cbnz	r3, 8008e0c <__swsetup_r+0x14>
 8008e08:	f7ff feac 	bl	8008b64 <__sinit>
 8008e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e10:	0719      	lsls	r1, r3, #28
 8008e12:	d422      	bmi.n	8008e5a <__swsetup_r+0x62>
 8008e14:	06da      	lsls	r2, r3, #27
 8008e16:	d407      	bmi.n	8008e28 <__swsetup_r+0x30>
 8008e18:	2209      	movs	r2, #9
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	e033      	b.n	8008e90 <__swsetup_r+0x98>
 8008e28:	0758      	lsls	r0, r3, #29
 8008e2a:	d512      	bpl.n	8008e52 <__swsetup_r+0x5a>
 8008e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e2e:	b141      	cbz	r1, 8008e42 <__swsetup_r+0x4a>
 8008e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e34:	4299      	cmp	r1, r3
 8008e36:	d002      	beq.n	8008e3e <__swsetup_r+0x46>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f000 f8c1 	bl	8008fc0 <_free_r>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0308 	orr.w	r3, r3, #8
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	b94b      	cbnz	r3, 8008e72 <__swsetup_r+0x7a>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e68:	d003      	beq.n	8008e72 <__swsetup_r+0x7a>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f000 fd57 	bl	8009920 <__smakebuf_r>
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	f013 0201 	ands.w	r2, r3, #1
 8008e7a:	d00a      	beq.n	8008e92 <__swsetup_r+0x9a>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	60a2      	str	r2, [r4, #8]
 8008e80:	6962      	ldr	r2, [r4, #20]
 8008e82:	4252      	negs	r2, r2
 8008e84:	61a2      	str	r2, [r4, #24]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	b942      	cbnz	r2, 8008e9c <__swsetup_r+0xa4>
 8008e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e8e:	d1c5      	bne.n	8008e1c <__swsetup_r+0x24>
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	0799      	lsls	r1, r3, #30
 8008e94:	bf58      	it	pl
 8008e96:	6962      	ldrpl	r2, [r4, #20]
 8008e98:	60a2      	str	r2, [r4, #8]
 8008e9a:	e7f4      	b.n	8008e86 <__swsetup_r+0x8e>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e7f7      	b.n	8008e90 <__swsetup_r+0x98>
 8008ea0:	20000018 	.word	0x20000018

08008ea4 <memset>:
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <strncmp>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	b16a      	cbz	r2, 8008ed4 <strncmp+0x20>
 8008eb8:	3901      	subs	r1, #1
 8008eba:	1884      	adds	r4, r0, r2
 8008ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d103      	bne.n	8008ed0 <strncmp+0x1c>
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d001      	beq.n	8008ed0 <strncmp+0x1c>
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d1f5      	bne.n	8008ebc <strncmp+0x8>
 8008ed0:	1ad0      	subs	r0, r2, r3
 8008ed2:	bd10      	pop	{r4, pc}
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	e7fc      	b.n	8008ed2 <strncmp+0x1e>

08008ed8 <_close_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d06      	ldr	r5, [pc, #24]	@ (8008ef4 <_close_r+0x1c>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f8 f97d 	bl	80011e2 <_close>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_close_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_close_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	20000468 	.word	0x20000468

08008ef8 <_lseek_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	@ (8008f18 <_lseek_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f8 f992 	bl	8001230 <_lseek>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_lseek_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_lseek_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	20000468 	.word	0x20000468

08008f1c <_read_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	@ (8008f3c <_read_r+0x20>)
 8008f20:	4604      	mov	r4, r0
 8008f22:	4608      	mov	r0, r1
 8008f24:	4611      	mov	r1, r2
 8008f26:	2200      	movs	r2, #0
 8008f28:	602a      	str	r2, [r5, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f7f8 f920 	bl	8001170 <_read>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_read_r+0x1e>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_read_r+0x1e>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20000468 	.word	0x20000468

08008f40 <_write_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d07      	ldr	r5, [pc, #28]	@ (8008f60 <_write_r+0x20>)
 8008f44:	4604      	mov	r4, r0
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f7f8 f92b 	bl	80011aa <_write>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_write_r+0x1e>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_write_r+0x1e>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000468 	.word	0x20000468

08008f64 <__errno>:
 8008f64:	4b01      	ldr	r3, [pc, #4]	@ (8008f6c <__errno+0x8>)
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	20000018 	.word	0x20000018

08008f70 <__libc_init_array>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa8 <__libc_init_array+0x38>)
 8008f74:	4c0d      	ldr	r4, [pc, #52]	@ (8008fac <__libc_init_array+0x3c>)
 8008f76:	1b64      	subs	r4, r4, r5
 8008f78:	10a4      	asrs	r4, r4, #2
 8008f7a:	2600      	movs	r6, #0
 8008f7c:	42a6      	cmp	r6, r4
 8008f7e:	d109      	bne.n	8008f94 <__libc_init_array+0x24>
 8008f80:	4d0b      	ldr	r5, [pc, #44]	@ (8008fb0 <__libc_init_array+0x40>)
 8008f82:	4c0c      	ldr	r4, [pc, #48]	@ (8008fb4 <__libc_init_array+0x44>)
 8008f84:	f000 fd98 	bl	8009ab8 <_init>
 8008f88:	1b64      	subs	r4, r4, r5
 8008f8a:	10a4      	asrs	r4, r4, #2
 8008f8c:	2600      	movs	r6, #0
 8008f8e:	42a6      	cmp	r6, r4
 8008f90:	d105      	bne.n	8008f9e <__libc_init_array+0x2e>
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f98:	4798      	blx	r3
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7ee      	b.n	8008f7c <__libc_init_array+0xc>
 8008f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa2:	4798      	blx	r3
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	e7f2      	b.n	8008f8e <__libc_init_array+0x1e>
 8008fa8:	08009da0 	.word	0x08009da0
 8008fac:	08009da0 	.word	0x08009da0
 8008fb0:	08009da0 	.word	0x08009da0
 8008fb4:	08009da4 	.word	0x08009da4

08008fb8 <__retarget_lock_init_recursive>:
 8008fb8:	4770      	bx	lr

08008fba <__retarget_lock_acquire_recursive>:
 8008fba:	4770      	bx	lr

08008fbc <__retarget_lock_release_recursive>:
 8008fbc:	4770      	bx	lr
	...

08008fc0 <_free_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d041      	beq.n	800904c <_free_r+0x8c>
 8008fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fcc:	1f0c      	subs	r4, r1, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb8      	it	lt
 8008fd2:	18e4      	addlt	r4, r4, r3
 8008fd4:	f000 f8e0 	bl	8009198 <__malloc_lock>
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <_free_r+0x90>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x2c>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe8:	f000 b8dc 	b.w	80091a4 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x42>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	1821      	adds	r1, r4, r0
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1809      	addeq	r1, r1, r0
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x1e>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x4c>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x42>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1850      	adds	r0, r2, r1
 8009010:	42a0      	cmp	r0, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x6c>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	4401      	add	r1, r0
 8009018:	1850      	adds	r0, r2, r1
 800901a:	4283      	cmp	r3, r0
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x22>
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4408      	add	r0, r1
 8009028:	6010      	str	r0, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x22>
 800902c:	d902      	bls.n	8009034 <_free_r+0x74>
 800902e:	230c      	movs	r3, #12
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x22>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	1821      	adds	r1, r4, r0
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1809      	addeq	r1, r1, r0
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x22>
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	20000474 	.word	0x20000474

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0f      	ldr	r6, [pc, #60]	@ (8009094 <sbrk_aligned+0x40>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 fcd6 	bl	8009a10 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fcd1 	bl	8009a10 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d103      	bne.n	800907a <sbrk_aligned+0x26>
 8009072:	f04f 34ff 	mov.w	r4, #4294967295
 8009076:	4620      	mov	r0, r4
 8009078:	bd70      	pop	{r4, r5, r6, pc}
 800907a:	1cc4      	adds	r4, r0, #3
 800907c:	f024 0403 	bic.w	r4, r4, #3
 8009080:	42a0      	cmp	r0, r4
 8009082:	d0f8      	beq.n	8009076 <sbrk_aligned+0x22>
 8009084:	1a21      	subs	r1, r4, r0
 8009086:	4628      	mov	r0, r5
 8009088:	f000 fcc2 	bl	8009a10 <_sbrk_r>
 800908c:	3001      	adds	r0, #1
 800908e:	d1f2      	bne.n	8009076 <sbrk_aligned+0x22>
 8009090:	e7ef      	b.n	8009072 <sbrk_aligned+0x1e>
 8009092:	bf00      	nop
 8009094:	20000470 	.word	0x20000470

08009098 <_malloc_r>:
 8009098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800909c:	1ccd      	adds	r5, r1, #3
 800909e:	f025 0503 	bic.w	r5, r5, #3
 80090a2:	3508      	adds	r5, #8
 80090a4:	2d0c      	cmp	r5, #12
 80090a6:	bf38      	it	cc
 80090a8:	250c      	movcc	r5, #12
 80090aa:	2d00      	cmp	r5, #0
 80090ac:	4606      	mov	r6, r0
 80090ae:	db01      	blt.n	80090b4 <_malloc_r+0x1c>
 80090b0:	42a9      	cmp	r1, r5
 80090b2:	d904      	bls.n	80090be <_malloc_r+0x26>
 80090b4:	230c      	movs	r3, #12
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	2000      	movs	r0, #0
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009194 <_malloc_r+0xfc>
 80090c2:	f000 f869 	bl	8009198 <__malloc_lock>
 80090c6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ca:	461c      	mov	r4, r3
 80090cc:	bb44      	cbnz	r4, 8009120 <_malloc_r+0x88>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff ffbf 	bl	8009054 <sbrk_aligned>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	4604      	mov	r4, r0
 80090da:	d158      	bne.n	800918e <_malloc_r+0xf6>
 80090dc:	f8d8 4000 	ldr.w	r4, [r8]
 80090e0:	4627      	mov	r7, r4
 80090e2:	2f00      	cmp	r7, #0
 80090e4:	d143      	bne.n	800916e <_malloc_r+0xd6>
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d04b      	beq.n	8009182 <_malloc_r+0xea>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	4639      	mov	r1, r7
 80090ee:	4630      	mov	r0, r6
 80090f0:	eb04 0903 	add.w	r9, r4, r3
 80090f4:	f000 fc8c 	bl	8009a10 <_sbrk_r>
 80090f8:	4581      	cmp	r9, r0
 80090fa:	d142      	bne.n	8009182 <_malloc_r+0xea>
 80090fc:	6821      	ldr	r1, [r4, #0]
 80090fe:	1a6d      	subs	r5, r5, r1
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ffa6 	bl	8009054 <sbrk_aligned>
 8009108:	3001      	adds	r0, #1
 800910a:	d03a      	beq.n	8009182 <_malloc_r+0xea>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	442b      	add	r3, r5
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	f8d8 3000 	ldr.w	r3, [r8]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	bb62      	cbnz	r2, 8009174 <_malloc_r+0xdc>
 800911a:	f8c8 7000 	str.w	r7, [r8]
 800911e:	e00f      	b.n	8009140 <_malloc_r+0xa8>
 8009120:	6822      	ldr	r2, [r4, #0]
 8009122:	1b52      	subs	r2, r2, r5
 8009124:	d420      	bmi.n	8009168 <_malloc_r+0xd0>
 8009126:	2a0b      	cmp	r2, #11
 8009128:	d917      	bls.n	800915a <_malloc_r+0xc2>
 800912a:	1961      	adds	r1, r4, r5
 800912c:	42a3      	cmp	r3, r4
 800912e:	6025      	str	r5, [r4, #0]
 8009130:	bf18      	it	ne
 8009132:	6059      	strne	r1, [r3, #4]
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	bf08      	it	eq
 8009138:	f8c8 1000 	streq.w	r1, [r8]
 800913c:	5162      	str	r2, [r4, r5]
 800913e:	604b      	str	r3, [r1, #4]
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f82f 	bl	80091a4 <__malloc_unlock>
 8009146:	f104 000b 	add.w	r0, r4, #11
 800914a:	1d23      	adds	r3, r4, #4
 800914c:	f020 0007 	bic.w	r0, r0, #7
 8009150:	1ac2      	subs	r2, r0, r3
 8009152:	bf1c      	itt	ne
 8009154:	1a1b      	subne	r3, r3, r0
 8009156:	50a3      	strne	r3, [r4, r2]
 8009158:	e7af      	b.n	80090ba <_malloc_r+0x22>
 800915a:	6862      	ldr	r2, [r4, #4]
 800915c:	42a3      	cmp	r3, r4
 800915e:	bf0c      	ite	eq
 8009160:	f8c8 2000 	streq.w	r2, [r8]
 8009164:	605a      	strne	r2, [r3, #4]
 8009166:	e7eb      	b.n	8009140 <_malloc_r+0xa8>
 8009168:	4623      	mov	r3, r4
 800916a:	6864      	ldr	r4, [r4, #4]
 800916c:	e7ae      	b.n	80090cc <_malloc_r+0x34>
 800916e:	463c      	mov	r4, r7
 8009170:	687f      	ldr	r7, [r7, #4]
 8009172:	e7b6      	b.n	80090e2 <_malloc_r+0x4a>
 8009174:	461a      	mov	r2, r3
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	42a3      	cmp	r3, r4
 800917a:	d1fb      	bne.n	8009174 <_malloc_r+0xdc>
 800917c:	2300      	movs	r3, #0
 800917e:	6053      	str	r3, [r2, #4]
 8009180:	e7de      	b.n	8009140 <_malloc_r+0xa8>
 8009182:	230c      	movs	r3, #12
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	4630      	mov	r0, r6
 8009188:	f000 f80c 	bl	80091a4 <__malloc_unlock>
 800918c:	e794      	b.n	80090b8 <_malloc_r+0x20>
 800918e:	6005      	str	r5, [r0, #0]
 8009190:	e7d6      	b.n	8009140 <_malloc_r+0xa8>
 8009192:	bf00      	nop
 8009194:	20000474 	.word	0x20000474

08009198 <__malloc_lock>:
 8009198:	4801      	ldr	r0, [pc, #4]	@ (80091a0 <__malloc_lock+0x8>)
 800919a:	f7ff bf0e 	b.w	8008fba <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	2000046c 	.word	0x2000046c

080091a4 <__malloc_unlock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	@ (80091ac <__malloc_unlock+0x8>)
 80091a6:	f7ff bf09 	b.w	8008fbc <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	2000046c 	.word	0x2000046c

080091b0 <__ssputs_r>:
 80091b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	688e      	ldr	r6, [r1, #8]
 80091b6:	461f      	mov	r7, r3
 80091b8:	42be      	cmp	r6, r7
 80091ba:	680b      	ldr	r3, [r1, #0]
 80091bc:	4682      	mov	sl, r0
 80091be:	460c      	mov	r4, r1
 80091c0:	4690      	mov	r8, r2
 80091c2:	d82d      	bhi.n	8009220 <__ssputs_r+0x70>
 80091c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091cc:	d026      	beq.n	800921c <__ssputs_r+0x6c>
 80091ce:	6965      	ldr	r5, [r4, #20]
 80091d0:	6909      	ldr	r1, [r1, #16]
 80091d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091d6:	eba3 0901 	sub.w	r9, r3, r1
 80091da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091de:	1c7b      	adds	r3, r7, #1
 80091e0:	444b      	add	r3, r9
 80091e2:	106d      	asrs	r5, r5, #1
 80091e4:	429d      	cmp	r5, r3
 80091e6:	bf38      	it	cc
 80091e8:	461d      	movcc	r5, r3
 80091ea:	0553      	lsls	r3, r2, #21
 80091ec:	d527      	bpl.n	800923e <__ssputs_r+0x8e>
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7ff ff52 	bl	8009098 <_malloc_r>
 80091f4:	4606      	mov	r6, r0
 80091f6:	b360      	cbz	r0, 8009252 <__ssputs_r+0xa2>
 80091f8:	6921      	ldr	r1, [r4, #16]
 80091fa:	464a      	mov	r2, r9
 80091fc:	f000 fc18 	bl	8009a30 <memcpy>
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	6126      	str	r6, [r4, #16]
 800920e:	6165      	str	r5, [r4, #20]
 8009210:	444e      	add	r6, r9
 8009212:	eba5 0509 	sub.w	r5, r5, r9
 8009216:	6026      	str	r6, [r4, #0]
 8009218:	60a5      	str	r5, [r4, #8]
 800921a:	463e      	mov	r6, r7
 800921c:	42be      	cmp	r6, r7
 800921e:	d900      	bls.n	8009222 <__ssputs_r+0x72>
 8009220:	463e      	mov	r6, r7
 8009222:	6820      	ldr	r0, [r4, #0]
 8009224:	4632      	mov	r2, r6
 8009226:	4641      	mov	r1, r8
 8009228:	f000 fbb6 	bl	8009998 <memmove>
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	1b9b      	subs	r3, r3, r6
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	4433      	add	r3, r6
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	2000      	movs	r0, #0
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923e:	462a      	mov	r2, r5
 8009240:	f000 fc04 	bl	8009a4c <_realloc_r>
 8009244:	4606      	mov	r6, r0
 8009246:	2800      	cmp	r0, #0
 8009248:	d1e0      	bne.n	800920c <__ssputs_r+0x5c>
 800924a:	6921      	ldr	r1, [r4, #16]
 800924c:	4650      	mov	r0, sl
 800924e:	f7ff feb7 	bl	8008fc0 <_free_r>
 8009252:	230c      	movs	r3, #12
 8009254:	f8ca 3000 	str.w	r3, [sl]
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	e7e9      	b.n	800923a <__ssputs_r+0x8a>
	...

08009268 <_svfiprintf_r>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	4698      	mov	r8, r3
 800926e:	898b      	ldrh	r3, [r1, #12]
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	b09d      	sub	sp, #116	@ 0x74
 8009274:	4607      	mov	r7, r0
 8009276:	460d      	mov	r5, r1
 8009278:	4614      	mov	r4, r2
 800927a:	d510      	bpl.n	800929e <_svfiprintf_r+0x36>
 800927c:	690b      	ldr	r3, [r1, #16]
 800927e:	b973      	cbnz	r3, 800929e <_svfiprintf_r+0x36>
 8009280:	2140      	movs	r1, #64	@ 0x40
 8009282:	f7ff ff09 	bl	8009098 <_malloc_r>
 8009286:	6028      	str	r0, [r5, #0]
 8009288:	6128      	str	r0, [r5, #16]
 800928a:	b930      	cbnz	r0, 800929a <_svfiprintf_r+0x32>
 800928c:	230c      	movs	r3, #12
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	b01d      	add	sp, #116	@ 0x74
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	2340      	movs	r3, #64	@ 0x40
 800929c:	616b      	str	r3, [r5, #20]
 800929e:	2300      	movs	r3, #0
 80092a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a2:	2320      	movs	r3, #32
 80092a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ac:	2330      	movs	r3, #48	@ 0x30
 80092ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800944c <_svfiprintf_r+0x1e4>
 80092b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092b6:	f04f 0901 	mov.w	r9, #1
 80092ba:	4623      	mov	r3, r4
 80092bc:	469a      	mov	sl, r3
 80092be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c2:	b10a      	cbz	r2, 80092c8 <_svfiprintf_r+0x60>
 80092c4:	2a25      	cmp	r2, #37	@ 0x25
 80092c6:	d1f9      	bne.n	80092bc <_svfiprintf_r+0x54>
 80092c8:	ebba 0b04 	subs.w	fp, sl, r4
 80092cc:	d00b      	beq.n	80092e6 <_svfiprintf_r+0x7e>
 80092ce:	465b      	mov	r3, fp
 80092d0:	4622      	mov	r2, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff ff6b 	bl	80091b0 <__ssputs_r>
 80092da:	3001      	adds	r0, #1
 80092dc:	f000 80a7 	beq.w	800942e <_svfiprintf_r+0x1c6>
 80092e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092e2:	445a      	add	r2, fp
 80092e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092e6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 809f 	beq.w	800942e <_svfiprintf_r+0x1c6>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fa:	f10a 0a01 	add.w	sl, sl, #1
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009306:	931a      	str	r3, [sp, #104]	@ 0x68
 8009308:	4654      	mov	r4, sl
 800930a:	2205      	movs	r2, #5
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	484e      	ldr	r0, [pc, #312]	@ (800944c <_svfiprintf_r+0x1e4>)
 8009312:	f7f6 ff9d 	bl	8000250 <memchr>
 8009316:	9a04      	ldr	r2, [sp, #16]
 8009318:	b9d8      	cbnz	r0, 8009352 <_svfiprintf_r+0xea>
 800931a:	06d0      	lsls	r0, r2, #27
 800931c:	bf44      	itt	mi
 800931e:	2320      	movmi	r3, #32
 8009320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009324:	0711      	lsls	r1, r2, #28
 8009326:	bf44      	itt	mi
 8009328:	232b      	movmi	r3, #43	@ 0x2b
 800932a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b2a      	cmp	r3, #42	@ 0x2a
 8009334:	d015      	beq.n	8009362 <_svfiprintf_r+0xfa>
 8009336:	9a07      	ldr	r2, [sp, #28]
 8009338:	4654      	mov	r4, sl
 800933a:	2000      	movs	r0, #0
 800933c:	f04f 0c0a 	mov.w	ip, #10
 8009340:	4621      	mov	r1, r4
 8009342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009346:	3b30      	subs	r3, #48	@ 0x30
 8009348:	2b09      	cmp	r3, #9
 800934a:	d94b      	bls.n	80093e4 <_svfiprintf_r+0x17c>
 800934c:	b1b0      	cbz	r0, 800937c <_svfiprintf_r+0x114>
 800934e:	9207      	str	r2, [sp, #28]
 8009350:	e014      	b.n	800937c <_svfiprintf_r+0x114>
 8009352:	eba0 0308 	sub.w	r3, r0, r8
 8009356:	fa09 f303 	lsl.w	r3, r9, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	46a2      	mov	sl, r4
 8009360:	e7d2      	b.n	8009308 <_svfiprintf_r+0xa0>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	9103      	str	r1, [sp, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbb      	ittet	lt
 800936e:	425b      	neglt	r3, r3
 8009370:	f042 0202 	orrlt.w	r2, r2, #2
 8009374:	9307      	strge	r3, [sp, #28]
 8009376:	9307      	strlt	r3, [sp, #28]
 8009378:	bfb8      	it	lt
 800937a:	9204      	strlt	r2, [sp, #16]
 800937c:	7823      	ldrb	r3, [r4, #0]
 800937e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009380:	d10a      	bne.n	8009398 <_svfiprintf_r+0x130>
 8009382:	7863      	ldrb	r3, [r4, #1]
 8009384:	2b2a      	cmp	r3, #42	@ 0x2a
 8009386:	d132      	bne.n	80093ee <_svfiprintf_r+0x186>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	9203      	str	r2, [sp, #12]
 8009390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009394:	3402      	adds	r4, #2
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800945c <_svfiprintf_r+0x1f4>
 800939c:	7821      	ldrb	r1, [r4, #0]
 800939e:	2203      	movs	r2, #3
 80093a0:	4650      	mov	r0, sl
 80093a2:	f7f6 ff55 	bl	8000250 <memchr>
 80093a6:	b138      	cbz	r0, 80093b8 <_svfiprintf_r+0x150>
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	eba0 000a 	sub.w	r0, r0, sl
 80093ae:	2240      	movs	r2, #64	@ 0x40
 80093b0:	4082      	lsls	r2, r0
 80093b2:	4313      	orrs	r3, r2
 80093b4:	3401      	adds	r4, #1
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093bc:	4824      	ldr	r0, [pc, #144]	@ (8009450 <_svfiprintf_r+0x1e8>)
 80093be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093c2:	2206      	movs	r2, #6
 80093c4:	f7f6 ff44 	bl	8000250 <memchr>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d036      	beq.n	800943a <_svfiprintf_r+0x1d2>
 80093cc:	4b21      	ldr	r3, [pc, #132]	@ (8009454 <_svfiprintf_r+0x1ec>)
 80093ce:	bb1b      	cbnz	r3, 8009418 <_svfiprintf_r+0x1b0>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	3307      	adds	r3, #7
 80093d4:	f023 0307 	bic.w	r3, r3, #7
 80093d8:	3308      	adds	r3, #8
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093de:	4433      	add	r3, r6
 80093e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e2:	e76a      	b.n	80092ba <_svfiprintf_r+0x52>
 80093e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e8:	460c      	mov	r4, r1
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7a8      	b.n	8009340 <_svfiprintf_r+0xd8>
 80093ee:	2300      	movs	r3, #0
 80093f0:	3401      	adds	r4, #1
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	4619      	mov	r1, r3
 80093f6:	f04f 0c0a 	mov.w	ip, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009400:	3a30      	subs	r2, #48	@ 0x30
 8009402:	2a09      	cmp	r2, #9
 8009404:	d903      	bls.n	800940e <_svfiprintf_r+0x1a6>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0c6      	beq.n	8009398 <_svfiprintf_r+0x130>
 800940a:	9105      	str	r1, [sp, #20]
 800940c:	e7c4      	b.n	8009398 <_svfiprintf_r+0x130>
 800940e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009412:	4604      	mov	r4, r0
 8009414:	2301      	movs	r3, #1
 8009416:	e7f0      	b.n	80093fa <_svfiprintf_r+0x192>
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	462a      	mov	r2, r5
 800941e:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <_svfiprintf_r+0x1f0>)
 8009420:	a904      	add	r1, sp, #16
 8009422:	4638      	mov	r0, r7
 8009424:	f3af 8000 	nop.w
 8009428:	1c42      	adds	r2, r0, #1
 800942a:	4606      	mov	r6, r0
 800942c:	d1d6      	bne.n	80093dc <_svfiprintf_r+0x174>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	065b      	lsls	r3, r3, #25
 8009432:	f53f af2d 	bmi.w	8009290 <_svfiprintf_r+0x28>
 8009436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009438:	e72c      	b.n	8009294 <_svfiprintf_r+0x2c>
 800943a:	ab03      	add	r3, sp, #12
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	462a      	mov	r2, r5
 8009440:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <_svfiprintf_r+0x1f0>)
 8009442:	a904      	add	r1, sp, #16
 8009444:	4638      	mov	r0, r7
 8009446:	f000 f879 	bl	800953c <_printf_i>
 800944a:	e7ed      	b.n	8009428 <_svfiprintf_r+0x1c0>
 800944c:	08009d65 	.word	0x08009d65
 8009450:	08009d6f 	.word	0x08009d6f
 8009454:	00000000 	.word	0x00000000
 8009458:	080091b1 	.word	0x080091b1
 800945c:	08009d6b 	.word	0x08009d6b

08009460 <_printf_common>:
 8009460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	4616      	mov	r6, r2
 8009466:	4698      	mov	r8, r3
 8009468:	688a      	ldr	r2, [r1, #8]
 800946a:	690b      	ldr	r3, [r1, #16]
 800946c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009470:	4293      	cmp	r3, r2
 8009472:	bfb8      	it	lt
 8009474:	4613      	movlt	r3, r2
 8009476:	6033      	str	r3, [r6, #0]
 8009478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800947c:	4607      	mov	r7, r0
 800947e:	460c      	mov	r4, r1
 8009480:	b10a      	cbz	r2, 8009486 <_printf_common+0x26>
 8009482:	3301      	adds	r3, #1
 8009484:	6033      	str	r3, [r6, #0]
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	0699      	lsls	r1, r3, #26
 800948a:	bf42      	ittt	mi
 800948c:	6833      	ldrmi	r3, [r6, #0]
 800948e:	3302      	addmi	r3, #2
 8009490:	6033      	strmi	r3, [r6, #0]
 8009492:	6825      	ldr	r5, [r4, #0]
 8009494:	f015 0506 	ands.w	r5, r5, #6
 8009498:	d106      	bne.n	80094a8 <_printf_common+0x48>
 800949a:	f104 0a19 	add.w	sl, r4, #25
 800949e:	68e3      	ldr	r3, [r4, #12]
 80094a0:	6832      	ldr	r2, [r6, #0]
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	42ab      	cmp	r3, r5
 80094a6:	dc26      	bgt.n	80094f6 <_printf_common+0x96>
 80094a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	3b00      	subs	r3, #0
 80094b0:	bf18      	it	ne
 80094b2:	2301      	movne	r3, #1
 80094b4:	0692      	lsls	r2, r2, #26
 80094b6:	d42b      	bmi.n	8009510 <_printf_common+0xb0>
 80094b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094bc:	4641      	mov	r1, r8
 80094be:	4638      	mov	r0, r7
 80094c0:	47c8      	blx	r9
 80094c2:	3001      	adds	r0, #1
 80094c4:	d01e      	beq.n	8009504 <_printf_common+0xa4>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6922      	ldr	r2, [r4, #16]
 80094ca:	f003 0306 	and.w	r3, r3, #6
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	bf02      	ittt	eq
 80094d2:	68e5      	ldreq	r5, [r4, #12]
 80094d4:	6833      	ldreq	r3, [r6, #0]
 80094d6:	1aed      	subeq	r5, r5, r3
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	bf0c      	ite	eq
 80094dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094e0:	2500      	movne	r5, #0
 80094e2:	4293      	cmp	r3, r2
 80094e4:	bfc4      	itt	gt
 80094e6:	1a9b      	subgt	r3, r3, r2
 80094e8:	18ed      	addgt	r5, r5, r3
 80094ea:	2600      	movs	r6, #0
 80094ec:	341a      	adds	r4, #26
 80094ee:	42b5      	cmp	r5, r6
 80094f0:	d11a      	bne.n	8009528 <_printf_common+0xc8>
 80094f2:	2000      	movs	r0, #0
 80094f4:	e008      	b.n	8009508 <_printf_common+0xa8>
 80094f6:	2301      	movs	r3, #1
 80094f8:	4652      	mov	r2, sl
 80094fa:	4641      	mov	r1, r8
 80094fc:	4638      	mov	r0, r7
 80094fe:	47c8      	blx	r9
 8009500:	3001      	adds	r0, #1
 8009502:	d103      	bne.n	800950c <_printf_common+0xac>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950c:	3501      	adds	r5, #1
 800950e:	e7c6      	b.n	800949e <_printf_common+0x3e>
 8009510:	18e1      	adds	r1, r4, r3
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	2030      	movs	r0, #48	@ 0x30
 8009516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800951a:	4422      	add	r2, r4
 800951c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009524:	3302      	adds	r3, #2
 8009526:	e7c7      	b.n	80094b8 <_printf_common+0x58>
 8009528:	2301      	movs	r3, #1
 800952a:	4622      	mov	r2, r4
 800952c:	4641      	mov	r1, r8
 800952e:	4638      	mov	r0, r7
 8009530:	47c8      	blx	r9
 8009532:	3001      	adds	r0, #1
 8009534:	d0e6      	beq.n	8009504 <_printf_common+0xa4>
 8009536:	3601      	adds	r6, #1
 8009538:	e7d9      	b.n	80094ee <_printf_common+0x8e>
	...

0800953c <_printf_i>:
 800953c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	7e0f      	ldrb	r7, [r1, #24]
 8009542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009544:	2f78      	cmp	r7, #120	@ 0x78
 8009546:	4691      	mov	r9, r2
 8009548:	4680      	mov	r8, r0
 800954a:	460c      	mov	r4, r1
 800954c:	469a      	mov	sl, r3
 800954e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009552:	d807      	bhi.n	8009564 <_printf_i+0x28>
 8009554:	2f62      	cmp	r7, #98	@ 0x62
 8009556:	d80a      	bhi.n	800956e <_printf_i+0x32>
 8009558:	2f00      	cmp	r7, #0
 800955a:	f000 80d2 	beq.w	8009702 <_printf_i+0x1c6>
 800955e:	2f58      	cmp	r7, #88	@ 0x58
 8009560:	f000 80b9 	beq.w	80096d6 <_printf_i+0x19a>
 8009564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800956c:	e03a      	b.n	80095e4 <_printf_i+0xa8>
 800956e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009572:	2b15      	cmp	r3, #21
 8009574:	d8f6      	bhi.n	8009564 <_printf_i+0x28>
 8009576:	a101      	add	r1, pc, #4	@ (adr r1, 800957c <_printf_i+0x40>)
 8009578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800957c:	080095d5 	.word	0x080095d5
 8009580:	080095e9 	.word	0x080095e9
 8009584:	08009565 	.word	0x08009565
 8009588:	08009565 	.word	0x08009565
 800958c:	08009565 	.word	0x08009565
 8009590:	08009565 	.word	0x08009565
 8009594:	080095e9 	.word	0x080095e9
 8009598:	08009565 	.word	0x08009565
 800959c:	08009565 	.word	0x08009565
 80095a0:	08009565 	.word	0x08009565
 80095a4:	08009565 	.word	0x08009565
 80095a8:	080096e9 	.word	0x080096e9
 80095ac:	08009613 	.word	0x08009613
 80095b0:	080096a3 	.word	0x080096a3
 80095b4:	08009565 	.word	0x08009565
 80095b8:	08009565 	.word	0x08009565
 80095bc:	0800970b 	.word	0x0800970b
 80095c0:	08009565 	.word	0x08009565
 80095c4:	08009613 	.word	0x08009613
 80095c8:	08009565 	.word	0x08009565
 80095cc:	08009565 	.word	0x08009565
 80095d0:	080096ab 	.word	0x080096ab
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	1d1a      	adds	r2, r3, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6032      	str	r2, [r6, #0]
 80095dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095e4:	2301      	movs	r3, #1
 80095e6:	e09d      	b.n	8009724 <_printf_i+0x1e8>
 80095e8:	6833      	ldr	r3, [r6, #0]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	6031      	str	r1, [r6, #0]
 80095f0:	0606      	lsls	r6, r0, #24
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0xbc>
 80095f4:	681d      	ldr	r5, [r3, #0]
 80095f6:	e003      	b.n	8009600 <_printf_i+0xc4>
 80095f8:	0645      	lsls	r5, r0, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0xb8>
 80095fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009600:	2d00      	cmp	r5, #0
 8009602:	da03      	bge.n	800960c <_printf_i+0xd0>
 8009604:	232d      	movs	r3, #45	@ 0x2d
 8009606:	426d      	negs	r5, r5
 8009608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800960c:	4859      	ldr	r0, [pc, #356]	@ (8009774 <_printf_i+0x238>)
 800960e:	230a      	movs	r3, #10
 8009610:	e011      	b.n	8009636 <_printf_i+0xfa>
 8009612:	6821      	ldr	r1, [r4, #0]
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	0608      	lsls	r0, r1, #24
 8009618:	f853 5b04 	ldr.w	r5, [r3], #4
 800961c:	d402      	bmi.n	8009624 <_printf_i+0xe8>
 800961e:	0649      	lsls	r1, r1, #25
 8009620:	bf48      	it	mi
 8009622:	b2ad      	uxthmi	r5, r5
 8009624:	2f6f      	cmp	r7, #111	@ 0x6f
 8009626:	4853      	ldr	r0, [pc, #332]	@ (8009774 <_printf_i+0x238>)
 8009628:	6033      	str	r3, [r6, #0]
 800962a:	bf14      	ite	ne
 800962c:	230a      	movne	r3, #10
 800962e:	2308      	moveq	r3, #8
 8009630:	2100      	movs	r1, #0
 8009632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009636:	6866      	ldr	r6, [r4, #4]
 8009638:	60a6      	str	r6, [r4, #8]
 800963a:	2e00      	cmp	r6, #0
 800963c:	bfa2      	ittt	ge
 800963e:	6821      	ldrge	r1, [r4, #0]
 8009640:	f021 0104 	bicge.w	r1, r1, #4
 8009644:	6021      	strge	r1, [r4, #0]
 8009646:	b90d      	cbnz	r5, 800964c <_printf_i+0x110>
 8009648:	2e00      	cmp	r6, #0
 800964a:	d04b      	beq.n	80096e4 <_printf_i+0x1a8>
 800964c:	4616      	mov	r6, r2
 800964e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009652:	fb03 5711 	mls	r7, r3, r1, r5
 8009656:	5dc7      	ldrb	r7, [r0, r7]
 8009658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800965c:	462f      	mov	r7, r5
 800965e:	42bb      	cmp	r3, r7
 8009660:	460d      	mov	r5, r1
 8009662:	d9f4      	bls.n	800964e <_printf_i+0x112>
 8009664:	2b08      	cmp	r3, #8
 8009666:	d10b      	bne.n	8009680 <_printf_i+0x144>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	07df      	lsls	r7, r3, #31
 800966c:	d508      	bpl.n	8009680 <_printf_i+0x144>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	6861      	ldr	r1, [r4, #4]
 8009672:	4299      	cmp	r1, r3
 8009674:	bfde      	ittt	le
 8009676:	2330      	movle	r3, #48	@ 0x30
 8009678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800967c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009680:	1b92      	subs	r2, r2, r6
 8009682:	6122      	str	r2, [r4, #16]
 8009684:	f8cd a000 	str.w	sl, [sp]
 8009688:	464b      	mov	r3, r9
 800968a:	aa03      	add	r2, sp, #12
 800968c:	4621      	mov	r1, r4
 800968e:	4640      	mov	r0, r8
 8009690:	f7ff fee6 	bl	8009460 <_printf_common>
 8009694:	3001      	adds	r0, #1
 8009696:	d14a      	bne.n	800972e <_printf_i+0x1f2>
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	b004      	add	sp, #16
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	f043 0320 	orr.w	r3, r3, #32
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	4833      	ldr	r0, [pc, #204]	@ (8009778 <_printf_i+0x23c>)
 80096ac:	2778      	movs	r7, #120	@ 0x78
 80096ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	6831      	ldr	r1, [r6, #0]
 80096b6:	061f      	lsls	r7, r3, #24
 80096b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80096bc:	d402      	bmi.n	80096c4 <_printf_i+0x188>
 80096be:	065f      	lsls	r7, r3, #25
 80096c0:	bf48      	it	mi
 80096c2:	b2ad      	uxthmi	r5, r5
 80096c4:	6031      	str	r1, [r6, #0]
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	bf44      	itt	mi
 80096ca:	f043 0320 	orrmi.w	r3, r3, #32
 80096ce:	6023      	strmi	r3, [r4, #0]
 80096d0:	b11d      	cbz	r5, 80096da <_printf_i+0x19e>
 80096d2:	2310      	movs	r3, #16
 80096d4:	e7ac      	b.n	8009630 <_printf_i+0xf4>
 80096d6:	4827      	ldr	r0, [pc, #156]	@ (8009774 <_printf_i+0x238>)
 80096d8:	e7e9      	b.n	80096ae <_printf_i+0x172>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	f023 0320 	bic.w	r3, r3, #32
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	e7f6      	b.n	80096d2 <_printf_i+0x196>
 80096e4:	4616      	mov	r6, r2
 80096e6:	e7bd      	b.n	8009664 <_printf_i+0x128>
 80096e8:	6833      	ldr	r3, [r6, #0]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	6961      	ldr	r1, [r4, #20]
 80096ee:	1d18      	adds	r0, r3, #4
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	062e      	lsls	r6, r5, #24
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	d501      	bpl.n	80096fc <_printf_i+0x1c0>
 80096f8:	6019      	str	r1, [r3, #0]
 80096fa:	e002      	b.n	8009702 <_printf_i+0x1c6>
 80096fc:	0668      	lsls	r0, r5, #25
 80096fe:	d5fb      	bpl.n	80096f8 <_printf_i+0x1bc>
 8009700:	8019      	strh	r1, [r3, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	4616      	mov	r6, r2
 8009708:	e7bc      	b.n	8009684 <_printf_i+0x148>
 800970a:	6833      	ldr	r3, [r6, #0]
 800970c:	1d1a      	adds	r2, r3, #4
 800970e:	6032      	str	r2, [r6, #0]
 8009710:	681e      	ldr	r6, [r3, #0]
 8009712:	6862      	ldr	r2, [r4, #4]
 8009714:	2100      	movs	r1, #0
 8009716:	4630      	mov	r0, r6
 8009718:	f7f6 fd9a 	bl	8000250 <memchr>
 800971c:	b108      	cbz	r0, 8009722 <_printf_i+0x1e6>
 800971e:	1b80      	subs	r0, r0, r6
 8009720:	6060      	str	r0, [r4, #4]
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	2300      	movs	r3, #0
 8009728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800972c:	e7aa      	b.n	8009684 <_printf_i+0x148>
 800972e:	6923      	ldr	r3, [r4, #16]
 8009730:	4632      	mov	r2, r6
 8009732:	4649      	mov	r1, r9
 8009734:	4640      	mov	r0, r8
 8009736:	47d0      	blx	sl
 8009738:	3001      	adds	r0, #1
 800973a:	d0ad      	beq.n	8009698 <_printf_i+0x15c>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	079b      	lsls	r3, r3, #30
 8009740:	d413      	bmi.n	800976a <_printf_i+0x22e>
 8009742:	68e0      	ldr	r0, [r4, #12]
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	4298      	cmp	r0, r3
 8009748:	bfb8      	it	lt
 800974a:	4618      	movlt	r0, r3
 800974c:	e7a6      	b.n	800969c <_printf_i+0x160>
 800974e:	2301      	movs	r3, #1
 8009750:	4632      	mov	r2, r6
 8009752:	4649      	mov	r1, r9
 8009754:	4640      	mov	r0, r8
 8009756:	47d0      	blx	sl
 8009758:	3001      	adds	r0, #1
 800975a:	d09d      	beq.n	8009698 <_printf_i+0x15c>
 800975c:	3501      	adds	r5, #1
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	9903      	ldr	r1, [sp, #12]
 8009762:	1a5b      	subs	r3, r3, r1
 8009764:	42ab      	cmp	r3, r5
 8009766:	dcf2      	bgt.n	800974e <_printf_i+0x212>
 8009768:	e7eb      	b.n	8009742 <_printf_i+0x206>
 800976a:	2500      	movs	r5, #0
 800976c:	f104 0619 	add.w	r6, r4, #25
 8009770:	e7f5      	b.n	800975e <_printf_i+0x222>
 8009772:	bf00      	nop
 8009774:	08009d76 	.word	0x08009d76
 8009778:	08009d87 	.word	0x08009d87

0800977c <__sflush_r>:
 800977c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	0716      	lsls	r6, r2, #28
 8009786:	4605      	mov	r5, r0
 8009788:	460c      	mov	r4, r1
 800978a:	d454      	bmi.n	8009836 <__sflush_r+0xba>
 800978c:	684b      	ldr	r3, [r1, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	dc02      	bgt.n	8009798 <__sflush_r+0x1c>
 8009792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	dd48      	ble.n	800982a <__sflush_r+0xae>
 8009798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800979a:	2e00      	cmp	r6, #0
 800979c:	d045      	beq.n	800982a <__sflush_r+0xae>
 800979e:	2300      	movs	r3, #0
 80097a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097a4:	682f      	ldr	r7, [r5, #0]
 80097a6:	6a21      	ldr	r1, [r4, #32]
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	d030      	beq.n	800980e <__sflush_r+0x92>
 80097ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	0759      	lsls	r1, r3, #29
 80097b2:	d505      	bpl.n	80097c0 <__sflush_r+0x44>
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	1ad2      	subs	r2, r2, r3
 80097b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097ba:	b10b      	cbz	r3, 80097c0 <__sflush_r+0x44>
 80097bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b0      	blx	r6
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	d106      	bne.n	80097de <__sflush_r+0x62>
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	291d      	cmp	r1, #29
 80097d4:	d82b      	bhi.n	800982e <__sflush_r+0xb2>
 80097d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009880 <__sflush_r+0x104>)
 80097d8:	410a      	asrs	r2, r1
 80097da:	07d6      	lsls	r6, r2, #31
 80097dc:	d427      	bmi.n	800982e <__sflush_r+0xb2>
 80097de:	2200      	movs	r2, #0
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	04d9      	lsls	r1, r3, #19
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	d504      	bpl.n	80097f4 <__sflush_r+0x78>
 80097ea:	1c42      	adds	r2, r0, #1
 80097ec:	d101      	bne.n	80097f2 <__sflush_r+0x76>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b903      	cbnz	r3, 80097f4 <__sflush_r+0x78>
 80097f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f6:	602f      	str	r7, [r5, #0]
 80097f8:	b1b9      	cbz	r1, 800982a <__sflush_r+0xae>
 80097fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097fe:	4299      	cmp	r1, r3
 8009800:	d002      	beq.n	8009808 <__sflush_r+0x8c>
 8009802:	4628      	mov	r0, r5
 8009804:	f7ff fbdc 	bl	8008fc0 <_free_r>
 8009808:	2300      	movs	r3, #0
 800980a:	6363      	str	r3, [r4, #52]	@ 0x34
 800980c:	e00d      	b.n	800982a <__sflush_r+0xae>
 800980e:	2301      	movs	r3, #1
 8009810:	4628      	mov	r0, r5
 8009812:	47b0      	blx	r6
 8009814:	4602      	mov	r2, r0
 8009816:	1c50      	adds	r0, r2, #1
 8009818:	d1c9      	bne.n	80097ae <__sflush_r+0x32>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0c6      	beq.n	80097ae <__sflush_r+0x32>
 8009820:	2b1d      	cmp	r3, #29
 8009822:	d001      	beq.n	8009828 <__sflush_r+0xac>
 8009824:	2b16      	cmp	r3, #22
 8009826:	d11e      	bne.n	8009866 <__sflush_r+0xea>
 8009828:	602f      	str	r7, [r5, #0]
 800982a:	2000      	movs	r0, #0
 800982c:	e022      	b.n	8009874 <__sflush_r+0xf8>
 800982e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009832:	b21b      	sxth	r3, r3
 8009834:	e01b      	b.n	800986e <__sflush_r+0xf2>
 8009836:	690f      	ldr	r7, [r1, #16]
 8009838:	2f00      	cmp	r7, #0
 800983a:	d0f6      	beq.n	800982a <__sflush_r+0xae>
 800983c:	0793      	lsls	r3, r2, #30
 800983e:	680e      	ldr	r6, [r1, #0]
 8009840:	bf08      	it	eq
 8009842:	694b      	ldreq	r3, [r1, #20]
 8009844:	600f      	str	r7, [r1, #0]
 8009846:	bf18      	it	ne
 8009848:	2300      	movne	r3, #0
 800984a:	eba6 0807 	sub.w	r8, r6, r7
 800984e:	608b      	str	r3, [r1, #8]
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	dde9      	ble.n	800982a <__sflush_r+0xae>
 8009856:	6a21      	ldr	r1, [r4, #32]
 8009858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800985a:	4643      	mov	r3, r8
 800985c:	463a      	mov	r2, r7
 800985e:	4628      	mov	r0, r5
 8009860:	47b0      	blx	r6
 8009862:	2800      	cmp	r0, #0
 8009864:	dc08      	bgt.n	8009878 <__sflush_r+0xfc>
 8009866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	4407      	add	r7, r0
 800987a:	eba8 0800 	sub.w	r8, r8, r0
 800987e:	e7e7      	b.n	8009850 <__sflush_r+0xd4>
 8009880:	dfbffffe 	.word	0xdfbffffe

08009884 <_fflush_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	4605      	mov	r5, r0
 800988a:	460c      	mov	r4, r1
 800988c:	b913      	cbnz	r3, 8009894 <_fflush_r+0x10>
 800988e:	2500      	movs	r5, #0
 8009890:	4628      	mov	r0, r5
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	b118      	cbz	r0, 800989e <_fflush_r+0x1a>
 8009896:	6a03      	ldr	r3, [r0, #32]
 8009898:	b90b      	cbnz	r3, 800989e <_fflush_r+0x1a>
 800989a:	f7ff f963 	bl	8008b64 <__sinit>
 800989e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0f3      	beq.n	800988e <_fflush_r+0xa>
 80098a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098a8:	07d0      	lsls	r0, r2, #31
 80098aa:	d404      	bmi.n	80098b6 <_fflush_r+0x32>
 80098ac:	0599      	lsls	r1, r3, #22
 80098ae:	d402      	bmi.n	80098b6 <_fflush_r+0x32>
 80098b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098b2:	f7ff fb82 	bl	8008fba <__retarget_lock_acquire_recursive>
 80098b6:	4628      	mov	r0, r5
 80098b8:	4621      	mov	r1, r4
 80098ba:	f7ff ff5f 	bl	800977c <__sflush_r>
 80098be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098c0:	07da      	lsls	r2, r3, #31
 80098c2:	4605      	mov	r5, r0
 80098c4:	d4e4      	bmi.n	8009890 <_fflush_r+0xc>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	059b      	lsls	r3, r3, #22
 80098ca:	d4e1      	bmi.n	8009890 <_fflush_r+0xc>
 80098cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ce:	f7ff fb75 	bl	8008fbc <__retarget_lock_release_recursive>
 80098d2:	e7dd      	b.n	8009890 <_fflush_r+0xc>

080098d4 <__swhatbuf_r>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	2900      	cmp	r1, #0
 80098de:	b096      	sub	sp, #88	@ 0x58
 80098e0:	4615      	mov	r5, r2
 80098e2:	461e      	mov	r6, r3
 80098e4:	da0d      	bge.n	8009902 <__swhatbuf_r+0x2e>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098ec:	f04f 0100 	mov.w	r1, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2340      	movne	r3, #64	@ 0x40
 80098f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098f8:	2000      	movs	r0, #0
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	b016      	add	sp, #88	@ 0x58
 8009900:	bd70      	pop	{r4, r5, r6, pc}
 8009902:	466a      	mov	r2, sp
 8009904:	f000 f862 	bl	80099cc <_fstat_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	dbec      	blt.n	80098e6 <__swhatbuf_r+0x12>
 800990c:	9901      	ldr	r1, [sp, #4]
 800990e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009916:	4259      	negs	r1, r3
 8009918:	4159      	adcs	r1, r3
 800991a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991e:	e7eb      	b.n	80098f8 <__swhatbuf_r+0x24>

08009920 <__smakebuf_r>:
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009924:	079d      	lsls	r5, r3, #30
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	d507      	bpl.n	800993c <__smakebuf_r+0x1c>
 800992c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	6123      	str	r3, [r4, #16]
 8009934:	2301      	movs	r3, #1
 8009936:	6163      	str	r3, [r4, #20]
 8009938:	b003      	add	sp, #12
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993c:	ab01      	add	r3, sp, #4
 800993e:	466a      	mov	r2, sp
 8009940:	f7ff ffc8 	bl	80098d4 <__swhatbuf_r>
 8009944:	9f00      	ldr	r7, [sp, #0]
 8009946:	4605      	mov	r5, r0
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff fba4 	bl	8009098 <_malloc_r>
 8009950:	b948      	cbnz	r0, 8009966 <__smakebuf_r+0x46>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	059a      	lsls	r2, r3, #22
 8009958:	d4ee      	bmi.n	8009938 <__smakebuf_r+0x18>
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	e7e2      	b.n	800992c <__smakebuf_r+0xc>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	6020      	str	r0, [r4, #0]
 800996a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009976:	b15b      	cbz	r3, 8009990 <__smakebuf_r+0x70>
 8009978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f837 	bl	80099f0 <_isatty_r>
 8009982:	b128      	cbz	r0, 8009990 <__smakebuf_r+0x70>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	431d      	orrs	r5, r3
 8009994:	81a5      	strh	r5, [r4, #12]
 8009996:	e7cf      	b.n	8009938 <__smakebuf_r+0x18>

08009998 <memmove>:
 8009998:	4288      	cmp	r0, r1
 800999a:	b510      	push	{r4, lr}
 800999c:	eb01 0402 	add.w	r4, r1, r2
 80099a0:	d902      	bls.n	80099a8 <memmove+0x10>
 80099a2:	4284      	cmp	r4, r0
 80099a4:	4623      	mov	r3, r4
 80099a6:	d807      	bhi.n	80099b8 <memmove+0x20>
 80099a8:	1e43      	subs	r3, r0, #1
 80099aa:	42a1      	cmp	r1, r4
 80099ac:	d008      	beq.n	80099c0 <memmove+0x28>
 80099ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b6:	e7f8      	b.n	80099aa <memmove+0x12>
 80099b8:	4402      	add	r2, r0
 80099ba:	4601      	mov	r1, r0
 80099bc:	428a      	cmp	r2, r1
 80099be:	d100      	bne.n	80099c2 <memmove+0x2a>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ca:	e7f7      	b.n	80099bc <memmove+0x24>

080099cc <_fstat_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	@ (80099ec <_fstat_r+0x20>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	f7f7 fc0e 	bl	80011fa <_fstat>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	d102      	bne.n	80099e8 <_fstat_r+0x1c>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	b103      	cbz	r3, 80099e8 <_fstat_r+0x1c>
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	bd38      	pop	{r3, r4, r5, pc}
 80099ea:	bf00      	nop
 80099ec:	20000468 	.word	0x20000468

080099f0 <_isatty_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	@ (8009a0c <_isatty_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f7 fc0d 	bl	800121a <_isatty>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_isatty_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_isatty_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20000468 	.word	0x20000468

08009a10 <_sbrk_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	@ (8009a2c <_sbrk_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7f7 fc16 	bl	800124c <_sbrk>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_sbrk_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_sbrk_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20000468 	.word	0x20000468

08009a30 <memcpy>:
 8009a30:	440a      	add	r2, r1
 8009a32:	4291      	cmp	r1, r2
 8009a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a38:	d100      	bne.n	8009a3c <memcpy+0xc>
 8009a3a:	4770      	bx	lr
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a46:	4291      	cmp	r1, r2
 8009a48:	d1f9      	bne.n	8009a3e <memcpy+0xe>
 8009a4a:	bd10      	pop	{r4, pc}

08009a4c <_realloc_r>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	4680      	mov	r8, r0
 8009a52:	4615      	mov	r5, r2
 8009a54:	460c      	mov	r4, r1
 8009a56:	b921      	cbnz	r1, 8009a62 <_realloc_r+0x16>
 8009a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	f7ff bb1b 	b.w	8009098 <_malloc_r>
 8009a62:	b92a      	cbnz	r2, 8009a70 <_realloc_r+0x24>
 8009a64:	f7ff faac 	bl	8008fc0 <_free_r>
 8009a68:	2400      	movs	r4, #0
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a70:	f000 f81a 	bl	8009aa8 <_malloc_usable_size_r>
 8009a74:	4285      	cmp	r5, r0
 8009a76:	4606      	mov	r6, r0
 8009a78:	d802      	bhi.n	8009a80 <_realloc_r+0x34>
 8009a7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a7e:	d8f4      	bhi.n	8009a6a <_realloc_r+0x1e>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4640      	mov	r0, r8
 8009a84:	f7ff fb08 	bl	8009098 <_malloc_r>
 8009a88:	4607      	mov	r7, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0ec      	beq.n	8009a68 <_realloc_r+0x1c>
 8009a8e:	42b5      	cmp	r5, r6
 8009a90:	462a      	mov	r2, r5
 8009a92:	4621      	mov	r1, r4
 8009a94:	bf28      	it	cs
 8009a96:	4632      	movcs	r2, r6
 8009a98:	f7ff ffca 	bl	8009a30 <memcpy>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	f7ff fa8e 	bl	8008fc0 <_free_r>
 8009aa4:	463c      	mov	r4, r7
 8009aa6:	e7e0      	b.n	8009a6a <_realloc_r+0x1e>

08009aa8 <_malloc_usable_size_r>:
 8009aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aac:	1f18      	subs	r0, r3, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfbc      	itt	lt
 8009ab2:	580b      	ldrlt	r3, [r1, r0]
 8009ab4:	18c0      	addlt	r0, r0, r3
 8009ab6:	4770      	bx	lr

08009ab8 <_init>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr

08009ac4 <_fini>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr
