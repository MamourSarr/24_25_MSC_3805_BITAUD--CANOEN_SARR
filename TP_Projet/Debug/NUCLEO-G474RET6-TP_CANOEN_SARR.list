
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000922c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800940c  0800940c  0000a40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c8  080096c8  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096d0  080096d0  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d0  080096d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096d4  080096d4  0000a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080096d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000068  08009740  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08009740  0000b474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1f9  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003542  00000000  00000000  00025291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000287d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  00029dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dfe  00000000  00000000  0002aef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac59  00000000  00000000  00054cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114704  00000000  00000000  0006f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018404e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006698  00000000  00000000  00184094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0018a72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080093f4 	.word	0x080093f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080093f4 	.word	0x080093f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 f8f1 	bl	80087e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fac1 	bl	8001bf0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fc18 	bl	8000ea8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f8d6 	bl	8002834 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fc0b 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fc5a 	bl	8001f68 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fbf5 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000084 	.word	0x20000084
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 f87f 	bl	80087e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fa50 	bl	8001bf0 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fba7 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fbf6 	bl	8001f68 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fb91 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000f0 	.word	0x200000f0
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 f80f 	bl	80087e0 <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 faa3 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 fb5e 	bl	8000ea8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fa85 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fa76 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fa68 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fa29 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 fae4 	bl	8000ea8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fa17 	bl	8002d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fa08 	bl	8002d84 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000015c 	.word	0x2000015c
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b47      	ldr	r3, [pc, #284]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a46      	ldr	r2, [pc, #280]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b41      	ldr	r3, [pc, #260]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a40      	ldr	r2, [pc, #256]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a34      	ldr	r2, [pc, #208]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0x134>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fb2f 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4826      	ldr	r0, [pc, #152]	@ (8000ac8 <MX_GPIO_Init+0x138>)
 8000a30:	f002 fb2a 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4820      	ldr	r0, [pc, #128]	@ (8000acc <MX_GPIO_Init+0x13c>)
 8000a4c:	f002 f99a 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 f98b 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a80:	2307      	movs	r3, #7
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4810      	ldr	r0, [pc, #64]	@ (8000acc <MX_GPIO_Init+0x13c>)
 8000a8c:	f002 f97a 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <MX_GPIO_Init+0x138>)
 8000aa8:	f002 f96c 	bl	8002d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2028      	movs	r0, #40	@ 0x28
 8000ab2:	f002 f87f 	bl	8002bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab6:	2028      	movs	r0, #40	@ 0x28
 8000ab8:	f002 f896 	bl	8002be8 <HAL_NVIC_EnableIRQ>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000c00 	.word	0x48000c00
 8000acc:	48000800 	.word	0x48000800

08000ad0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	@ 0x70
 8000ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
	int32_t ch_MCC = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ade:	f000 fe58 	bl	8001792 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ae2:	f000 f88b 	bl	8000bfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ae6:	f7ff ff53 	bl	8000990 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000aea:	f7ff fdf1 	bl	80006d0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000aee:	f7ff fd77 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000af2:	f000 fb71 	bl	80011d8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000af6:	f000 fc41 	bl	800137c <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000afa:	f000 fd75 	bl	80015e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000afe:	463b      	mov	r3, r7
 8000b00:	2224      	movs	r2, #36	@ 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe6b 	bl	80087e0 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	2240      	movs	r2, #64	@ 0x40
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fe64 	bl	80087e0 <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <main+0x10c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000b1e:	2240      	movs	r2, #64	@ 0x40
 8000b20:	2100      	movs	r1, #0
 8000b22:	482f      	ldr	r0, [pc, #188]	@ (8000be0 <main+0x110>)
 8000b24:	f007 fe5c 	bl	80087e0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	492c      	ldr	r1, [pc, #176]	@ (8000bdc <main+0x10c>)
 8000b2c:	482d      	ldr	r0, [pc, #180]	@ (8000be4 <main+0x114>)
 8000b2e:	f005 fb33 	bl	8006198 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000b32:	200a      	movs	r0, #10
 8000b34:	f000 fe64 	bl	8001800 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	225f      	movs	r2, #95	@ 0x5f
 8000b3e:	492a      	ldr	r1, [pc, #168]	@ (8000be8 <main+0x118>)
 8000b40:	4828      	ldr	r0, [pc, #160]	@ (8000be4 <main+0x114>)
 8000b42:	f005 fa9b 	bl	800607c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	2218      	movs	r2, #24
 8000b4c:	4927      	ldr	r1, [pc, #156]	@ (8000bec <main+0x11c>)
 8000b4e:	4825      	ldr	r0, [pc, #148]	@ (8000be4 <main+0x114>)
 8000b50:	f005 fa94 	bl	800607c <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (uartRxReceived == 1)
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <main+0x120>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1fb      	bne.n	8000b54 <main+0x84>
		{
			printf("OK \r\n");
 8000b5c:	4825      	ldr	r0, [pc, #148]	@ (8000bf4 <main+0x124>)
 8000b5e:	f007 fd2b 	bl	80085b8 <puts>
			// Si caractère reçu est ENTER
			if (uartRxBuffer[0] == ASCII_ENTER)
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <main+0x10c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b0d      	cmp	r3, #13
 8000b68:	d122      	bne.n	8000bb0 <main+0xe0>
			{
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4921      	ldr	r1, [pc, #132]	@ (8000bf8 <main+0x128>)
 8000b72:	481c      	ldr	r0, [pc, #112]	@ (8000be4 <main+0x114>)
 8000b74:	f005 fa82 	bl	800607c <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8000b78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b7e:	4413      	add	r3, r2
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]

				// Process the command
				processCommand(cmdBuffer);
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f881 	bl	8000c90 <processCommand>



				HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2218      	movs	r2, #24
 8000b94:	4915      	ldr	r1, [pc, #84]	@ (8000bec <main+0x11c>)
 8000b96:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <main+0x114>)
 8000b98:	f005 fa70 	bl	800607c <HAL_UART_Transmit>
				idx_cmd = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
				memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	2240      	movs	r2, #64	@ 0x40
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fe19 	bl	80087e0 <memset>
 8000bae:	e00b      	b.n	8000bc8 <main+0xf8>
			}
			else
			{
				// Si ce n'est pas ENTER, stocker le caractère dans le buffer
				if (idx_cmd < CMD_BUFFER_SIZE - 1)
 8000bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bb4:	dc08      	bgt.n	8000bc8 <main+0xf8>
				{
					cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <main+0x10c>)
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	3370      	adds	r3, #112	@ 0x70
 8000bc2:	443b      	add	r3, r7
 8000bc4:	f803 2c4c 	strb.w	r2, [r3, #-76]
				}
			}
			HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4904      	ldr	r1, [pc, #16]	@ (8000bdc <main+0x10c>)
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <main+0x114>)
 8000bce:	f005 fae3 	bl	8006198 <HAL_UART_Receive_IT>

			uartRxReceived = 0;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <main+0x120>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		if (uartRxReceived == 1)
 8000bd8:	e7bc      	b.n	8000b54 <main+0x84>
 8000bda:	bf00      	nop
 8000bdc:	20000164 	.word	0x20000164
 8000be0:	20000168 	.word	0x20000168
 8000be4:	20000290 	.word	0x20000290
 8000be8:	08009470 	.word	0x08009470
 8000bec:	08009458 	.word	0x08009458
 8000bf0:	20000160 	.word	0x20000160
 8000bf4:	0800940c 	.word	0x0800940c
 8000bf8:	080094d0 	.word	0x080094d0

08000bfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2238      	movs	r2, #56	@ 0x38
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f007 fde8 	bl	80087e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f002 fa6e 	bl	8003100 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	2303      	movs	r3, #3
 8000c34:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c36:	2306      	movs	r3, #6
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c3a:	2355      	movs	r3, #85	@ 0x55
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fb0a 	bl	8003268 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000c5a:	f000 f925 	bl	8000ea8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2104      	movs	r1, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fe08 	bl	800388c <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000c82:	f000 f911 	bl	8000ea8 <Error_Handler>
	}
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	@ 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <processCommand>:

/* USER CODE BEGIN 4 */

void processCommand(char *cmd)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	@ 0x40
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

	if (strcmp(cmd, "help") == 0) {
 8000c98:	4960      	ldr	r1, [pc, #384]	@ (8000e1c <processCommand+0x18c>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fac0 	bl	8000220 <strcmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d107      	bne.n	8000cb6 <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	2236      	movs	r2, #54	@ 0x36
 8000cac:	495c      	ldr	r1, [pc, #368]	@ (8000e20 <processCommand+0x190>)
 8000cae:	485d      	ldr	r0, [pc, #372]	@ (8000e24 <processCommand+0x194>)
 8000cb0:	f005 f9e4 	bl	800607c <HAL_UART_Transmit>


	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 8000cb4:	e0ae      	b.n	8000e14 <processCommand+0x184>
	else if (strcmp(cmd, "pinout") == 0) {
 8000cb6:	495c      	ldr	r1, [pc, #368]	@ (8000e28 <processCommand+0x198>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fab1 	bl	8000220 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	221a      	movs	r2, #26
 8000cca:	4958      	ldr	r1, [pc, #352]	@ (8000e2c <processCommand+0x19c>)
 8000ccc:	4855      	ldr	r0, [pc, #340]	@ (8000e24 <processCommand+0x194>)
 8000cce:	f005 f9d5 	bl	800607c <HAL_UART_Transmit>
}
 8000cd2:	e09f      	b.n	8000e14 <processCommand+0x184>
	else if (strcmp(cmd, "start") == 0) {
 8000cd4:	4956      	ldr	r1, [pc, #344]	@ (8000e30 <processCommand+0x1a0>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff faa2 	bl	8000220 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d117      	bne.n	8000d12 <processCommand+0x82>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	220a      	movs	r2, #10
 8000ce8:	4952      	ldr	r1, [pc, #328]	@ (8000e34 <processCommand+0x1a4>)
 8000cea:	484e      	ldr	r0, [pc, #312]	@ (8000e24 <processCommand+0x194>)
 8000cec:	f005 f9c6 	bl	800607c <HAL_UART_Transmit>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4851      	ldr	r0, [pc, #324]	@ (8000e38 <processCommand+0x1a8>)
 8000cf4:	f003 fb98 	bl	8004428 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	484f      	ldr	r0, [pc, #316]	@ (8000e38 <processCommand+0x1a8>)
 8000cfc:	f004 fea6 	bl	8005a4c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d00:	2104      	movs	r1, #4
 8000d02:	484d      	ldr	r0, [pc, #308]	@ (8000e38 <processCommand+0x1a8>)
 8000d04:	f003 fb90 	bl	8004428 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	484b      	ldr	r0, [pc, #300]	@ (8000e38 <processCommand+0x1a8>)
 8000d0c:	f004 fe9e 	bl	8005a4c <HAL_TIMEx_PWMN_Start>
}
 8000d10:	e080      	b.n	8000e14 <processCommand+0x184>
	else if (strcmp(cmd, "stop") == 0) {
 8000d12:	494a      	ldr	r1, [pc, #296]	@ (8000e3c <processCommand+0x1ac>)
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fa83 	bl	8000220 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d117      	bne.n	8000d50 <processCommand+0xc0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	220b      	movs	r2, #11
 8000d26:	4946      	ldr	r1, [pc, #280]	@ (8000e40 <processCommand+0x1b0>)
 8000d28:	483e      	ldr	r0, [pc, #248]	@ (8000e24 <processCommand+0x194>)
 8000d2a:	f005 f9a7 	bl	800607c <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4841      	ldr	r0, [pc, #260]	@ (8000e38 <processCommand+0x1a8>)
 8000d32:	f003 fc8b 	bl	800464c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000d36:	2100      	movs	r1, #0
 8000d38:	483f      	ldr	r0, [pc, #252]	@ (8000e38 <processCommand+0x1a8>)
 8000d3a:	f004 ff49 	bl	8005bd0 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d3e:	2104      	movs	r1, #4
 8000d40:	483d      	ldr	r0, [pc, #244]	@ (8000e38 <processCommand+0x1a8>)
 8000d42:	f003 fc83 	bl	800464c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000d46:	2104      	movs	r1, #4
 8000d48:	483b      	ldr	r0, [pc, #236]	@ (8000e38 <processCommand+0x1a8>)
 8000d4a:	f004 ff41 	bl	8005bd0 <HAL_TIMEx_PWMN_Stop>
}
 8000d4e:	e061      	b.n	8000e14 <processCommand+0x184>
	else if (strncmp(cmd, "speed", 5) == 0) {
 8000d50:	2205      	movs	r2, #5
 8000d52:	493c      	ldr	r1, [pc, #240]	@ (8000e44 <processCommand+0x1b4>)
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f007 fd4b 	bl	80087f0 <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d152      	bne.n	8000e06 <processCommand+0x176>
		int speed_value = atoi(cmd + 6);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3306      	adds	r3, #6
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 fa87 	bl	8008278 <atoi>
 8000d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (speed_value > MAX_SPEED) {
 8000d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d72:	dd10      	ble.n	8000d96 <processCommand+0x106>
			speed_value = MAX_SPEED;
 8000d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
			char maxSpeedMsg[] = "Max Speed\r\n";
 8000d7a:	4a33      	ldr	r2, [pc, #204]	@ (8000e48 <processCommand+0x1b8>)
 8000d7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, (uint8_t *)maxSpeedMsg, sizeof(maxSpeedMsg) - 1, HAL_MAX_DELAY);
 8000d86:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	220b      	movs	r2, #11
 8000d90:	4824      	ldr	r0, [pc, #144]	@ (8000e24 <processCommand+0x194>)
 8000d92:	f005 f973 	bl	800607c <HAL_UART_Transmit>
		int i = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
		uint32_t pwm_value = (speed_value * MAX_SPEED) / 100;
 8000d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d9c:	029b      	lsls	r3, r3, #10
 8000d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e4c <processCommand+0x1bc>)
 8000da0:	fb82 1203 	smull	r1, r2, r2, r3
 8000da4:	1152      	asrs	r2, r2, #5
 8000da6:	17db      	asrs	r3, r3, #31
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
		for(i = 0; i < pwm_value; i++){
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000db0:	e00f      	b.n	8000dd2 <processCommand+0x142>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <processCommand+0x1a8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000db8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 8000dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dbc:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <processCommand+0x1a8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fd1a 	bl	8001800 <HAL_Delay>
		for(i = 0; i < pwm_value; i++){
 8000dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dce:	3301      	adds	r3, #1
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d8eb      	bhi.n	8000db2 <processCommand+0x122>
		snprintf(speedMsg, sizeof(speedMsg), "Speed : %d\r\n", speed_value);
 8000dda:	f107 0008 	add.w	r0, r7, #8
 8000dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <processCommand+0x1c0>)
 8000de2:	2120      	movs	r1, #32
 8000de4:	f007 fbf0 	bl	80085c8 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)speedMsg, strlen(speedMsg), HAL_MAX_DELAY);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fa21 	bl	8000234 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f107 0108 	add.w	r1, r7, #8
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <processCommand+0x194>)
 8000e00:	f005 f93c 	bl	800607c <HAL_UART_Transmit>
}
 8000e04:	e006      	b.n	8000e14 <processCommand+0x184>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	2213      	movs	r2, #19
 8000e0c:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <processCommand+0x1c4>)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <processCommand+0x194>)
 8000e10:	f005 f934 	bl	800607c <HAL_UART_Transmit>
}
 8000e14:	bf00      	nop
 8000e16:	3740      	adds	r7, #64	@ 0x40
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08009414 	.word	0x08009414
 8000e20:	080094e8 	.word	0x080094e8
 8000e24:	20000290 	.word	0x20000290
 8000e28:	0800941c 	.word	0x0800941c
 8000e2c:	08009520 	.word	0x08009520
 8000e30:	08009424 	.word	0x08009424
 8000e34:	0800953c 	.word	0x0800953c
 8000e38:	200001f8 	.word	0x200001f8
 8000e3c:	0800942c 	.word	0x0800942c
 8000e40:	08009548 	.word	0x08009548
 8000e44:	08009434 	.word	0x08009434
 8000e48:	0800944c 	.word	0x0800944c
 8000e4c:	51eb851f 	.word	0x51eb851f
 8000e50:	0800943c 	.word	0x0800943c
 8000e54:	080094d4 	.word	0x080094d4

08000e58 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_UART_RxCpltCallback+0x20>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000e66:	2201      	movs	r2, #1
 8000e68:	4904      	ldr	r1, [pc, #16]	@ (8000e7c <HAL_UART_RxCpltCallback+0x24>)
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_RxCpltCallback+0x28>)
 8000e6c:	f005 f994 	bl	8006198 <HAL_UART_Receive_IT>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000160 	.word	0x20000160
 8000e7c:	20000164 	.word	0x20000164
 8000e80:	20000290 	.word	0x20000290

08000e84 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e96:	f000 fc95 	bl	80017c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eea:	f002 f9ad 	bl	8003248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fe82 	bl	8003c38 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f34:	f002 fe54 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8000f38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_InitTick+0xc8>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	3b01      	subs	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <HAL_InitTick+0xd0>)
 8000f4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f68:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f6a:	f003 f92b 	bl	80041c4 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11b      	bne.n	8000fb4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f7c:	4812      	ldr	r0, [pc, #72]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f7e:	f003 f979 	bl	8004274 <HAL_TIM_Base_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	@ 0x36
 8000f92:	f001 fe29 	bl	8002be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d808      	bhi.n	8000fae <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2036      	movs	r0, #54	@ 0x36
 8000fa2:	f001 fe07 	bl	8002bb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0xd4>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e002      	b.n	8000fb4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3730      	adds	r7, #48	@ 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	200001a8 	.word	0x200001a8
 8000fcc:	40001000 	.word	0x40001000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <USART2_IRQHandler+0x10>)
 800103a:	f005 f8f9 	bl	8006230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000290 	.word	0x20000290

08001048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800104c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001050:	f002 f832 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <TIM6_DAC_IRQHandler+0x10>)
 800105e:	f003 fb91 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001a8 	.word	0x200001a8

0800106c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
  }

  return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e009      	b.n	80010cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf1      	blt.n	80010b8 <_write+0x12>
  }
  return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_close>:

int _close(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001106:	605a      	str	r2, [r3, #4]
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_isatty>:

int _isatty(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f007 fb92 	bl	80088a0 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20020000 	.word	0x20020000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	20000478 	.word	0x20000478

080011b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09c      	sub	sp, #112	@ 0x70
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2234      	movs	r2, #52	@ 0x34
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fae4 	bl	80087e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <MX_TIM1_Init+0x19c>)
 800121a:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <MX_TIM1_Init+0x1a0>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800121e:	4b55      	ldr	r3, [pc, #340]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001220:	2207      	movs	r2, #7
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001224:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001226:	2220      	movs	r2, #32
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800122a:	4b52      	ldr	r3, [pc, #328]	@ (8001374 <MX_TIM1_Init+0x19c>)
 800122c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <MX_TIM1_Init+0x19c>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123e:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001244:	484b      	ldr	r0, [pc, #300]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001246:	f002 ffbd 	bl	80041c4 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001250:	f7ff fe2a 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800125e:	4619      	mov	r1, r3
 8001260:	4844      	ldr	r0, [pc, #272]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001262:	f003 fcf3 	bl	8004c4c <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800126c:	f7ff fe1c 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001270:	4840      	ldr	r0, [pc, #256]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001272:	f003 f877 	bl	8004364 <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800127c:	f7ff fe14 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001290:	4619      	mov	r1, r3
 8001292:	4838      	ldr	r0, [pc, #224]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001294:	f004 fcfa 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800129e:	f7ff fe03 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	@ 0x60
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 615;
 80012a6:	f240 2367 	movw	r3, #615	@ 0x267
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	482a      	ldr	r0, [pc, #168]	@ (8001374 <MX_TIM1_Init+0x19c>)
 80012ca:	f003 fbab 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012d4:	f7ff fde8 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.Pulse = 409;
 80012d8:	f240 1399 	movw	r3, #409	@ 0x199
 80012dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012e2:	2204      	movs	r2, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4823      	ldr	r0, [pc, #140]	@ (8001374 <MX_TIM1_Init+0x19c>)
 80012e8:	f003 fb9c 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80012f2:	f7ff fdd9 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012fe:	2208      	movs	r2, #8
 8001300:	4619      	mov	r1, r3
 8001302:	481c      	ldr	r0, [pc, #112]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001304:	f003 fb8e 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800130e:	f7ff fdcb 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001312:	4818      	ldr	r0, [pc, #96]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001314:	f004 fde4 	bl	8005ee0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 8001324:	2323      	movs	r3, #35	@ 0x23
 8001326:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001330:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800133e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001356:	f004 fd2f 	bl	8005db8 <HAL_TIMEx_ConfigBreakDeadTime>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001360:	f7ff fda2 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <MX_TIM1_Init+0x19c>)
 8001366:	f000 f8d7 	bl	8001518 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3770      	adds	r7, #112	@ 0x70
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001f8 	.word	0x200001f8
 8001378:	40012c00 	.word	0x40012c00

0800137c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_TIM3_Init+0x90>)
 800139c:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <MX_TIM3_Init+0x94>)
 800139e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_TIM3_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_TIM3_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_TIM3_Init+0x90>)
 80013ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_TIM3_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_TIM3_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_TIM3_Init+0x90>)
 80013d8:	f004 fa89 	bl	80058ee <HAL_TIMEx_HallSensor_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f7ff fd61 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013e6:	2350      	movs	r3, #80	@ 0x50
 80013e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_TIM3_Init+0x90>)
 80013f4:	f004 fc4a 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013fe:	f7ff fd53 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000244 	.word	0x20000244
 8001410:	40000400 	.word	0x40000400

08001414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_TIM_Base_MspInit+0x3c>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <HAL_TIM_Base_MspInit+0x3c>)
 800142c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001430:	6613      	str	r3, [r2, #96]	@ 0x60
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <HAL_TIM_Base_MspInit+0x3c>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40012c00 	.word	0x40012c00
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a26      	ldr	r2, [pc, #152]	@ (800150c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d145      	bne.n	8001502 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	4a25      	ldr	r2, [pc, #148]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6593      	str	r3, [r2, #88]	@ 0x58
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a1f      	ldr	r2, [pc, #124]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a19      	ldr	r2, [pc, #100]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80014be:	2350      	movs	r3, #80	@ 0x50
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ce:	2302      	movs	r3, #2
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014dc:	f001 fc52 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f2:	2302      	movs	r3, #2
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80014fe:	f001 fc41 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	@ 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40000400 	.word	0x40000400
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800

08001518 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a29      	ldr	r2, [pc, #164]	@ (80015dc <HAL_TIM_MspPostInit+0xc4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d14b      	bne.n	80015d2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_TIM_MspPostInit+0xc8>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800156a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800157c:	2306      	movs	r3, #6
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <HAL_TIM_MspPostInit+0xcc>)
 8001588:	f001 fbfc 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800158c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <HAL_TIM_MspPostInit+0xcc>)
 80015aa:	f001 fbeb 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80015ae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015c0:	2306      	movs	r3, #6
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ce:	f001 fbd9 	bl	8002d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40012c00 	.word	0x40012c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000400 	.word	0x48000400

080015e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	@ (800167c <MX_USART2_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001632:	f004 fcd3 	bl	8005fdc <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f7ff fc34 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001644:	f006 fd4d 	bl	80080e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f7ff fc2b 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001656:	f006 fd82 	bl	800815e <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f7ff fc22 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_USART2_UART_Init+0x90>)
 8001666:	f006 fd03 	bl	8008070 <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f7ff fc1a 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000290 	.word	0x20000290
 800167c:	40004400 	.word	0x40004400

08001680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b09e      	sub	sp, #120	@ 0x78
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2254      	movs	r2, #84	@ 0x54
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 f89d 	bl	80087e0 <memset>
  if(uartHandle->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <HAL_UART_MspInit+0xb8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d13e      	bne.n	800172e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fb33 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c8:	f7ff fbee 	bl	8000ea8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	4a1a      	ldr	r2, [pc, #104]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_UART_MspInit+0xbc>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016fc:	230c      	movs	r3, #12
 80016fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170c:	2307      	movs	r3, #7
 800170e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171a:	f001 fb33 	bl	8002d84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2026      	movs	r0, #38	@ 0x26
 8001724:	f001 fa46 	bl	8002bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001728:	2026      	movs	r0, #38	@ 0x26
 800172a:	f001 fa5d 	bl	8002be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3778      	adds	r7, #120	@ 0x78
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001742:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001744:	f7ff fd36 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <LoopForever+0x6>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	@ (8001780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <LoopForever+0xe>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	@ (800178c <LoopForever+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f007 f89d 	bl	80088ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001772:	f7ff f9ad 	bl	8000ad0 <main>

08001776 <LoopForever>:

LoopForever:
    b LoopForever
 8001776:	e7fe      	b.n	8001776 <LoopForever>
  ldr   r0, =_estack
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001784:	080096d8 	.word	0x080096d8
  ldr r2, =_sbss
 8001788:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800178c:	20000474 	.word	0x20000474

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>

08001792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f001 f9fe 	bl	8002b9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	200f      	movs	r0, #15
 80017a4:	f7ff fbaa 	bl	8000efc <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	e001      	b.n	80017b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b4:	f7ff fb7e 	bl	8000eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b8:	79fb      	ldrb	r3, [r7, #7]

}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_IncTick+0x1c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a03      	ldr	r2, [pc, #12]	@ (80017e0 <HAL_IncTick+0x1c>)
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000324 	.word	0x20000324
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000324 	.word	0x20000324

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d004      	beq.n	8001824 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_Delay+0x40>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001824:	bf00      	nop
 8001826:	f7ff ffdf 	bl	80017e8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8f7      	bhi.n	8001826 <HAL_Delay+0x26>
  {
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000008 	.word	0x20000008

08001844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	@ 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <LL_ADC_SetOffset+0x44>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	4313      	orrs	r3, r2
 80018dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	03fff000 	.word	0x03fff000

080018f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3360      	adds	r3, #96	@ 0x60
 8001902:	461a      	mov	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3360      	adds	r3, #96	@ 0x60
 8001930:	461a      	mov	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001956:	b480      	push	{r7}
 8001958:	b087      	sub	sp, #28
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3360      	adds	r3, #96	@ 0x60
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3360      	adds	r3, #96	@ 0x60
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	615a      	str	r2, [r3, #20]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3330      	adds	r3, #48	@ 0x30
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	211f      	movs	r1, #31
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 011f 	and.w	r1, r3, #31
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a34:	bf00      	nop
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3314      	adds	r3, #20
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0e5b      	lsrs	r3, r3, #25
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0d1b      	lsrs	r3, r3, #20
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	401a      	ands	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	0d1b      	lsrs	r3, r3, #20
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0318 	and.w	r3, r3, #24
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001abc:	40d9      	lsrs	r1, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	0007ffff 	.word	0x0007ffff

08001ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6093      	str	r3, [r2, #8]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b68:	d101      	bne.n	8001b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsEnabled+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsEnabled+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1a9      	b.n	8001f5e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fdbf 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff67 	bl	8001b04 <LL_ADC_IsDeepPowerDownEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff4d 	bl	8001ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff82 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff66 	bl	8001b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c60:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed4 <HAL_ADC_Init+0x2e4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a9c      	ldr	r2, [pc, #624]	@ (8001ed8 <HAL_ADC_Init+0x2e8>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff64 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	f043 0210 	orr.w	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff75 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8142 	bne.w	8001f4c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 813e 	bne.w	8001f4c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff49 	bl	8001b7c <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d141      	bne.n	8001d74 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_Init+0x114>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a77      	ldr	r2, [pc, #476]	@ (8001edc <HAL_ADC_Init+0x2ec>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d10f      	bne.n	8001d24 <HAL_ADC_Init+0x134>
 8001d04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001d08:	f7ff ff38 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4873      	ldr	r0, [pc, #460]	@ (8001edc <HAL_ADC_Init+0x2ec>)
 8001d10:	f7ff ff34 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4323      	orrs	r3, r4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e012      	b.n	8001d4a <HAL_ADC_Init+0x15a>
 8001d24:	486e      	ldr	r0, [pc, #440]	@ (8001ee0 <HAL_ADC_Init+0x2f0>)
 8001d26:	f7ff ff29 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	486d      	ldr	r0, [pc, #436]	@ (8001ee4 <HAL_ADC_Init+0x2f4>)
 8001d2e:	f7ff ff25 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	431c      	orrs	r4, r3
 8001d36:	486c      	ldr	r0, [pc, #432]	@ (8001ee8 <HAL_ADC_Init+0x2f8>)
 8001d38:	f7ff ff20 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Init+0x172>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5f      	ldr	r2, [pc, #380]	@ (8001edc <HAL_ADC_Init+0x2ec>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Init+0x176>
 8001d62:	4a62      	ldr	r2, [pc, #392]	@ (8001eec <HAL_ADC_Init+0x2fc>)
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_Init+0x178>
 8001d66:	4a62      	ldr	r2, [pc, #392]	@ (8001ef0 <HAL_ADC_Init+0x300>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7ff fd68 	bl	8001844 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7f5b      	ldrb	r3, [r3, #29]
 8001d78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	045b      	lsls	r3, r3, #17
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <HAL_ADC_Init+0x304>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fee4 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001e00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d17f      	bne.n	8001f08 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d17c      	bne.n	8001f08 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6911      	ldr	r1, [r2, #16]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001e6e:	e013      	b.n	8001e98 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e94:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d12a      	bne.n	8001ef8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eb8:	4311      	orrs	r1, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	e019      	b.n	8001f08 <HAL_ADC_Init+0x318>
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	053e2d63 	.word	0x053e2d63
 8001edc:	50000100 	.word	0x50000100
 8001ee0:	50000400 	.word	0x50000400
 8001ee4:	50000500 	.word	0x50000500
 8001ee8:	50000600 	.word	0x50000600
 8001eec:	50000300 	.word	0x50000300
 8001ef0:	50000700 	.word	0x50000700
 8001ef4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10c      	bne.n	8001f2a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f023 010f 	bic.w	r1, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f28:	e007      	b.n	8001f3a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 020f 	bic.w	r2, r2, #15
 8001f38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f4a:	e007      	b.n	8001f5c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	f043 0210 	orr.w	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	@ 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop

08001f68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0b6      	sub	sp, #216	@ 0xd8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x24>
 8001f86:	2302      	movs	r3, #2
 8001f88:	f000 bc13 	b.w	80027b2 <HAL_ADC_ConfigChannel+0x84a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe02 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 83f3 	bne.w	800278c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff fd18 	bl	80019e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fdf0 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001fc2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fdfc 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001fd0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 81d9 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 81d4 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ff0:	d10f      	bne.n	8002012 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7ff fd1f 	bl	8001a40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fcd9 	bl	80019c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002010:	e00e      	b.n	8002030 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	461a      	mov	r2, r3
 8002020:	f7ff fd0e 	bl	8001a40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fcc9 	bl	80019c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d022      	beq.n	8002098 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6919      	ldr	r1, [r3, #16]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002062:	f7ff fc23 	bl	80018ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fc6f 	bl	8001956 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_ADC_ConfigChannel+0x126>
 8002088:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800208c:	e000      	b.n	8002090 <HAL_ADC_ConfigChannel+0x128>
 800208e:	2300      	movs	r3, #0
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff fc7b 	bl	800198c <LL_ADC_SetOffsetSaturation>
 8002096:	e17b      	b.n	8002390 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fc28 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x15c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fc1d 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	f003 021f 	and.w	r2, r3, #31
 80020c2:	e01e      	b.n	8002102 <HAL_ADC_ConfigChannel+0x19a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fc12 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e004      	b.n	8002100 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80020f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_ADC_ConfigChannel+0x1b2>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	e018      	b.n	800214c <HAL_ADC_ConfigChannel+0x1e4>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800212e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800213e:	2320      	movs	r3, #32
 8002140:	e004      	b.n	800214c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fbe1 	bl	8001920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fbc5 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <HAL_ADC_ConfigChannel+0x222>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fbba 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	e01e      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x260>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fbaf 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80021a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80021b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e004      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80021bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x278>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	e018      	b.n	8002212 <HAL_ADC_ConfigChannel+0x2aa>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80021f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80021fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e004      	b.n	8002212 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002212:	429a      	cmp	r2, r3
 8002214:	d106      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fb7e 	bl	8001920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2102      	movs	r1, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fb62 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2e8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2102      	movs	r1, #2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb57 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	f003 021f 	and.w	r2, r3, #31
 800224e:	e01e      	b.n	800228e <HAL_ADC_ConfigChannel+0x326>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb4c 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800226e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002276:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800227e:	2320      	movs	r3, #32
 8002280:	e004      	b.n	800228c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x33e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	e016      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x36c>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80022b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e004      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80022ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fb1d 	bl	8001920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2103      	movs	r1, #3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb01 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x3aa>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2103      	movs	r1, #3
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff faf6 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	0e9b      	lsrs	r3, r3, #26
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	e017      	b.n	8002342 <HAL_ADC_ConfigChannel+0x3da>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2103      	movs	r1, #3
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff faeb 	bl	80018f4 <LL_ADC_GetOffsetChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800232a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800232c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800232e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_ADC_ConfigChannel+0x3f2>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	e011      	b.n	800237e <HAL_ADC_ConfigChannel+0x416>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800236a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800236c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e003      	b.n	800237e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	2103      	movs	r1, #3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fac8 	bl	8001920 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbf1 	bl	8001b7c <LL_ADC_IsEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 813d 	bne.w	800261c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff fb72 	bl	8001a98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4aa2      	ldr	r2, [pc, #648]	@ (8002644 <HAL_ADC_ConfigChannel+0x6dc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f040 812e 	bne.w	800261c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x480>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2b09      	cmp	r3, #9
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e019      	b.n	800241c <HAL_ADC_ConfigChannel+0x4b4>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80023f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80023fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2b09      	cmp	r3, #9
 8002414:	bf94      	ite	ls
 8002416:	2301      	movls	r3, #1
 8002418:	2300      	movhi	r3, #0
 800241a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241c:	2b00      	cmp	r3, #0
 800241e:	d079      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_ADC_ConfigChannel+0x4d4>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800243a:	e015      	b.n	8002468 <HAL_ADC_ConfigChannel+0x500>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800244a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800244c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	069b      	lsls	r3, r3, #26
 8002464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x520>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	e017      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x550>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002498:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800249a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e003      	b.n	80024ac <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80024a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x576>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	051b      	lsls	r3, r3, #20
 80024dc:	e018      	b.n	8002510 <HAL_ADC_ConfigChannel+0x5a8>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80024ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80024fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002510:	430b      	orrs	r3, r1
 8002512:	e07e      	b.n	8002612 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x5c8>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	069b      	lsls	r3, r3, #26
 800252a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800252e:	e015      	b.n	800255c <HAL_ADC_ConfigChannel+0x5f4>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_ADC_ConfigChannel+0x614>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	e017      	b.n	80025ac <HAL_ADC_ConfigChannel+0x644>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	61fb      	str	r3, [r7, #28]
  return result;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e003      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x670>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	3b1e      	subs	r3, #30
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	e01b      	b.n	8002610 <HAL_ADC_ConfigChannel+0x6a8>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	613b      	str	r3, [r7, #16]
  return result;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	3b1e      	subs	r3, #30
 800260a:	051b      	lsls	r3, r3, #20
 800260c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002610:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	4619      	mov	r1, r3
 8002618:	f7ff fa12 	bl	8001a40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_ADC_ConfigChannel+0x6e0>)
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80be 	beq.w	80027a6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002632:	d004      	beq.n	800263e <HAL_ADC_ConfigChannel+0x6d6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a04      	ldr	r2, [pc, #16]	@ (800264c <HAL_ADC_ConfigChannel+0x6e4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x6ec>
 800263e:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <HAL_ADC_ConfigChannel+0x6e8>)
 8002640:	e009      	b.n	8002656 <HAL_ADC_ConfigChannel+0x6ee>
 8002642:	bf00      	nop
 8002644:	407f0000 	.word	0x407f0000
 8002648:	80080000 	.word	0x80080000
 800264c:	50000100 	.word	0x50000100
 8002650:	50000300 	.word	0x50000300
 8002654:	4b59      	ldr	r3, [pc, #356]	@ (80027bc <HAL_ADC_ConfigChannel+0x854>)
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f91a 	bl	8001890 <LL_ADC_GetCommonPathInternalCh>
 800265c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a56      	ldr	r2, [pc, #344]	@ (80027c0 <HAL_ADC_ConfigChannel+0x858>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x70c>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a55      	ldr	r2, [pc, #340]	@ (80027c4 <HAL_ADC_ConfigChannel+0x85c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d13a      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d134      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002688:	d005      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x72e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a4e      	ldr	r2, [pc, #312]	@ (80027c8 <HAL_ADC_ConfigChannel+0x860>)
 8002690:	4293      	cmp	r3, r2
 8002692:	f040 8085 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800269e:	d004      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x742>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a49      	ldr	r2, [pc, #292]	@ (80027cc <HAL_ADC_ConfigChannel+0x864>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x746>
 80026aa:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_ADC_ConfigChannel+0x868>)
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x748>
 80026ae:	4a43      	ldr	r2, [pc, #268]	@ (80027bc <HAL_ADC_ConfigChannel+0x854>)
 80026b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f7ff f8d5 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c0:	4b44      	ldr	r3, [pc, #272]	@ (80027d4 <HAL_ADC_ConfigChannel+0x86c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	4a44      	ldr	r2, [pc, #272]	@ (80027d8 <HAL_ADC_ConfigChannel+0x870>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026da:	e002      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e8:	e05a      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <HAL_ADC_ConfigChannel+0x874>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d125      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11f      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a31      	ldr	r2, [pc, #196]	@ (80027cc <HAL_ADC_ConfigChannel+0x864>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d104      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x7ac>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a34      	ldr	r2, [pc, #208]	@ (80027e0 <HAL_ADC_ConfigChannel+0x878>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d047      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800271c:	d004      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x7c0>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2a      	ldr	r2, [pc, #168]	@ (80027cc <HAL_ADC_ConfigChannel+0x864>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x7c4>
 8002728:	4a29      	ldr	r2, [pc, #164]	@ (80027d0 <HAL_ADC_ConfigChannel+0x868>)
 800272a:	e000      	b.n	800272e <HAL_ADC_ConfigChannel+0x7c6>
 800272c:	4a23      	ldr	r2, [pc, #140]	@ (80027bc <HAL_ADC_ConfigChannel+0x854>)
 800272e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7ff f896 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273e:	e031      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a27      	ldr	r2, [pc, #156]	@ (80027e4 <HAL_ADC_ConfigChannel+0x87c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12d      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800274a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d127      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <HAL_ADC_ConfigChannel+0x864>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d004      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x80c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a17      	ldr	r2, [pc, #92]	@ (80027cc <HAL_ADC_ConfigChannel+0x864>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x810>
 8002774:	4a16      	ldr	r2, [pc, #88]	@ (80027d0 <HAL_ADC_ConfigChannel+0x868>)
 8002776:	e000      	b.n	800277a <HAL_ADC_ConfigChannel+0x812>
 8002778:	4a10      	ldr	r2, [pc, #64]	@ (80027bc <HAL_ADC_ConfigChannel+0x854>)
 800277a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800277e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff f870 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
 800278a:	e00c      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800279e:	e002      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	37d8      	adds	r7, #216	@ 0xd8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	50000700 	.word	0x50000700
 80027c0:	c3210000 	.word	0xc3210000
 80027c4:	90c00010 	.word	0x90c00010
 80027c8:	50000600 	.word	0x50000600
 80027cc:	50000100 	.word	0x50000100
 80027d0:	50000300 	.word	0x50000300
 80027d4:	20000000 	.word	0x20000000
 80027d8:	053e2d63 	.word	0x053e2d63
 80027dc:	c7520000 	.word	0xc7520000
 80027e0:	50000500 	.word	0x50000500
 80027e4:	cb840000 	.word	0xcb840000

080027e8 <LL_ADC_IsEnabled>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_ADC_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_REG_IsConversionOngoing>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d101      	bne.n	8002826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b0a1      	sub	sp, #132	@ 0x84
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800284e:	2302      	movs	r3, #2
 8002850:	e0e7      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800285a:	2300      	movs	r3, #0
 800285c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800285e:	2300      	movs	r3, #0
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800286a:	d102      	bne.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800286c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	e009      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6e      	ldr	r2, [pc, #440]	@ (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800287c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	e001      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0be      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ffb1 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 80028ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ffab 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80a0 	bne.w	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 809c 	bne.w	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d0:	d004      	beq.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a55      	ldr	r2, [pc, #340]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028dc:	4b56      	ldr	r3, [pc, #344]	@ (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028de:	e000      	b.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028e0:	4b56      	ldr	r3, [pc, #344]	@ (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d04b      	beq.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028fe:	035b      	lsls	r3, r3, #13
 8002900:	430b      	orrs	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002906:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002910:	d004      	beq.n	800291c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a45      	ldr	r2, [pc, #276]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10f      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800291c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002920:	f7ff ff62 	bl	80027e8 <LL_ADC_IsEnabled>
 8002924:	4604      	mov	r4, r0
 8002926:	4841      	ldr	r0, [pc, #260]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002928:	f7ff ff5e 	bl	80027e8 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	4323      	orrs	r3, r4
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	e012      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800293c:	483c      	ldr	r0, [pc, #240]	@ (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800293e:	f7ff ff53 	bl	80027e8 <LL_ADC_IsEnabled>
 8002942:	4604      	mov	r4, r0
 8002944:	483b      	ldr	r0, [pc, #236]	@ (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002946:	f7ff ff4f 	bl	80027e8 <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	431c      	orrs	r4, r3
 800294e:	483c      	ldr	r0, [pc, #240]	@ (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002950:	f7ff ff4a 	bl	80027e8 <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	4323      	orrs	r3, r4
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d056      	beq.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800296e:	f023 030f 	bic.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	430a      	orrs	r2, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002980:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002982:	e047      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800298c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800298e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002998:	d004      	beq.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10f      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80029a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029a8:	f7ff ff1e 	bl	80027e8 <LL_ADC_IsEnabled>
 80029ac:	4604      	mov	r4, r0
 80029ae:	481f      	ldr	r0, [pc, #124]	@ (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029b0:	f7ff ff1a 	bl	80027e8 <LL_ADC_IsEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4323      	orrs	r3, r4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e012      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029c4:	481a      	ldr	r0, [pc, #104]	@ (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029c6:	f7ff ff0f 	bl	80027e8 <LL_ADC_IsEnabled>
 80029ca:	4604      	mov	r4, r0
 80029cc:	4819      	ldr	r0, [pc, #100]	@ (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029ce:	f7ff ff0b 	bl	80027e8 <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	431c      	orrs	r4, r3
 80029d6:	481a      	ldr	r0, [pc, #104]	@ (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029d8:	f7ff ff06 	bl	80027e8 <LL_ADC_IsEnabled>
 80029dc:	4603      	mov	r3, r0
 80029de:	4323      	orrs	r3, r4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029f6:	f023 030f 	bic.w	r3, r3, #15
 80029fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029fe:	e009      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a12:	e000      	b.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3784      	adds	r7, #132	@ 0x84
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	50000100 	.word	0x50000100
 8002a30:	50000400 	.word	0x50000400
 8002a34:	50000500 	.word	0x50000500
 8002a38:	50000300 	.word	0x50000300
 8002a3c:	50000700 	.word	0x50000700
 8002a40:	50000600 	.word	0x50000600

08002a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db0b      	blt.n	8002ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4907      	ldr	r1, [pc, #28]	@ (8002ae0 <__NVIC_EnableIRQ+0x38>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	@ (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	@ (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	@ 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ff4c 	bl	8002a44 <__NVIC_SetPriorityGrouping>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc2:	f7ff ff63 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002bc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f7ff ffb3 	bl	8002b38 <NVIC_EncodePriority>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff82 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff56 	bl	8002aa8 <__NVIC_EnableIRQ>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d005      	beq.n	8002c28 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e037      	b.n	8002c98 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020e 	bic.w	r2, r2, #14
 8002c36:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c46:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c74:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00c      	beq.n	8002c98 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c96:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d00d      	beq.n	8002cea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e047      	b.n	8002d7a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 020e 	bic.w	r2, r2, #14
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d36:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00c      	beq.n	8002d5a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d58:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
    }
  }
  return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d92:	e15a      	b.n	800304a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 814c 	beq.w	8003044 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d130      	bne.n	8002e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0201 	and.w	r2, r3, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d017      	beq.n	8002e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d123      	bne.n	8002eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	6939      	ldr	r1, [r7, #16]
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80a6 	beq.w	8003044 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8003068 <HAL_GPIO_Init+0x2e4>)
 8002efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efc:	4a5a      	ldr	r2, [pc, #360]	@ (8003068 <HAL_GPIO_Init+0x2e4>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f04:	4b58      	ldr	r3, [pc, #352]	@ (8003068 <HAL_GPIO_Init+0x2e4>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f10:	4a56      	ldr	r2, [pc, #344]	@ (800306c <HAL_GPIO_Init+0x2e8>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	220f      	movs	r2, #15
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f3a:	d01f      	beq.n	8002f7c <HAL_GPIO_Init+0x1f8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003070 <HAL_GPIO_Init+0x2ec>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d019      	beq.n	8002f78 <HAL_GPIO_Init+0x1f4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4b      	ldr	r2, [pc, #300]	@ (8003074 <HAL_GPIO_Init+0x2f0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_GPIO_Init+0x1f0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003078 <HAL_GPIO_Init+0x2f4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00d      	beq.n	8002f70 <HAL_GPIO_Init+0x1ec>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a49      	ldr	r2, [pc, #292]	@ (800307c <HAL_GPIO_Init+0x2f8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <HAL_GPIO_Init+0x1e8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_GPIO_Init+0x2fc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_GPIO_Init+0x1e4>
 8002f64:	2305      	movs	r3, #5
 8002f66:	e00a      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f68:	2306      	movs	r3, #6
 8002f6a:	e008      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e006      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f70:	2303      	movs	r3, #3
 8002f72:	e004      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e002      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	f002 0203 	and.w	r2, r2, #3
 8002f84:	0092      	lsls	r2, r2, #2
 8002f86:	4093      	lsls	r3, r2
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8e:	4937      	ldr	r1, [pc, #220]	@ (800306c <HAL_GPIO_Init+0x2e8>)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3302      	adds	r3, #2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f9c:	4b39      	ldr	r3, [pc, #228]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fc0:	4a30      	ldr	r2, [pc, #192]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fea:	4a26      	ldr	r2, [pc, #152]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ff0:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003014:	4a1b      	ldr	r2, [pc, #108]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800301a:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_GPIO_Init+0x300>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800303e:	4a11      	ldr	r2, [pc, #68]	@ (8003084 <HAL_GPIO_Init+0x300>)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f ae9d 	bne.w	8002d94 <HAL_GPIO_Init+0x10>
  }
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000
 8003070:	48000400 	.word	0x48000400
 8003074:	48000800 	.word	0x48000800
 8003078:	48000c00 	.word	0x48000c00
 800307c:	48001000 	.word	0x48001000
 8003080:	48001400 	.word	0x48001400
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003098:	787b      	ldrb	r3, [r7, #1]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ce:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f806 	bl	80030e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d141      	bne.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800310e:	4b4b      	ldr	r3, [pc, #300]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d131      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800311c:	4b47      	ldr	r3, [pc, #284]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003122:	4a46      	ldr	r2, [pc, #280]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800312c:	4b43      	ldr	r3, [pc, #268]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003134:	4a41      	ldr	r2, [pc, #260]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800313c:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2232      	movs	r2, #50	@ 0x32
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a3f      	ldr	r2, [pc, #252]	@ (8003244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003152:	e002      	b.n	800315a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3b01      	subs	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003166:	d102      	bne.n	800316e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316e:	4b33      	ldr	r3, [pc, #204]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317a:	d158      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e057      	b.n	8003230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003180:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003186:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800318c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003190:	e04d      	b.n	800322e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003198:	d141      	bne.n	800321e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800319a:	4b28      	ldr	r3, [pc, #160]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a6:	d131      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a8:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ae:	4a23      	ldr	r2, [pc, #140]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b8:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031c0:	4a1e      	ldr	r2, [pc, #120]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2232      	movs	r2, #50	@ 0x32
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	0c9b      	lsrs	r3, r3, #18
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031de:	e002      	b.n	80031e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f2:	d102      	bne.n	80031fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f2      	bne.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d112      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e011      	b.n	8003230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800321c:	e007      	b.n	800322e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003226:	4a05      	ldr	r2, [pc, #20]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800322c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40007000 	.word	0x40007000
 8003240:	20000000 	.word	0x20000000
 8003244:	431bde83 	.word	0x431bde83

08003248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003256:	6093      	str	r3, [r2, #8]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e2fe      	b.n	8003878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d075      	beq.n	8003372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003286:	4b97      	ldr	r3, [pc, #604]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003290:	4b94      	ldr	r3, [pc, #592]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3e>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_OscConfig+0x44>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	4b8d      	ldr	r3, [pc, #564]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05b      	beq.n	8003370 <HAL_RCC_OscConfig+0x108>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d157      	bne.n	8003370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e2d9      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0x74>
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a84      	ldr	r2, [pc, #528]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e01d      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x98>
 80032e6:	4b7f      	ldr	r3, [pc, #508]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7e      	ldr	r2, [pc, #504]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b7c      	ldr	r3, [pc, #496]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7b      	ldr	r2, [pc, #492]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0xb0>
 8003300:	4b78      	ldr	r3, [pc, #480]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a77      	ldr	r2, [pc, #476]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b75      	ldr	r3, [pc, #468]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a74      	ldr	r2, [pc, #464]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fa62 	bl	80017e8 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003328:	f7fe fa5e 	bl	80017e8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b64      	cmp	r3, #100	@ 0x64
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e29e      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333a:	4b6a      	ldr	r3, [pc, #424]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0xc0>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fa4e 	bl	80017e8 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe fa4a 	bl	80017e8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e28a      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003362:	4b60      	ldr	r3, [pc, #384]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0xe8>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d075      	beq.n	800346a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337e:	4b59      	ldr	r3, [pc, #356]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003388:	4b56      	ldr	r3, [pc, #344]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d102      	bne.n	800339e <HAL_RCC_OscConfig+0x136>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_OscConfig+0x13c>
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11f      	bne.n	80033e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a4:	4b4f      	ldr	r3, [pc, #316]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_OscConfig+0x154>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e25d      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b49      	ldr	r3, [pc, #292]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	4946      	ldr	r1, [pc, #280]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_RCC_OscConfig+0x280>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fd91 	bl	8000efc <HAL_InitTick>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d043      	beq.n	8003468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e249      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d023      	beq.n	8003434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ec:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3c      	ldr	r2, [pc, #240]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f9f6 	bl	80017e8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003400:	f7fe f9f2 	bl	80017e8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e232      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003412:	4b34      	ldr	r3, [pc, #208]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b31      	ldr	r3, [pc, #196]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	492d      	ldr	r1, [pc, #180]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 8003432:	e01a      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2a      	ldr	r2, [pc, #168]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800343a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f9d2 	bl	80017e8 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe f9ce 	bl	80017e8 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e20e      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800345a:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1e0>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d041      	beq.n	80034fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe f9ab 	bl	80017e8 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe f9a7 	bl	80017e8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1e7      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <HAL_RCC_OscConfig+0x22e>
 80034b6:	e020      	b.n	80034fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034be:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe f98e 	bl	80017e8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ce:	e00d      	b.n	80034ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe f98a 	bl	80017e8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d906      	bls.n	80034ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1ca      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ea      	bne.n	80034d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80a6 	beq.w	8003654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350c:	4b84      	ldr	r3, [pc, #528]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_OscConfig+0x2b4>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x2b6>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	4b7f      	ldr	r3, [pc, #508]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4a7e      	ldr	r2, [pc, #504]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
 800352e:	4b7c      	ldr	r3, [pc, #496]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	4b79      	ldr	r3, [pc, #484]	@ (8003724 <HAL_RCC_OscConfig+0x4bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d118      	bne.n	800357c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354a:	4b76      	ldr	r3, [pc, #472]	@ (8003724 <HAL_RCC_OscConfig+0x4bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x4bc>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fe f947 	bl	80017e8 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355e:	f7fe f943 	bl	80017e8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e183      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003570:	4b6c      	ldr	r3, [pc, #432]	@ (8003724 <HAL_RCC_OscConfig+0x4bc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <HAL_RCC_OscConfig+0x32e>
 8003584:	4b66      	ldr	r3, [pc, #408]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	4a65      	ldr	r2, [pc, #404]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003594:	e024      	b.n	80035e0 <HAL_RCC_OscConfig+0x378>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d110      	bne.n	80035c0 <HAL_RCC_OscConfig+0x358>
 800359e:	4b60      	ldr	r3, [pc, #384]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035be:	e00f      	b.n	80035e0 <HAL_RCC_OscConfig+0x378>
 80035c0:	4b57      	ldr	r3, [pc, #348]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	4a56      	ldr	r2, [pc, #344]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035d0:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	4a52      	ldr	r2, [pc, #328]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f8fe 	bl	80017e8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe f8fa 	bl	80017e8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e138      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	4b46      	ldr	r3, [pc, #280]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ed      	beq.n	80035f0 <HAL_RCC_OscConfig+0x388>
 8003614:	e015      	b.n	8003642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe f8e7 	bl	80017e8 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe f8e3 	bl	80017e8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e121      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003634:	4b3a      	ldr	r3, [pc, #232]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ed      	bne.n	800361e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003642:	7ffb      	ldrb	r3, [r7, #31]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b35      	ldr	r3, [pc, #212]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	4a34      	ldr	r2, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03c      	beq.n	80036da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366e:	4a2c      	ldr	r2, [pc, #176]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fe f8b6 	bl	80017e8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003680:	f7fe f8b2 	bl	80017e8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0f2      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCC_OscConfig+0x418>
 80036a0:	e01b      	b.n	80036da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe f899 	bl	80017e8 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ba:	f7fe f895 	bl	80017e8 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0d5      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ef      	bne.n	80036ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80c9 	beq.w	8003876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	f000 8083 	beq.w	80037f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d15e      	bne.n	80037b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a08      	ldr	r2, [pc, #32]	@ (8003720 <HAL_RCC_OscConfig+0x4b8>)
 8003700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe f86f 	bl	80017e8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	e00c      	b.n	8003728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe f86b 	bl	80017e8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d905      	bls.n	8003728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0ab      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ec      	bne.n	800370e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003734:	4b52      	ldr	r3, [pc, #328]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b52      	ldr	r3, [pc, #328]	@ (8003884 <HAL_RCC_OscConfig+0x61c>)
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a11      	ldr	r1, [r2, #32]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003744:	3a01      	subs	r2, #1
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800374e:	0212      	lsls	r2, r2, #8
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0552      	lsls	r2, r2, #21
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003762:	0852      	lsrs	r2, r2, #1
 8003764:	3a01      	subs	r2, #1
 8003766:	0652      	lsls	r2, r2, #25
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800376e:	06d2      	lsls	r2, r2, #27
 8003770:	430a      	orrs	r2, r1
 8003772:	4943      	ldr	r1, [pc, #268]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a40      	ldr	r2, [pc, #256]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003784:	4b3e      	ldr	r3, [pc, #248]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a3d      	ldr	r2, [pc, #244]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe f82a 	bl	80017e8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe f826 	bl	80017e8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e066      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	4b35      	ldr	r3, [pc, #212]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x530>
 80037b6:	e05e      	b.n	8003876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a30      	ldr	r2, [pc, #192]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f810 	bl	80017e8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe f80c 	bl	80017e8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04c      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037de:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037ea:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	4924      	ldr	r1, [pc, #144]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_OscConfig+0x620>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
 80037f6:	e03e      	b.n	8003876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e039      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003804:	4b1e      	ldr	r3, [pc, #120]	@ (8003880 <HAL_RCC_OscConfig+0x618>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	429a      	cmp	r2, r3
 8003816:	d12c      	bne.n	8003872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	3b01      	subs	r3, #1
 8003824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d123      	bne.n	8003872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d11b      	bne.n	8003872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d113      	bne.n	8003872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	3b01      	subs	r3, #1
 8003858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d109      	bne.n	8003872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	3b01      	subs	r3, #1
 800386c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	019f800c 	.word	0x019f800c
 8003888:	feeefffc 	.word	0xfeeefffc

0800388c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e11e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b91      	ldr	r3, [pc, #580]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d910      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b8e      	ldr	r3, [pc, #568]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 020f 	bic.w	r2, r3, #15
 80038ba:	498c      	ldr	r1, [pc, #560]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b8a      	ldr	r3, [pc, #552]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e106      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d073      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d129      	bne.n	800393c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b81      	ldr	r3, [pc, #516]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0f4      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038f8:	f000 f9d0 	bl	8003c9c <RCC_GetSysClockFreqFromPLLSource>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4a7c      	ldr	r2, [pc, #496]	@ (8003af4 <HAL_RCC_ClockConfig+0x268>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d93f      	bls.n	8003986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003906:	4b7a      	ldr	r3, [pc, #488]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	d033      	beq.n	8003986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003922:	2b00      	cmp	r3, #0
 8003924:	d12f      	bne.n	8003986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003926:	4b72      	ldr	r3, [pc, #456]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392e:	4a70      	ldr	r2, [pc, #448]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e024      	b.n	8003986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d107      	bne.n	8003954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0c6      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003954:	4b66      	ldr	r3, [pc, #408]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0be      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003964:	f000 f8ce 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_RCC_ClockConfig+0x268>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d909      	bls.n	8003986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003972:	4b5f      	ldr	r3, [pc, #380]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800397a:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 800397c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4957      	ldr	r1, [pc, #348]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fd ff26 	bl	80017e8 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fd ff22 	bl	80017e8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e095      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b4e      	ldr	r3, [pc, #312]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a42      	ldr	r2, [pc, #264]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039f8:	4b3d      	ldr	r3, [pc, #244]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a00:	4a3b      	ldr	r2, [pc, #236]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4936      	ldr	r1, [pc, #216]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b80      	cmp	r3, #128	@ 0x80
 8003a20:	d105      	bne.n	8003a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a22:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4a32      	ldr	r2, [pc, #200]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d21d      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 020f 	bic.w	r2, r3, #15
 8003a44:	4929      	ldr	r1, [pc, #164]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fecc 	bl	80017e8 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fec8 	bl	80017e8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e03b      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1ed      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4917      	ldr	r1, [pc, #92]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490f      	ldr	r1, [pc, #60]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab6:	f000 f825 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490c      	ldr	r1, [pc, #48]	@ (8003af8 <HAL_RCC_ClockConfig+0x26c>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_RCC_ClockConfig+0x270>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_RCC_ClockConfig+0x274>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fa0e 	bl	8000efc <HAL_InitTick>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	04c4b400 	.word	0x04c4b400
 8003af8:	08009554 	.word	0x08009554
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b16:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e047      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b1c:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b28:	4b26      	ldr	r3, [pc, #152]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e03e      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b2e:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d136      	bne.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b3a:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b44:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b58:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	0a12      	lsrs	r2, r2, #8
 8003b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	617b      	str	r3, [r7, #20]
      break;
 8003b70:	e00c      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b72:	4a13      	ldr	r2, [pc, #76]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	0a12      	lsrs	r2, r2, #8
 8003b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
      break;
 8003b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0e5b      	lsrs	r3, r3, #25
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e001      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bac:	693b      	ldr	r3, [r7, #16]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	016e3600 	.word	0x016e3600

08003bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	@ (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4904      	ldr	r1, [pc, #16]	@ (8003c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08009564 	.word	0x08009564

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c10:	f7ff ffda 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0adb      	lsrs	r3, r3, #11
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08009564 	.word	0x08009564

08003c38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	220f      	movs	r2, #15
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c54:	4b0f      	ldr	r3, [pc, #60]	@ (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c6c:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <HAL_RCC_GetClockConfig+0x60>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40022000 	.word	0x40022000

08003c9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d10c      	bne.n	8003cda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc0:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a14      	ldr	r2, [pc, #80]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cca:	68d2      	ldr	r2, [r2, #12]
 8003ccc:	0a12      	lsrs	r2, r2, #8
 8003cce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
    break;
 8003cd8:	e00c      	b.n	8003cf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cda:	4a12      	ldr	r2, [pc, #72]	@ (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0a12      	lsrs	r2, r2, #8
 8003ce8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    break;
 8003cf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	0e5b      	lsrs	r3, r3, #25
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d0e:	687b      	ldr	r3, [r7, #4]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	016e3600 	.word	0x016e3600
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8098 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4a:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d62:	4b3d      	ldr	r3, [pc, #244]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d72:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a39      	ldr	r2, [pc, #228]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7e:	f7fd fd33 	bl	80017e8 <HAL_GetTick>
 8003d82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d84:	e009      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fd fd2f 	bl	80017e8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d902      	bls.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	74fb      	strb	r3, [r7, #19]
        break;
 8003d98:	e005      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9a:	4b30      	ldr	r3, [pc, #192]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0ef      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d159      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01e      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc8:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd4:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a1b      	ldr	r2, [pc, #108]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df4:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fcef 	bl	80017e8 <HAL_GetTick>
 8003e0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0c:	e00b      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fd fceb 	bl	80017e8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d902      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	74fb      	strb	r3, [r7, #19]
            break;
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ec      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3a:	4b07      	ldr	r3, [pc, #28]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e50:	e008      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e64:	7c7b      	ldrb	r3, [r7, #17]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	4aa6      	ldr	r2, [pc, #664]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e82:	4ba1      	ldr	r3, [pc, #644]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f023 0203 	bic.w	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	499d      	ldr	r1, [pc, #628]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea4:	4b98      	ldr	r3, [pc, #608]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f023 020c 	bic.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4995      	ldr	r1, [pc, #596]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec6:	4b90      	ldr	r3, [pc, #576]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	498c      	ldr	r1, [pc, #560]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee8:	4b87      	ldr	r3, [pc, #540]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	4984      	ldr	r1, [pc, #528]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	497b      	ldr	r1, [pc, #492]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f2c:	4b76      	ldr	r3, [pc, #472]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	4973      	ldr	r1, [pc, #460]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	496a      	ldr	r1, [pc, #424]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f70:	4b65      	ldr	r3, [pc, #404]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4962      	ldr	r1, [pc, #392]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f92:	4b5d      	ldr	r3, [pc, #372]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	4959      	ldr	r1, [pc, #356]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb4:	4b54      	ldr	r3, [pc, #336]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	4951      	ldr	r1, [pc, #324]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	4948      	ldr	r1, [pc, #288]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	4940      	ldr	r1, [pc, #256]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a3a      	ldr	r2, [pc, #232]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004022:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b35      	ldr	r3, [pc, #212]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	4932      	ldr	r1, [pc, #200]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b2d      	ldr	r3, [pc, #180]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a2c      	ldr	r2, [pc, #176]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800405a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004068:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	4924      	ldr	r1, [pc, #144]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	4916      	ldr	r1, [pc, #88]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d019      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	4908      	ldr	r1, [pc, #32]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a02      	ldr	r2, [pc, #8]	@ (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004118:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4926      	ldr	r1, [pc, #152]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004138:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a20      	ldr	r2, [pc, #128]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415e:	4918      	ldr	r1, [pc, #96]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004188:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800418a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800418e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041a6:	d105      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e049      	b.n	800426a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd f912 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 fe60 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e054      	b.n	8004336 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <HAL_TIM_Base_Start_IT+0xd0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d01d      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <HAL_TIM_Base_Start_IT+0xd4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a21      	ldr	r2, [pc, #132]	@ (800434c <HAL_TIM_Base_Start_IT+0xd8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <HAL_TIM_Base_Start_IT+0xdc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <HAL_TIM_Base_Start_IT+0xe0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <HAL_TIM_Base_Start_IT+0xe4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <HAL_TIM_Base_Start_IT+0xe8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d115      	bne.n	8004320 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b19      	ldr	r3, [pc, #100]	@ (8004360 <HAL_TIM_Base_Start_IT+0xec>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d015      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0xbe>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430c:	d011      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e008      	b.n	8004332 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e000      	b.n	8004334 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40015000 	.word	0x40015000
 8004360:	00010007 	.word	0x00010007

08004364 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e049      	b.n	800440a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f841 	bl	8004412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fd90 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x24>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e03c      	b.n	80044c6 <HAL_TIM_PWM_Start+0x9e>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d109      	bne.n	8004466 <HAL_TIM_PWM_Start+0x3e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e02f      	b.n	80044c6 <HAL_TIM_PWM_Start+0x9e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start+0x58>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e022      	b.n	80044c6 <HAL_TIM_PWM_Start+0x9e>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d109      	bne.n	800449a <HAL_TIM_PWM_Start+0x72>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e015      	b.n	80044c6 <HAL_TIM_PWM_Start+0x9e>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b10      	cmp	r3, #16
 800449e:	d109      	bne.n	80044b4 <HAL_TIM_PWM_Start+0x8c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e008      	b.n	80044c6 <HAL_TIM_PWM_Start+0x9e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0a6      	b.n	800461c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0xb6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044dc:	e023      	b.n	8004526 <HAL_TIM_PWM_Start+0xfe>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start+0xc6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ec:	e01b      	b.n	8004526 <HAL_TIM_PWM_Start+0xfe>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Start+0xd6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044fc:	e013      	b.n	8004526 <HAL_TIM_PWM_Start+0xfe>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0xe6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800450c:	e00b      	b.n	8004526 <HAL_TIM_PWM_Start+0xfe>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0xf6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800451c:	e003      	b.n	8004526 <HAL_TIM_PWM_Start+0xfe>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f001 f9b8 	bl	80058a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3a      	ldr	r2, [pc, #232]	@ (8004624 <HAL_TIM_PWM_Start+0x1fc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_TIM_PWM_Start+0x148>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a39      	ldr	r2, [pc, #228]	@ (8004628 <HAL_TIM_PWM_Start+0x200>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_TIM_PWM_Start+0x148>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a37      	ldr	r2, [pc, #220]	@ (800462c <HAL_TIM_PWM_Start+0x204>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_TIM_PWM_Start+0x148>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a36      	ldr	r2, [pc, #216]	@ (8004630 <HAL_TIM_PWM_Start+0x208>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_TIM_PWM_Start+0x148>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <HAL_TIM_PWM_Start+0x20c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_PWM_Start+0x148>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a33      	ldr	r2, [pc, #204]	@ (8004638 <HAL_TIM_PWM_Start+0x210>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_TIM_PWM_Start+0x14c>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_TIM_PWM_Start+0x14e>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a25      	ldr	r2, [pc, #148]	@ (8004624 <HAL_TIM_PWM_Start+0x1fc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459c:	d01d      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a26      	ldr	r2, [pc, #152]	@ (800463c <HAL_TIM_PWM_Start+0x214>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <HAL_TIM_PWM_Start+0x218>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <HAL_TIM_PWM_Start+0x21c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	@ (8004628 <HAL_TIM_PWM_Start+0x200>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	@ (800462c <HAL_TIM_PWM_Start+0x204>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_PWM_Start+0x1b2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_TIM_PWM_Start+0x210>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d115      	bne.n	8004606 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <HAL_TIM_PWM_Start+0x220>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d015      	beq.n	8004618 <HAL_TIM_PWM_Start+0x1f0>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f2:	d011      	beq.n	8004618 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	e008      	b.n	8004618 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e000      	b.n	800461a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40014000 	.word	0x40014000
 8004630:	40014400 	.word	0x40014400
 8004634:	40014800 	.word	0x40014800
 8004638:	40015000 	.word	0x40015000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	00010007 	.word	0x00010007

0800464c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f001 f920 	bl	80058a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a40      	ldr	r2, [pc, #256]	@ (800476c <HAL_TIM_PWM_Stop+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIM_PWM_Stop+0x54>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3f      	ldr	r2, [pc, #252]	@ (8004770 <HAL_TIM_PWM_Stop+0x124>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_TIM_PWM_Stop+0x54>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3d      	ldr	r2, [pc, #244]	@ (8004774 <HAL_TIM_PWM_Stop+0x128>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_PWM_Stop+0x54>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3c      	ldr	r2, [pc, #240]	@ (8004778 <HAL_TIM_PWM_Stop+0x12c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_PWM_Stop+0x54>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a3a      	ldr	r2, [pc, #232]	@ (800477c <HAL_TIM_PWM_Stop+0x130>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_PWM_Stop+0x54>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a39      	ldr	r2, [pc, #228]	@ (8004780 <HAL_TIM_PWM_Stop+0x134>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_PWM_Stop+0x58>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_TIM_PWM_Stop+0x5a>
 80046a4:	2300      	movs	r3, #0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <HAL_TIM_PWM_Stop+0x8e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_TIM_PWM_Stop+0x8e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_TIM_PWM_Stop+0xbe>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	f244 4344 	movw	r3, #17476	@ 0x4444
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d107      	bne.n	800470a <HAL_TIM_PWM_Stop+0xbe>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Stop+0xce>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004718:	e023      	b.n	8004762 <HAL_TIM_PWM_Stop+0x116>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Stop+0xde>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004728:	e01b      	b.n	8004762 <HAL_TIM_PWM_Stop+0x116>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Stop+0xee>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004738:	e013      	b.n	8004762 <HAL_TIM_PWM_Stop+0x116>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Stop+0xfe>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004748:	e00b      	b.n	8004762 <HAL_TIM_PWM_Stop+0x116>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Stop+0x10e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004758:	e003      	b.n	8004762 <HAL_TIM_PWM_Stop+0x116>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800
 8004780:	40015000 	.word	0x40015000

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0202 	mvn.w	r2, #2
 80047b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fb5c 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fb4e 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb5f 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d020      	beq.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fb36 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fb28 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb39 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d020      	beq.n	8004880 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0208 	mvn.w	r2, #8
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fb10 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fb02 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb13 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d020      	beq.n	80048cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01b      	beq.n	80048cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0210 	mvn.w	r2, #16
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2208      	movs	r2, #8
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 faea 	bl	8004e8c <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fadc 	bl	8004e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 faed 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0201 	mvn.w	r2, #1
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc faca 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 fafe 	bl	8005f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f001 faf6 	bl	8005f2e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00c      	beq.n	8004966 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800495e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 faa7 	bl	8004eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00c      	beq.n	800498a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0220 	mvn.w	r2, #32
 8004982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 fabe 	bl	8005f06 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 faca 	bl	8005f42 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 fac2 	bl	8005f56 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 faba 	bl	8005f6a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fab2 	bl	8005f7e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0ff      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b14      	cmp	r3, #20
 8004a4e:	f200 80f0 	bhi.w	8004c32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a52:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004aad 	.word	0x08004aad
 8004a5c:	08004c33 	.word	0x08004c33
 8004a60:	08004c33 	.word	0x08004c33
 8004a64:	08004c33 	.word	0x08004c33
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08004c33 	.word	0x08004c33
 8004a70:	08004c33 	.word	0x08004c33
 8004a74:	08004c33 	.word	0x08004c33
 8004a78:	08004b2f 	.word	0x08004b2f
 8004a7c:	08004c33 	.word	0x08004c33
 8004a80:	08004c33 	.word	0x08004c33
 8004a84:	08004c33 	.word	0x08004c33
 8004a88:	08004b6f 	.word	0x08004b6f
 8004a8c:	08004c33 	.word	0x08004c33
 8004a90:	08004c33 	.word	0x08004c33
 8004a94:	08004c33 	.word	0x08004c33
 8004a98:	08004bb1 	.word	0x08004bb1
 8004a9c:	08004c33 	.word	0x08004c33
 8004aa0:	08004c33 	.word	0x08004c33
 8004aa4:	08004c33 	.word	0x08004c33
 8004aa8:	08004bf1 	.word	0x08004bf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fabc 	bl	8005030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0208 	orr.w	r2, r2, #8
 8004ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
      break;
 8004aea:	e0a5      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fb36 	bl	8005164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	619a      	str	r2, [r3, #24]
      break;
 8004b2c:	e084      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fba9 	bl	800528c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0208 	orr.w	r2, r2, #8
 8004b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0204 	bic.w	r2, r2, #4
 8004b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	61da      	str	r2, [r3, #28]
      break;
 8004b6c:	e064      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fc1b 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	021a      	lsls	r2, r3, #8
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	61da      	str	r2, [r3, #28]
      break;
 8004bae:	e043      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fc8e 	bl	80054d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0208 	orr.w	r2, r2, #8
 8004bca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004bee:	e023      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fcd8 	bl	80055ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c30:	e002      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
      break;
 8004c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop

08004c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0x1c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e0f6      	b.n	8004e56 <HAL_TIM_ConfigClockSource+0x20a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6f      	ldr	r2, [pc, #444]	@ (8004e60 <HAL_TIM_ConfigClockSource+0x214>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f000 80c1 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8004e60 <HAL_TIM_ConfigClockSource+0x214>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f200 80c6 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8004e64 <HAL_TIM_ConfigClockSource+0x218>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 80b9 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004e64 <HAL_TIM_ConfigClockSource+0x218>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 80be 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc0:	4a69      	ldr	r2, [pc, #420]	@ (8004e68 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80b1 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004cc8:	4a67      	ldr	r2, [pc, #412]	@ (8004e68 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80b6 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	4a66      	ldr	r2, [pc, #408]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x220>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 80a9 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004cd8:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <HAL_TIM_ConfigClockSource+0x220>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 80ae 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	4a63      	ldr	r2, [pc, #396]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x224>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f000 80a1 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004ce8:	4a61      	ldr	r2, [pc, #388]	@ (8004e70 <HAL_TIM_ConfigClockSource+0x224>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f200 80a6 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004cf0:	4a60      	ldr	r2, [pc, #384]	@ (8004e74 <HAL_TIM_ConfigClockSource+0x228>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f000 8099 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004cf8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e74 <HAL_TIM_ConfigClockSource+0x228>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f200 809e 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d04:	f000 8091 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d0c:	f200 8096 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d14:	f000 8089 	beq.w	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d1c:	f200 808e 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d24:	d03e      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0x158>
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2a:	f200 8087 	bhi.w	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d32:	f000 8086 	beq.w	8004e42 <HAL_TIM_ConfigClockSource+0x1f6>
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	d87f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d3c:	2b70      	cmp	r3, #112	@ 0x70
 8004d3e:	d01a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x12a>
 8004d40:	2b70      	cmp	r3, #112	@ 0x70
 8004d42:	d87b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d44:	2b60      	cmp	r3, #96	@ 0x60
 8004d46:	d050      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0x19e>
 8004d48:	2b60      	cmp	r3, #96	@ 0x60
 8004d4a:	d877      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d4c:	2b50      	cmp	r3, #80	@ 0x50
 8004d4e:	d03c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x17e>
 8004d50:	2b50      	cmp	r3, #80	@ 0x50
 8004d52:	d873      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d058      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x1be>
 8004d58:	2b40      	cmp	r3, #64	@ 0x40
 8004d5a:	d86f      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d5c:	2b30      	cmp	r3, #48	@ 0x30
 8004d5e:	d064      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d60:	2b30      	cmp	r3, #48	@ 0x30
 8004d62:	d86b      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d060      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d867      	bhi.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05c      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d05a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x1de>
 8004d74:	e062      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d86:	f000 fd6d 	bl	8005864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	609a      	str	r2, [r3, #8]
      break;
 8004da2:	e04f      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	f000 fd56 	bl	8005864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc6:	609a      	str	r2, [r3, #8]
      break;
 8004dc8:	e03c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f000 fcc8 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2150      	movs	r1, #80	@ 0x50
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fd21 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004de8:	e02c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fce7 	bl	80057ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2160      	movs	r1, #96	@ 0x60
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fd11 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e08:	e01c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fca8 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2140      	movs	r1, #64	@ 0x40
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd01 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e28:	e00c      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 fcf8 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8004e3a:	e003      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e000      	b.n	8004e44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	00100070 	.word	0x00100070
 8004e64:	00100060 	.word	0x00100060
 8004e68:	00100050 	.word	0x00100050
 8004e6c:	00100040 	.word	0x00100040
 8004e70:	00100030 	.word	0x00100030
 8004e74:	00100020 	.word	0x00100020

08004e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4c      	ldr	r2, [pc, #304]	@ (800500c <TIM_Base_SetConfig+0x144>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d017      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee6:	d013      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a49      	ldr	r2, [pc, #292]	@ (8005010 <TIM_Base_SetConfig+0x148>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00f      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a48      	ldr	r2, [pc, #288]	@ (8005014 <TIM_Base_SetConfig+0x14c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00b      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <TIM_Base_SetConfig+0x150>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d007      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a46      	ldr	r2, [pc, #280]	@ (800501c <TIM_Base_SetConfig+0x154>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0x48>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a45      	ldr	r2, [pc, #276]	@ (8005020 <TIM_Base_SetConfig+0x158>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d108      	bne.n	8004f22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a39      	ldr	r2, [pc, #228]	@ (800500c <TIM_Base_SetConfig+0x144>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d023      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d01f      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a36      	ldr	r2, [pc, #216]	@ (8005010 <TIM_Base_SetConfig+0x148>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01b      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a35      	ldr	r2, [pc, #212]	@ (8005014 <TIM_Base_SetConfig+0x14c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d017      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a34      	ldr	r2, [pc, #208]	@ (8005018 <TIM_Base_SetConfig+0x150>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a33      	ldr	r2, [pc, #204]	@ (800501c <TIM_Base_SetConfig+0x154>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00f      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <TIM_Base_SetConfig+0x15c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <TIM_Base_SetConfig+0x160>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <TIM_Base_SetConfig+0x164>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_Base_SetConfig+0xaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005020 <TIM_Base_SetConfig+0x158>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a18      	ldr	r2, [pc, #96]	@ (800500c <TIM_Base_SetConfig+0x144>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <TIM_Base_SetConfig+0x154>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <TIM_Base_SetConfig+0x15c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <TIM_Base_SetConfig+0x160>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <TIM_Base_SetConfig+0x164>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0x110>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	@ (8005020 <TIM_Base_SetConfig+0x158>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	611a      	str	r2, [r3, #16]
  }
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40015000 	.word	0x40015000
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f023 0201 	bic.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0302 	bic.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a30      	ldr	r2, [pc, #192]	@ (800514c <TIM_OC1_SetConfig+0x11c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_OC1_SetConfig+0x88>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a2f      	ldr	r2, [pc, #188]	@ (8005150 <TIM_OC1_SetConfig+0x120>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_OC1_SetConfig+0x88>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a2e      	ldr	r2, [pc, #184]	@ (8005154 <TIM_OC1_SetConfig+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_OC1_SetConfig+0x88>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <TIM_OC1_SetConfig+0x128>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC1_SetConfig+0x88>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <TIM_OC1_SetConfig+0x12c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC1_SetConfig+0x88>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005160 <TIM_OC1_SetConfig+0x130>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10c      	bne.n	80050d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0308 	bic.w	r3, r3, #8
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <TIM_OC1_SetConfig+0x11c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <TIM_OC1_SetConfig+0xd2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <TIM_OC1_SetConfig+0x120>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <TIM_OC1_SetConfig+0xd2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005154 <TIM_OC1_SetConfig+0x124>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_OC1_SetConfig+0xd2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005158 <TIM_OC1_SetConfig+0x128>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <TIM_OC1_SetConfig+0xd2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a19      	ldr	r2, [pc, #100]	@ (800515c <TIM_OC1_SetConfig+0x12c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_OC1_SetConfig+0xd2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a18      	ldr	r2, [pc, #96]	@ (8005160 <TIM_OC1_SetConfig+0x130>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d111      	bne.n	8005126 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800
 8005160:	40015000 	.word	0x40015000

08005164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f023 0210 	bic.w	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0320 	bic.w	r3, r3, #32
 80051b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <TIM_OC2_SetConfig+0x110>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_OC2_SetConfig+0x74>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <TIM_OC2_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC2_SetConfig+0x74>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2a      	ldr	r2, [pc, #168]	@ (800527c <TIM_OC2_SetConfig+0x118>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d10d      	bne.n	80051f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <TIM_OC2_SetConfig+0x110>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <TIM_OC2_SetConfig+0xc0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <TIM_OC2_SetConfig+0x114>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00f      	beq.n	8005224 <TIM_OC2_SetConfig+0xc0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <TIM_OC2_SetConfig+0x11c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00b      	beq.n	8005224 <TIM_OC2_SetConfig+0xc0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1d      	ldr	r2, [pc, #116]	@ (8005284 <TIM_OC2_SetConfig+0x120>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_OC2_SetConfig+0xc0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1c      	ldr	r2, [pc, #112]	@ (8005288 <TIM_OC2_SetConfig+0x124>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC2_SetConfig+0xc0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <TIM_OC2_SetConfig+0x118>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d113      	bne.n	800524c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40015000 	.word	0x40015000
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800

0800528c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005398 <TIM_OC3_SetConfig+0x10c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0x72>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	@ (800539c <TIM_OC3_SetConfig+0x110>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0x72>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	@ (80053a0 <TIM_OC3_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10d      	bne.n	800531a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1e      	ldr	r2, [pc, #120]	@ (8005398 <TIM_OC3_SetConfig+0x10c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_OC3_SetConfig+0xbe>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <TIM_OC3_SetConfig+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_OC3_SetConfig+0xbe>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <TIM_OC3_SetConfig+0x118>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_OC3_SetConfig+0xbe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <TIM_OC3_SetConfig+0x11c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_OC3_SetConfig+0xbe>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <TIM_OC3_SetConfig+0x120>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_OC3_SetConfig+0xbe>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <TIM_OC3_SetConfig+0x114>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d113      	bne.n	8005372 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40013400 	.word	0x40013400
 80053a0:	40015000 	.word	0x40015000
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	031b      	lsls	r3, r3, #12
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <TIM_OC4_SetConfig+0x110>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC4_SetConfig+0x74>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a2b      	ldr	r2, [pc, #172]	@ (80054c4 <TIM_OC4_SetConfig+0x114>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC4_SetConfig+0x74>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a2a      	ldr	r2, [pc, #168]	@ (80054c8 <TIM_OC4_SetConfig+0x118>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10d      	bne.n	8005440 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800543e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1f      	ldr	r2, [pc, #124]	@ (80054c0 <TIM_OC4_SetConfig+0x110>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d013      	beq.n	8005470 <TIM_OC4_SetConfig+0xc0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <TIM_OC4_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00f      	beq.n	8005470 <TIM_OC4_SetConfig+0xc0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <TIM_OC4_SetConfig+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_OC4_SetConfig+0xc0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <TIM_OC4_SetConfig+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_OC4_SetConfig+0xc0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <TIM_OC4_SetConfig+0x124>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC4_SetConfig+0xc0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	@ (80054c8 <TIM_OC4_SetConfig+0x118>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d113      	bne.n	8005498 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005476:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800547e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	019b      	lsls	r3, r3, #6
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40013400 	.word	0x40013400
 80054c8:	40015000 	.word	0x40015000
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800551c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	041b      	lsls	r3, r3, #16
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a19      	ldr	r2, [pc, #100]	@ (8005594 <TIM_OC5_SetConfig+0xbc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <TIM_OC5_SetConfig+0x82>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a18      	ldr	r2, [pc, #96]	@ (8005598 <TIM_OC5_SetConfig+0xc0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00f      	beq.n	800555a <TIM_OC5_SetConfig+0x82>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a17      	ldr	r2, [pc, #92]	@ (800559c <TIM_OC5_SetConfig+0xc4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_OC5_SetConfig+0x82>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a16      	ldr	r2, [pc, #88]	@ (80055a0 <TIM_OC5_SetConfig+0xc8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_OC5_SetConfig+0x82>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a15      	ldr	r2, [pc, #84]	@ (80055a4 <TIM_OC5_SetConfig+0xcc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_OC5_SetConfig+0x82>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <TIM_OC5_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d109      	bne.n	800556e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	40015000 	.word	0x40015000

080055ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	051b      	lsls	r3, r3, #20
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <TIM_OC6_SetConfig+0xc0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <TIM_OC6_SetConfig+0x84>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <TIM_OC6_SetConfig+0xc4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00f      	beq.n	8005630 <TIM_OC6_SetConfig+0x84>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <TIM_OC6_SetConfig+0xc8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_OC6_SetConfig+0x84>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a17      	ldr	r2, [pc, #92]	@ (8005678 <TIM_OC6_SetConfig+0xcc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_OC6_SetConfig+0x84>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a16      	ldr	r2, [pc, #88]	@ (800567c <TIM_OC6_SetConfig+0xd0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC6_SetConfig+0x84>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <TIM_OC6_SetConfig+0xd4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005636:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	029b      	lsls	r3, r3, #10
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800
 8005680:	40015000 	.word	0x40015000

08005684 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a28      	ldr	r2, [pc, #160]	@ (8005750 <TIM_TI1_SetConfig+0xcc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01b      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b8:	d017      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <TIM_TI1_SetConfig+0xd0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a24      	ldr	r2, [pc, #144]	@ (8005758 <TIM_TI1_SetConfig+0xd4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00f      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a23      	ldr	r2, [pc, #140]	@ (800575c <TIM_TI1_SetConfig+0xd8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a22      	ldr	r2, [pc, #136]	@ (8005760 <TIM_TI1_SetConfig+0xdc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a21      	ldr	r2, [pc, #132]	@ (8005764 <TIM_TI1_SetConfig+0xe0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_TI1_SetConfig+0x66>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a20      	ldr	r2, [pc, #128]	@ (8005768 <TIM_TI1_SetConfig+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <TIM_TI1_SetConfig+0x6a>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <TIM_TI1_SetConfig+0x6c>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e003      	b.n	800570e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	b2db      	uxtb	r3, r3
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f023 030a 	bic.w	r3, r3, #10
 8005728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f003 030a 	and.w	r3, r3, #10
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40013400 	.word	0x40013400
 8005764:	40014000 	.word	0x40014000
 8005768:	40015000 	.word	0x40015000

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 030a 	bic.w	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	f043 0307 	orr.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2201      	movs	r2, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b08a      	sub	sp, #40	@ 0x28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0a0      	b.n	8005a44 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb fd9c 	bl	8001454 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7ff faca 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2203      	movs	r2, #3
 8005942:	f7ff fe9f 	bl	8005684 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 020c 	bic.w	r2, r2, #12
 8005954:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6999      	ldr	r1, [r3, #24]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005976:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800599a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	f023 0307 	bic.w	r3, r3, #7
 80059ae:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0204 	orr.w	r2, r2, #4
 80059be:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80059c8:	2370      	movs	r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80059cc:	2300      	movs	r3, #0
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f107 020c 	add.w	r2, r7, #12
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fbbb 	bl	8005164 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80059fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a00:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005a10:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3728      	adds	r7, #40	@ 0x28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_TIMEx_PWMN_Start+0x24>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e022      	b.n	8005ab6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d109      	bne.n	8005a8a <HAL_TIMEx_PWMN_Start+0x3e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e015      	b.n	8005ab6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d109      	bne.n	8005aa4 <HAL_TIMEx_PWMN_Start+0x58>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e008      	b.n	8005ab6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e073      	b.n	8005ba6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <HAL_TIMEx_PWMN_Start+0x82>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005acc:	e013      	b.n	8005af6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d104      	bne.n	8005ade <HAL_TIMEx_PWMN_Start+0x92>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005adc:	e00b      	b.n	8005af6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d104      	bne.n	8005aee <HAL_TIMEx_PWMN_Start+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aec:	e003      	b.n	8005af6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2204      	movs	r2, #4
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa47 	bl	8005f92 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a25      	ldr	r2, [pc, #148]	@ (8005bb0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d022      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b26:	d01d      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_TIMEx_PWMN_Start+0x168>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a20      	ldr	r2, [pc, #128]	@ (8005bb8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	@ (8005bbc <HAL_TIMEx_PWMN_Start+0x170>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <HAL_TIMEx_PWMN_Start+0x174>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_TIMEx_PWMN_Start+0x178>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIMEx_PWMN_Start+0x118>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d115      	bne.n	8005b90 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	4b18      	ldr	r3, [pc, #96]	@ (8005bcc <HAL_TIMEx_PWMN_Start+0x180>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b06      	cmp	r3, #6
 8005b74:	d015      	beq.n	8005ba2 <HAL_TIMEx_PWMN_Start+0x156>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b7c:	d011      	beq.n	8005ba2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8e:	e008      	b.n	8005ba2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e000      	b.n	8005ba4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40015000 	.word	0x40015000
 8005bcc:	00010007 	.word	0x00010007

08005bd0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f9d5 	bl	8005f92 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6a1a      	ldr	r2, [r3, #32]
 8005bee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10f      	bne.n	8005c18 <HAL_TIMEx_PWMN_Stop+0x48>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a1a      	ldr	r2, [r3, #32]
 8005bfe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <HAL_TIMEx_PWMN_Stop+0x48>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c16:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_TIMEx_PWMN_Stop+0x78>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d107      	bne.n	8005c48 <HAL_TIMEx_PWMN_Stop+0x78>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <HAL_TIMEx_PWMN_Stop+0x88>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c56:	e013      	b.n	8005c80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d104      	bne.n	8005c68 <HAL_TIMEx_PWMN_Stop+0x98>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c66:	e00b      	b.n	8005c80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d104      	bne.n	8005c78 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c76:	e003      	b.n	8005c80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e074      	b.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a34      	ldr	r2, [pc, #208]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a33      	ldr	r2, [pc, #204]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a31      	ldr	r2, [pc, #196]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ce8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d24:	d01d      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a11      	ldr	r2, [pc, #68]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10c      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40015000 	.word	0x40015000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000

08005db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e078      	b.n	8005ec6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d11c      	bne.n	8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	051b      	lsls	r3, r3, #20
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	40015000 	.word	0x40015000

08005ee0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 030f 	and.w	r3, r3, #15
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	401a      	ands	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e042      	b.n	8006074 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7fb fb3d 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2224      	movs	r2, #36	@ 0x24
 800600a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ff60 	bl	8006eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fc61 	bl	80068f4 <UART_SetConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01b      	b.n	8006074 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800604a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800605a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 ffdf 	bl	8007030 <UART_CheckIdleState>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	2b20      	cmp	r3, #32
 8006094:	d17b      	bne.n	800618e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_UART_Transmit+0x26>
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e074      	b.n	8006190 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2221      	movs	r2, #33	@ 0x21
 80060b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b6:	f7fb fb97 	bl	80017e8 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d4:	d108      	bne.n	80060e8 <HAL_UART_Transmit+0x6c>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e003      	b.n	80060f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060f0:	e030      	b.n	8006154 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2180      	movs	r1, #128	@ 0x80
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f001 f841 	bl	8007184 <UART_WaitOnFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e03d      	b.n	8006190 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006128:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3302      	adds	r3, #2
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e007      	b.n	8006142 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1c8      	bne.n	80060f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2200      	movs	r2, #0
 8006168:	2140      	movs	r1, #64	@ 0x40
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 f80a 	bl	8007184 <UART_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e006      	b.n	8006190 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	@ 0x28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d137      	bne.n	8006220 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Receive_IT+0x24>
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e030      	b.n	8006222 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a18      	ldr	r2, [pc, #96]	@ (800622c <HAL_UART_Receive_IT+0x94>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d01f      	beq.n	8006210 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d018      	beq.n	8006210 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	613b      	str	r3, [r7, #16]
   return(result);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	6a3a      	ldr	r2, [r7, #32]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	61bb      	str	r3, [r7, #24]
   return(result);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e6      	bne.n	80061de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	461a      	mov	r2, r3
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f822 	bl	8007260 <UART_Start_Receive_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	e000      	b.n	8006222 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3728      	adds	r7, #40	@ 0x28
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40008000 	.word	0x40008000

08006230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b0ba      	sub	sp, #232	@ 0xe8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006256:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800625a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800625e:	4013      	ands	r3, r2
 8006260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d11b      	bne.n	80062a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d015      	beq.n	80062a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8300 	beq.w	800689a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
      }
      return;
 80062a2:	e2fa      	b.n	800689a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8123 	beq.w	80064f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062b2:	4b8d      	ldr	r3, [pc, #564]	@ (80064e8 <HAL_UART_IRQHandler+0x2b8>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062be:	4b8b      	ldr	r3, [pc, #556]	@ (80064ec <HAL_UART_IRQHandler+0x2bc>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8116 	beq.w	80064f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d011      	beq.n	80062f8 <HAL_UART_IRQHandler+0xc8>
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	f043 0201 	orr.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d011      	beq.n	8006328 <HAL_UART_IRQHandler+0xf8>
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2202      	movs	r2, #2
 8006316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <HAL_UART_IRQHandler+0x128>
 8006334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2204      	movs	r2, #4
 8006346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634e:	f043 0202 	orr.w	r2, r3, #2
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d017      	beq.n	8006394 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d105      	bne.n	800637c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006370:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006374:	4b5c      	ldr	r3, [pc, #368]	@ (80064e8 <HAL_UART_IRQHandler+0x2b8>)
 8006376:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2208      	movs	r2, #8
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638a:	f043 0208 	orr.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800639c:	2b00      	cmp	r3, #0
 800639e:	d012      	beq.n	80063c6 <HAL_UART_IRQHandler+0x196>
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8266 	beq.w	800689e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d013      	beq.n	8006406 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d005      	beq.n	800642a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800641e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006426:	2b00      	cmp	r3, #0
 8006428:	d054      	beq.n	80064d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f83a 	bl	80074a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d146      	bne.n	80064cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3308      	adds	r3, #8
 8006466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800646a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800646e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1d9      	bne.n	800643e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006490:	2b00      	cmp	r3, #0
 8006492:	d017      	beq.n	80064c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800649a:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <HAL_UART_IRQHandler+0x2c0>)
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fc fc06 	bl	8002cb6 <HAL_DMA_Abort_IT>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064be:	4610      	mov	r0, r2
 80064c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c2:	e00f      	b.n	80064e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f9ff 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ca:	e00b      	b.n	80064e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f9fb 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d2:	e007      	b.n	80064e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9f7 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80064e2:	e1dc      	b.n	800689e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	bf00      	nop
    return;
 80064e6:	e1da      	b.n	800689e <HAL_UART_IRQHandler+0x66e>
 80064e8:	10000001 	.word	0x10000001
 80064ec:	04000120 	.word	0x04000120
 80064f0:	08007571 	.word	0x08007571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 8170 	bne.w	80067de <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8169 	beq.w	80067de <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8162 	beq.w	80067de <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2210      	movs	r2, #16
 8006520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	f040 80d8 	bne.w	80066e2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80af 	beq.w	80066a8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006550:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006554:	429a      	cmp	r2, r3
 8006556:	f080 80a7 	bcs.w	80066a8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 8087 	bne.w	8006686 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800658c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1da      	bne.n	8006578 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e1      	bne.n	80065c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800660e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006654:	f023 0310 	bic.w	r3, r3, #16
 8006658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006666:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006668:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800666c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e4      	bne.n	8006644 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006680:	4618      	mov	r0, r3
 8006682:	f7fc fabf 	bl	8002c04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006698:	b29b      	uxth	r3, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f91b 	bl	80068dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80066a6:	e0fc      	b.n	80068a2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066b2:	429a      	cmp	r2, r3
 80066b4:	f040 80f5 	bne.w	80068a2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	f040 80eb 	bne.w	80068a2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f8fe 	bl	80068dc <HAL_UARTEx_RxEventCallback>
      return;
 80066e0:	e0df      	b.n	80068a2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80d1 	beq.w	80068a6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80cc 	beq.w	80068a6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006722:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006730:	647b      	str	r3, [r7, #68]	@ 0x44
 8006732:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800673e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e4      	bne.n	800670e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3308      	adds	r3, #8
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	623b      	str	r3, [r7, #32]
   return(result);
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800676c:	633a      	str	r2, [r7, #48]	@ 0x30
 800676e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e1      	bne.n	8006744 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0310 	bic.w	r3, r3, #16
 80067a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	69b9      	ldr	r1, [r7, #24]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	617b      	str	r3, [r7, #20]
   return(result);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e4      	bne.n	8006794 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f880 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067dc:	e063      	b.n	80068a6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <HAL_UART_IRQHandler+0x5d8>
 80067ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80067fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fc17 	bl	8008034 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006806:	e051      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d014      	beq.n	800683e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006824:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006830:	2b00      	cmp	r3, #0
 8006832:	d03a      	beq.n	80068aa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
    }
    return;
 800683c:	e035      	b.n	80068aa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <HAL_UART_IRQHandler+0x62e>
 800684a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fea0 	bl	800759c <UART_EndTransmit_IT>
    return;
 800685c:	e026      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_UART_IRQHandler+0x64e>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fbf0 	bl	800805c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800687c:	e016      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d010      	beq.n	80068ac <HAL_UART_IRQHandler+0x67c>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688e:	2b00      	cmp	r3, #0
 8006890:	da0c      	bge.n	80068ac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fbd8 	bl	8008048 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006898:	e008      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
      return;
 800689a:	bf00      	nop
 800689c:	e006      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
    return;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
      return;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
      return;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <HAL_UART_IRQHandler+0x67c>
    return;
 80068aa:	bf00      	nop
  }
}
 80068ac:	37e8      	adds	r7, #232	@ 0xe8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop

080068b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b08c      	sub	sp, #48	@ 0x30
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	431a      	orrs	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	431a      	orrs	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4313      	orrs	r3, r2
 800691a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4baa      	ldr	r3, [pc, #680]	@ (8006bcc <UART_SetConfig+0x2d8>)
 8006924:	4013      	ands	r3, r2
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800692c:	430b      	orrs	r3, r1
 800692e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a9f      	ldr	r2, [pc, #636]	@ (8006bd0 <UART_SetConfig+0x2dc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800695c:	4313      	orrs	r3, r2
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800696a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006974:	430b      	orrs	r3, r1
 8006976:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697e:	f023 010f 	bic.w	r1, r3, #15
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a90      	ldr	r2, [pc, #576]	@ (8006bd4 <UART_SetConfig+0x2e0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d125      	bne.n	80069e4 <UART_SetConfig+0xf0>
 8006998:	4b8f      	ldr	r3, [pc, #572]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d81a      	bhi.n	80069dc <UART_SetConfig+0xe8>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <UART_SetConfig+0xb8>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c2:	e116      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 80069c4:	2302      	movs	r3, #2
 80069c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ca:	e112      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 80069cc:	2304      	movs	r3, #4
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d2:	e10e      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 80069d4:	2308      	movs	r3, #8
 80069d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069da:	e10a      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 80069dc:	2310      	movs	r3, #16
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e2:	e106      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a7c      	ldr	r2, [pc, #496]	@ (8006bdc <UART_SetConfig+0x2e8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d138      	bne.n	8006a60 <UART_SetConfig+0x16c>
 80069ee:	4b7a      	ldr	r3, [pc, #488]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f4:	f003 030c 	and.w	r3, r3, #12
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	d82d      	bhi.n	8006a58 <UART_SetConfig+0x164>
 80069fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <UART_SetConfig+0x110>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a59 	.word	0x08006a59
 8006a0c:	08006a59 	.word	0x08006a59
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a49 	.word	0x08006a49
 8006a18:	08006a59 	.word	0x08006a59
 8006a1c:	08006a59 	.word	0x08006a59
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a41 	.word	0x08006a41
 8006a28:	08006a59 	.word	0x08006a59
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e0d8      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e0d4      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e0d0      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e0cc      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e0c8      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a5e      	ldr	r2, [pc, #376]	@ (8006be0 <UART_SetConfig+0x2ec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d125      	bne.n	8006ab6 <UART_SetConfig+0x1c2>
 8006a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a74:	2b30      	cmp	r3, #48	@ 0x30
 8006a76:	d016      	beq.n	8006aa6 <UART_SetConfig+0x1b2>
 8006a78:	2b30      	cmp	r3, #48	@ 0x30
 8006a7a:	d818      	bhi.n	8006aae <UART_SetConfig+0x1ba>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d00a      	beq.n	8006a96 <UART_SetConfig+0x1a2>
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d814      	bhi.n	8006aae <UART_SetConfig+0x1ba>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <UART_SetConfig+0x19a>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d008      	beq.n	8006a9e <UART_SetConfig+0x1aa>
 8006a8c:	e00f      	b.n	8006aae <UART_SetConfig+0x1ba>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a94:	e0ad      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a96:	2302      	movs	r3, #2
 8006a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9c:	e0a9      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa4:	e0a5      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aac:	e0a1      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006aae:	2310      	movs	r3, #16
 8006ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab4:	e09d      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a4a      	ldr	r2, [pc, #296]	@ (8006be4 <UART_SetConfig+0x2f0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d125      	bne.n	8006b0c <UART_SetConfig+0x218>
 8006ac0:	4b45      	ldr	r3, [pc, #276]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006acc:	d016      	beq.n	8006afc <UART_SetConfig+0x208>
 8006ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ad0:	d818      	bhi.n	8006b04 <UART_SetConfig+0x210>
 8006ad2:	2b80      	cmp	r3, #128	@ 0x80
 8006ad4:	d00a      	beq.n	8006aec <UART_SetConfig+0x1f8>
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d814      	bhi.n	8006b04 <UART_SetConfig+0x210>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <UART_SetConfig+0x1f0>
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x200>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x210>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e082      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e07e      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e07a      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e076      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e072      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a35      	ldr	r2, [pc, #212]	@ (8006be8 <UART_SetConfig+0x2f4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d12a      	bne.n	8006b6c <UART_SetConfig+0x278>
 8006b16:	4b30      	ldr	r3, [pc, #192]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b24:	d01a      	beq.n	8006b5c <UART_SetConfig+0x268>
 8006b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2a:	d81b      	bhi.n	8006b64 <UART_SetConfig+0x270>
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b30:	d00c      	beq.n	8006b4c <UART_SetConfig+0x258>
 8006b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b36:	d815      	bhi.n	8006b64 <UART_SetConfig+0x270>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <UART_SetConfig+0x250>
 8006b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x260>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x270>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e052      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e04e      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5a:	e04a      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b62:	e046      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6a:	e042      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a17      	ldr	r2, [pc, #92]	@ (8006bd0 <UART_SetConfig+0x2dc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d13a      	bne.n	8006bec <UART_SetConfig+0x2f8>
 8006b76:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <UART_SetConfig+0x2e4>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b84:	d01a      	beq.n	8006bbc <UART_SetConfig+0x2c8>
 8006b86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b8a:	d81b      	bhi.n	8006bc4 <UART_SetConfig+0x2d0>
 8006b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b90:	d00c      	beq.n	8006bac <UART_SetConfig+0x2b8>
 8006b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b96:	d815      	bhi.n	8006bc4 <UART_SetConfig+0x2d0>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <UART_SetConfig+0x2b0>
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba0:	d008      	beq.n	8006bb4 <UART_SetConfig+0x2c0>
 8006ba2:	e00f      	b.n	8006bc4 <UART_SetConfig+0x2d0>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006baa:	e022      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006bac:	2302      	movs	r3, #2
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb2:	e01e      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bba:	e01a      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc2:	e016      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bca:	e012      	b.n	8006bf2 <UART_SetConfig+0x2fe>
 8006bcc:	cfff69f3 	.word	0xcfff69f3
 8006bd0:	40008000 	.word	0x40008000
 8006bd4:	40013800 	.word	0x40013800
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40004400 	.word	0x40004400
 8006be0:	40004800 	.word	0x40004800
 8006be4:	40004c00 	.word	0x40004c00
 8006be8:	40005000 	.word	0x40005000
 8006bec:	2310      	movs	r3, #16
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4aae      	ldr	r2, [pc, #696]	@ (8006eb0 <UART_SetConfig+0x5bc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	f040 8097 	bne.w	8006d2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d823      	bhi.n	8006c4e <UART_SetConfig+0x35a>
 8006c06:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x318>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c4f 	.word	0x08006c4f
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c3f 	.word	0x08006c3f
 8006c20:	08006c4f 	.word	0x08006c4f
 8006c24:	08006c4f 	.word	0x08006c4f
 8006c28:	08006c4f 	.word	0x08006c4f
 8006c2c:	08006c47 	.word	0x08006c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c30:	f7fc ffd6 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8006c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c36:	e010      	b.n	8006c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4b9e      	ldr	r3, [pc, #632]	@ (8006eb4 <UART_SetConfig+0x5c0>)
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c3c:	e00d      	b.n	8006c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7fc ff61 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8006c42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c44:	e009      	b.n	8006c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c4c:	e005      	b.n	8006c5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8130 	beq.w	8006ec2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	4a94      	ldr	r2, [pc, #592]	@ (8006eb8 <UART_SetConfig+0x5c4>)
 8006c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d305      	bcc.n	8006c92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d903      	bls.n	8006c9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c98:	e113      	b.n	8006ec2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	60fa      	str	r2, [r7, #12]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	4a84      	ldr	r2, [pc, #528]	@ (8006eb8 <UART_SetConfig+0x5c4>)
 8006ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2200      	movs	r2, #0
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cbc:	f7f9 fb18 	bl	80002f0 <__aeabi_uldivmod>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	020b      	lsls	r3, r1, #8
 8006cd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd6:	0202      	lsls	r2, r0, #8
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	6849      	ldr	r1, [r1, #4]
 8006cdc:	0849      	lsrs	r1, r1, #1
 8006cde:	2000      	movs	r0, #0
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	eb12 0804 	adds.w	r8, r2, r4
 8006ce8:	eb43 0905 	adc.w	r9, r3, r5
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	469a      	mov	sl, r3
 8006cf4:	4693      	mov	fp, r2
 8006cf6:	4652      	mov	r2, sl
 8006cf8:	465b      	mov	r3, fp
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	f7f9 faf7 	bl	80002f0 <__aeabi_uldivmod>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4613      	mov	r3, r2
 8006d08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d10:	d308      	bcc.n	8006d24 <UART_SetConfig+0x430>
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d18:	d204      	bcs.n	8006d24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	e0ce      	b.n	8006ec2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d2a:	e0ca      	b.n	8006ec2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d34:	d166      	bne.n	8006e04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d827      	bhi.n	8006d8e <UART_SetConfig+0x49a>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <UART_SetConfig+0x450>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006d7f 	.word	0x08006d7f
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006d8f 	.word	0x08006d8f
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fc ff3a 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d6e:	e014      	b.n	8006d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fc ff4c 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8006d74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d76:	e010      	b.n	8006d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b4e      	ldr	r3, [pc, #312]	@ (8006eb4 <UART_SetConfig+0x5c0>)
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d7c:	e00d      	b.n	8006d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7fc fec1 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8006d82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d84:	e009      	b.n	8006d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d8c:	e005      	b.n	8006d9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8090 	beq.w	8006ec2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	4a44      	ldr	r2, [pc, #272]	@ (8006eb8 <UART_SetConfig+0x5c4>)
 8006da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db4:	005a      	lsls	r2, r3, #1
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	441a      	add	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d916      	bls.n	8006dfc <UART_SetConfig+0x508>
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d212      	bcs.n	8006dfc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f023 030f 	bic.w	r3, r3, #15
 8006dde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	8bfb      	ldrh	r3, [r7, #30]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	8bfa      	ldrh	r2, [r7, #30]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	e062      	b.n	8006ec2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e02:	e05e      	b.n	8006ec2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d828      	bhi.n	8006e5e <UART_SetConfig+0x56a>
 8006e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <UART_SetConfig+0x520>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	08006e5f 	.word	0x08006e5f
 8006e24:	08006e4f 	.word	0x08006e4f
 8006e28:	08006e5f 	.word	0x08006e5f
 8006e2c:	08006e5f 	.word	0x08006e5f
 8006e30:	08006e5f 	.word	0x08006e5f
 8006e34:	08006e57 	.word	0x08006e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e38:	f7fc fed2 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8006e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e3e:	e014      	b.n	8006e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e40:	f7fc fee4 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e46:	e010      	b.n	8006e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e48:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <UART_SetConfig+0x5c0>)
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e4c:	e00d      	b.n	8006e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4e:	f7fc fe59 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8006e52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e54:	e009      	b.n	8006e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e5c:	e005      	b.n	8006e6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e68:	bf00      	nop
    }

    if (pclk != 0U)
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d028      	beq.n	8006ec2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	4a10      	ldr	r2, [pc, #64]	@ (8006eb8 <UART_SetConfig+0x5c4>)
 8006e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	441a      	add	r2, r3
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d910      	bls.n	8006ebc <UART_SetConfig+0x5c8>
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d20c      	bcs.n	8006ebc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	e009      	b.n	8006ec2 <UART_SetConfig+0x5ce>
 8006eae:	bf00      	nop
 8006eb0:	40008000 	.word	0x40008000
 8006eb4:	00f42400 	.word	0x00f42400
 8006eb8:	0800956c 	.word	0x0800956c
      }
      else
      {
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2200      	movs	r2, #0
 8006edc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ede:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3730      	adds	r7, #48	@ 0x30
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01a      	beq.n	8007002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fea:	d10a      	bne.n	8007002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  }
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b098      	sub	sp, #96	@ 0x60
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007040:	f7fa fbd2 	bl	80017e8 <HAL_GetTick>
 8007044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b08      	cmp	r3, #8
 8007052:	d12f      	bne.n	80070b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800705c:	2200      	movs	r2, #0
 800705e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f88e 	bl	8007184 <UART_WaitOnFlagUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d022      	beq.n	80070b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800707c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007082:	653b      	str	r3, [r7, #80]	@ 0x50
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800708c:	647b      	str	r3, [r7, #68]	@ 0x44
 800708e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800709a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e063      	b.n	800717c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d149      	bne.n	8007156 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ca:	2200      	movs	r2, #0
 80070cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f857 	bl	8007184 <UART_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d03c      	beq.n	8007156 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	623b      	str	r3, [r7, #32]
   return(result);
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80070fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	60fb      	str	r3, [r7, #12]
   return(result);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800712e:	61fa      	str	r2, [r7, #28]
 8007130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	69b9      	ldr	r1, [r7, #24]
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	617b      	str	r3, [r7, #20]
   return(result);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e012      	b.n	800717c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3758      	adds	r7, #88	@ 0x58
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007194:	e04f      	b.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d04b      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719e:	f7fa fb23 	bl	80017e8 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d302      	bcc.n	80071b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e04e      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d037      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b80      	cmp	r3, #128	@ 0x80
 80071ca:	d034      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	d031      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d110      	bne.n	8007202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2208      	movs	r2, #8
 80071e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f95b 	bl	80074a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2208      	movs	r2, #8
 80071f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e029      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007210:	d111      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800721a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f941 	bl	80074a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e00f      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	429a      	cmp	r2, r3
 8007252:	d0a0      	beq.n	8007196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007260:	b480      	push	{r7}
 8007262:	b0a3      	sub	sp, #140	@ 0x8c
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007292:	d10e      	bne.n	80072b2 <UART_Start_Receive_IT+0x52>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <UART_Start_Receive_IT+0x48>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072a6:	e02d      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	22ff      	movs	r2, #255	@ 0xff
 80072ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072b0:	e028      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10d      	bne.n	80072d6 <UART_Start_Receive_IT+0x76>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <UART_Start_Receive_IT+0x6c>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	22ff      	movs	r2, #255	@ 0xff
 80072c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072ca:	e01b      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	227f      	movs	r2, #127	@ 0x7f
 80072d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072d4:	e016      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072de:	d10d      	bne.n	80072fc <UART_Start_Receive_IT+0x9c>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <UART_Start_Receive_IT+0x92>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	227f      	movs	r2, #127	@ 0x7f
 80072ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072f0:	e008      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	223f      	movs	r2, #63	@ 0x3f
 80072f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80072fa:	e003      	b.n	8007304 <UART_Start_Receive_IT+0xa4>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2222      	movs	r2, #34	@ 0x22
 8007310:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007338:	673a      	str	r2, [r7, #112]	@ 0x70
 800733a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800733e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e3      	bne.n	8007314 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007354:	d14f      	bne.n	80073f6 <UART_Start_Receive_IT+0x196>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	429a      	cmp	r2, r3
 8007360:	d349      	bcc.n	80073f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736a:	d107      	bne.n	800737c <UART_Start_Receive_IT+0x11c>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d103      	bne.n	800737c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a47      	ldr	r2, [pc, #284]	@ (8007494 <UART_Start_Receive_IT+0x234>)
 8007378:	675a      	str	r2, [r3, #116]	@ 0x74
 800737a:	e002      	b.n	8007382 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a46      	ldr	r2, [pc, #280]	@ (8007498 <UART_Start_Receive_IT+0x238>)
 8007380:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01a      	beq.n	80073c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800739a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80073ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e4      	bne.n	800738a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80073e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80073ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e5      	bne.n	80073c0 <UART_Start_Receive_IT+0x160>
 80073f4:	e046      	b.n	8007484 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fe:	d107      	bne.n	8007410 <UART_Start_Receive_IT+0x1b0>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4a24      	ldr	r2, [pc, #144]	@ (800749c <UART_Start_Receive_IT+0x23c>)
 800740c:	675a      	str	r2, [r3, #116]	@ 0x74
 800740e:	e002      	b.n	8007416 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4a23      	ldr	r2, [pc, #140]	@ (80074a0 <UART_Start_Receive_IT+0x240>)
 8007414:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d019      	beq.n	8007452 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007432:	677b      	str	r3, [r7, #116]	@ 0x74
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e6      	bne.n	800741e <UART_Start_Receive_IT+0x1be>
 8007450:	e018      	b.n	8007484 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	613b      	str	r3, [r7, #16]
   return(result);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f043 0320 	orr.w	r3, r3, #32
 8007466:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007470:	623b      	str	r3, [r7, #32]
 8007472:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	69f9      	ldr	r1, [r7, #28]
 8007476:	6a3a      	ldr	r2, [r7, #32]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	61bb      	str	r3, [r7, #24]
   return(result);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	378c      	adds	r7, #140	@ 0x8c
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	08007cc9 	.word	0x08007cc9
 8007498:	08007965 	.word	0x08007965
 800749c:	080077ad 	.word	0x080077ad
 80074a0:	080075f5 	.word	0x080075f5

080074a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b095      	sub	sp, #84	@ 0x54
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80074cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e6      	bne.n	80074ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d118      	bne.n	8007550 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60bb      	str	r3, [r7, #8]
   return(result);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	647b      	str	r3, [r7, #68]	@ 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	613b      	str	r3, [r7, #16]
   return(result);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007564:	bf00      	nop
 8007566:	3754      	adds	r7, #84	@ 0x54
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff f99a 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6979      	ldr	r1, [r7, #20]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e6      	bne.n	80075a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff f965 	bl	80068b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ea:	bf00      	nop
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b09c      	sub	sp, #112	@ 0x70
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007602:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800760c:	2b22      	cmp	r3, #34	@ 0x22
 800760e:	f040 80be 	bne.w	800778e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800761c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007620:	b2d9      	uxtb	r1, r3
 8007622:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800762c:	400a      	ands	r2, r1
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 80a1 	bne.w	800779e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800766a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800766c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800767a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800767c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e6      	bne.n	800765c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800769e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80076ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80076b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a33      	ldr	r2, [pc, #204]	@ (80077a8 <UART_RxISR_8BIT+0x1b4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01f      	beq.n	8007720 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	623b      	str	r3, [r7, #32]
   return(result);
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007702:	663b      	str	r3, [r7, #96]	@ 0x60
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30
 800770e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800771a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e6      	bne.n	80076ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d12e      	bne.n	8007786 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60fb      	str	r3, [r7, #12]
   return(result);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	617b      	str	r3, [r7, #20]
   return(result);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b10      	cmp	r3, #16
 800776c:	d103      	bne.n	8007776 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff f8ac 	bl	80068dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007784:	e00b      	b.n	800779e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7f9 fb66 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 800778c:	e007      	b.n	800779e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0208 	orr.w	r2, r2, #8
 800779c:	619a      	str	r2, [r3, #24]
}
 800779e:	bf00      	nop
 80077a0:	3770      	adds	r7, #112	@ 0x70
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	40008000 	.word	0x40008000

080077ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b09c      	sub	sp, #112	@ 0x70
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077c4:	2b22      	cmp	r3, #34	@ 0x22
 80077c6:	f040 80be 	bne.w	8007946 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80077da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80077de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077e2:	4013      	ands	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ee:	1c9a      	adds	r2, r3, #2
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 80a1 	bne.w	8007956 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007828:	667b      	str	r3, [r7, #100]	@ 0x64
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007832:	657b      	str	r3, [r7, #84]	@ 0x54
 8007834:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007838:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	663b      	str	r3, [r7, #96]	@ 0x60
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007866:	643a      	str	r2, [r7, #64]	@ 0x40
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a33      	ldr	r2, [pc, #204]	@ (8007960 <UART_RxISR_16BIT+0x1b4>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d01f      	beq.n	80078d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d018      	beq.n	80078d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d12e      	bne.n	800793e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6979      	ldr	r1, [r7, #20]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	613b      	str	r3, [r7, #16]
   return(result);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b10      	cmp	r3, #16
 8007924:	d103      	bne.n	800792e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2210      	movs	r2, #16
 800792c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fe ffd0 	bl	80068dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800793c:	e00b      	b.n	8007956 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7f9 fa8a 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 8007944:	e007      	b.n	8007956 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0208 	orr.w	r2, r2, #8
 8007954:	619a      	str	r2, [r3, #24]
}
 8007956:	bf00      	nop
 8007958:	3770      	adds	r7, #112	@ 0x70
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40008000 	.word	0x40008000

08007964 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b0ac      	sub	sp, #176	@ 0xb0
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007972:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800799a:	2b22      	cmp	r3, #34	@ 0x22
 800799c:	f040 8183 	bne.w	8007ca6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079aa:	e126      	b.n	8007bfa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80079ba:	b2d9      	uxtb	r1, r3
 80079bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c6:	400a      	ands	r2, r1
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d053      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d011      	beq.n	8007a2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a24:	f043 0201 	orr.w	r2, r3, #1
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d011      	beq.n	8007a5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a54:	f043 0204 	orr.w	r2, r3, #4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d011      	beq.n	8007a8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a84:	f043 0202 	orr.w	r2, r3, #2
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d006      	beq.n	8007aa6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fe ff15 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 80a3 	bne.w	8007bfa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ad8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007adc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e4      	bne.n	8007ab4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b12:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b18:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e1      	bne.n	8007aea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a60      	ldr	r2, [pc, #384]	@ (8007cc0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d021      	beq.n	8007b88 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01a      	beq.n	8007b88 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b74:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b76:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e4      	bne.n	8007b52 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d130      	bne.n	8007bf2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	f023 0310 	bic.w	r3, r3, #16
 8007baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d103      	bne.n	8007be2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2210      	movs	r2, #16
 8007be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe fe76 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007bf0:	e00e      	b.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7f9 f930 	bl	8000e58 <HAL_UART_RxCpltCallback>
        break;
 8007bf8:	e00a      	b.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bfa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f47f aece 	bne.w	80079ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c16:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d049      	beq.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c28:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d242      	bcs.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e3      	bne.n	8007c30 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a16      	ldr	r2, [pc, #88]	@ (8007cc4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007c6c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f043 0320 	orr.w	r3, r3, #32
 8007c82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6979      	ldr	r1, [r7, #20]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e4      	bne.n	8007c6e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ca4:	e007      	b.n	8007cb6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699a      	ldr	r2, [r3, #24]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0208 	orr.w	r2, r2, #8
 8007cb4:	619a      	str	r2, [r3, #24]
}
 8007cb6:	bf00      	nop
 8007cb8:	37b0      	adds	r7, #176	@ 0xb0
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40008000 	.word	0x40008000
 8007cc4:	080075f5 	.word	0x080075f5

08007cc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b0ae      	sub	sp, #184	@ 0xb8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007cd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cfe:	2b22      	cmp	r3, #34	@ 0x22
 8007d00:	f040 8187 	bne.w	8008012 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d0e:	e12a      	b.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d16:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007d26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d053      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d011      	beq.n	8007d96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8c:	f043 0201 	orr.w	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2202      	movs	r2, #2
 8007db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbc:	f043 0204 	orr.w	r2, r3, #4
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dca:	f003 0304 	and.w	r3, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d011      	beq.n	8007df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2204      	movs	r2, #4
 8007de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dec:	f043 0202 	orr.w	r2, r3, #2
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fe fd61 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 80a5 	bne.w	8007f66 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e2      	bne.n	8007e1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e1      	bne.n	8007e56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a60      	ldr	r2, [pc, #384]	@ (800802c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d021      	beq.n	8007ef4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01a      	beq.n	8007ef4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ece:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ee2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ee6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e4      	bne.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d130      	bne.n	8007f5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	f023 0310 	bic.w	r3, r3, #16
 8007f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e4      	bne.n	8007f02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d103      	bne.n	8007f4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fe fcc0 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007f5c:	e00e      	b.n	8007f7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7f8 ff7a 	bl	8000e58 <HAL_UART_RxCpltCallback>
        break;
 8007f64:	e00a      	b.n	8007f7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f66:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d006      	beq.n	8007f7c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f47f aeca 	bne.w	8007d10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f82:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d049      	beq.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f94:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d242      	bcs.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	623b      	str	r3, [r7, #32]
   return(result);
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e3      	bne.n	8007f9c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	@ (8008030 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007fd8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f043 0320 	orr.w	r3, r3, #32
 8007fee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	69b9      	ldr	r1, [r7, #24]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	617b      	str	r3, [r7, #20]
   return(result);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e4      	bne.n	8007fda <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008010:	e007      	b.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0208 	orr.w	r2, r2, #8
 8008020:	619a      	str	r2, [r3, #24]
}
 8008022:	bf00      	nop
 8008024:	37b8      	adds	r7, #184	@ 0xb8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40008000 	.word	0x40008000
 8008030:	080077ad 	.word	0x080077ad

08008034 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_UARTEx_DisableFifoMode+0x16>
 8008082:	2302      	movs	r3, #2
 8008084:	e027      	b.n	80080d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2224      	movs	r2, #36	@ 0x24
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e02d      	b.n	8008156 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2224      	movs	r2, #36	@ 0x24
 8008106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f850 	bl	80081dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008172:	2302      	movs	r3, #2
 8008174:	e02d      	b.n	80081d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2224      	movs	r2, #36	@ 0x24
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f812 	bl	80081dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081fc:	e031      	b.n	8008262 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081fe:	2308      	movs	r3, #8
 8008200:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008202:	2308      	movs	r3, #8
 8008204:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	0e5b      	lsrs	r3, r3, #25
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 0307 	and.w	r3, r3, #7
 8008214:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0f5b      	lsrs	r3, r3, #29
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	7b3a      	ldrb	r2, [r7, #12]
 800822a:	4911      	ldr	r1, [pc, #68]	@ (8008270 <UARTEx_SetNbDataToProcess+0x94>)
 800822c:	5c8a      	ldrb	r2, [r1, r2]
 800822e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008232:	7b3a      	ldrb	r2, [r7, #12]
 8008234:	490f      	ldr	r1, [pc, #60]	@ (8008274 <UARTEx_SetNbDataToProcess+0x98>)
 8008236:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008238:	fb93 f3f2 	sdiv	r3, r3, r2
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	7b7a      	ldrb	r2, [r7, #13]
 8008248:	4909      	ldr	r1, [pc, #36]	@ (8008270 <UARTEx_SetNbDataToProcess+0x94>)
 800824a:	5c8a      	ldrb	r2, [r1, r2]
 800824c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008250:	7b7a      	ldrb	r2, [r7, #13]
 8008252:	4908      	ldr	r1, [pc, #32]	@ (8008274 <UARTEx_SetNbDataToProcess+0x98>)
 8008254:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008256:	fb93 f3f2 	sdiv	r3, r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008262:	bf00      	nop
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	08009584 	.word	0x08009584
 8008274:	0800958c 	.word	0x0800958c

08008278 <atoi>:
 8008278:	220a      	movs	r2, #10
 800827a:	2100      	movs	r1, #0
 800827c:	f000 b87a 	b.w	8008374 <strtol>

08008280 <_strtol_l.constprop.0>:
 8008280:	2b24      	cmp	r3, #36	@ 0x24
 8008282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008286:	4686      	mov	lr, r0
 8008288:	4690      	mov	r8, r2
 800828a:	d801      	bhi.n	8008290 <_strtol_l.constprop.0+0x10>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d106      	bne.n	800829e <_strtol_l.constprop.0+0x1e>
 8008290:	f000 fb06 	bl	80088a0 <__errno>
 8008294:	2316      	movs	r3, #22
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2000      	movs	r0, #0
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	4834      	ldr	r0, [pc, #208]	@ (8008370 <_strtol_l.constprop.0+0xf0>)
 80082a0:	460d      	mov	r5, r1
 80082a2:	462a      	mov	r2, r5
 80082a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a8:	5d06      	ldrb	r6, [r0, r4]
 80082aa:	f016 0608 	ands.w	r6, r6, #8
 80082ae:	d1f8      	bne.n	80082a2 <_strtol_l.constprop.0+0x22>
 80082b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80082b2:	d12d      	bne.n	8008310 <_strtol_l.constprop.0+0x90>
 80082b4:	782c      	ldrb	r4, [r5, #0]
 80082b6:	2601      	movs	r6, #1
 80082b8:	1c95      	adds	r5, r2, #2
 80082ba:	f033 0210 	bics.w	r2, r3, #16
 80082be:	d109      	bne.n	80082d4 <_strtol_l.constprop.0+0x54>
 80082c0:	2c30      	cmp	r4, #48	@ 0x30
 80082c2:	d12a      	bne.n	800831a <_strtol_l.constprop.0+0x9a>
 80082c4:	782a      	ldrb	r2, [r5, #0]
 80082c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082ca:	2a58      	cmp	r2, #88	@ 0x58
 80082cc:	d125      	bne.n	800831a <_strtol_l.constprop.0+0x9a>
 80082ce:	786c      	ldrb	r4, [r5, #1]
 80082d0:	2310      	movs	r3, #16
 80082d2:	3502      	adds	r5, #2
 80082d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80082d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082dc:	2200      	movs	r2, #0
 80082de:	fbbc f9f3 	udiv	r9, ip, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80082e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80082ec:	2f09      	cmp	r7, #9
 80082ee:	d81b      	bhi.n	8008328 <_strtol_l.constprop.0+0xa8>
 80082f0:	463c      	mov	r4, r7
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	dd27      	ble.n	8008346 <_strtol_l.constprop.0+0xc6>
 80082f6:	1c57      	adds	r7, r2, #1
 80082f8:	d007      	beq.n	800830a <_strtol_l.constprop.0+0x8a>
 80082fa:	4581      	cmp	r9, r0
 80082fc:	d320      	bcc.n	8008340 <_strtol_l.constprop.0+0xc0>
 80082fe:	d101      	bne.n	8008304 <_strtol_l.constprop.0+0x84>
 8008300:	45a2      	cmp	sl, r4
 8008302:	db1d      	blt.n	8008340 <_strtol_l.constprop.0+0xc0>
 8008304:	fb00 4003 	mla	r0, r0, r3, r4
 8008308:	2201      	movs	r2, #1
 800830a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800830e:	e7eb      	b.n	80082e8 <_strtol_l.constprop.0+0x68>
 8008310:	2c2b      	cmp	r4, #43	@ 0x2b
 8008312:	bf04      	itt	eq
 8008314:	782c      	ldrbeq	r4, [r5, #0]
 8008316:	1c95      	addeq	r5, r2, #2
 8008318:	e7cf      	b.n	80082ba <_strtol_l.constprop.0+0x3a>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1da      	bne.n	80082d4 <_strtol_l.constprop.0+0x54>
 800831e:	2c30      	cmp	r4, #48	@ 0x30
 8008320:	bf0c      	ite	eq
 8008322:	2308      	moveq	r3, #8
 8008324:	230a      	movne	r3, #10
 8008326:	e7d5      	b.n	80082d4 <_strtol_l.constprop.0+0x54>
 8008328:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800832c:	2f19      	cmp	r7, #25
 800832e:	d801      	bhi.n	8008334 <_strtol_l.constprop.0+0xb4>
 8008330:	3c37      	subs	r4, #55	@ 0x37
 8008332:	e7de      	b.n	80082f2 <_strtol_l.constprop.0+0x72>
 8008334:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008338:	2f19      	cmp	r7, #25
 800833a:	d804      	bhi.n	8008346 <_strtol_l.constprop.0+0xc6>
 800833c:	3c57      	subs	r4, #87	@ 0x57
 800833e:	e7d8      	b.n	80082f2 <_strtol_l.constprop.0+0x72>
 8008340:	f04f 32ff 	mov.w	r2, #4294967295
 8008344:	e7e1      	b.n	800830a <_strtol_l.constprop.0+0x8a>
 8008346:	1c53      	adds	r3, r2, #1
 8008348:	d108      	bne.n	800835c <_strtol_l.constprop.0+0xdc>
 800834a:	2322      	movs	r3, #34	@ 0x22
 800834c:	f8ce 3000 	str.w	r3, [lr]
 8008350:	4660      	mov	r0, ip
 8008352:	f1b8 0f00 	cmp.w	r8, #0
 8008356:	d0a0      	beq.n	800829a <_strtol_l.constprop.0+0x1a>
 8008358:	1e69      	subs	r1, r5, #1
 800835a:	e006      	b.n	800836a <_strtol_l.constprop.0+0xea>
 800835c:	b106      	cbz	r6, 8008360 <_strtol_l.constprop.0+0xe0>
 800835e:	4240      	negs	r0, r0
 8008360:	f1b8 0f00 	cmp.w	r8, #0
 8008364:	d099      	beq.n	800829a <_strtol_l.constprop.0+0x1a>
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1f6      	bne.n	8008358 <_strtol_l.constprop.0+0xd8>
 800836a:	f8c8 1000 	str.w	r1, [r8]
 800836e:	e794      	b.n	800829a <_strtol_l.constprop.0+0x1a>
 8008370:	08009595 	.word	0x08009595

08008374 <strtol>:
 8008374:	4613      	mov	r3, r2
 8008376:	460a      	mov	r2, r1
 8008378:	4601      	mov	r1, r0
 800837a:	4802      	ldr	r0, [pc, #8]	@ (8008384 <strtol+0x10>)
 800837c:	6800      	ldr	r0, [r0, #0]
 800837e:	f7ff bf7f 	b.w	8008280 <_strtol_l.constprop.0>
 8008382:	bf00      	nop
 8008384:	20000018 	.word	0x20000018

08008388 <std>:
 8008388:	2300      	movs	r3, #0
 800838a:	b510      	push	{r4, lr}
 800838c:	4604      	mov	r4, r0
 800838e:	e9c0 3300 	strd	r3, r3, [r0]
 8008392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008396:	6083      	str	r3, [r0, #8]
 8008398:	8181      	strh	r1, [r0, #12]
 800839a:	6643      	str	r3, [r0, #100]	@ 0x64
 800839c:	81c2      	strh	r2, [r0, #14]
 800839e:	6183      	str	r3, [r0, #24]
 80083a0:	4619      	mov	r1, r3
 80083a2:	2208      	movs	r2, #8
 80083a4:	305c      	adds	r0, #92	@ 0x5c
 80083a6:	f000 fa1b 	bl	80087e0 <memset>
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <std+0x58>)
 80083ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <std+0x5c>)
 80083b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083b2:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <std+0x60>)
 80083b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <std+0x64>)
 80083b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <std+0x68>)
 80083bc:	6224      	str	r4, [r4, #32]
 80083be:	429c      	cmp	r4, r3
 80083c0:	d006      	beq.n	80083d0 <std+0x48>
 80083c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083c6:	4294      	cmp	r4, r2
 80083c8:	d002      	beq.n	80083d0 <std+0x48>
 80083ca:	33d0      	adds	r3, #208	@ 0xd0
 80083cc:	429c      	cmp	r4, r3
 80083ce:	d105      	bne.n	80083dc <std+0x54>
 80083d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	f000 ba8c 	b.w	80088f4 <__retarget_lock_init_recursive>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	08008631 	.word	0x08008631
 80083e4:	08008653 	.word	0x08008653
 80083e8:	0800868b 	.word	0x0800868b
 80083ec:	080086af 	.word	0x080086af
 80083f0:	20000328 	.word	0x20000328

080083f4 <stdio_exit_handler>:
 80083f4:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <stdio_exit_handler+0xc>)
 80083f6:	4903      	ldr	r1, [pc, #12]	@ (8008404 <stdio_exit_handler+0x10>)
 80083f8:	4803      	ldr	r0, [pc, #12]	@ (8008408 <stdio_exit_handler+0x14>)
 80083fa:	f000 b869 	b.w	80084d0 <_fwalk_sglue>
 80083fe:	bf00      	nop
 8008400:	2000000c 	.word	0x2000000c
 8008404:	080091c1 	.word	0x080091c1
 8008408:	2000001c 	.word	0x2000001c

0800840c <cleanup_stdio>:
 800840c:	6841      	ldr	r1, [r0, #4]
 800840e:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <cleanup_stdio+0x34>)
 8008410:	4299      	cmp	r1, r3
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	d001      	beq.n	800841c <cleanup_stdio+0x10>
 8008418:	f000 fed2 	bl	80091c0 <_fflush_r>
 800841c:	68a1      	ldr	r1, [r4, #8]
 800841e:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <cleanup_stdio+0x38>)
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <cleanup_stdio+0x1e>
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fecb 	bl	80091c0 <_fflush_r>
 800842a:	68e1      	ldr	r1, [r4, #12]
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <cleanup_stdio+0x3c>)
 800842e:	4299      	cmp	r1, r3
 8008430:	d004      	beq.n	800843c <cleanup_stdio+0x30>
 8008432:	4620      	mov	r0, r4
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f000 bec2 	b.w	80091c0 <_fflush_r>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	20000328 	.word	0x20000328
 8008444:	20000390 	.word	0x20000390
 8008448:	200003f8 	.word	0x200003f8

0800844c <global_stdio_init.part.0>:
 800844c:	b510      	push	{r4, lr}
 800844e:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <global_stdio_init.part.0+0x30>)
 8008450:	4c0b      	ldr	r4, [pc, #44]	@ (8008480 <global_stdio_init.part.0+0x34>)
 8008452:	4a0c      	ldr	r2, [pc, #48]	@ (8008484 <global_stdio_init.part.0+0x38>)
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	4620      	mov	r0, r4
 8008458:	2200      	movs	r2, #0
 800845a:	2104      	movs	r1, #4
 800845c:	f7ff ff94 	bl	8008388 <std>
 8008460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008464:	2201      	movs	r2, #1
 8008466:	2109      	movs	r1, #9
 8008468:	f7ff ff8e 	bl	8008388 <std>
 800846c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008470:	2202      	movs	r2, #2
 8008472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008476:	2112      	movs	r1, #18
 8008478:	f7ff bf86 	b.w	8008388 <std>
 800847c:	20000460 	.word	0x20000460
 8008480:	20000328 	.word	0x20000328
 8008484:	080083f5 	.word	0x080083f5

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	@ (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 ba34 	b.w	80088f6 <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	20000469 	.word	0x20000469

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 ba2f 	b.w	80088f8 <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	20000469 	.word	0x20000469

080084a0 <__sinit>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	4604      	mov	r4, r0
 80084a4:	f7ff fff0 	bl	8008488 <__sfp_lock_acquire>
 80084a8:	6a23      	ldr	r3, [r4, #32]
 80084aa:	b11b      	cbz	r3, 80084b4 <__sinit+0x14>
 80084ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b0:	f7ff bff0 	b.w	8008494 <__sfp_lock_release>
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <__sinit+0x28>)
 80084b6:	6223      	str	r3, [r4, #32]
 80084b8:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <__sinit+0x2c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f5      	bne.n	80084ac <__sinit+0xc>
 80084c0:	f7ff ffc4 	bl	800844c <global_stdio_init.part.0>
 80084c4:	e7f2      	b.n	80084ac <__sinit+0xc>
 80084c6:	bf00      	nop
 80084c8:	0800840d 	.word	0x0800840d
 80084cc:	20000460 	.word	0x20000460

080084d0 <_fwalk_sglue>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4607      	mov	r7, r0
 80084d6:	4688      	mov	r8, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	2600      	movs	r6, #0
 80084dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084e0:	f1b9 0901 	subs.w	r9, r9, #1
 80084e4:	d505      	bpl.n	80084f2 <_fwalk_sglue+0x22>
 80084e6:	6824      	ldr	r4, [r4, #0]
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	d1f7      	bne.n	80084dc <_fwalk_sglue+0xc>
 80084ec:	4630      	mov	r0, r6
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d907      	bls.n	8008508 <_fwalk_sglue+0x38>
 80084f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fc:	3301      	adds	r3, #1
 80084fe:	d003      	beq.n	8008508 <_fwalk_sglue+0x38>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	4306      	orrs	r6, r0
 8008508:	3568      	adds	r5, #104	@ 0x68
 800850a:	e7e9      	b.n	80084e0 <_fwalk_sglue+0x10>

0800850c <_puts_r>:
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	6884      	ldr	r4, [r0, #8]
 8008512:	4605      	mov	r5, r0
 8008514:	460e      	mov	r6, r1
 8008516:	b90b      	cbnz	r3, 800851c <_puts_r+0x10>
 8008518:	f7ff ffc2 	bl	80084a0 <__sinit>
 800851c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	d405      	bmi.n	800852e <_puts_r+0x22>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	0598      	lsls	r0, r3, #22
 8008526:	d402      	bmi.n	800852e <_puts_r+0x22>
 8008528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852a:	f000 f9e4 	bl	80088f6 <__retarget_lock_acquire_recursive>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	0719      	lsls	r1, r3, #28
 8008532:	d502      	bpl.n	800853a <_puts_r+0x2e>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d135      	bne.n	80085a6 <_puts_r+0x9a>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f8f9 	bl	8008734 <__swsetup_r>
 8008542:	b380      	cbz	r0, 80085a6 <_puts_r+0x9a>
 8008544:	f04f 35ff 	mov.w	r5, #4294967295
 8008548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800854a:	07da      	lsls	r2, r3, #31
 800854c:	d405      	bmi.n	800855a <_puts_r+0x4e>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	059b      	lsls	r3, r3, #22
 8008552:	d402      	bmi.n	800855a <_puts_r+0x4e>
 8008554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008556:	f000 f9cf 	bl	80088f8 <__retarget_lock_release_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	2b00      	cmp	r3, #0
 8008560:	da04      	bge.n	800856c <_puts_r+0x60>
 8008562:	69a2      	ldr	r2, [r4, #24]
 8008564:	429a      	cmp	r2, r3
 8008566:	dc17      	bgt.n	8008598 <_puts_r+0x8c>
 8008568:	290a      	cmp	r1, #10
 800856a:	d015      	beq.n	8008598 <_puts_r+0x8c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	7019      	strb	r1, [r3, #0]
 8008574:	68a3      	ldr	r3, [r4, #8]
 8008576:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800857a:	3b01      	subs	r3, #1
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	2900      	cmp	r1, #0
 8008580:	d1ed      	bne.n	800855e <_puts_r+0x52>
 8008582:	2b00      	cmp	r3, #0
 8008584:	da11      	bge.n	80085aa <_puts_r+0x9e>
 8008586:	4622      	mov	r2, r4
 8008588:	210a      	movs	r1, #10
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f893 	bl	80086b6 <__swbuf_r>
 8008590:	3001      	adds	r0, #1
 8008592:	d0d7      	beq.n	8008544 <_puts_r+0x38>
 8008594:	250a      	movs	r5, #10
 8008596:	e7d7      	b.n	8008548 <_puts_r+0x3c>
 8008598:	4622      	mov	r2, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f88b 	bl	80086b6 <__swbuf_r>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d1e7      	bne.n	8008574 <_puts_r+0x68>
 80085a4:	e7ce      	b.n	8008544 <_puts_r+0x38>
 80085a6:	3e01      	subs	r6, #1
 80085a8:	e7e4      	b.n	8008574 <_puts_r+0x68>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	6022      	str	r2, [r4, #0]
 80085b0:	220a      	movs	r2, #10
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e7ee      	b.n	8008594 <_puts_r+0x88>
	...

080085b8 <puts>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	@ (80085c4 <puts+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f7ff bfa5 	b.w	800850c <_puts_r>
 80085c2:	bf00      	nop
 80085c4:	20000018 	.word	0x20000018

080085c8 <sniprintf>:
 80085c8:	b40c      	push	{r2, r3}
 80085ca:	b530      	push	{r4, r5, lr}
 80085cc:	4b17      	ldr	r3, [pc, #92]	@ (800862c <sniprintf+0x64>)
 80085ce:	1e0c      	subs	r4, r1, #0
 80085d0:	681d      	ldr	r5, [r3, #0]
 80085d2:	b09d      	sub	sp, #116	@ 0x74
 80085d4:	da08      	bge.n	80085e8 <sniprintf+0x20>
 80085d6:	238b      	movs	r3, #139	@ 0x8b
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	b01d      	add	sp, #116	@ 0x74
 80085e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085e4:	b002      	add	sp, #8
 80085e6:	4770      	bx	lr
 80085e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085f0:	bf14      	ite	ne
 80085f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80085f6:	4623      	moveq	r3, r4
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	9307      	str	r3, [sp, #28]
 80085fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008600:	9002      	str	r0, [sp, #8]
 8008602:	9006      	str	r0, [sp, #24]
 8008604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008608:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800860a:	ab21      	add	r3, sp, #132	@ 0x84
 800860c:	a902      	add	r1, sp, #8
 800860e:	4628      	mov	r0, r5
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	f000 fac7 	bl	8008ba4 <_svfiprintf_r>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	bfbc      	itt	lt
 800861a:	238b      	movlt	r3, #139	@ 0x8b
 800861c:	602b      	strlt	r3, [r5, #0]
 800861e:	2c00      	cmp	r4, #0
 8008620:	d0dd      	beq.n	80085de <sniprintf+0x16>
 8008622:	9b02      	ldr	r3, [sp, #8]
 8008624:	2200      	movs	r2, #0
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e7d9      	b.n	80085de <sniprintf+0x16>
 800862a:	bf00      	nop
 800862c:	20000018 	.word	0x20000018

08008630 <__sread>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	f000 f90e 	bl	8008858 <_read_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	bfab      	itete	ge
 8008640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008642:	89a3      	ldrhlt	r3, [r4, #12]
 8008644:	181b      	addge	r3, r3, r0
 8008646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800864a:	bfac      	ite	ge
 800864c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800864e:	81a3      	strhlt	r3, [r4, #12]
 8008650:	bd10      	pop	{r4, pc}

08008652 <__swrite>:
 8008652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	461f      	mov	r7, r3
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	05db      	lsls	r3, r3, #23
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4616      	mov	r6, r2
 8008662:	d505      	bpl.n	8008670 <__swrite+0x1e>
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	2302      	movs	r3, #2
 800866a:	2200      	movs	r2, #0
 800866c:	f000 f8e2 	bl	8008834 <_lseek_r>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	4632      	mov	r2, r6
 800867e:	463b      	mov	r3, r7
 8008680:	4628      	mov	r0, r5
 8008682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	f000 b8f9 	b.w	800887c <_write_r>

0800868a <__sseek>:
 800868a:	b510      	push	{r4, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 f8cf 	bl	8008834 <_lseek_r>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	bf15      	itete	ne
 800869c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800869e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086a6:	81a3      	strheq	r3, [r4, #12]
 80086a8:	bf18      	it	ne
 80086aa:	81a3      	strhne	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__sclose>:
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 b8af 	b.w	8008814 <_close_r>

080086b6 <__swbuf_r>:
 80086b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b8:	460e      	mov	r6, r1
 80086ba:	4614      	mov	r4, r2
 80086bc:	4605      	mov	r5, r0
 80086be:	b118      	cbz	r0, 80086c8 <__swbuf_r+0x12>
 80086c0:	6a03      	ldr	r3, [r0, #32]
 80086c2:	b90b      	cbnz	r3, 80086c8 <__swbuf_r+0x12>
 80086c4:	f7ff feec 	bl	80084a0 <__sinit>
 80086c8:	69a3      	ldr	r3, [r4, #24]
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	071a      	lsls	r2, r3, #28
 80086d0:	d501      	bpl.n	80086d6 <__swbuf_r+0x20>
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	b943      	cbnz	r3, 80086e8 <__swbuf_r+0x32>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 f82b 	bl	8008734 <__swsetup_r>
 80086de:	b118      	cbz	r0, 80086e8 <__swbuf_r+0x32>
 80086e0:	f04f 37ff 	mov.w	r7, #4294967295
 80086e4:	4638      	mov	r0, r7
 80086e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	6922      	ldr	r2, [r4, #16]
 80086ec:	1a98      	subs	r0, r3, r2
 80086ee:	6963      	ldr	r3, [r4, #20]
 80086f0:	b2f6      	uxtb	r6, r6
 80086f2:	4283      	cmp	r3, r0
 80086f4:	4637      	mov	r7, r6
 80086f6:	dc05      	bgt.n	8008704 <__swbuf_r+0x4e>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	f000 fd60 	bl	80091c0 <_fflush_r>
 8008700:	2800      	cmp	r0, #0
 8008702:	d1ed      	bne.n	80086e0 <__swbuf_r+0x2a>
 8008704:	68a3      	ldr	r3, [r4, #8]
 8008706:	3b01      	subs	r3, #1
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	701e      	strb	r6, [r3, #0]
 8008712:	6962      	ldr	r2, [r4, #20]
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	429a      	cmp	r2, r3
 8008718:	d004      	beq.n	8008724 <__swbuf_r+0x6e>
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	07db      	lsls	r3, r3, #31
 800871e:	d5e1      	bpl.n	80086e4 <__swbuf_r+0x2e>
 8008720:	2e0a      	cmp	r6, #10
 8008722:	d1df      	bne.n	80086e4 <__swbuf_r+0x2e>
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 fd4a 	bl	80091c0 <_fflush_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	d0d9      	beq.n	80086e4 <__swbuf_r+0x2e>
 8008730:	e7d6      	b.n	80086e0 <__swbuf_r+0x2a>
	...

08008734 <__swsetup_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4b29      	ldr	r3, [pc, #164]	@ (80087dc <__swsetup_r+0xa8>)
 8008738:	4605      	mov	r5, r0
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	460c      	mov	r4, r1
 800873e:	b118      	cbz	r0, 8008748 <__swsetup_r+0x14>
 8008740:	6a03      	ldr	r3, [r0, #32]
 8008742:	b90b      	cbnz	r3, 8008748 <__swsetup_r+0x14>
 8008744:	f7ff feac 	bl	80084a0 <__sinit>
 8008748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874c:	0719      	lsls	r1, r3, #28
 800874e:	d422      	bmi.n	8008796 <__swsetup_r+0x62>
 8008750:	06da      	lsls	r2, r3, #27
 8008752:	d407      	bmi.n	8008764 <__swsetup_r+0x30>
 8008754:	2209      	movs	r2, #9
 8008756:	602a      	str	r2, [r5, #0]
 8008758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	e033      	b.n	80087cc <__swsetup_r+0x98>
 8008764:	0758      	lsls	r0, r3, #29
 8008766:	d512      	bpl.n	800878e <__swsetup_r+0x5a>
 8008768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800876a:	b141      	cbz	r1, 800877e <__swsetup_r+0x4a>
 800876c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008770:	4299      	cmp	r1, r3
 8008772:	d002      	beq.n	800877a <__swsetup_r+0x46>
 8008774:	4628      	mov	r0, r5
 8008776:	f000 f8c1 	bl	80088fc <_free_r>
 800877a:	2300      	movs	r3, #0
 800877c:	6363      	str	r3, [r4, #52]	@ 0x34
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008784:	81a3      	strh	r3, [r4, #12]
 8008786:	2300      	movs	r3, #0
 8008788:	6063      	str	r3, [r4, #4]
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f043 0308 	orr.w	r3, r3, #8
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	6923      	ldr	r3, [r4, #16]
 8008798:	b94b      	cbnz	r3, 80087ae <__swsetup_r+0x7a>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a4:	d003      	beq.n	80087ae <__swsetup_r+0x7a>
 80087a6:	4621      	mov	r1, r4
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 fd57 	bl	800925c <__smakebuf_r>
 80087ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b2:	f013 0201 	ands.w	r2, r3, #1
 80087b6:	d00a      	beq.n	80087ce <__swsetup_r+0x9a>
 80087b8:	2200      	movs	r2, #0
 80087ba:	60a2      	str	r2, [r4, #8]
 80087bc:	6962      	ldr	r2, [r4, #20]
 80087be:	4252      	negs	r2, r2
 80087c0:	61a2      	str	r2, [r4, #24]
 80087c2:	6922      	ldr	r2, [r4, #16]
 80087c4:	b942      	cbnz	r2, 80087d8 <__swsetup_r+0xa4>
 80087c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087ca:	d1c5      	bne.n	8008758 <__swsetup_r+0x24>
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	0799      	lsls	r1, r3, #30
 80087d0:	bf58      	it	pl
 80087d2:	6962      	ldrpl	r2, [r4, #20]
 80087d4:	60a2      	str	r2, [r4, #8]
 80087d6:	e7f4      	b.n	80087c2 <__swsetup_r+0x8e>
 80087d8:	2000      	movs	r0, #0
 80087da:	e7f7      	b.n	80087cc <__swsetup_r+0x98>
 80087dc:	20000018 	.word	0x20000018

080087e0 <memset>:
 80087e0:	4402      	add	r2, r0
 80087e2:	4603      	mov	r3, r0
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d100      	bne.n	80087ea <memset+0xa>
 80087e8:	4770      	bx	lr
 80087ea:	f803 1b01 	strb.w	r1, [r3], #1
 80087ee:	e7f9      	b.n	80087e4 <memset+0x4>

080087f0 <strncmp>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	b16a      	cbz	r2, 8008810 <strncmp+0x20>
 80087f4:	3901      	subs	r1, #1
 80087f6:	1884      	adds	r4, r0, r2
 80087f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008800:	429a      	cmp	r2, r3
 8008802:	d103      	bne.n	800880c <strncmp+0x1c>
 8008804:	42a0      	cmp	r0, r4
 8008806:	d001      	beq.n	800880c <strncmp+0x1c>
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1f5      	bne.n	80087f8 <strncmp+0x8>
 800880c:	1ad0      	subs	r0, r2, r3
 800880e:	bd10      	pop	{r4, pc}
 8008810:	4610      	mov	r0, r2
 8008812:	e7fc      	b.n	800880e <strncmp+0x1e>

08008814 <_close_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	@ (8008830 <_close_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f8 fc5d 	bl	80010de <_close>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_close_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_close_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20000464 	.word	0x20000464

08008834 <_lseek_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d07      	ldr	r5, [pc, #28]	@ (8008854 <_lseek_r+0x20>)
 8008838:	4604      	mov	r4, r0
 800883a:	4608      	mov	r0, r1
 800883c:	4611      	mov	r1, r2
 800883e:	2200      	movs	r2, #0
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7f8 fc72 	bl	800112c <_lseek>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_lseek_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_lseek_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20000464 	.word	0x20000464

08008858 <_read_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	@ (8008878 <_read_r+0x20>)
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7f8 fc00 	bl	800106c <_read>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_read_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_read_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20000464 	.word	0x20000464

0800887c <_write_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d07      	ldr	r5, [pc, #28]	@ (800889c <_write_r+0x20>)
 8008880:	4604      	mov	r4, r0
 8008882:	4608      	mov	r0, r1
 8008884:	4611      	mov	r1, r2
 8008886:	2200      	movs	r2, #0
 8008888:	602a      	str	r2, [r5, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f7f8 fc0b 	bl	80010a6 <_write>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_write_r+0x1e>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_write_r+0x1e>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	20000464 	.word	0x20000464

080088a0 <__errno>:
 80088a0:	4b01      	ldr	r3, [pc, #4]	@ (80088a8 <__errno+0x8>)
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000018 	.word	0x20000018

080088ac <__libc_init_array>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4d0d      	ldr	r5, [pc, #52]	@ (80088e4 <__libc_init_array+0x38>)
 80088b0:	4c0d      	ldr	r4, [pc, #52]	@ (80088e8 <__libc_init_array+0x3c>)
 80088b2:	1b64      	subs	r4, r4, r5
 80088b4:	10a4      	asrs	r4, r4, #2
 80088b6:	2600      	movs	r6, #0
 80088b8:	42a6      	cmp	r6, r4
 80088ba:	d109      	bne.n	80088d0 <__libc_init_array+0x24>
 80088bc:	4d0b      	ldr	r5, [pc, #44]	@ (80088ec <__libc_init_array+0x40>)
 80088be:	4c0c      	ldr	r4, [pc, #48]	@ (80088f0 <__libc_init_array+0x44>)
 80088c0:	f000 fd98 	bl	80093f4 <_init>
 80088c4:	1b64      	subs	r4, r4, r5
 80088c6:	10a4      	asrs	r4, r4, #2
 80088c8:	2600      	movs	r6, #0
 80088ca:	42a6      	cmp	r6, r4
 80088cc:	d105      	bne.n	80088da <__libc_init_array+0x2e>
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d4:	4798      	blx	r3
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7ee      	b.n	80088b8 <__libc_init_array+0xc>
 80088da:	f855 3b04 	ldr.w	r3, [r5], #4
 80088de:	4798      	blx	r3
 80088e0:	3601      	adds	r6, #1
 80088e2:	e7f2      	b.n	80088ca <__libc_init_array+0x1e>
 80088e4:	080096d0 	.word	0x080096d0
 80088e8:	080096d0 	.word	0x080096d0
 80088ec:	080096d0 	.word	0x080096d0
 80088f0:	080096d4 	.word	0x080096d4

080088f4 <__retarget_lock_init_recursive>:
 80088f4:	4770      	bx	lr

080088f6 <__retarget_lock_acquire_recursive>:
 80088f6:	4770      	bx	lr

080088f8 <__retarget_lock_release_recursive>:
 80088f8:	4770      	bx	lr
	...

080088fc <_free_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4605      	mov	r5, r0
 8008900:	2900      	cmp	r1, #0
 8008902:	d041      	beq.n	8008988 <_free_r+0x8c>
 8008904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008908:	1f0c      	subs	r4, r1, #4
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfb8      	it	lt
 800890e:	18e4      	addlt	r4, r4, r3
 8008910:	f000 f8e0 	bl	8008ad4 <__malloc_lock>
 8008914:	4a1d      	ldr	r2, [pc, #116]	@ (800898c <_free_r+0x90>)
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	b933      	cbnz	r3, 8008928 <_free_r+0x2c>
 800891a:	6063      	str	r3, [r4, #4]
 800891c:	6014      	str	r4, [r2, #0]
 800891e:	4628      	mov	r0, r5
 8008920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008924:	f000 b8dc 	b.w	8008ae0 <__malloc_unlock>
 8008928:	42a3      	cmp	r3, r4
 800892a:	d908      	bls.n	800893e <_free_r+0x42>
 800892c:	6820      	ldr	r0, [r4, #0]
 800892e:	1821      	adds	r1, r4, r0
 8008930:	428b      	cmp	r3, r1
 8008932:	bf01      	itttt	eq
 8008934:	6819      	ldreq	r1, [r3, #0]
 8008936:	685b      	ldreq	r3, [r3, #4]
 8008938:	1809      	addeq	r1, r1, r0
 800893a:	6021      	streq	r1, [r4, #0]
 800893c:	e7ed      	b.n	800891a <_free_r+0x1e>
 800893e:	461a      	mov	r2, r3
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	b10b      	cbz	r3, 8008948 <_free_r+0x4c>
 8008944:	42a3      	cmp	r3, r4
 8008946:	d9fa      	bls.n	800893e <_free_r+0x42>
 8008948:	6811      	ldr	r1, [r2, #0]
 800894a:	1850      	adds	r0, r2, r1
 800894c:	42a0      	cmp	r0, r4
 800894e:	d10b      	bne.n	8008968 <_free_r+0x6c>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	4401      	add	r1, r0
 8008954:	1850      	adds	r0, r2, r1
 8008956:	4283      	cmp	r3, r0
 8008958:	6011      	str	r1, [r2, #0]
 800895a:	d1e0      	bne.n	800891e <_free_r+0x22>
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	6053      	str	r3, [r2, #4]
 8008962:	4408      	add	r0, r1
 8008964:	6010      	str	r0, [r2, #0]
 8008966:	e7da      	b.n	800891e <_free_r+0x22>
 8008968:	d902      	bls.n	8008970 <_free_r+0x74>
 800896a:	230c      	movs	r3, #12
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	e7d6      	b.n	800891e <_free_r+0x22>
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	1821      	adds	r1, r4, r0
 8008974:	428b      	cmp	r3, r1
 8008976:	bf04      	itt	eq
 8008978:	6819      	ldreq	r1, [r3, #0]
 800897a:	685b      	ldreq	r3, [r3, #4]
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	bf04      	itt	eq
 8008980:	1809      	addeq	r1, r1, r0
 8008982:	6021      	streq	r1, [r4, #0]
 8008984:	6054      	str	r4, [r2, #4]
 8008986:	e7ca      	b.n	800891e <_free_r+0x22>
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	bf00      	nop
 800898c:	20000470 	.word	0x20000470

08008990 <sbrk_aligned>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	4e0f      	ldr	r6, [pc, #60]	@ (80089d0 <sbrk_aligned+0x40>)
 8008994:	460c      	mov	r4, r1
 8008996:	6831      	ldr	r1, [r6, #0]
 8008998:	4605      	mov	r5, r0
 800899a:	b911      	cbnz	r1, 80089a2 <sbrk_aligned+0x12>
 800899c:	f000 fcd6 	bl	800934c <_sbrk_r>
 80089a0:	6030      	str	r0, [r6, #0]
 80089a2:	4621      	mov	r1, r4
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 fcd1 	bl	800934c <_sbrk_r>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d103      	bne.n	80089b6 <sbrk_aligned+0x26>
 80089ae:	f04f 34ff 	mov.w	r4, #4294967295
 80089b2:	4620      	mov	r0, r4
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
 80089b6:	1cc4      	adds	r4, r0, #3
 80089b8:	f024 0403 	bic.w	r4, r4, #3
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d0f8      	beq.n	80089b2 <sbrk_aligned+0x22>
 80089c0:	1a21      	subs	r1, r4, r0
 80089c2:	4628      	mov	r0, r5
 80089c4:	f000 fcc2 	bl	800934c <_sbrk_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d1f2      	bne.n	80089b2 <sbrk_aligned+0x22>
 80089cc:	e7ef      	b.n	80089ae <sbrk_aligned+0x1e>
 80089ce:	bf00      	nop
 80089d0:	2000046c 	.word	0x2000046c

080089d4 <_malloc_r>:
 80089d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d8:	1ccd      	adds	r5, r1, #3
 80089da:	f025 0503 	bic.w	r5, r5, #3
 80089de:	3508      	adds	r5, #8
 80089e0:	2d0c      	cmp	r5, #12
 80089e2:	bf38      	it	cc
 80089e4:	250c      	movcc	r5, #12
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	4606      	mov	r6, r0
 80089ea:	db01      	blt.n	80089f0 <_malloc_r+0x1c>
 80089ec:	42a9      	cmp	r1, r5
 80089ee:	d904      	bls.n	80089fa <_malloc_r+0x26>
 80089f0:	230c      	movs	r3, #12
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	2000      	movs	r0, #0
 80089f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ad0 <_malloc_r+0xfc>
 80089fe:	f000 f869 	bl	8008ad4 <__malloc_lock>
 8008a02:	f8d8 3000 	ldr.w	r3, [r8]
 8008a06:	461c      	mov	r4, r3
 8008a08:	bb44      	cbnz	r4, 8008a5c <_malloc_r+0x88>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ffbf 	bl	8008990 <sbrk_aligned>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	4604      	mov	r4, r0
 8008a16:	d158      	bne.n	8008aca <_malloc_r+0xf6>
 8008a18:	f8d8 4000 	ldr.w	r4, [r8]
 8008a1c:	4627      	mov	r7, r4
 8008a1e:	2f00      	cmp	r7, #0
 8008a20:	d143      	bne.n	8008aaa <_malloc_r+0xd6>
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	d04b      	beq.n	8008abe <_malloc_r+0xea>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	4639      	mov	r1, r7
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	eb04 0903 	add.w	r9, r4, r3
 8008a30:	f000 fc8c 	bl	800934c <_sbrk_r>
 8008a34:	4581      	cmp	r9, r0
 8008a36:	d142      	bne.n	8008abe <_malloc_r+0xea>
 8008a38:	6821      	ldr	r1, [r4, #0]
 8008a3a:	1a6d      	subs	r5, r5, r1
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ffa6 	bl	8008990 <sbrk_aligned>
 8008a44:	3001      	adds	r0, #1
 8008a46:	d03a      	beq.n	8008abe <_malloc_r+0xea>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	442b      	add	r3, r5
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	bb62      	cbnz	r2, 8008ab0 <_malloc_r+0xdc>
 8008a56:	f8c8 7000 	str.w	r7, [r8]
 8008a5a:	e00f      	b.n	8008a7c <_malloc_r+0xa8>
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	1b52      	subs	r2, r2, r5
 8008a60:	d420      	bmi.n	8008aa4 <_malloc_r+0xd0>
 8008a62:	2a0b      	cmp	r2, #11
 8008a64:	d917      	bls.n	8008a96 <_malloc_r+0xc2>
 8008a66:	1961      	adds	r1, r4, r5
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	6025      	str	r5, [r4, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	6059      	strne	r1, [r3, #4]
 8008a70:	6863      	ldr	r3, [r4, #4]
 8008a72:	bf08      	it	eq
 8008a74:	f8c8 1000 	streq.w	r1, [r8]
 8008a78:	5162      	str	r2, [r4, r5]
 8008a7a:	604b      	str	r3, [r1, #4]
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f000 f82f 	bl	8008ae0 <__malloc_unlock>
 8008a82:	f104 000b 	add.w	r0, r4, #11
 8008a86:	1d23      	adds	r3, r4, #4
 8008a88:	f020 0007 	bic.w	r0, r0, #7
 8008a8c:	1ac2      	subs	r2, r0, r3
 8008a8e:	bf1c      	itt	ne
 8008a90:	1a1b      	subne	r3, r3, r0
 8008a92:	50a3      	strne	r3, [r4, r2]
 8008a94:	e7af      	b.n	80089f6 <_malloc_r+0x22>
 8008a96:	6862      	ldr	r2, [r4, #4]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	bf0c      	ite	eq
 8008a9c:	f8c8 2000 	streq.w	r2, [r8]
 8008aa0:	605a      	strne	r2, [r3, #4]
 8008aa2:	e7eb      	b.n	8008a7c <_malloc_r+0xa8>
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	6864      	ldr	r4, [r4, #4]
 8008aa8:	e7ae      	b.n	8008a08 <_malloc_r+0x34>
 8008aaa:	463c      	mov	r4, r7
 8008aac:	687f      	ldr	r7, [r7, #4]
 8008aae:	e7b6      	b.n	8008a1e <_malloc_r+0x4a>
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d1fb      	bne.n	8008ab0 <_malloc_r+0xdc>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6053      	str	r3, [r2, #4]
 8008abc:	e7de      	b.n	8008a7c <_malloc_r+0xa8>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	6033      	str	r3, [r6, #0]
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 f80c 	bl	8008ae0 <__malloc_unlock>
 8008ac8:	e794      	b.n	80089f4 <_malloc_r+0x20>
 8008aca:	6005      	str	r5, [r0, #0]
 8008acc:	e7d6      	b.n	8008a7c <_malloc_r+0xa8>
 8008ace:	bf00      	nop
 8008ad0:	20000470 	.word	0x20000470

08008ad4 <__malloc_lock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__malloc_lock+0x8>)
 8008ad6:	f7ff bf0e 	b.w	80088f6 <__retarget_lock_acquire_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000468 	.word	0x20000468

08008ae0 <__malloc_unlock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	@ (8008ae8 <__malloc_unlock+0x8>)
 8008ae2:	f7ff bf09 	b.w	80088f8 <__retarget_lock_release_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000468 	.word	0x20000468

08008aec <__ssputs_r>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	688e      	ldr	r6, [r1, #8]
 8008af2:	461f      	mov	r7, r3
 8008af4:	42be      	cmp	r6, r7
 8008af6:	680b      	ldr	r3, [r1, #0]
 8008af8:	4682      	mov	sl, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	4690      	mov	r8, r2
 8008afe:	d82d      	bhi.n	8008b5c <__ssputs_r+0x70>
 8008b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b08:	d026      	beq.n	8008b58 <__ssputs_r+0x6c>
 8008b0a:	6965      	ldr	r5, [r4, #20]
 8008b0c:	6909      	ldr	r1, [r1, #16]
 8008b0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b12:	eba3 0901 	sub.w	r9, r3, r1
 8008b16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b1a:	1c7b      	adds	r3, r7, #1
 8008b1c:	444b      	add	r3, r9
 8008b1e:	106d      	asrs	r5, r5, #1
 8008b20:	429d      	cmp	r5, r3
 8008b22:	bf38      	it	cc
 8008b24:	461d      	movcc	r5, r3
 8008b26:	0553      	lsls	r3, r2, #21
 8008b28:	d527      	bpl.n	8008b7a <__ssputs_r+0x8e>
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7ff ff52 	bl	80089d4 <_malloc_r>
 8008b30:	4606      	mov	r6, r0
 8008b32:	b360      	cbz	r0, 8008b8e <__ssputs_r+0xa2>
 8008b34:	6921      	ldr	r1, [r4, #16]
 8008b36:	464a      	mov	r2, r9
 8008b38:	f000 fc18 	bl	800936c <memcpy>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	6126      	str	r6, [r4, #16]
 8008b4a:	6165      	str	r5, [r4, #20]
 8008b4c:	444e      	add	r6, r9
 8008b4e:	eba5 0509 	sub.w	r5, r5, r9
 8008b52:	6026      	str	r6, [r4, #0]
 8008b54:	60a5      	str	r5, [r4, #8]
 8008b56:	463e      	mov	r6, r7
 8008b58:	42be      	cmp	r6, r7
 8008b5a:	d900      	bls.n	8008b5e <__ssputs_r+0x72>
 8008b5c:	463e      	mov	r6, r7
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	4632      	mov	r2, r6
 8008b62:	4641      	mov	r1, r8
 8008b64:	f000 fbb6 	bl	80092d4 <memmove>
 8008b68:	68a3      	ldr	r3, [r4, #8]
 8008b6a:	1b9b      	subs	r3, r3, r6
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	4433      	add	r3, r6
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	2000      	movs	r0, #0
 8008b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	f000 fc04 	bl	8009388 <_realloc_r>
 8008b80:	4606      	mov	r6, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1e0      	bne.n	8008b48 <__ssputs_r+0x5c>
 8008b86:	6921      	ldr	r1, [r4, #16]
 8008b88:	4650      	mov	r0, sl
 8008b8a:	f7ff feb7 	bl	80088fc <_free_r>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	f8ca 3000 	str.w	r3, [sl]
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e7e9      	b.n	8008b76 <__ssputs_r+0x8a>
	...

08008ba4 <_svfiprintf_r>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	4698      	mov	r8, r3
 8008baa:	898b      	ldrh	r3, [r1, #12]
 8008bac:	061b      	lsls	r3, r3, #24
 8008bae:	b09d      	sub	sp, #116	@ 0x74
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	d510      	bpl.n	8008bda <_svfiprintf_r+0x36>
 8008bb8:	690b      	ldr	r3, [r1, #16]
 8008bba:	b973      	cbnz	r3, 8008bda <_svfiprintf_r+0x36>
 8008bbc:	2140      	movs	r1, #64	@ 0x40
 8008bbe:	f7ff ff09 	bl	80089d4 <_malloc_r>
 8008bc2:	6028      	str	r0, [r5, #0]
 8008bc4:	6128      	str	r0, [r5, #16]
 8008bc6:	b930      	cbnz	r0, 8008bd6 <_svfiprintf_r+0x32>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	b01d      	add	sp, #116	@ 0x74
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	2340      	movs	r3, #64	@ 0x40
 8008bd8:	616b      	str	r3, [r5, #20]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bde:	2320      	movs	r3, #32
 8008be0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008be4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be8:	2330      	movs	r3, #48	@ 0x30
 8008bea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d88 <_svfiprintf_r+0x1e4>
 8008bee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bf2:	f04f 0901 	mov.w	r9, #1
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	469a      	mov	sl, r3
 8008bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfe:	b10a      	cbz	r2, 8008c04 <_svfiprintf_r+0x60>
 8008c00:	2a25      	cmp	r2, #37	@ 0x25
 8008c02:	d1f9      	bne.n	8008bf8 <_svfiprintf_r+0x54>
 8008c04:	ebba 0b04 	subs.w	fp, sl, r4
 8008c08:	d00b      	beq.n	8008c22 <_svfiprintf_r+0x7e>
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff ff6b 	bl	8008aec <__ssputs_r>
 8008c16:	3001      	adds	r0, #1
 8008c18:	f000 80a7 	beq.w	8008d6a <_svfiprintf_r+0x1c6>
 8008c1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c1e:	445a      	add	r2, fp
 8008c20:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c22:	f89a 3000 	ldrb.w	r3, [sl]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 809f 	beq.w	8008d6a <_svfiprintf_r+0x1c6>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c36:	f10a 0a01 	add.w	sl, sl, #1
 8008c3a:	9304      	str	r3, [sp, #16]
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c42:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c44:	4654      	mov	r4, sl
 8008c46:	2205      	movs	r2, #5
 8008c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4c:	484e      	ldr	r0, [pc, #312]	@ (8008d88 <_svfiprintf_r+0x1e4>)
 8008c4e:	f7f7 faff 	bl	8000250 <memchr>
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	b9d8      	cbnz	r0, 8008c8e <_svfiprintf_r+0xea>
 8008c56:	06d0      	lsls	r0, r2, #27
 8008c58:	bf44      	itt	mi
 8008c5a:	2320      	movmi	r3, #32
 8008c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c60:	0711      	lsls	r1, r2, #28
 8008c62:	bf44      	itt	mi
 8008c64:	232b      	movmi	r3, #43	@ 0x2b
 8008c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c70:	d015      	beq.n	8008c9e <_svfiprintf_r+0xfa>
 8008c72:	9a07      	ldr	r2, [sp, #28]
 8008c74:	4654      	mov	r4, sl
 8008c76:	2000      	movs	r0, #0
 8008c78:	f04f 0c0a 	mov.w	ip, #10
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c82:	3b30      	subs	r3, #48	@ 0x30
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d94b      	bls.n	8008d20 <_svfiprintf_r+0x17c>
 8008c88:	b1b0      	cbz	r0, 8008cb8 <_svfiprintf_r+0x114>
 8008c8a:	9207      	str	r2, [sp, #28]
 8008c8c:	e014      	b.n	8008cb8 <_svfiprintf_r+0x114>
 8008c8e:	eba0 0308 	sub.w	r3, r0, r8
 8008c92:	fa09 f303 	lsl.w	r3, r9, r3
 8008c96:	4313      	orrs	r3, r2
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	46a2      	mov	sl, r4
 8008c9c:	e7d2      	b.n	8008c44 <_svfiprintf_r+0xa0>
 8008c9e:	9b03      	ldr	r3, [sp, #12]
 8008ca0:	1d19      	adds	r1, r3, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	9103      	str	r1, [sp, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfbb      	ittet	lt
 8008caa:	425b      	neglt	r3, r3
 8008cac:	f042 0202 	orrlt.w	r2, r2, #2
 8008cb0:	9307      	strge	r3, [sp, #28]
 8008cb2:	9307      	strlt	r3, [sp, #28]
 8008cb4:	bfb8      	it	lt
 8008cb6:	9204      	strlt	r2, [sp, #16]
 8008cb8:	7823      	ldrb	r3, [r4, #0]
 8008cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cbc:	d10a      	bne.n	8008cd4 <_svfiprintf_r+0x130>
 8008cbe:	7863      	ldrb	r3, [r4, #1]
 8008cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cc2:	d132      	bne.n	8008d2a <_svfiprintf_r+0x186>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	1d1a      	adds	r2, r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	9203      	str	r2, [sp, #12]
 8008ccc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cd0:	3402      	adds	r4, #2
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d98 <_svfiprintf_r+0x1f4>
 8008cd8:	7821      	ldrb	r1, [r4, #0]
 8008cda:	2203      	movs	r2, #3
 8008cdc:	4650      	mov	r0, sl
 8008cde:	f7f7 fab7 	bl	8000250 <memchr>
 8008ce2:	b138      	cbz	r0, 8008cf4 <_svfiprintf_r+0x150>
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	eba0 000a 	sub.w	r0, r0, sl
 8008cea:	2240      	movs	r2, #64	@ 0x40
 8008cec:	4082      	lsls	r2, r0
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	3401      	adds	r4, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf8:	4824      	ldr	r0, [pc, #144]	@ (8008d8c <_svfiprintf_r+0x1e8>)
 8008cfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cfe:	2206      	movs	r2, #6
 8008d00:	f7f7 faa6 	bl	8000250 <memchr>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d036      	beq.n	8008d76 <_svfiprintf_r+0x1d2>
 8008d08:	4b21      	ldr	r3, [pc, #132]	@ (8008d90 <_svfiprintf_r+0x1ec>)
 8008d0a:	bb1b      	cbnz	r3, 8008d54 <_svfiprintf_r+0x1b0>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	3307      	adds	r3, #7
 8008d10:	f023 0307 	bic.w	r3, r3, #7
 8008d14:	3308      	adds	r3, #8
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1a:	4433      	add	r3, r6
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	e76a      	b.n	8008bf6 <_svfiprintf_r+0x52>
 8008d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d24:	460c      	mov	r4, r1
 8008d26:	2001      	movs	r0, #1
 8008d28:	e7a8      	b.n	8008c7c <_svfiprintf_r+0xd8>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	3401      	adds	r4, #1
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	4619      	mov	r1, r3
 8008d32:	f04f 0c0a 	mov.w	ip, #10
 8008d36:	4620      	mov	r0, r4
 8008d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3c:	3a30      	subs	r2, #48	@ 0x30
 8008d3e:	2a09      	cmp	r2, #9
 8008d40:	d903      	bls.n	8008d4a <_svfiprintf_r+0x1a6>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0c6      	beq.n	8008cd4 <_svfiprintf_r+0x130>
 8008d46:	9105      	str	r1, [sp, #20]
 8008d48:	e7c4      	b.n	8008cd4 <_svfiprintf_r+0x130>
 8008d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d4e:	4604      	mov	r4, r0
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7f0      	b.n	8008d36 <_svfiprintf_r+0x192>
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d94 <_svfiprintf_r+0x1f0>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f3af 8000 	nop.w
 8008d64:	1c42      	adds	r2, r0, #1
 8008d66:	4606      	mov	r6, r0
 8008d68:	d1d6      	bne.n	8008d18 <_svfiprintf_r+0x174>
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	065b      	lsls	r3, r3, #25
 8008d6e:	f53f af2d 	bmi.w	8008bcc <_svfiprintf_r+0x28>
 8008d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d74:	e72c      	b.n	8008bd0 <_svfiprintf_r+0x2c>
 8008d76:	ab03      	add	r3, sp, #12
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <_svfiprintf_r+0x1f0>)
 8008d7e:	a904      	add	r1, sp, #16
 8008d80:	4638      	mov	r0, r7
 8008d82:	f000 f879 	bl	8008e78 <_printf_i>
 8008d86:	e7ed      	b.n	8008d64 <_svfiprintf_r+0x1c0>
 8008d88:	08009695 	.word	0x08009695
 8008d8c:	0800969f 	.word	0x0800969f
 8008d90:	00000000 	.word	0x00000000
 8008d94:	08008aed 	.word	0x08008aed
 8008d98:	0800969b 	.word	0x0800969b

08008d9c <_printf_common>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	4616      	mov	r6, r2
 8008da2:	4698      	mov	r8, r3
 8008da4:	688a      	ldr	r2, [r1, #8]
 8008da6:	690b      	ldr	r3, [r1, #16]
 8008da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bfb8      	it	lt
 8008db0:	4613      	movlt	r3, r2
 8008db2:	6033      	str	r3, [r6, #0]
 8008db4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008db8:	4607      	mov	r7, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	b10a      	cbz	r2, 8008dc2 <_printf_common+0x26>
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	0699      	lsls	r1, r3, #26
 8008dc6:	bf42      	ittt	mi
 8008dc8:	6833      	ldrmi	r3, [r6, #0]
 8008dca:	3302      	addmi	r3, #2
 8008dcc:	6033      	strmi	r3, [r6, #0]
 8008dce:	6825      	ldr	r5, [r4, #0]
 8008dd0:	f015 0506 	ands.w	r5, r5, #6
 8008dd4:	d106      	bne.n	8008de4 <_printf_common+0x48>
 8008dd6:	f104 0a19 	add.w	sl, r4, #25
 8008dda:	68e3      	ldr	r3, [r4, #12]
 8008ddc:	6832      	ldr	r2, [r6, #0]
 8008dde:	1a9b      	subs	r3, r3, r2
 8008de0:	42ab      	cmp	r3, r5
 8008de2:	dc26      	bgt.n	8008e32 <_printf_common+0x96>
 8008de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008de8:	6822      	ldr	r2, [r4, #0]
 8008dea:	3b00      	subs	r3, #0
 8008dec:	bf18      	it	ne
 8008dee:	2301      	movne	r3, #1
 8008df0:	0692      	lsls	r2, r2, #26
 8008df2:	d42b      	bmi.n	8008e4c <_printf_common+0xb0>
 8008df4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008df8:	4641      	mov	r1, r8
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	47c8      	blx	r9
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d01e      	beq.n	8008e40 <_printf_common+0xa4>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	6922      	ldr	r2, [r4, #16]
 8008e06:	f003 0306 	and.w	r3, r3, #6
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	bf02      	ittt	eq
 8008e0e:	68e5      	ldreq	r5, [r4, #12]
 8008e10:	6833      	ldreq	r3, [r6, #0]
 8008e12:	1aed      	subeq	r5, r5, r3
 8008e14:	68a3      	ldr	r3, [r4, #8]
 8008e16:	bf0c      	ite	eq
 8008e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e1c:	2500      	movne	r5, #0
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	bfc4      	itt	gt
 8008e22:	1a9b      	subgt	r3, r3, r2
 8008e24:	18ed      	addgt	r5, r5, r3
 8008e26:	2600      	movs	r6, #0
 8008e28:	341a      	adds	r4, #26
 8008e2a:	42b5      	cmp	r5, r6
 8008e2c:	d11a      	bne.n	8008e64 <_printf_common+0xc8>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	e008      	b.n	8008e44 <_printf_common+0xa8>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4652      	mov	r2, sl
 8008e36:	4641      	mov	r1, r8
 8008e38:	4638      	mov	r0, r7
 8008e3a:	47c8      	blx	r9
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d103      	bne.n	8008e48 <_printf_common+0xac>
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e48:	3501      	adds	r5, #1
 8008e4a:	e7c6      	b.n	8008dda <_printf_common+0x3e>
 8008e4c:	18e1      	adds	r1, r4, r3
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	2030      	movs	r0, #48	@ 0x30
 8008e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e56:	4422      	add	r2, r4
 8008e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e60:	3302      	adds	r3, #2
 8008e62:	e7c7      	b.n	8008df4 <_printf_common+0x58>
 8008e64:	2301      	movs	r3, #1
 8008e66:	4622      	mov	r2, r4
 8008e68:	4641      	mov	r1, r8
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	47c8      	blx	r9
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d0e6      	beq.n	8008e40 <_printf_common+0xa4>
 8008e72:	3601      	adds	r6, #1
 8008e74:	e7d9      	b.n	8008e2a <_printf_common+0x8e>
	...

08008e78 <_printf_i>:
 8008e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	7e0f      	ldrb	r7, [r1, #24]
 8008e7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e80:	2f78      	cmp	r7, #120	@ 0x78
 8008e82:	4691      	mov	r9, r2
 8008e84:	4680      	mov	r8, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	469a      	mov	sl, r3
 8008e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e8e:	d807      	bhi.n	8008ea0 <_printf_i+0x28>
 8008e90:	2f62      	cmp	r7, #98	@ 0x62
 8008e92:	d80a      	bhi.n	8008eaa <_printf_i+0x32>
 8008e94:	2f00      	cmp	r7, #0
 8008e96:	f000 80d2 	beq.w	800903e <_printf_i+0x1c6>
 8008e9a:	2f58      	cmp	r7, #88	@ 0x58
 8008e9c:	f000 80b9 	beq.w	8009012 <_printf_i+0x19a>
 8008ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ea8:	e03a      	b.n	8008f20 <_printf_i+0xa8>
 8008eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eae:	2b15      	cmp	r3, #21
 8008eb0:	d8f6      	bhi.n	8008ea0 <_printf_i+0x28>
 8008eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8008eb8 <_printf_i+0x40>)
 8008eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb8:	08008f11 	.word	0x08008f11
 8008ebc:	08008f25 	.word	0x08008f25
 8008ec0:	08008ea1 	.word	0x08008ea1
 8008ec4:	08008ea1 	.word	0x08008ea1
 8008ec8:	08008ea1 	.word	0x08008ea1
 8008ecc:	08008ea1 	.word	0x08008ea1
 8008ed0:	08008f25 	.word	0x08008f25
 8008ed4:	08008ea1 	.word	0x08008ea1
 8008ed8:	08008ea1 	.word	0x08008ea1
 8008edc:	08008ea1 	.word	0x08008ea1
 8008ee0:	08008ea1 	.word	0x08008ea1
 8008ee4:	08009025 	.word	0x08009025
 8008ee8:	08008f4f 	.word	0x08008f4f
 8008eec:	08008fdf 	.word	0x08008fdf
 8008ef0:	08008ea1 	.word	0x08008ea1
 8008ef4:	08008ea1 	.word	0x08008ea1
 8008ef8:	08009047 	.word	0x08009047
 8008efc:	08008ea1 	.word	0x08008ea1
 8008f00:	08008f4f 	.word	0x08008f4f
 8008f04:	08008ea1 	.word	0x08008ea1
 8008f08:	08008ea1 	.word	0x08008ea1
 8008f0c:	08008fe7 	.word	0x08008fe7
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6032      	str	r2, [r6, #0]
 8008f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f20:	2301      	movs	r3, #1
 8008f22:	e09d      	b.n	8009060 <_printf_i+0x1e8>
 8008f24:	6833      	ldr	r3, [r6, #0]
 8008f26:	6820      	ldr	r0, [r4, #0]
 8008f28:	1d19      	adds	r1, r3, #4
 8008f2a:	6031      	str	r1, [r6, #0]
 8008f2c:	0606      	lsls	r6, r0, #24
 8008f2e:	d501      	bpl.n	8008f34 <_printf_i+0xbc>
 8008f30:	681d      	ldr	r5, [r3, #0]
 8008f32:	e003      	b.n	8008f3c <_printf_i+0xc4>
 8008f34:	0645      	lsls	r5, r0, #25
 8008f36:	d5fb      	bpl.n	8008f30 <_printf_i+0xb8>
 8008f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	da03      	bge.n	8008f48 <_printf_i+0xd0>
 8008f40:	232d      	movs	r3, #45	@ 0x2d
 8008f42:	426d      	negs	r5, r5
 8008f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f48:	4859      	ldr	r0, [pc, #356]	@ (80090b0 <_printf_i+0x238>)
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	e011      	b.n	8008f72 <_printf_i+0xfa>
 8008f4e:	6821      	ldr	r1, [r4, #0]
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	0608      	lsls	r0, r1, #24
 8008f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f58:	d402      	bmi.n	8008f60 <_printf_i+0xe8>
 8008f5a:	0649      	lsls	r1, r1, #25
 8008f5c:	bf48      	it	mi
 8008f5e:	b2ad      	uxthmi	r5, r5
 8008f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f62:	4853      	ldr	r0, [pc, #332]	@ (80090b0 <_printf_i+0x238>)
 8008f64:	6033      	str	r3, [r6, #0]
 8008f66:	bf14      	ite	ne
 8008f68:	230a      	movne	r3, #10
 8008f6a:	2308      	moveq	r3, #8
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f72:	6866      	ldr	r6, [r4, #4]
 8008f74:	60a6      	str	r6, [r4, #8]
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	bfa2      	ittt	ge
 8008f7a:	6821      	ldrge	r1, [r4, #0]
 8008f7c:	f021 0104 	bicge.w	r1, r1, #4
 8008f80:	6021      	strge	r1, [r4, #0]
 8008f82:	b90d      	cbnz	r5, 8008f88 <_printf_i+0x110>
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	d04b      	beq.n	8009020 <_printf_i+0x1a8>
 8008f88:	4616      	mov	r6, r2
 8008f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f92:	5dc7      	ldrb	r7, [r0, r7]
 8008f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f98:	462f      	mov	r7, r5
 8008f9a:	42bb      	cmp	r3, r7
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	d9f4      	bls.n	8008f8a <_printf_i+0x112>
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d10b      	bne.n	8008fbc <_printf_i+0x144>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	07df      	lsls	r7, r3, #31
 8008fa8:	d508      	bpl.n	8008fbc <_printf_i+0x144>
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	bfde      	ittt	le
 8008fb2:	2330      	movle	r3, #48	@ 0x30
 8008fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fbc:	1b92      	subs	r2, r2, r6
 8008fbe:	6122      	str	r2, [r4, #16]
 8008fc0:	f8cd a000 	str.w	sl, [sp]
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	aa03      	add	r2, sp, #12
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4640      	mov	r0, r8
 8008fcc:	f7ff fee6 	bl	8008d9c <_printf_common>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d14a      	bne.n	800906a <_printf_i+0x1f2>
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b004      	add	sp, #16
 8008fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	f043 0320 	orr.w	r3, r3, #32
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	4833      	ldr	r0, [pc, #204]	@ (80090b4 <_printf_i+0x23c>)
 8008fe8:	2778      	movs	r7, #120	@ 0x78
 8008fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	6831      	ldr	r1, [r6, #0]
 8008ff2:	061f      	lsls	r7, r3, #24
 8008ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ff8:	d402      	bmi.n	8009000 <_printf_i+0x188>
 8008ffa:	065f      	lsls	r7, r3, #25
 8008ffc:	bf48      	it	mi
 8008ffe:	b2ad      	uxthmi	r5, r5
 8009000:	6031      	str	r1, [r6, #0]
 8009002:	07d9      	lsls	r1, r3, #31
 8009004:	bf44      	itt	mi
 8009006:	f043 0320 	orrmi.w	r3, r3, #32
 800900a:	6023      	strmi	r3, [r4, #0]
 800900c:	b11d      	cbz	r5, 8009016 <_printf_i+0x19e>
 800900e:	2310      	movs	r3, #16
 8009010:	e7ac      	b.n	8008f6c <_printf_i+0xf4>
 8009012:	4827      	ldr	r0, [pc, #156]	@ (80090b0 <_printf_i+0x238>)
 8009014:	e7e9      	b.n	8008fea <_printf_i+0x172>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	f023 0320 	bic.w	r3, r3, #32
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	e7f6      	b.n	800900e <_printf_i+0x196>
 8009020:	4616      	mov	r6, r2
 8009022:	e7bd      	b.n	8008fa0 <_printf_i+0x128>
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	6825      	ldr	r5, [r4, #0]
 8009028:	6961      	ldr	r1, [r4, #20]
 800902a:	1d18      	adds	r0, r3, #4
 800902c:	6030      	str	r0, [r6, #0]
 800902e:	062e      	lsls	r6, r5, #24
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	d501      	bpl.n	8009038 <_printf_i+0x1c0>
 8009034:	6019      	str	r1, [r3, #0]
 8009036:	e002      	b.n	800903e <_printf_i+0x1c6>
 8009038:	0668      	lsls	r0, r5, #25
 800903a:	d5fb      	bpl.n	8009034 <_printf_i+0x1bc>
 800903c:	8019      	strh	r1, [r3, #0]
 800903e:	2300      	movs	r3, #0
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	4616      	mov	r6, r2
 8009044:	e7bc      	b.n	8008fc0 <_printf_i+0x148>
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	6032      	str	r2, [r6, #0]
 800904c:	681e      	ldr	r6, [r3, #0]
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	2100      	movs	r1, #0
 8009052:	4630      	mov	r0, r6
 8009054:	f7f7 f8fc 	bl	8000250 <memchr>
 8009058:	b108      	cbz	r0, 800905e <_printf_i+0x1e6>
 800905a:	1b80      	subs	r0, r0, r6
 800905c:	6060      	str	r0, [r4, #4]
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	2300      	movs	r3, #0
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009068:	e7aa      	b.n	8008fc0 <_printf_i+0x148>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	4632      	mov	r2, r6
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d0ad      	beq.n	8008fd4 <_printf_i+0x15c>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	079b      	lsls	r3, r3, #30
 800907c:	d413      	bmi.n	80090a6 <_printf_i+0x22e>
 800907e:	68e0      	ldr	r0, [r4, #12]
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	4298      	cmp	r0, r3
 8009084:	bfb8      	it	lt
 8009086:	4618      	movlt	r0, r3
 8009088:	e7a6      	b.n	8008fd8 <_printf_i+0x160>
 800908a:	2301      	movs	r3, #1
 800908c:	4632      	mov	r2, r6
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d09d      	beq.n	8008fd4 <_printf_i+0x15c>
 8009098:	3501      	adds	r5, #1
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	9903      	ldr	r1, [sp, #12]
 800909e:	1a5b      	subs	r3, r3, r1
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dcf2      	bgt.n	800908a <_printf_i+0x212>
 80090a4:	e7eb      	b.n	800907e <_printf_i+0x206>
 80090a6:	2500      	movs	r5, #0
 80090a8:	f104 0619 	add.w	r6, r4, #25
 80090ac:	e7f5      	b.n	800909a <_printf_i+0x222>
 80090ae:	bf00      	nop
 80090b0:	080096a6 	.word	0x080096a6
 80090b4:	080096b7 	.word	0x080096b7

080090b8 <__sflush_r>:
 80090b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	0716      	lsls	r6, r2, #28
 80090c2:	4605      	mov	r5, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	d454      	bmi.n	8009172 <__sflush_r+0xba>
 80090c8:	684b      	ldr	r3, [r1, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x1c>
 80090ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dd48      	ble.n	8009166 <__sflush_r+0xae>
 80090d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d045      	beq.n	8009166 <__sflush_r+0xae>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	6a21      	ldr	r1, [r4, #32]
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	d030      	beq.n	800914a <__sflush_r+0x92>
 80090e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	0759      	lsls	r1, r3, #29
 80090ee:	d505      	bpl.n	80090fc <__sflush_r+0x44>
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	1ad2      	subs	r2, r2, r3
 80090f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090f6:	b10b      	cbz	r3, 80090fc <__sflush_r+0x44>
 80090f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	2300      	movs	r3, #0
 80090fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009100:	6a21      	ldr	r1, [r4, #32]
 8009102:	4628      	mov	r0, r5
 8009104:	47b0      	blx	r6
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	d106      	bne.n	800911a <__sflush_r+0x62>
 800910c:	6829      	ldr	r1, [r5, #0]
 800910e:	291d      	cmp	r1, #29
 8009110:	d82b      	bhi.n	800916a <__sflush_r+0xb2>
 8009112:	4a2a      	ldr	r2, [pc, #168]	@ (80091bc <__sflush_r+0x104>)
 8009114:	410a      	asrs	r2, r1
 8009116:	07d6      	lsls	r6, r2, #31
 8009118:	d427      	bmi.n	800916a <__sflush_r+0xb2>
 800911a:	2200      	movs	r2, #0
 800911c:	6062      	str	r2, [r4, #4]
 800911e:	04d9      	lsls	r1, r3, #19
 8009120:	6922      	ldr	r2, [r4, #16]
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	d504      	bpl.n	8009130 <__sflush_r+0x78>
 8009126:	1c42      	adds	r2, r0, #1
 8009128:	d101      	bne.n	800912e <__sflush_r+0x76>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b903      	cbnz	r3, 8009130 <__sflush_r+0x78>
 800912e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009132:	602f      	str	r7, [r5, #0]
 8009134:	b1b9      	cbz	r1, 8009166 <__sflush_r+0xae>
 8009136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800913a:	4299      	cmp	r1, r3
 800913c:	d002      	beq.n	8009144 <__sflush_r+0x8c>
 800913e:	4628      	mov	r0, r5
 8009140:	f7ff fbdc 	bl	80088fc <_free_r>
 8009144:	2300      	movs	r3, #0
 8009146:	6363      	str	r3, [r4, #52]	@ 0x34
 8009148:	e00d      	b.n	8009166 <__sflush_r+0xae>
 800914a:	2301      	movs	r3, #1
 800914c:	4628      	mov	r0, r5
 800914e:	47b0      	blx	r6
 8009150:	4602      	mov	r2, r0
 8009152:	1c50      	adds	r0, r2, #1
 8009154:	d1c9      	bne.n	80090ea <__sflush_r+0x32>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0c6      	beq.n	80090ea <__sflush_r+0x32>
 800915c:	2b1d      	cmp	r3, #29
 800915e:	d001      	beq.n	8009164 <__sflush_r+0xac>
 8009160:	2b16      	cmp	r3, #22
 8009162:	d11e      	bne.n	80091a2 <__sflush_r+0xea>
 8009164:	602f      	str	r7, [r5, #0]
 8009166:	2000      	movs	r0, #0
 8009168:	e022      	b.n	80091b0 <__sflush_r+0xf8>
 800916a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800916e:	b21b      	sxth	r3, r3
 8009170:	e01b      	b.n	80091aa <__sflush_r+0xf2>
 8009172:	690f      	ldr	r7, [r1, #16]
 8009174:	2f00      	cmp	r7, #0
 8009176:	d0f6      	beq.n	8009166 <__sflush_r+0xae>
 8009178:	0793      	lsls	r3, r2, #30
 800917a:	680e      	ldr	r6, [r1, #0]
 800917c:	bf08      	it	eq
 800917e:	694b      	ldreq	r3, [r1, #20]
 8009180:	600f      	str	r7, [r1, #0]
 8009182:	bf18      	it	ne
 8009184:	2300      	movne	r3, #0
 8009186:	eba6 0807 	sub.w	r8, r6, r7
 800918a:	608b      	str	r3, [r1, #8]
 800918c:	f1b8 0f00 	cmp.w	r8, #0
 8009190:	dde9      	ble.n	8009166 <__sflush_r+0xae>
 8009192:	6a21      	ldr	r1, [r4, #32]
 8009194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009196:	4643      	mov	r3, r8
 8009198:	463a      	mov	r2, r7
 800919a:	4628      	mov	r0, r5
 800919c:	47b0      	blx	r6
 800919e:	2800      	cmp	r0, #0
 80091a0:	dc08      	bgt.n	80091b4 <__sflush_r+0xfc>
 80091a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b4:	4407      	add	r7, r0
 80091b6:	eba8 0800 	sub.w	r8, r8, r0
 80091ba:	e7e7      	b.n	800918c <__sflush_r+0xd4>
 80091bc:	dfbffffe 	.word	0xdfbffffe

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6a03      	ldr	r3, [r0, #32]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f7ff f963 	bl	80084a0 <__sinit>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f3      	beq.n	80091ca <_fflush_r+0xa>
 80091e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091e4:	07d0      	lsls	r0, r2, #31
 80091e6:	d404      	bmi.n	80091f2 <_fflush_r+0x32>
 80091e8:	0599      	lsls	r1, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_fflush_r+0x32>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f7ff fb82 	bl	80088f6 <__retarget_lock_acquire_recursive>
 80091f2:	4628      	mov	r0, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7ff ff5f 	bl	80090b8 <__sflush_r>
 80091fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091fc:	07da      	lsls	r2, r3, #31
 80091fe:	4605      	mov	r5, r0
 8009200:	d4e4      	bmi.n	80091cc <_fflush_r+0xc>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	059b      	lsls	r3, r3, #22
 8009206:	d4e1      	bmi.n	80091cc <_fflush_r+0xc>
 8009208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800920a:	f7ff fb75 	bl	80088f8 <__retarget_lock_release_recursive>
 800920e:	e7dd      	b.n	80091cc <_fflush_r+0xc>

08009210 <__swhatbuf_r>:
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	460c      	mov	r4, r1
 8009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009218:	2900      	cmp	r1, #0
 800921a:	b096      	sub	sp, #88	@ 0x58
 800921c:	4615      	mov	r5, r2
 800921e:	461e      	mov	r6, r3
 8009220:	da0d      	bge.n	800923e <__swhatbuf_r+0x2e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009228:	f04f 0100 	mov.w	r1, #0
 800922c:	bf14      	ite	ne
 800922e:	2340      	movne	r3, #64	@ 0x40
 8009230:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009234:	2000      	movs	r0, #0
 8009236:	6031      	str	r1, [r6, #0]
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	b016      	add	sp, #88	@ 0x58
 800923c:	bd70      	pop	{r4, r5, r6, pc}
 800923e:	466a      	mov	r2, sp
 8009240:	f000 f862 	bl	8009308 <_fstat_r>
 8009244:	2800      	cmp	r0, #0
 8009246:	dbec      	blt.n	8009222 <__swhatbuf_r+0x12>
 8009248:	9901      	ldr	r1, [sp, #4]
 800924a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800924e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009252:	4259      	negs	r1, r3
 8009254:	4159      	adcs	r1, r3
 8009256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800925a:	e7eb      	b.n	8009234 <__swhatbuf_r+0x24>

0800925c <__smakebuf_r>:
 800925c:	898b      	ldrh	r3, [r1, #12]
 800925e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009260:	079d      	lsls	r5, r3, #30
 8009262:	4606      	mov	r6, r0
 8009264:	460c      	mov	r4, r1
 8009266:	d507      	bpl.n	8009278 <__smakebuf_r+0x1c>
 8009268:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	2301      	movs	r3, #1
 8009272:	6163      	str	r3, [r4, #20]
 8009274:	b003      	add	sp, #12
 8009276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009278:	ab01      	add	r3, sp, #4
 800927a:	466a      	mov	r2, sp
 800927c:	f7ff ffc8 	bl	8009210 <__swhatbuf_r>
 8009280:	9f00      	ldr	r7, [sp, #0]
 8009282:	4605      	mov	r5, r0
 8009284:	4639      	mov	r1, r7
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff fba4 	bl	80089d4 <_malloc_r>
 800928c:	b948      	cbnz	r0, 80092a2 <__smakebuf_r+0x46>
 800928e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009292:	059a      	lsls	r2, r3, #22
 8009294:	d4ee      	bmi.n	8009274 <__smakebuf_r+0x18>
 8009296:	f023 0303 	bic.w	r3, r3, #3
 800929a:	f043 0302 	orr.w	r3, r3, #2
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	e7e2      	b.n	8009268 <__smakebuf_r+0xc>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	6020      	str	r0, [r4, #0]
 80092a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092b2:	b15b      	cbz	r3, 80092cc <__smakebuf_r+0x70>
 80092b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 f837 	bl	800932c <_isatty_r>
 80092be:	b128      	cbz	r0, 80092cc <__smakebuf_r+0x70>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	431d      	orrs	r5, r3
 80092d0:	81a5      	strh	r5, [r4, #12]
 80092d2:	e7cf      	b.n	8009274 <__smakebuf_r+0x18>

080092d4 <memmove>:
 80092d4:	4288      	cmp	r0, r1
 80092d6:	b510      	push	{r4, lr}
 80092d8:	eb01 0402 	add.w	r4, r1, r2
 80092dc:	d902      	bls.n	80092e4 <memmove+0x10>
 80092de:	4284      	cmp	r4, r0
 80092e0:	4623      	mov	r3, r4
 80092e2:	d807      	bhi.n	80092f4 <memmove+0x20>
 80092e4:	1e43      	subs	r3, r0, #1
 80092e6:	42a1      	cmp	r1, r4
 80092e8:	d008      	beq.n	80092fc <memmove+0x28>
 80092ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092f2:	e7f8      	b.n	80092e6 <memmove+0x12>
 80092f4:	4402      	add	r2, r0
 80092f6:	4601      	mov	r1, r0
 80092f8:	428a      	cmp	r2, r1
 80092fa:	d100      	bne.n	80092fe <memmove+0x2a>
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009306:	e7f7      	b.n	80092f8 <memmove+0x24>

08009308 <_fstat_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4d07      	ldr	r5, [pc, #28]	@ (8009328 <_fstat_r+0x20>)
 800930c:	2300      	movs	r3, #0
 800930e:	4604      	mov	r4, r0
 8009310:	4608      	mov	r0, r1
 8009312:	4611      	mov	r1, r2
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	f7f7 feee 	bl	80010f6 <_fstat>
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	d102      	bne.n	8009324 <_fstat_r+0x1c>
 800931e:	682b      	ldr	r3, [r5, #0]
 8009320:	b103      	cbz	r3, 8009324 <_fstat_r+0x1c>
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	bd38      	pop	{r3, r4, r5, pc}
 8009326:	bf00      	nop
 8009328:	20000464 	.word	0x20000464

0800932c <_isatty_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d06      	ldr	r5, [pc, #24]	@ (8009348 <_isatty_r+0x1c>)
 8009330:	2300      	movs	r3, #0
 8009332:	4604      	mov	r4, r0
 8009334:	4608      	mov	r0, r1
 8009336:	602b      	str	r3, [r5, #0]
 8009338:	f7f7 feed 	bl	8001116 <_isatty>
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	d102      	bne.n	8009346 <_isatty_r+0x1a>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	b103      	cbz	r3, 8009346 <_isatty_r+0x1a>
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	bd38      	pop	{r3, r4, r5, pc}
 8009348:	20000464 	.word	0x20000464

0800934c <_sbrk_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4d06      	ldr	r5, [pc, #24]	@ (8009368 <_sbrk_r+0x1c>)
 8009350:	2300      	movs	r3, #0
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	602b      	str	r3, [r5, #0]
 8009358:	f7f7 fef6 	bl	8001148 <_sbrk>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_sbrk_r+0x1a>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_sbrk_r+0x1a>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	20000464 	.word	0x20000464

0800936c <memcpy>:
 800936c:	440a      	add	r2, r1
 800936e:	4291      	cmp	r1, r2
 8009370:	f100 33ff 	add.w	r3, r0, #4294967295
 8009374:	d100      	bne.n	8009378 <memcpy+0xc>
 8009376:	4770      	bx	lr
 8009378:	b510      	push	{r4, lr}
 800937a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009382:	4291      	cmp	r1, r2
 8009384:	d1f9      	bne.n	800937a <memcpy+0xe>
 8009386:	bd10      	pop	{r4, pc}

08009388 <_realloc_r>:
 8009388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	4680      	mov	r8, r0
 800938e:	4615      	mov	r5, r2
 8009390:	460c      	mov	r4, r1
 8009392:	b921      	cbnz	r1, 800939e <_realloc_r+0x16>
 8009394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	4611      	mov	r1, r2
 800939a:	f7ff bb1b 	b.w	80089d4 <_malloc_r>
 800939e:	b92a      	cbnz	r2, 80093ac <_realloc_r+0x24>
 80093a0:	f7ff faac 	bl	80088fc <_free_r>
 80093a4:	2400      	movs	r4, #0
 80093a6:	4620      	mov	r0, r4
 80093a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ac:	f000 f81a 	bl	80093e4 <_malloc_usable_size_r>
 80093b0:	4285      	cmp	r5, r0
 80093b2:	4606      	mov	r6, r0
 80093b4:	d802      	bhi.n	80093bc <_realloc_r+0x34>
 80093b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093ba:	d8f4      	bhi.n	80093a6 <_realloc_r+0x1e>
 80093bc:	4629      	mov	r1, r5
 80093be:	4640      	mov	r0, r8
 80093c0:	f7ff fb08 	bl	80089d4 <_malloc_r>
 80093c4:	4607      	mov	r7, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d0ec      	beq.n	80093a4 <_realloc_r+0x1c>
 80093ca:	42b5      	cmp	r5, r6
 80093cc:	462a      	mov	r2, r5
 80093ce:	4621      	mov	r1, r4
 80093d0:	bf28      	it	cs
 80093d2:	4632      	movcs	r2, r6
 80093d4:	f7ff ffca 	bl	800936c <memcpy>
 80093d8:	4621      	mov	r1, r4
 80093da:	4640      	mov	r0, r8
 80093dc:	f7ff fa8e 	bl	80088fc <_free_r>
 80093e0:	463c      	mov	r4, r7
 80093e2:	e7e0      	b.n	80093a6 <_realloc_r+0x1e>

080093e4 <_malloc_usable_size_r>:
 80093e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e8:	1f18      	subs	r0, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bfbc      	itt	lt
 80093ee:	580b      	ldrlt	r3, [r1, r0]
 80093f0:	18c0      	addlt	r0, r0, r3
 80093f2:	4770      	bx	lr

080093f4 <_init>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr

08009400 <_fini>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr
