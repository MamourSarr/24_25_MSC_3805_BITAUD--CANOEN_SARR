
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0000702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800603c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000000c  08006048  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006048  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001773e  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  0001f77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcc  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ae3  00000000  00000000  00024604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017089  00000000  00000000  0004c0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ea9e  00000000  00000000  00063170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c0  00000000  00000000  00171c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00177414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005fc0 	.word	0x08005fc0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005fc0 	.word	0x08005fc0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 ffa8 	bl	8001462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f82b 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fb2b 	bl	8000b70 <MX_GPIO_Init>
  MX_ADC2_Init();
 800051a:	f000 f8e9 	bl	80006f0 <MX_ADC2_Init>
  MX_ADC1_Init();
 800051e:	f000 f86f 	bl	8000600 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000522:	f000 fa2d 	bl	8000980 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000526:	f000 fad7 	bl	8000ad8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f991 	bl	8000850 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052e:	f000 f9db 	bl	80008e8 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000532:	f000 f943 	bl	80007bc <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t msg[] = "Hello ENSEA ! \r\n";
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <main+0x5c>)
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	682b      	ldr	r3, [r5, #0]
 8000542:	7023      	strb	r3, [r4, #0]
	  if(HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg), 10) != HAL_OK)
 8000544:	1d39      	adds	r1, r7, #4
 8000546:	230a      	movs	r3, #10
 8000548:	2211      	movs	r2, #17
 800054a:	4807      	ldr	r0, [pc, #28]	@ (8000568 <main+0x60>)
 800054c:	f004 fe60 	bl	8005210 <HAL_UART_Transmit>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <main+0x52>
		  Error_Handler();
 8000556:	f000 fbad 	bl	8000cb4 <Error_Handler>
	  HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	@ 0x64
 800055c:	f000 ffb8 	bl	80014d0 <HAL_Delay>
  {
 8000560:	e7e9      	b.n	8000536 <main+0x2e>
 8000562:	bf00      	nop
 8000564:	08005fd8 	.word	0x08005fd8
 8000568:	20000100 	.word	0x20000100

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2238      	movs	r2, #56	@ 0x38
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 fcf4 	bl	8005f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800058e:	2000      	movs	r0, #0
 8000590:	f002 fb5e 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800059c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	2303      	movs	r3, #3
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005a6:	2306      	movs	r3, #6
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005aa:	2355      	movs	r3, #85	@ 0x55
 80005ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fbfa 	bl	8002db8 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005ca:	f000 fb73 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fef8 	bl	80033dc <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005f2:	f000 fb5f 	bl	8000cb4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	@ 0x30
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fca5 	bl	8005f68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000620:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000624:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000628:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800063a:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000648:	2204      	movs	r2, #4
 800064a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800065a:	2201      	movs	r2, #1
 800065c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 800068a:	f001 f919 	bl	80018c0 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000694:	f000 fb0e 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800069c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 80006a4:	f001 ff2e 	bl	8002504 <HAL_ADCEx_MultiModeConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ae:	f000 fb01 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_ADC1_Init+0xec>)
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b6:	2306      	movs	r3, #6
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006be:	237f      	movs	r3, #127	@ 0x7f
 80006c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c2:	2304      	movs	r3, #4
 80006c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MX_ADC1_Init+0xe8>)
 80006d0:	f001 fab2 	bl	8001c38 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006da:	f000 faeb 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	@ 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028
 80006ec:	21800100 	.word	0x21800100

080006f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2220      	movs	r2, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fc33 	bl	8005f68 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000704:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <MX_ADC2_Init+0xc4>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800070a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800070e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800072a:	2204      	movs	r2, #4
 800072c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800073c:	2201      	movs	r2, #1
 800073e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 800076c:	f001 f8a8 	bl	80018c0 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000776:	f000 fa9d 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_ADC2_Init+0xc8>)
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077e:	2306      	movs	r3, #6
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000786:	237f      	movs	r3, #127	@ 0x7f
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078a:	2304      	movs	r3, #4
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_ADC2_Init+0xc0>)
 8000798:	f001 fa4e 	bl	8001c38 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007a2:	f000 fa87 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000094 	.word	0x20000094
 80007b4:	50000100 	.word	0x50000100
 80007b8:	19200040 	.word	0x19200040

080007bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <MX_LPUART1_UART_Init+0x90>)
 80007c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	f004 fcb6 	bl	8005170 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fa53 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	f005 fadf 	bl	8005dd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800081c:	f000 fa4a 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000824:	f005 fb14 	bl	8005e50 <HAL_UARTEx_SetRxFifoThreshold>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800082e:	f000 fa41 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000834:	f005 fa95 	bl	8005d62 <HAL_UARTEx_DisableFifoMode>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800083e:	f000 fa39 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000100 	.word	0x20000100
 800084c:	40008000 	.word	0x40008000

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	@ (80008e4 <MX_USART2_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 800089a:	f004 fc69 	bl	8005170 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 fa06 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 80008ac:	f005 fa92 	bl	8005dd4 <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f9fd 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 80008be:	f005 fac7 	bl	8005e50 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 f9f4 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_USART2_UART_Init+0x90>)
 80008ce:	f005 fa48 	bl	8005d62 <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f9ec 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000194 	.word	0x20000194
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	@ (800097c <MX_USART3_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000932:	f004 fc1d 	bl	8005170 <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f9ba 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000944:	f005 fa46 	bl	8005dd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f9b1 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000956:	f005 fa7b 	bl	8005e50 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f9a8 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_USART3_UART_Init+0x90>)
 8000966:	f005 f9fc 	bl	8005d62 <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f9a0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000228 	.word	0x20000228
 800097c:	40004800 	.word	0x40004800

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b098      	sub	sp, #96	@ 0x60
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000992:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2234      	movs	r2, #52	@ 0x34
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 fadb 	bl	8005f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009b4:	4a47      	ldr	r2, [pc, #284]	@ (8000ad4 <MX_TIM1_Init+0x154>)
 80009b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b8:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b44      	ldr	r3, [pc, #272]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c4:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009de:	483c      	ldr	r0, [pc, #240]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 80009e0:	f003 fa72 	bl	8003ec8 <HAL_TIM_PWM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f963 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009fe:	4619      	mov	r1, r3
 8000a00:	4833      	ldr	r0, [pc, #204]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a02:	f004 fa45 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 f952 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	@ 0x60
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	4826      	ldr	r0, [pc, #152]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a36:	f003 fbed 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a40:	f000 f938 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a4e:	f003 fbe1 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a58:	f000 f92c 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a60:	2208      	movs	r2, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	481a      	ldr	r0, [pc, #104]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000a66:	f003 fbd5 	bl	8004214 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000a70:	f000 f920 	bl	8000cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000ab2:	f004 fa83 	bl	8004fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000abc:	f000 f8fa 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM1_Init+0x150>)
 8000ac2:	f000 fb7d 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000ac6:	bf00      	nop
 8000ac8:	3760      	adds	r7, #96	@ 0x60
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200002bc 	.word	0x200002bc
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000af8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <MX_TIM3_Init+0x94>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b34:	f004 f8fc 	bl	8004d30 <HAL_TIMEx_HallSensor_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 f8b9 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000b42:	2350      	movs	r3, #80	@ 0x50
 8000b44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <MX_TIM3_Init+0x90>)
 8000b50:	f004 f99e 	bl	8004e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b5a:	f000 f8ab 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000308 	.word	0x20000308
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b3f      	ldr	r3, [pc, #252]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4b3c      	ldr	r3, [pc, #240]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9e:	4b39      	ldr	r3, [pc, #228]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4a38      	ldr	r2, [pc, #224]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b33      	ldr	r3, [pc, #204]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a32      	ldr	r2, [pc, #200]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <MX_GPIO_Init+0x114>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2120      	movs	r1, #32
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c06:	f001 ffe7 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	481e      	ldr	r0, [pc, #120]	@ (8000c88 <MX_GPIO_Init+0x118>)
 8000c10:	f001 ffe2 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	@ (8000c8c <MX_GPIO_Init+0x11c>)
 8000c2c:	f001 fe52 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000c30:	2320      	movs	r3, #32
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4a:	f001 fe43 	bl	80028d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <MX_GPIO_Init+0x118>)
 8000c66:	f001 fe35 	bl	80028d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2028      	movs	r0, #40	@ 0x28
 8000c70:	f001 fe08 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c74:	2028      	movs	r0, #40	@ 0x28
 8000c76:	f001 fe1f 	bl	80028b8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	48000800 	.word	0x48000800

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca2:	f000 fbf7 	bl	8001494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cf6:	f002 f84f 	bl	8002d98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0a4      	sub	sp, #144	@ 0x90
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d24:	2254      	movs	r2, #84	@ 0x54
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 f91d 	bl	8005f68 <memset>
  if(hadc->Instance==ADC1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d36:	d174      	bne.n	8000e22 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fd95 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d54:	f7ff ffae 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d58:	4b63      	ldr	r3, [pc, #396]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a62      	ldr	r2, [pc, #392]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000d60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d62:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10b      	bne.n	8000d82 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d6a:	4b60      	ldr	r3, [pc, #384]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b5d      	ldr	r3, [pc, #372]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b5a      	ldr	r3, [pc, #360]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a59      	ldr	r2, [pc, #356]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b57      	ldr	r3, [pc, #348]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	623b      	str	r3, [r7, #32]
 8000d98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b54      	ldr	r3, [pc, #336]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a53      	ldr	r2, [pc, #332]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b51      	ldr	r3, [pc, #324]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b4e      	ldr	r3, [pc, #312]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a4d      	ldr	r2, [pc, #308]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4843      	ldr	r0, [pc, #268]	@ (8000ef0 <HAL_ADC_MspInit+0x1e8>)
 8000de2:	f001 fd77 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000de6:	2302      	movs	r3, #2
 8000de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e00:	f001 fd68 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e04:	2303      	movs	r3, #3
 8000e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4836      	ldr	r0, [pc, #216]	@ (8000ef4 <HAL_ADC_MspInit+0x1ec>)
 8000e1c:	f001 fd5a 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e20:	e05e      	b.n	8000ee0 <HAL_ADC_MspInit+0x1d8>
  else if(hadc->Instance==ADC2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a34      	ldr	r2, [pc, #208]	@ (8000ef8 <HAL_ADC_MspInit+0x1f0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d159      	bne.n	8000ee0 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fd1b 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000e48:	f7ff ff34 	bl	8000cb4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a25      	ldr	r2, [pc, #148]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <HAL_ADC_MspInit+0x1e0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10b      	bne.n	8000e76 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5e:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a16      	ldr	r2, [pc, #88]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <HAL_ADC_MspInit+0x1e4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <HAL_ADC_MspInit+0x1e8>)
 8000ebe:	f001 fd09 	bl	80028d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000edc:	f001 fcfa 	bl	80028d4 <HAL_GPIO_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	3790      	adds	r7, #144	@ 0x90
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000354 	.word	0x20000354
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	50000100 	.word	0x50000100

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0a2      	sub	sp, #136	@ 0x88
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	2254      	movs	r2, #84	@ 0x54
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f823 	bl	8005f68 <memset>
  if(huart->Instance==LPUART1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a5f      	ldr	r2, [pc, #380]	@ (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d139      	bne.n	8000fa0 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fc9d 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f44:	f7ff feb6 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f48:	4b57      	ldr	r3, [pc, #348]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f4c:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000f54:	4b54      	ldr	r3, [pc, #336]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b51      	ldr	r3, [pc, #324]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	4a50      	ldr	r2, [pc, #320]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f7c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f96:	4619      	mov	r1, r3
 8000f98:	4844      	ldr	r0, [pc, #272]	@ (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f9a:	f001 fc9b 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f9e:	e07c      	b.n	800109a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a42      	ldr	r2, [pc, #264]	@ (80010b0 <HAL_UART_MspInit+0x1b4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d139      	bne.n	800101e <HAL_UART_MspInit+0x122>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fc5e 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8000fc2:	f7ff fe77 	bl	8000cb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	4b38      	ldr	r3, [pc, #224]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	4a37      	ldr	r2, [pc, #220]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd2:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b32      	ldr	r3, [pc, #200]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001008:	2307      	movs	r3, #7
 800100a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f001 fc5c 	bl	80028d4 <HAL_GPIO_Init>
}
 800101c:	e03d      	b.n	800109a <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a24      	ldr	r2, [pc, #144]	@ (80010b4 <HAL_UART_MspInit+0x1b8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d138      	bne.n	800109a <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001028:	2304      	movs	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fc1f 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001040:	f7ff fe38 	bl	8000cb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800104e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_UART_MspInit+0x1ac>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001074:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001078:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001088:	2307      	movs	r3, #7
 800108a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001092:	4619      	mov	r1, r3
 8001094:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001096:	f001 fc1d 	bl	80028d4 <HAL_GPIO_Init>
}
 800109a:	bf00      	nop
 800109c:	3788      	adds	r7, #136	@ 0x88
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40008000 	.word	0x40008000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40004800 	.word	0x40004800
 80010b8:	48000800 	.word	0x48000800

080010bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_TIM_PWM_MspInit+0x38>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40012c00 	.word	0x40012c00
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htimex_hallsensor->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a26      	ldr	r2, [pc, #152]	@ (80011b4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d145      	bne.n	80011aa <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6593      	str	r3, [r2, #88]	@ 0x58
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001166:	2350      	movs	r3, #80	@ 0x50
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001176:	2302      	movs	r3, #2
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f001 fba6 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800119a:	2302      	movs	r3, #2
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80011a6:	f001 fb95 	bl	80028d4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800

080011c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <HAL_TIM_MspPostInit+0xc4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d14b      	bne.n	800127a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a22      	ldr	r2, [pc, #136]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_TIM_MspPostInit+0xc8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001212:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001224:	2306      	movs	r3, #6
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4817      	ldr	r0, [pc, #92]	@ (800128c <HAL_TIM_MspPostInit+0xcc>)
 8001230:	f001 fb50 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001246:	2304      	movs	r3, #4
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480e      	ldr	r0, [pc, #56]	@ (800128c <HAL_TIM_MspPostInit+0xcc>)
 8001252:	f001 fb3f 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001256:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001268:	2306      	movs	r3, #6
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f001 fb2d 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012c00 	.word	0x40012c00
 8001288:	40021000 	.word	0x40021000
 800128c:	48000400 	.word	0x48000400

08001290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <HAL_InitTick+0xc4>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001354 <HAL_InitTick+0xc4>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ac:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <HAL_InitTick+0xc4>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b8:	f107 020c 	add.w	r2, r7, #12
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fa60 	bl	8003788 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012c8:	f002 fa32 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80012cc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <HAL_InitTick+0xc8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3b01      	subs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <HAL_InitTick+0xcc>)
 80012de:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <HAL_InitTick+0xd0>)
 80012e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <HAL_InitTick+0xcc>)
 80012e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012ea:	4a1c      	ldr	r2, [pc, #112]	@ (800135c <HAL_InitTick+0xcc>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_InitTick+0xcc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_InitTick+0xcc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80012fc:	4817      	ldr	r0, [pc, #92]	@ (800135c <HAL_InitTick+0xcc>)
 80012fe:	f002 fd09 	bl	8003d14 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11b      	bne.n	8001348 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <HAL_InitTick+0xcc>)
 8001312:	f002 fd61 	bl	8003dd8 <HAL_TIM_Base_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800131c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001324:	2036      	movs	r0, #54	@ 0x36
 8001326:	f001 fac7 	bl	80028b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d808      	bhi.n	8001342 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	2036      	movs	r0, #54	@ 0x36
 8001336:	f001 faa5 	bl	8002884 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_InitTick+0xd4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e002      	b.n	8001348 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800134c:	4618      	mov	r0, r3
 800134e:	3730      	adds	r7, #48	@ 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	431bde83 	.word	0x431bde83
 800135c:	20000358 	.word	0x20000358
 8001360:	40001000 	.word	0x40001000
 8001364:	20000004 	.word	0x20000004

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80013cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013d0:	f001 fc1a 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <TIM6_DAC_IRQHandler+0x10>)
 80013de:	f002 fdca 	bl	8003f76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000358 	.word	0x20000358

080013ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	@ (8001448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff ffea 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopForever+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f004 fd9b 	bl	8005f78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001442:	f7ff f861 	bl	8000508 <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   r0, =_estack
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001454:	0800603c 	.word	0x0800603c
  ldr r2, =_sbss
 8001458:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800145c:	200003a8 	.word	0x200003a8

08001460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>

08001462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f001 f9fe 	bl	800286e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	200f      	movs	r0, #15
 8001474:	f7ff ff0c 	bl	8001290 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001484:	f7ff fc1c 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	79fb      	ldrb	r3, [r7, #7]

}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_IncTick+0x1c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_IncTick+0x20>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <HAL_IncTick+0x1c>)
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200003a4 	.word	0x200003a4
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200003a4 	.word	0x200003a4

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d004      	beq.n	80014f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_Delay+0x40>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f4:	bf00      	nop
 80014f6:	f7ff ffdf 	bl	80014b8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	429a      	cmp	r2, r3
 8001504:	d8f7      	bhi.n	80014f6 <HAL_Delay+0x26>
  {
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000008 	.word	0x20000008

08001514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3360      	adds	r3, #96	@ 0x60
 800158e:	461a      	mov	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <LL_ADC_SetOffset+0x44>)
 800159e:	4013      	ands	r3, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	03fff000 	.word	0x03fff000

080015c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3360      	adds	r3, #96	@ 0x60
 80015d2:	461a      	mov	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3360      	adds	r3, #96	@ 0x60
 8001600:	461a      	mov	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001626:	b480      	push	{r7}
 8001628:	b087      	sub	sp, #28
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3360      	adds	r3, #96	@ 0x60
 8001636:	461a      	mov	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	431a      	orrs	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3360      	adds	r3, #96	@ 0x60
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	615a      	str	r2, [r3, #20]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3330      	adds	r3, #48	@ 0x30
 80016c8:	461a      	mov	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	211f      	movs	r1, #31
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	f003 011f 	and.w	r1, r3, #31
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	431a      	orrs	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3314      	adds	r3, #20
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0e5b      	lsrs	r3, r3, #25
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	0d1b      	lsrs	r3, r3, #20
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2107      	movs	r1, #7
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	401a      	ands	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0d1b      	lsrs	r3, r3, #20
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0318 	and.w	r3, r3, #24
 800178a:	4908      	ldr	r1, [pc, #32]	@ (80017ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800178c:	40d9      	lsrs	r1, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	400b      	ands	r3, r1
 8001792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	0007ffff 	.word	0x0007ffff

080017b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6093      	str	r3, [r2, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017e8:	d101      	bne.n	80017ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800180c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001810:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <LL_ADC_IsEnabled+0x18>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <LL_ADC_IsEnabled+0x1a>
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b04      	cmp	r3, #4
 8001884:	d101      	bne.n	800188a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d101      	bne.n	80018b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1a9      	b.n	8001c2e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fa0d 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff67 	bl	80017d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4d 	bl	80017b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff82 	bl	8001824 <LL_ADC_IsInternalRegulatorEnabled>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d115      	bne.n	8001952 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff66 	bl	80017fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001930:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba4 <HAL_ADC_Init+0x2e4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	4a9c      	ldr	r2, [pc, #624]	@ (8001ba8 <HAL_ADC_Init+0x2e8>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001944:	e002      	b.n	800194c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff64 	bl	8001824 <LL_ADC_IsInternalRegulatorEnabled>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff75 	bl	8001872 <LL_ADC_REG_IsConversionOngoing>
 8001988:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 8142 	bne.w	8001c1c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 813e 	bne.w	8001c1c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019a8:	f043 0202 	orr.w	r2, r3, #2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff49 	bl	800184c <LL_ADC_IsEnabled>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d141      	bne.n	8001a44 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_Init+0x114>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a77      	ldr	r2, [pc, #476]	@ (8001bac <HAL_ADC_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d10f      	bne.n	80019f4 <HAL_ADC_Init+0x134>
 80019d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80019d8:	f7ff ff38 	bl	800184c <LL_ADC_IsEnabled>
 80019dc:	4604      	mov	r4, r0
 80019de:	4873      	ldr	r0, [pc, #460]	@ (8001bac <HAL_ADC_Init+0x2ec>)
 80019e0:	f7ff ff34 	bl	800184c <LL_ADC_IsEnabled>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4323      	orrs	r3, r4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e012      	b.n	8001a1a <HAL_ADC_Init+0x15a>
 80019f4:	486e      	ldr	r0, [pc, #440]	@ (8001bb0 <HAL_ADC_Init+0x2f0>)
 80019f6:	f7ff ff29 	bl	800184c <LL_ADC_IsEnabled>
 80019fa:	4604      	mov	r4, r0
 80019fc:	486d      	ldr	r0, [pc, #436]	@ (8001bb4 <HAL_ADC_Init+0x2f4>)
 80019fe:	f7ff ff25 	bl	800184c <LL_ADC_IsEnabled>
 8001a02:	4603      	mov	r3, r0
 8001a04:	431c      	orrs	r4, r3
 8001a06:	486c      	ldr	r0, [pc, #432]	@ (8001bb8 <HAL_ADC_Init+0x2f8>)
 8001a08:	f7ff ff20 	bl	800184c <LL_ADC_IsEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Init+0x172>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001bac <HAL_ADC_Init+0x2ec>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x176>
 8001a32:	4a62      	ldr	r2, [pc, #392]	@ (8001bbc <HAL_ADC_Init+0x2fc>)
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_Init+0x178>
 8001a36:	4a62      	ldr	r2, [pc, #392]	@ (8001bc0 <HAL_ADC_Init+0x300>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fd68 	bl	8001514 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7f5b      	ldrb	r3, [r3, #29]
 8001a48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d106      	bne.n	8001a80 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	045b      	lsls	r3, r3, #17
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <HAL_ADC_Init+0x304>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fee4 	bl	8001898 <LL_ADC_INJ_IsConversionOngoing>
 8001ad0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d17f      	bne.n	8001bd8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d17c      	bne.n	8001bd8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ae2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d017      	beq.n	8001b40 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6911      	ldr	r1, [r2, #16]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b3e:	e013      	b.n	8001b68 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d12a      	bne.n	8001bc8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b94:	430a      	orrs	r2, r1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e019      	b.n	8001bd8 <HAL_ADC_Init+0x318>
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	053e2d63 	.word	0x053e2d63
 8001bac:	50000100 	.word	0x50000100
 8001bb0:	50000400 	.word	0x50000400
 8001bb4:	50000500 	.word	0x50000500
 8001bb8:	50000600 	.word	0x50000600
 8001bbc:	50000300 	.word	0x50000300
 8001bc0:	50000700 	.word	0x50000700
 8001bc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10c      	bne.n	8001bfa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f023 010f 	bic.w	r1, r3, #15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	1e5a      	subs	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bf8:	e007      	b.n	8001c0a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020f 	bic.w	r2, r2, #15
 8001c08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c1a:	e007      	b.n	8001c2c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c20:	f043 0210 	orr.w	r2, r3, #16
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop

08001c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x24>
 8001c56:	2302      	movs	r3, #2
 8001c58:	f000 bc13 	b.w	8002482 <HAL_ADC_ConfigChannel+0x84a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fe02 	bl	8001872 <LL_ADC_REG_IsConversionOngoing>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f040 83f3 	bne.w	800245c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f7ff fd18 	bl	80016b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fdf0 	bl	8001872 <LL_ADC_REG_IsConversionOngoing>
 8001c92:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fdfc 	bl	8001898 <LL_ADC_INJ_IsConversionOngoing>
 8001ca0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 81d9 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 81d4 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff fd1f 	bl	8001710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fcd9 	bl	8001692 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ce0:	e00e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f7ff fd0e 	bl	8001710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fcc9 	bl	8001692 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	08db      	lsrs	r3, r3, #3
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d022      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d32:	f7ff fc23 	bl	800157c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff fc6f 	bl	8001626 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d102      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x126>
 8001d58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d5c:	e000      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x128>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	461a      	mov	r2, r3
 8001d62:	f7ff fc7b 	bl	800165c <LL_ADC_SetOffsetSaturation>
 8001d66:	e17b      	b.n	8002060 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fc28 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x15c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc1d 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x19a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fc12 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001db6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e004      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x1b2>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	e018      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1e4>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fbe1 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbc5 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x222>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fbba 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	e01e      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x260>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fbaf 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e004      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x278>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x2aa>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb7e 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb62 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2e8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb57 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	e01e      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x326>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fb4c 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x33e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e016      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x36c>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e004      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fb1d 	bl	80015f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fb01 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x3aa>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff faf6 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	e017      	b.n	8002012 <HAL_ADC_ConfigChannel+0x3da>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff faeb 	bl	80015c4 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ffe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_ConfigChannel+0x3f2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e011      	b.n	800204e <HAL_ADC_ConfigChannel+0x416>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800203c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fac8 	bl	80015f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fbf1 	bl	800184c <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 813d 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fb72 	bl	8001768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4aa2      	ldr	r2, [pc, #648]	@ (8002314 <HAL_ADC_ConfigChannel+0x6dc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 812e 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x480>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	3301      	adds	r3, #1
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	bf94      	ite	ls
 80020b0:	2301      	movls	r3, #1
 80020b2:	2300      	movhi	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e019      	b.n	80020ec <HAL_ADC_ConfigChannel+0x4b4>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80020c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80020ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80020d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	bf94      	ite	ls
 80020e6:	2301      	movls	r3, #1
 80020e8:	2300      	movhi	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x4d4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	069b      	lsls	r3, r3, #26
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210a:	e015      	b.n	8002138 <HAL_ADC_ConfigChannel+0x500>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800211a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800211c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800211e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x520>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x550>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002168:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800216a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	ea42 0103 	orr.w	r1, r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x576>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	e018      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x5a8>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80021c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e003      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80021ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	430b      	orrs	r3, r1
 80021e2:	e07e      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x5c8>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021fe:	e015      	b.n	800222c <HAL_ADC_ConfigChannel+0x5f4>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	069b      	lsls	r3, r3, #26
 8002228:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x614>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x644>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	61fb      	str	r3, [r7, #28]
  return result;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x670>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	051b      	lsls	r3, r3, #20
 80022a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	e01b      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x6a8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	613b      	str	r3, [r7, #16]
  return result;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff fa12 	bl	8001710 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_ADC_ConfigChannel+0x6e0>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80be 	beq.w	8002476 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002302:	d004      	beq.n	800230e <HAL_ADC_ConfigChannel+0x6d6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a04      	ldr	r2, [pc, #16]	@ (800231c <HAL_ADC_ConfigChannel+0x6e4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x6ec>
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <HAL_ADC_ConfigChannel+0x6e8>)
 8002310:	e009      	b.n	8002326 <HAL_ADC_ConfigChannel+0x6ee>
 8002312:	bf00      	nop
 8002314:	407f0000 	.word	0x407f0000
 8002318:	80080000 	.word	0x80080000
 800231c:	50000100 	.word	0x50000100
 8002320:	50000300 	.word	0x50000300
 8002324:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_ADC_ConfigChannel+0x854>)
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f91a 	bl	8001560 <LL_ADC_GetCommonPathInternalCh>
 800232c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a56      	ldr	r2, [pc, #344]	@ (8002490 <HAL_ADC_ConfigChannel+0x858>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x70c>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a55      	ldr	r2, [pc, #340]	@ (8002494 <HAL_ADC_ConfigChannel+0x85c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d13a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d134      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002358:	d005      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x72e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_ADC_ConfigChannel+0x860>)
 8002360:	4293      	cmp	r3, r2
 8002362:	f040 8085 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236e:	d004      	beq.n	800237a <HAL_ADC_ConfigChannel+0x742>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_ADC_ConfigChannel+0x864>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_ADC_ConfigChannel+0x746>
 800237a:	4a49      	ldr	r2, [pc, #292]	@ (80024a0 <HAL_ADC_ConfigChannel+0x868>)
 800237c:	e000      	b.n	8002380 <HAL_ADC_ConfigChannel+0x748>
 800237e:	4a43      	ldr	r2, [pc, #268]	@ (800248c <HAL_ADC_ConfigChannel+0x854>)
 8002380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f7ff f8d5 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002390:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_ADC_ConfigChannel+0x86c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	4a44      	ldr	r2, [pc, #272]	@ (80024a8 <HAL_ADC_ConfigChannel+0x870>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b8:	e05a      	b.n	8002470 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_ADC_ConfigChannel+0x874>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d125      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11f      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_ADC_ConfigChannel+0x864>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7ac>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_ADC_ConfigChannel+0x878>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d047      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x7c0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2a      	ldr	r2, [pc, #168]	@ (800249c <HAL_ADC_ConfigChannel+0x864>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7c4>
 80023f8:	4a29      	ldr	r2, [pc, #164]	@ (80024a0 <HAL_ADC_ConfigChannel+0x868>)
 80023fa:	e000      	b.n	80023fe <HAL_ADC_ConfigChannel+0x7c6>
 80023fc:	4a23      	ldr	r2, [pc, #140]	@ (800248c <HAL_ADC_ConfigChannel+0x854>)
 80023fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff f896 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240e:	e031      	b.n	8002474 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_ADC_ConfigChannel+0x87c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d12d      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d127      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	@ (800249c <HAL_ADC_ConfigChannel+0x864>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002438:	d004      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x80c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	@ (800249c <HAL_ADC_ConfigChannel+0x864>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x810>
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <HAL_ADC_ConfigChannel+0x868>)
 8002446:	e000      	b.n	800244a <HAL_ADC_ConfigChannel+0x812>
 8002448:	4a10      	ldr	r2, [pc, #64]	@ (800248c <HAL_ADC_ConfigChannel+0x854>)
 800244a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800244e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7ff f870 	bl	800153a <LL_ADC_SetCommonPathInternalCh>
 800245a:	e00c      	b.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800246e:	e002      	b.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002474:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800247e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002482:	4618      	mov	r0, r3
 8002484:	37d8      	adds	r7, #216	@ 0xd8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	50000700 	.word	0x50000700
 8002490:	c3210000 	.word	0xc3210000
 8002494:	90c00010 	.word	0x90c00010
 8002498:	50000600 	.word	0x50000600
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000300 	.word	0x50000300
 80024a4:	20000000 	.word	0x20000000
 80024a8:	053e2d63 	.word	0x053e2d63
 80024ac:	c7520000 	.word	0xc7520000
 80024b0:	50000500 	.word	0x50000500
 80024b4:	cb840000 	.word	0xcb840000

080024b8 <LL_ADC_IsEnabled>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_IsConversionOngoing>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b0a1      	sub	sp, #132	@ 0x84
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800251e:	2302      	movs	r3, #2
 8002520:	e0e7      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800252a:	2300      	movs	r3, #0
 800252c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800252e:	2300      	movs	r3, #0
 8002530:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253a:	d102      	bne.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800253c:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e009      	b.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6e      	ldr	r2, [pc, #440]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800254c:	4b6d      	ldr	r3, [pc, #436]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e001      	b.n	8002556 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0be      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ffb1 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 800257c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ffab 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 80a0 	bne.w	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 809c 	bne.w	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a0:	d004      	beq.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a55      	ldr	r2, [pc, #340]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025ac:	4b56      	ldr	r3, [pc, #344]	@ (8002708 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025ae:	e000      	b.n	80025b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025b0:	4b56      	ldr	r3, [pc, #344]	@ (800270c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80025b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d04b      	beq.n	8002654 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025ce:	035b      	lsls	r3, r3, #13
 80025d0:	430b      	orrs	r3, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025e0:	d004      	beq.n	80025ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a45      	ldr	r2, [pc, #276]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10f      	bne.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025f0:	f7ff ff62 	bl	80024b8 <LL_ADC_IsEnabled>
 80025f4:	4604      	mov	r4, r0
 80025f6:	4841      	ldr	r0, [pc, #260]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025f8:	f7ff ff5e 	bl	80024b8 <LL_ADC_IsEnabled>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4323      	orrs	r3, r4
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e012      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800260c:	483c      	ldr	r0, [pc, #240]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800260e:	f7ff ff53 	bl	80024b8 <LL_ADC_IsEnabled>
 8002612:	4604      	mov	r4, r0
 8002614:	483b      	ldr	r0, [pc, #236]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002616:	f7ff ff4f 	bl	80024b8 <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	431c      	orrs	r4, r3
 800261e:	483c      	ldr	r0, [pc, #240]	@ (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002620:	f7ff ff4a 	bl	80024b8 <LL_ADC_IsEnabled>
 8002624:	4603      	mov	r3, r0
 8002626:	4323      	orrs	r3, r4
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d056      	beq.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800263e:	f023 030f 	bic.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	6811      	ldr	r1, [r2, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6892      	ldr	r2, [r2, #8]
 800264a:	430a      	orrs	r2, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002650:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002652:	e047      	b.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800265e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002668:	d004      	beq.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a23      	ldr	r2, [pc, #140]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10f      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002674:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002678:	f7ff ff1e 	bl	80024b8 <LL_ADC_IsEnabled>
 800267c:	4604      	mov	r4, r0
 800267e:	481f      	ldr	r0, [pc, #124]	@ (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002680:	f7ff ff1a 	bl	80024b8 <LL_ADC_IsEnabled>
 8002684:	4603      	mov	r3, r0
 8002686:	4323      	orrs	r3, r4
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e012      	b.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002694:	481a      	ldr	r0, [pc, #104]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002696:	f7ff ff0f 	bl	80024b8 <LL_ADC_IsEnabled>
 800269a:	4604      	mov	r4, r0
 800269c:	4819      	ldr	r0, [pc, #100]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800269e:	f7ff ff0b 	bl	80024b8 <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	431c      	orrs	r4, r3
 80026a6:	481a      	ldr	r0, [pc, #104]	@ (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026a8:	f7ff ff06 	bl	80024b8 <LL_ADC_IsEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4323      	orrs	r3, r4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026c6:	f023 030f 	bic.w	r3, r3, #15
 80026ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026ce:	e009      	b.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026e2:	e000      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3784      	adds	r7, #132	@ 0x84
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	50000100 	.word	0x50000100
 8002700:	50000400 	.word	0x50000400
 8002704:	50000500 	.word	0x50000500
 8002708:	50000300 	.word	0x50000300
 800270c:	50000700 	.word	0x50000700
 8002710:	50000600 	.word	0x50000600

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	@ (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	@ (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	@ (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff4c 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002892:	f7ff ff63 	bl	800275c <__NVIC_GetPriorityGrouping>
 8002896:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	6978      	ldr	r0, [r7, #20]
 800289e:	f7ff ffb3 	bl	8002808 <NVIC_EncodePriority>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff82 	bl	80027b4 <__NVIC_SetPriority>
}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff56 	bl	8002778 <__NVIC_EnableIRQ>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028e2:	e15a      	b.n	8002b9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 814c 	beq.w	8002b94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d005      	beq.n	8002914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	2b02      	cmp	r3, #2
 8002912:	d130      	bne.n	8002976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294a:	2201      	movs	r2, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 0201 	and.w	r2, r3, #1
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d017      	beq.n	80029b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d123      	bne.n	8002a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	6939      	ldr	r1, [r7, #16]
 8002a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80a6 	beq.w	8002b94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a48:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a54:	4b58      	ldr	r3, [pc, #352]	@ (8002bb8 <HAL_GPIO_Init+0x2e4>)
 8002a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a60:	4a56      	ldr	r2, [pc, #344]	@ (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a8a:	d01f      	beq.n	8002acc <HAL_GPIO_Init+0x1f8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc0 <HAL_GPIO_Init+0x2ec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d019      	beq.n	8002ac8 <HAL_GPIO_Init+0x1f4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc4 <HAL_GPIO_Init+0x2f0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_GPIO_Init+0x1f0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc8 <HAL_GPIO_Init+0x2f4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_GPIO_Init+0x1ec>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a49      	ldr	r2, [pc, #292]	@ (8002bcc <HAL_GPIO_Init+0x2f8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x1e8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a48      	ldr	r2, [pc, #288]	@ (8002bd0 <HAL_GPIO_Init+0x2fc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_GPIO_Init+0x1e4>
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	e00a      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ab8:	2306      	movs	r3, #6
 8002aba:	e008      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_Init+0x1fa>
 8002acc:	2300      	movs	r3, #0
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ade:	4937      	ldr	r1, [pc, #220]	@ (8002bbc <HAL_GPIO_Init+0x2e8>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aec:	4b39      	ldr	r3, [pc, #228]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b10:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b16:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3a:	4a26      	ldr	r2, [pc, #152]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b64:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b8e:	4a11      	ldr	r2, [pc, #68]	@ (8002bd4 <HAL_GPIO_Init+0x300>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae9d 	bne.w	80028e4 <HAL_GPIO_Init+0x10>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	48000400 	.word	0x48000400
 8002bc4:	48000800 	.word	0x48000800
 8002bc8:	48000c00 	.word	0x48000c00
 8002bcc:	48001000 	.word	0x48001000
 8002bd0:	48001400 	.word	0x48001400
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c1e:	4a05      	ldr	r2, [pc, #20]	@ (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f806 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d141      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d131      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a46      	ldr	r2, [pc, #280]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c84:	4a41      	ldr	r2, [pc, #260]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2232      	movs	r2, #50	@ 0x32
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a3f      	ldr	r2, [pc, #252]	@ (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cbe:	4b33      	ldr	r3, [pc, #204]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d158      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e057      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ce0:	e04d      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce8:	d141      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cea:	4b28      	ldr	r3, [pc, #160]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf6:	d131      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf8:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfe:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d10:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2232      	movs	r2, #50	@ 0x32
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2e:	e002      	b.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d102      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f2      	bne.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d112      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e011      	b.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d6c:	e007      	b.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	20000000 	.word	0x20000000
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002da2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da6:	6093      	str	r3, [r2, #8]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e2fe      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b97      	ldr	r3, [pc, #604]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b94      	ldr	r3, [pc, #592]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3e>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e2d9      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b85      	ldr	r3, [pc, #532]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a84      	ldr	r2, [pc, #528]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b7f      	ldr	r3, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b7c      	ldr	r3, [pc, #496]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7b      	ldr	r2, [pc, #492]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a77      	ldr	r2, [pc, #476]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a74      	ldr	r2, [pc, #464]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fb22 	bl	80014b8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fb1e 	bl	80014b8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e29e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fb0e 	bl	80014b8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fb0a 	bl	80014b8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e28a      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	4b60      	ldr	r3, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ece:	4b59      	ldr	r3, [pc, #356]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed8:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x136>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x13c>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d11f      	bne.n	8002f34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x154>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e25d      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4946      	ldr	r1, [pc, #280]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f20:	4b45      	ldr	r3, [pc, #276]	@ (8003038 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe f9b3 	bl	8001290 <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e249      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fab6 	bl	80014b8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fab2 	bl	80014b8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e232      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	492d      	ldr	r1, [pc, #180]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	e01a      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa92 	bl	80014b8 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe fa8e 	bl	80014b8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20e      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1e0>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d041      	beq.n	800304a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01c      	beq.n	8003008 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd4:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe fa6b 	bl	80014b8 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe fa67 	bl	80014b8 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1e7      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ef      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
 8003006:	e020      	b.n	800304a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800300e:	4a09      	ldr	r2, [pc, #36]	@ (8003034 <HAL_RCC_OscConfig+0x27c>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe fa4e 	bl	80014b8 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301e:	e00d      	b.n	800303c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fe fa4a 	bl	80014b8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d906      	bls.n	800303c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1ca      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	4b8c      	ldr	r3, [pc, #560]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ea      	bne.n	8003020 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305c:	4b84      	ldr	r3, [pc, #528]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x2b4>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2b6>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	@ 0x58
 800307e:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fe fa07 	bl	80014b8 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe fa03 	bl	80014b8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e183      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003274 <HAL_RCC_OscConfig+0x4bc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_RCC_OscConfig+0x32e>
 80030d4:	4b66      	ldr	r3, [pc, #408]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e4:	e024      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d110      	bne.n	8003110 <HAL_RCC_OscConfig+0x358>
 80030ee:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	4a5a      	ldr	r2, [pc, #360]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310e:	e00f      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 8003110:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003116:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003126:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d016      	beq.n	8003166 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe f9be 	bl	80014b8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe f9ba 	bl	80014b8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e138      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b46      	ldr	r3, [pc, #280]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ed      	beq.n	8003140 <HAL_RCC_OscConfig+0x388>
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe f9a7 	bl	80014b8 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe f9a3 	bl	80014b8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e121      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ed      	bne.n	800316e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b35      	ldr	r3, [pc, #212]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	4a34      	ldr	r2, [pc, #208]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d03c      	beq.n	800322a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031be:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe f976 	bl	80014b8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d0:	f7fe f972 	bl	80014b8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0f2      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCC_OscConfig+0x418>
 80031f0:	e01b      	b.n	800322a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe f959 	bl	80014b8 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320a:	f7fe f955 	bl	80014b8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0d5      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ef      	bne.n	800320a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80c9 	beq.w	80033c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f000 8083 	beq.w	8003348 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d15e      	bne.n	8003308 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe f92f 	bl	80014b8 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325c:	e00c      	b.n	8003278 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe f92b 	bl	80014b8 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d905      	bls.n	8003278 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0ab      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	4b55      	ldr	r3, [pc, #340]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ec      	bne.n	800325e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	4b52      	ldr	r3, [pc, #328]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <HAL_RCC_OscConfig+0x61c>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a11      	ldr	r1, [r2, #32]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003294:	3a01      	subs	r2, #1
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4311      	orrs	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800329e:	0212      	lsls	r2, r2, #8
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0552      	lsls	r2, r2, #21
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032b2:	0852      	lsrs	r2, r2, #1
 80032b4:	3a01      	subs	r2, #1
 80032b6:	0652      	lsls	r2, r2, #25
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032be:	06d2      	lsls	r2, r2, #27
 80032c0:	430a      	orrs	r2, r1
 80032c2:	4943      	ldr	r1, [pc, #268]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a3d      	ldr	r2, [pc, #244]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f8ea 	bl	80014b8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f8e6 	bl	80014b8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e066      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x530>
 8003306:	e05e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800330e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe f8d0 	bl	80014b8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f8cc 	bl	80014b8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04c      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800333a:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4924      	ldr	r1, [pc, #144]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003340:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <HAL_RCC_OscConfig+0x620>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
 8003346:	e03e      	b.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e039      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003354:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_OscConfig+0x618>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	429a      	cmp	r2, r3
 8003366:	d12c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d123      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d113      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	3b01      	subs	r3, #1
 80033a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	019f800c 	.word	0x019f800c
 80033d8:	feeefffc 	.word	0xfeeefffc

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e11e      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b91      	ldr	r3, [pc, #580]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b8e      	ldr	r3, [pc, #568]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	498c      	ldr	r1, [pc, #560]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b8a      	ldr	r3, [pc, #552]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e106      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d073      	beq.n	8003518 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d129      	bne.n	800348c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003438:	4b81      	ldr	r3, [pc, #516]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0f4      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003448:	f000 f9d0 	bl	80037ec <RCC_GetSysClockFreqFromPLLSource>
 800344c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4a7c      	ldr	r2, [pc, #496]	@ (8003644 <HAL_RCC_ClockConfig+0x268>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d93f      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003456:	4b7a      	ldr	r3, [pc, #488]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d033      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12f      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003476:	4b72      	ldr	r3, [pc, #456]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800347e:	4a70      	ldr	r2, [pc, #448]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e024      	b.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003494:	4b6a      	ldr	r3, [pc, #424]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0c6      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0be      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034b4:	f000 f8ce 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4a61      	ldr	r2, [pc, #388]	@ (8003644 <HAL_RCC_ClockConfig+0x268>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d909      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4957      	ldr	r1, [pc, #348]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fd ffe6 	bl	80014b8 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fd ffe2 	bl	80014b8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e095      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b4e      	ldr	r3, [pc, #312]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b43      	ldr	r3, [pc, #268]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a42      	ldr	r2, [pc, #264]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800353a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003548:	4b3d      	ldr	r3, [pc, #244]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003550:	4a3b      	ldr	r2, [pc, #236]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4936      	ldr	r1, [pc, #216]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e008      	b.n	800357e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	d105      	bne.n	800357e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003572:	4b33      	ldr	r3, [pc, #204]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800357c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357e:	4b2f      	ldr	r3, [pc, #188]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d21d      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358c:	4b2b      	ldr	r3, [pc, #172]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	4929      	ldr	r1, [pc, #164]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800359c:	f7fd ff8c 	bl	80014b8 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd ff88 	bl	80014b8 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e03b      	b.n	8003632 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1ed      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4917      	ldr	r1, [pc, #92]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	490f      	ldr	r1, [pc, #60]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003606:	f000 f825 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800360a:	4602      	mov	r2, r0
 800360c:	4b0c      	ldr	r3, [pc, #48]	@ (8003640 <HAL_RCC_ClockConfig+0x264>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	490c      	ldr	r1, [pc, #48]	@ (8003648 <HAL_RCC_ClockConfig+0x26c>)
 8003618:	5ccb      	ldrb	r3, [r1, r3]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_RCC_ClockConfig+0x270>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003626:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <HAL_RCC_ClockConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fe30 	bl	8001290 <HAL_InitTick>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	04c4b400 	.word	0x04c4b400
 8003648:	08005fec 	.word	0x08005fec
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800365a:	4b2c      	ldr	r3, [pc, #176]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d102      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003666:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e047      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800366c:	4b27      	ldr	r3, [pc, #156]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d102      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003678:	4b26      	ldr	r3, [pc, #152]	@ (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e03e      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800367e:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d136      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368a:	4b20      	ldr	r3, [pc, #128]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3301      	adds	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a16      	ldr	r2, [pc, #88]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	0a12      	lsrs	r2, r2, #8
 80036b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c2:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4a10      	ldr	r2, [pc, #64]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	0a12      	lsrs	r2, r2, #8
 80036d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e001      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036fc:	693b      	ldr	r3, [r7, #16]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	00f42400 	.word	0x00f42400
 8003714:	016e3600 	.word	0x016e3600

08003718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	@ (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	@ (8003758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	08005ffc 	.word	0x08005ffc

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003760:	f7ff ffda 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0adb      	lsrs	r3, r3, #11
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	@ (8003784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08005ffc 	.word	0x08005ffc

08003788 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	220f      	movs	r2, #15
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003798:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037a4:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037bc:	4b09      	ldr	r3, [pc, #36]	@ (80037e4 <HAL_RCC_GetClockConfig+0x5c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ca:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <HAL_RCC_GetClockConfig+0x60>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40022000 	.word	0x40022000

080037ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d10c      	bne.n	800382a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003810:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381a:	68d2      	ldr	r2, [r2, #12]
 800381c:	0a12      	lsrs	r2, r2, #8
 800381e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
    break;
 8003828:	e00c      	b.n	8003844 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382a:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4a0e      	ldr	r2, [pc, #56]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	0a12      	lsrs	r2, r2, #8
 8003838:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]
    break;
 8003842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003844:	4b09      	ldr	r3, [pc, #36]	@ (800386c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0e5b      	lsrs	r3, r3, #25
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40021000 	.word	0x40021000
 8003870:	016e3600 	.word	0x016e3600
 8003874:	00f42400 	.word	0x00f42400

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003880:	2300      	movs	r3, #0
 8003882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003884:	2300      	movs	r3, #0
 8003886:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8098 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	4a3f      	ldr	r2, [pc, #252]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b2:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a39      	ldr	r2, [pc, #228]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fdf3 	bl	80014b8 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d4:	e009      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fd fdef 	bl	80014b8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d902      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	74fb      	strb	r3, [r7, #19]
        break;
 80038e8:	e005      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ea:	4b30      	ldr	r3, [pc, #192]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ef      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d159      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003906:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393a:	4a1b      	ldr	r2, [pc, #108]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd fdaf 	bl	80014b8 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd fdab 	bl	80014b8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
 80039a6:	e005      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b4:	7c7b      	ldrb	r3, [r7, #17]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039be:	4aa6      	ldr	r2, [pc, #664]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	499d      	ldr	r1, [pc, #628]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f4:	4b98      	ldr	r3, [pc, #608]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fa:	f023 020c 	bic.w	r2, r3, #12
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4995      	ldr	r1, [pc, #596]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a16:	4b90      	ldr	r3, [pc, #576]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	498c      	ldr	r1, [pc, #560]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a38:	4b87      	ldr	r3, [pc, #540]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4984      	ldr	r1, [pc, #528]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	497b      	ldr	r1, [pc, #492]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a7c:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	4973      	ldr	r1, [pc, #460]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	496a      	ldr	r1, [pc, #424]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac0:	4b65      	ldr	r3, [pc, #404]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4962      	ldr	r1, [pc, #392]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	4959      	ldr	r1, [pc, #356]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b04:	4b54      	ldr	r3, [pc, #336]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	4951      	ldr	r1, [pc, #324]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b26:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	4948      	ldr	r1, [pc, #288]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b48:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	4940      	ldr	r1, [pc, #256]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b66:	d105      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b80:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8e:	4932      	ldr	r1, [pc, #200]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d015      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	4924      	ldr	r1, [pc, #144]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	4916      	ldr	r1, [pc, #88]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a10      	ldr	r2, [pc, #64]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d019      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4908      	ldr	r1, [pc, #32]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c46:	d109      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a02      	ldr	r2, [pc, #8]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c52:	60d3      	str	r3, [r2, #12]
 8003c54:	e002      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c68:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4926      	ldr	r1, [pc, #152]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c88:	4b21      	ldr	r3, [pc, #132]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	4918      	ldr	r1, [pc, #96]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a12      	ldr	r2, [pc, #72]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e049      	b.n	8003dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f841 	bl	8003dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 fb9a 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e054      	b.n	8003e9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1a:	d01d      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <HAL_TIM_Base_Start_IT+0xd4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	@ (8003eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	@ (8003ebc <HAL_TIM_Base_Start_IT+0xe4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d115      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d015      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d011      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	e008      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40013400 	.word	0x40013400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40015000 	.word	0x40015000
 8003ec4:	00010007 	.word	0x00010007

08003ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e049      	b.n	8003f6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd f8e4 	bl	80010bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fac0 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0202 	mvn.w	r2, #2
 8003faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fa45 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 8003fc6:	e005      	b.n	8003fd4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa37 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa48 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01b      	beq.n	8004026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0204 	mvn.w	r2, #4
 8003ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa1f 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 8004012:	e005      	b.n	8004020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fa11 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa22 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01b      	beq.n	8004072 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f06f 0208 	mvn.w	r2, #8
 8004042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2204      	movs	r2, #4
 8004048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9f9 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 800405e:	e005      	b.n	800406c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9eb 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9fc 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01b      	beq.n	80040be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0210 	mvn.w	r2, #16
 800408e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2208      	movs	r2, #8
 8004094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9d3 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 80040aa:	e005      	b.n	80040b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f9c5 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9d6 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0201 	mvn.w	r2, #1
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc fdd7 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fff4 	bl	80050f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 ffec 	bl	800510c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f990 	bl	8004478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0220 	mvn.w	r2, #32
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 ffb4 	bl	80050e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 ffc0 	bl	8005120 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ffb8 	bl	8005134 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00c      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 ffb0 	bl	8005148 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 ffa8 	bl	800515c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ff      	b.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b14      	cmp	r3, #20
 800423e:	f200 80f0 	bhi.w	8004422 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	0800429d 	.word	0x0800429d
 800424c:	08004423 	.word	0x08004423
 8004250:	08004423 	.word	0x08004423
 8004254:	08004423 	.word	0x08004423
 8004258:	080042dd 	.word	0x080042dd
 800425c:	08004423 	.word	0x08004423
 8004260:	08004423 	.word	0x08004423
 8004264:	08004423 	.word	0x08004423
 8004268:	0800431f 	.word	0x0800431f
 800426c:	08004423 	.word	0x08004423
 8004270:	08004423 	.word	0x08004423
 8004274:	08004423 	.word	0x08004423
 8004278:	0800435f 	.word	0x0800435f
 800427c:	08004423 	.word	0x08004423
 8004280:	08004423 	.word	0x08004423
 8004284:	08004423 	.word	0x08004423
 8004288:	080043a1 	.word	0x080043a1
 800428c:	08004423 	.word	0x08004423
 8004290:	08004423 	.word	0x08004423
 8004294:	08004423 	.word	0x08004423
 8004298:	080043e1 	.word	0x080043e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f9a6 	bl	80045f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0208 	orr.w	r2, r2, #8
 80042b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	619a      	str	r2, [r3, #24]
      break;
 80042da:	e0a5      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fa20 	bl	8004728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6999      	ldr	r1, [r3, #24]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	619a      	str	r2, [r3, #24]
      break;
 800431c:	e084      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa93 	bl	8004850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0208 	orr.w	r2, r2, #8
 8004338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69d9      	ldr	r1, [r3, #28]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
      break;
 800435c:	e064      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fb05 	bl	8004974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69d9      	ldr	r1, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	021a      	lsls	r2, r3, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	61da      	str	r2, [r3, #28]
      break;
 800439e:	e043      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fb78 	bl	8004a9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0208 	orr.w	r2, r2, #8
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80043de:	e023      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fbc2 	bl	8004b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004420:	e002      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop

0800443c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a4c      	ldr	r2, [pc, #304]	@ (80045d0 <TIM_Base_SetConfig+0x144>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d017      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044aa:	d013      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a49      	ldr	r2, [pc, #292]	@ (80045d4 <TIM_Base_SetConfig+0x148>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a48      	ldr	r2, [pc, #288]	@ (80045d8 <TIM_Base_SetConfig+0x14c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a47      	ldr	r2, [pc, #284]	@ (80045dc <TIM_Base_SetConfig+0x150>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a46      	ldr	r2, [pc, #280]	@ (80045e0 <TIM_Base_SetConfig+0x154>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x48>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a45      	ldr	r2, [pc, #276]	@ (80045e4 <TIM_Base_SetConfig+0x158>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a39      	ldr	r2, [pc, #228]	@ (80045d0 <TIM_Base_SetConfig+0x144>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d023      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d01f      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a36      	ldr	r2, [pc, #216]	@ (80045d4 <TIM_Base_SetConfig+0x148>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a35      	ldr	r2, [pc, #212]	@ (80045d8 <TIM_Base_SetConfig+0x14c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <TIM_Base_SetConfig+0x150>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a33      	ldr	r2, [pc, #204]	@ (80045e0 <TIM_Base_SetConfig+0x154>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a33      	ldr	r2, [pc, #204]	@ (80045e8 <TIM_Base_SetConfig+0x15c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <TIM_Base_SetConfig+0x160>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a31      	ldr	r2, [pc, #196]	@ (80045f0 <TIM_Base_SetConfig+0x164>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <TIM_Base_SetConfig+0x158>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a18      	ldr	r2, [pc, #96]	@ (80045d0 <TIM_Base_SetConfig+0x144>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <TIM_Base_SetConfig+0x110>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a1a      	ldr	r2, [pc, #104]	@ (80045e0 <TIM_Base_SetConfig+0x154>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <TIM_Base_SetConfig+0x110>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1a      	ldr	r2, [pc, #104]	@ (80045e8 <TIM_Base_SetConfig+0x15c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x110>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <TIM_Base_SetConfig+0x160>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x110>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a18      	ldr	r2, [pc, #96]	@ (80045f0 <TIM_Base_SetConfig+0x164>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x110>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a13      	ldr	r2, [pc, #76]	@ (80045e4 <TIM_Base_SetConfig+0x158>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d103      	bne.n	80045a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]
  }
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40015000 	.word	0x40015000
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800

080045f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f023 0201 	bic.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0302 	bic.w	r3, r3, #2
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a30      	ldr	r2, [pc, #192]	@ (8004710 <TIM_OC1_SetConfig+0x11c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <TIM_OC1_SetConfig+0x88>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2f      	ldr	r2, [pc, #188]	@ (8004714 <TIM_OC1_SetConfig+0x120>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00f      	beq.n	800467c <TIM_OC1_SetConfig+0x88>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a2e      	ldr	r2, [pc, #184]	@ (8004718 <TIM_OC1_SetConfig+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00b      	beq.n	800467c <TIM_OC1_SetConfig+0x88>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2d      	ldr	r2, [pc, #180]	@ (800471c <TIM_OC1_SetConfig+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d007      	beq.n	800467c <TIM_OC1_SetConfig+0x88>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2c      	ldr	r2, [pc, #176]	@ (8004720 <TIM_OC1_SetConfig+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_OC1_SetConfig+0x88>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2b      	ldr	r2, [pc, #172]	@ (8004724 <TIM_OC1_SetConfig+0x130>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d10c      	bne.n	8004696 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0308 	bic.w	r3, r3, #8
 8004682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <TIM_OC1_SetConfig+0x11c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <TIM_OC1_SetConfig+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <TIM_OC1_SetConfig+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00f      	beq.n	80046c6 <TIM_OC1_SetConfig+0xd2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004718 <TIM_OC1_SetConfig+0x124>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_OC1_SetConfig+0xd2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	@ (800471c <TIM_OC1_SetConfig+0x128>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_OC1_SetConfig+0xd2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <TIM_OC1_SetConfig+0x12c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC1_SetConfig+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <TIM_OC1_SetConfig+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d111      	bne.n	80046ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40013400 	.word	0x40013400
 8004718:	40014000 	.word	0x40014000
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800
 8004724:	40015000 	.word	0x40015000

08004728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f023 0210 	bic.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <TIM_OC2_SetConfig+0x110>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_OC2_SetConfig+0x74>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <TIM_OC2_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC2_SetConfig+0x74>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <TIM_OC2_SetConfig+0x118>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <TIM_OC2_SetConfig+0x110>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <TIM_OC2_SetConfig+0xc0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <TIM_OC2_SetConfig+0x114>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00f      	beq.n	80047e8 <TIM_OC2_SetConfig+0xc0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <TIM_OC2_SetConfig+0x11c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <TIM_OC2_SetConfig+0xc0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004848 <TIM_OC2_SetConfig+0x120>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_OC2_SetConfig+0xc0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <TIM_OC2_SetConfig+0x124>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC2_SetConfig+0xc0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <TIM_OC2_SetConfig+0x118>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d113      	bne.n	8004810 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40015000 	.word	0x40015000
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2b      	ldr	r2, [pc, #172]	@ (800495c <TIM_OC3_SetConfig+0x10c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_OC3_SetConfig+0x72>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <TIM_OC3_SetConfig+0x110>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC3_SetConfig+0x72>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a29      	ldr	r2, [pc, #164]	@ (8004964 <TIM_OC3_SetConfig+0x114>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10d      	bne.n	80048de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <TIM_OC3_SetConfig+0x10c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_OC3_SetConfig+0xbe>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <TIM_OC3_SetConfig+0x110>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_OC3_SetConfig+0xbe>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <TIM_OC3_SetConfig+0x118>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_OC3_SetConfig+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <TIM_OC3_SetConfig+0x11c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_OC3_SetConfig+0xbe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <TIM_OC3_SetConfig+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC3_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a16      	ldr	r2, [pc, #88]	@ (8004964 <TIM_OC3_SetConfig+0x114>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d113      	bne.n	8004936 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40013400 	.word	0x40013400
 8004964:	40015000 	.word	0x40015000
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	031b      	lsls	r3, r3, #12
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a84 <TIM_OC4_SetConfig+0x110>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_OC4_SetConfig+0x74>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a2b      	ldr	r2, [pc, #172]	@ (8004a88 <TIM_OC4_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_OC4_SetConfig+0x74>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a8c <TIM_OC4_SetConfig+0x118>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10d      	bne.n	8004a04 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a1f      	ldr	r2, [pc, #124]	@ (8004a84 <TIM_OC4_SetConfig+0x110>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <TIM_OC4_SetConfig+0xc0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a88 <TIM_OC4_SetConfig+0x114>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00f      	beq.n	8004a34 <TIM_OC4_SetConfig+0xc0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	@ (8004a90 <TIM_OC4_SetConfig+0x11c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_OC4_SetConfig+0xc0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <TIM_OC4_SetConfig+0x120>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_OC4_SetConfig+0xc0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	@ (8004a98 <TIM_OC4_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_OC4_SetConfig+0xc0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <TIM_OC4_SetConfig+0x118>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d113      	bne.n	8004a5c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	621a      	str	r2, [r3, #32]
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40013400 	.word	0x40013400
 8004a8c:	40015000 	.word	0x40015000
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40014400 	.word	0x40014400
 8004a98:	40014800 	.word	0x40014800

08004a9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ae0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <TIM_OC5_SetConfig+0xbc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <TIM_OC5_SetConfig+0x82>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <TIM_OC5_SetConfig+0xc0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00f      	beq.n	8004b1e <TIM_OC5_SetConfig+0x82>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <TIM_OC5_SetConfig+0xc4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_OC5_SetConfig+0x82>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <TIM_OC5_SetConfig+0xc8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d007      	beq.n	8004b1e <TIM_OC5_SetConfig+0x82>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a15      	ldr	r2, [pc, #84]	@ (8004b68 <TIM_OC5_SetConfig+0xcc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_OC5_SetConfig+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a14      	ldr	r2, [pc, #80]	@ (8004b6c <TIM_OC5_SetConfig+0xd0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d109      	bne.n	8004b32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800
 8004b6c:	40015000 	.word	0x40015000

08004b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	051b      	lsls	r3, r3, #20
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <TIM_OC6_SetConfig+0xc0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <TIM_OC6_SetConfig+0x84>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <TIM_OC6_SetConfig+0xc4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00f      	beq.n	8004bf4 <TIM_OC6_SetConfig+0x84>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	@ (8004c38 <TIM_OC6_SetConfig+0xc8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_OC6_SetConfig+0x84>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <TIM_OC6_SetConfig+0xcc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_OC6_SetConfig+0x84>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a16      	ldr	r2, [pc, #88]	@ (8004c40 <TIM_OC6_SetConfig+0xd0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC6_SetConfig+0x84>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a15      	ldr	r2, [pc, #84]	@ (8004c44 <TIM_OC6_SetConfig+0xd4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d109      	bne.n	8004c08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800
 8004c44:	40015000 	.word	0x40015000

08004c48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0201 	bic.w	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a28      	ldr	r2, [pc, #160]	@ (8004d14 <TIM_TI1_SetConfig+0xcc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d017      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a25      	ldr	r2, [pc, #148]	@ (8004d18 <TIM_TI1_SetConfig+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a24      	ldr	r2, [pc, #144]	@ (8004d1c <TIM_TI1_SetConfig+0xd4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a23      	ldr	r2, [pc, #140]	@ (8004d20 <TIM_TI1_SetConfig+0xd8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a22      	ldr	r2, [pc, #136]	@ (8004d24 <TIM_TI1_SetConfig+0xdc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a21      	ldr	r2, [pc, #132]	@ (8004d28 <TIM_TI1_SetConfig+0xe0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_TI1_SetConfig+0x66>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	@ (8004d2c <TIM_TI1_SetConfig+0xe4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <TIM_TI1_SetConfig+0x6a>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <TIM_TI1_SetConfig+0x6c>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e003      	b.n	8004cd2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f023 030a 	bic.w	r3, r3, #10
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 030a 	and.w	r3, r3, #10
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40015000 	.word	0x40015000

08004d30 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	@ 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0a0      	b.n	8004e86 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fc f9cf 	bl	80010fc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7ff fb8b 	bl	800448c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2203      	movs	r2, #3
 8004d84:	f7ff ff60 	bl	8004c48 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 020c 	bic.w	r2, r2, #12
 8004d96:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004db8:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dcc:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ddc:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0204 	orr.w	r2, r2, #4
 8004e00:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004e0a:	2370      	movs	r3, #112	@ 0x70
 8004e0c:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f107 020c 	add.w	r2, r7, #12
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fc7c 	bl	8004728 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004e52:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	@ 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e074      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a34      	ldr	r2, [pc, #208]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a33      	ldr	r2, [pc, #204]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a31      	ldr	r2, [pc, #196]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004eec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a11      	ldr	r2, [pc, #68]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40013400 	.word	0x40013400
 8004fa8:	40015000 	.word	0x40015000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000

08004fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e078      	b.n	80050ca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d11c      	bne.n	80050b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40015000 	.word	0x40015000

080050e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e042      	b.n	8005208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fb feb1 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	@ 0x24
 800519e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fbb2 	bl	8005924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8b3 	bl	800532c <UART_SetConfig>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e01b      	b.n	8005208 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fc31 	bl	8005a68 <UART_CheckIdleState>
 8005206:	4603      	mov	r3, r0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	2b20      	cmp	r3, #32
 8005228:	d17b      	bne.n	8005322 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_Transmit+0x26>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e074      	b.n	8005324 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	@ 0x21
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524a:	f7fc f935 	bl	80014b8 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005268:	d108      	bne.n	800527c <HAL_UART_Transmit+0x6c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e003      	b.n	8005284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005284:	e030      	b.n	80052e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	@ 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fc93 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e03d      	b.n	8005324 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	3302      	adds	r3, #2
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e007      	b.n	80052d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1c8      	bne.n	8005286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	2140      	movs	r1, #64	@ 0x40
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fc5c 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800532c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005330:	b08c      	sub	sp, #48	@ 0x30
 8005332:	af00      	add	r7, sp, #0
 8005334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	431a      	orrs	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	431a      	orrs	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	4313      	orrs	r3, r2
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4baa      	ldr	r3, [pc, #680]	@ (8005604 <UART_SetConfig+0x2d8>)
 800535c:	4013      	ands	r3, r2
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005364:	430b      	orrs	r3, r1
 8005366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a9f      	ldr	r2, [pc, #636]	@ (8005608 <UART_SetConfig+0x2dc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005394:	4313      	orrs	r3, r2
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	f023 010f 	bic.w	r1, r3, #15
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a90      	ldr	r2, [pc, #576]	@ (800560c <UART_SetConfig+0x2e0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d125      	bne.n	800541c <UART_SetConfig+0xf0>
 80053d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005610 <UART_SetConfig+0x2e4>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d81a      	bhi.n	8005414 <UART_SetConfig+0xe8>
 80053de:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0xb8>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005405 	.word	0x08005405
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e116      	b.n	800562a <UART_SetConfig+0x2fe>
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005402:	e112      	b.n	800562a <UART_SetConfig+0x2fe>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540a:	e10e      	b.n	800562a <UART_SetConfig+0x2fe>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e10a      	b.n	800562a <UART_SetConfig+0x2fe>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541a:	e106      	b.n	800562a <UART_SetConfig+0x2fe>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a7c      	ldr	r2, [pc, #496]	@ (8005614 <UART_SetConfig+0x2e8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d138      	bne.n	8005498 <UART_SetConfig+0x16c>
 8005426:	4b7a      	ldr	r3, [pc, #488]	@ (8005610 <UART_SetConfig+0x2e4>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d82d      	bhi.n	8005490 <UART_SetConfig+0x164>
 8005434:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <UART_SetConfig+0x110>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005471 	.word	0x08005471
 8005440:	08005491 	.word	0x08005491
 8005444:	08005491 	.word	0x08005491
 8005448:	08005491 	.word	0x08005491
 800544c:	08005481 	.word	0x08005481
 8005450:	08005491 	.word	0x08005491
 8005454:	08005491 	.word	0x08005491
 8005458:	08005491 	.word	0x08005491
 800545c:	08005479 	.word	0x08005479
 8005460:	08005491 	.word	0x08005491
 8005464:	08005491 	.word	0x08005491
 8005468:	08005491 	.word	0x08005491
 800546c:	08005489 	.word	0x08005489
 8005470:	2300      	movs	r3, #0
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e0d8      	b.n	800562a <UART_SetConfig+0x2fe>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e0d4      	b.n	800562a <UART_SetConfig+0x2fe>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005486:	e0d0      	b.n	800562a <UART_SetConfig+0x2fe>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548e:	e0cc      	b.n	800562a <UART_SetConfig+0x2fe>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005496:	e0c8      	b.n	800562a <UART_SetConfig+0x2fe>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5e      	ldr	r2, [pc, #376]	@ (8005618 <UART_SetConfig+0x2ec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d125      	bne.n	80054ee <UART_SetConfig+0x1c2>
 80054a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005610 <UART_SetConfig+0x2e4>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054ac:	2b30      	cmp	r3, #48	@ 0x30
 80054ae:	d016      	beq.n	80054de <UART_SetConfig+0x1b2>
 80054b0:	2b30      	cmp	r3, #48	@ 0x30
 80054b2:	d818      	bhi.n	80054e6 <UART_SetConfig+0x1ba>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d00a      	beq.n	80054ce <UART_SetConfig+0x1a2>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d814      	bhi.n	80054e6 <UART_SetConfig+0x1ba>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <UART_SetConfig+0x19a>
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d008      	beq.n	80054d6 <UART_SetConfig+0x1aa>
 80054c4:	e00f      	b.n	80054e6 <UART_SetConfig+0x1ba>
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054cc:	e0ad      	b.n	800562a <UART_SetConfig+0x2fe>
 80054ce:	2302      	movs	r3, #2
 80054d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d4:	e0a9      	b.n	800562a <UART_SetConfig+0x2fe>
 80054d6:	2304      	movs	r3, #4
 80054d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054dc:	e0a5      	b.n	800562a <UART_SetConfig+0x2fe>
 80054de:	2308      	movs	r3, #8
 80054e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e4:	e0a1      	b.n	800562a <UART_SetConfig+0x2fe>
 80054e6:	2310      	movs	r3, #16
 80054e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ec:	e09d      	b.n	800562a <UART_SetConfig+0x2fe>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <UART_SetConfig+0x2f0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d125      	bne.n	8005544 <UART_SetConfig+0x218>
 80054f8:	4b45      	ldr	r3, [pc, #276]	@ (8005610 <UART_SetConfig+0x2e4>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005502:	2bc0      	cmp	r3, #192	@ 0xc0
 8005504:	d016      	beq.n	8005534 <UART_SetConfig+0x208>
 8005506:	2bc0      	cmp	r3, #192	@ 0xc0
 8005508:	d818      	bhi.n	800553c <UART_SetConfig+0x210>
 800550a:	2b80      	cmp	r3, #128	@ 0x80
 800550c:	d00a      	beq.n	8005524 <UART_SetConfig+0x1f8>
 800550e:	2b80      	cmp	r3, #128	@ 0x80
 8005510:	d814      	bhi.n	800553c <UART_SetConfig+0x210>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <UART_SetConfig+0x1f0>
 8005516:	2b40      	cmp	r3, #64	@ 0x40
 8005518:	d008      	beq.n	800552c <UART_SetConfig+0x200>
 800551a:	e00f      	b.n	800553c <UART_SetConfig+0x210>
 800551c:	2300      	movs	r3, #0
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e082      	b.n	800562a <UART_SetConfig+0x2fe>
 8005524:	2302      	movs	r3, #2
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e07e      	b.n	800562a <UART_SetConfig+0x2fe>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e07a      	b.n	800562a <UART_SetConfig+0x2fe>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e076      	b.n	800562a <UART_SetConfig+0x2fe>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e072      	b.n	800562a <UART_SetConfig+0x2fe>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a35      	ldr	r2, [pc, #212]	@ (8005620 <UART_SetConfig+0x2f4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d12a      	bne.n	80055a4 <UART_SetConfig+0x278>
 800554e:	4b30      	ldr	r3, [pc, #192]	@ (8005610 <UART_SetConfig+0x2e4>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800555c:	d01a      	beq.n	8005594 <UART_SetConfig+0x268>
 800555e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005562:	d81b      	bhi.n	800559c <UART_SetConfig+0x270>
 8005564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005568:	d00c      	beq.n	8005584 <UART_SetConfig+0x258>
 800556a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556e:	d815      	bhi.n	800559c <UART_SetConfig+0x270>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <UART_SetConfig+0x250>
 8005574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005578:	d008      	beq.n	800558c <UART_SetConfig+0x260>
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x270>
 800557c:	2300      	movs	r3, #0
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e052      	b.n	800562a <UART_SetConfig+0x2fe>
 8005584:	2302      	movs	r3, #2
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e04e      	b.n	800562a <UART_SetConfig+0x2fe>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e04a      	b.n	800562a <UART_SetConfig+0x2fe>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e046      	b.n	800562a <UART_SetConfig+0x2fe>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	e042      	b.n	800562a <UART_SetConfig+0x2fe>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <UART_SetConfig+0x2dc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d13a      	bne.n	8005624 <UART_SetConfig+0x2f8>
 80055ae:	4b18      	ldr	r3, [pc, #96]	@ (8005610 <UART_SetConfig+0x2e4>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055bc:	d01a      	beq.n	80055f4 <UART_SetConfig+0x2c8>
 80055be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c2:	d81b      	bhi.n	80055fc <UART_SetConfig+0x2d0>
 80055c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c8:	d00c      	beq.n	80055e4 <UART_SetConfig+0x2b8>
 80055ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ce:	d815      	bhi.n	80055fc <UART_SetConfig+0x2d0>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <UART_SetConfig+0x2b0>
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d8:	d008      	beq.n	80055ec <UART_SetConfig+0x2c0>
 80055da:	e00f      	b.n	80055fc <UART_SetConfig+0x2d0>
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e2:	e022      	b.n	800562a <UART_SetConfig+0x2fe>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	e01e      	b.n	800562a <UART_SetConfig+0x2fe>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f2:	e01a      	b.n	800562a <UART_SetConfig+0x2fe>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fa:	e016      	b.n	800562a <UART_SetConfig+0x2fe>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005602:	e012      	b.n	800562a <UART_SetConfig+0x2fe>
 8005604:	cfff69f3 	.word	0xcfff69f3
 8005608:	40008000 	.word	0x40008000
 800560c:	40013800 	.word	0x40013800
 8005610:	40021000 	.word	0x40021000
 8005614:	40004400 	.word	0x40004400
 8005618:	40004800 	.word	0x40004800
 800561c:	40004c00 	.word	0x40004c00
 8005620:	40005000 	.word	0x40005000
 8005624:	2310      	movs	r3, #16
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4aae      	ldr	r2, [pc, #696]	@ (80058e8 <UART_SetConfig+0x5bc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	f040 8097 	bne.w	8005764 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800563a:	2b08      	cmp	r3, #8
 800563c:	d823      	bhi.n	8005686 <UART_SetConfig+0x35a>
 800563e:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <UART_SetConfig+0x318>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005669 	.word	0x08005669
 8005648:	08005687 	.word	0x08005687
 800564c:	08005671 	.word	0x08005671
 8005650:	08005687 	.word	0x08005687
 8005654:	08005677 	.word	0x08005677
 8005658:	08005687 	.word	0x08005687
 800565c:	08005687 	.word	0x08005687
 8005660:	08005687 	.word	0x08005687
 8005664:	0800567f 	.word	0x0800567f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fe f862 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 800566c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800566e:	e010      	b.n	8005692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005670:	4b9e      	ldr	r3, [pc, #632]	@ (80058ec <UART_SetConfig+0x5c0>)
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005674:	e00d      	b.n	8005692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005676:	f7fd ffed 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800567a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800567c:	e009      	b.n	8005692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005684:	e005      	b.n	8005692 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8130 	beq.w	80058fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	4a94      	ldr	r2, [pc, #592]	@ (80058f0 <UART_SetConfig+0x5c4>)
 80056a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a4:	461a      	mov	r2, r3
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d305      	bcc.n	80056ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d903      	bls.n	80056d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056d0:	e113      	b.n	80058fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	2200      	movs	r2, #0
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	60fa      	str	r2, [r7, #12]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	4a84      	ldr	r2, [pc, #528]	@ (80058f0 <UART_SetConfig+0x5c4>)
 80056e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056f4:	f7fa fd90 	bl	8000218 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	020b      	lsls	r3, r1, #8
 800570a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800570e:	0202      	lsls	r2, r0, #8
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	6849      	ldr	r1, [r1, #4]
 8005714:	0849      	lsrs	r1, r1, #1
 8005716:	2000      	movs	r0, #0
 8005718:	460c      	mov	r4, r1
 800571a:	4605      	mov	r5, r0
 800571c:	eb12 0804 	adds.w	r8, r2, r4
 8005720:	eb43 0905 	adc.w	r9, r3, r5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	469a      	mov	sl, r3
 800572c:	4693      	mov	fp, r2
 800572e:	4652      	mov	r2, sl
 8005730:	465b      	mov	r3, fp
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fa fd6f 	bl	8000218 <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4613      	mov	r3, r2
 8005740:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005748:	d308      	bcc.n	800575c <UART_SetConfig+0x430>
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005750:	d204      	bcs.n	800575c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a3a      	ldr	r2, [r7, #32]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	e0ce      	b.n	80058fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005762:	e0ca      	b.n	80058fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800576c:	d166      	bne.n	800583c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800576e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005772:	2b08      	cmp	r3, #8
 8005774:	d827      	bhi.n	80057c6 <UART_SetConfig+0x49a>
 8005776:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0x450>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057b1 	.word	0x080057b1
 8005788:	080057c7 	.word	0x080057c7
 800578c:	080057b7 	.word	0x080057b7
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057c7 	.word	0x080057c7
 8005798:	080057c7 	.word	0x080057c7
 800579c:	080057bf 	.word	0x080057bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fd ffc6 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057a6:	e014      	b.n	80057d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7fd ffd8 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ae:	e010      	b.n	80057d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b4e      	ldr	r3, [pc, #312]	@ (80058ec <UART_SetConfig+0x5c0>)
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057b4:	e00d      	b.n	80057d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b6:	f7fd ff4d 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 80057ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057bc:	e009      	b.n	80057d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c4:	e005      	b.n	80057d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8090 	beq.w	80058fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	4a44      	ldr	r2, [pc, #272]	@ (80058f0 <UART_SetConfig+0x5c4>)
 80057e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ec:	005a      	lsls	r2, r3, #1
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	441a      	add	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d916      	bls.n	8005834 <UART_SetConfig+0x508>
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580c:	d212      	bcs.n	8005834 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f023 030f 	bic.w	r3, r3, #15
 8005816:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	b29a      	uxth	r2, r3
 8005824:	8bfb      	ldrh	r3, [r7, #30]
 8005826:	4313      	orrs	r3, r2
 8005828:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	8bfa      	ldrh	r2, [r7, #30]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	e062      	b.n	80058fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800583a:	e05e      	b.n	80058fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800583c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005840:	2b08      	cmp	r3, #8
 8005842:	d828      	bhi.n	8005896 <UART_SetConfig+0x56a>
 8005844:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <UART_SetConfig+0x520>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	08005897 	.word	0x08005897
 800585c:	08005887 	.word	0x08005887
 8005860:	08005897 	.word	0x08005897
 8005864:	08005897 	.word	0x08005897
 8005868:	08005897 	.word	0x08005897
 800586c:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fd ff5e 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8005874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005876:	e014      	b.n	80058a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005878:	f7fd ff70 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 800587c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800587e:	e010      	b.n	80058a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <UART_SetConfig+0x5c0>)
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005884:	e00d      	b.n	80058a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fd fee5 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 800588a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058a0:	bf00      	nop
    }

    if (pclk != 0U)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d028      	beq.n	80058fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	4a10      	ldr	r2, [pc, #64]	@ (80058f0 <UART_SetConfig+0x5c4>)
 80058ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d910      	bls.n	80058f4 <UART_SetConfig+0x5c8>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058d8:	d20c      	bcs.n	80058f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e009      	b.n	80058fa <UART_SetConfig+0x5ce>
 80058e6:	bf00      	nop
 80058e8:	40008000 	.word	0x40008000
 80058ec:	00f42400 	.word	0x00f42400
 80058f0:	08006004 	.word	0x08006004
      }
      else
      {
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2201      	movs	r2, #1
 8005906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2200      	movs	r2, #0
 8005914:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005916:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800591a:	4618      	mov	r0, r3
 800591c:	3730      	adds	r7, #48	@ 0x30
 800591e:	46bd      	mov	sp, r7
 8005920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a22:	d10a      	bne.n	8005a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b098      	sub	sp, #96	@ 0x60
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a78:	f7fb fd1e 	bl	80014b8 <HAL_GetTick>
 8005a7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d12f      	bne.n	8005aec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f88e 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d022      	beq.n	8005aec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e063      	b.n	8005bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d149      	bne.n	8005b8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b02:	2200      	movs	r2, #0
 8005b04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f857 	bl	8005bbc <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d03c      	beq.n	8005b8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	623b      	str	r3, [r7, #32]
   return(result);
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b66:	61fa      	str	r2, [r7, #28]
 8005b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	69b9      	ldr	r1, [r7, #24]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	617b      	str	r3, [r7, #20]
   return(result);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e012      	b.n	8005bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3758      	adds	r7, #88	@ 0x58
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	e04f      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d04b      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fb fc6f 	bl	80014b8 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <UART_WaitOnFlagUntilTimeout+0x30>
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e04e      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d037      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b80      	cmp	r3, #128	@ 0x80
 8005c02:	d034      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	d031      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d110      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f838 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e029      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c48:	d111      	bne.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81e 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d0a0      	beq.n	8005bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b095      	sub	sp, #84	@ 0x54
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d118      	bne.n	8005d42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	@ 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e027      	b.n	8005dc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	@ 0x24
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005da6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e02d      	b.n	8005e48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	@ 0x24
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f84f 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e02d      	b.n	8005ec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	@ 0x24
 8005e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f811 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eec:	e031      	b.n	8005f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eee:	2308      	movs	r3, #8
 8005ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	0f5b      	lsrs	r3, r3, #29
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	7b3a      	ldrb	r2, [r7, #12]
 8005f1a:	4911      	ldr	r1, [pc, #68]	@ (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f1c:	5c8a      	ldrb	r2, [r1, r2]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f22:	7b3a      	ldrb	r2, [r7, #12]
 8005f24:	490f      	ldr	r1, [pc, #60]	@ (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	7b7a      	ldrb	r2, [r7, #13]
 8005f38:	4909      	ldr	r1, [pc, #36]	@ (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f3a:	5c8a      	ldrb	r2, [r1, r2]
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f40:	7b7a      	ldrb	r2, [r7, #13]
 8005f42:	4908      	ldr	r1, [pc, #32]	@ (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	0800601c 	.word	0x0800601c
 8005f64:	08006024 	.word	0x08006024

08005f68 <memset>:
 8005f68:	4402      	add	r2, r0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <memset+0xa>
 8005f70:	4770      	bx	lr
 8005f72:	f803 1b01 	strb.w	r1, [r3], #1
 8005f76:	e7f9      	b.n	8005f6c <memset+0x4>

08005f78 <__libc_init_array>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fb0 <__libc_init_array+0x38>)
 8005f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fb4 <__libc_init_array+0x3c>)
 8005f7e:	1b64      	subs	r4, r4, r5
 8005f80:	10a4      	asrs	r4, r4, #2
 8005f82:	2600      	movs	r6, #0
 8005f84:	42a6      	cmp	r6, r4
 8005f86:	d109      	bne.n	8005f9c <__libc_init_array+0x24>
 8005f88:	4d0b      	ldr	r5, [pc, #44]	@ (8005fb8 <__libc_init_array+0x40>)
 8005f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005fbc <__libc_init_array+0x44>)
 8005f8c:	f000 f818 	bl	8005fc0 <_init>
 8005f90:	1b64      	subs	r4, r4, r5
 8005f92:	10a4      	asrs	r4, r4, #2
 8005f94:	2600      	movs	r6, #0
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	d105      	bne.n	8005fa6 <__libc_init_array+0x2e>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa0:	4798      	blx	r3
 8005fa2:	3601      	adds	r6, #1
 8005fa4:	e7ee      	b.n	8005f84 <__libc_init_array+0xc>
 8005fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005faa:	4798      	blx	r3
 8005fac:	3601      	adds	r6, #1
 8005fae:	e7f2      	b.n	8005f96 <__libc_init_array+0x1e>
 8005fb0:	08006034 	.word	0x08006034
 8005fb4:	08006034 	.word	0x08006034
 8005fb8:	08006034 	.word	0x08006034
 8005fbc:	08006038 	.word	0x08006038

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
