
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c530  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800c710  0800c710  0000d710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc68  0800cc68  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc68  0800cc68  0000dc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc70  0800cc70  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc70  0800cc70  0000dc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc74  0800cc74  0000dc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cc78  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001d4  0800ce4c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800ce4c  0000e698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc44  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038eb  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0002d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001169  00000000  00000000  0002ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a276  00000000  00000000  0002fef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd0f  00000000  00000000  0005a167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011483c  00000000  00000000  00075e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a6b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b4  00000000  00000000  0018a6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  001917ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c6f8 	.word	0x0800c6f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800c6f8 	.word	0x0800c6f8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fba3 	bl	800a66c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f70:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f96:	f001 fc97 	bl	80028c8 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fb42 	bl	8001628 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fb0:	f002 fcc8 	bl	8003944 <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fba:	f000 fb35 	bl	8001628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_ADC1_Init+0xf0>)
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fdc:	f001 ff22 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe6:	f000 fb1f 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	@ 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001f0 	.word	0x200001f0
 8000ff8:	08600004 	.word	0x08600004

08000ffc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fb2f 	bl	800a66c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <MX_ADC2_Init+0xc4>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001016:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001036:	2204      	movs	r2, #4
 8001038:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001078:	f001 fc26 	bl	80028c8 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001082:	f000 fad1 	bl	8001628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_ADC2_Init+0xc8>)
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108a:	2306      	movs	r3, #6
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001092:	237f      	movs	r3, #127	@ 0x7f
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001096:	2304      	movs	r3, #4
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_ADC2_Init+0xc0>)
 80010a4:	f001 febe 	bl	8002e24 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010ae:	f000 fabb 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000025c 	.word	0x2000025c
 80010c0:	50000100 	.word	0x50000100
 80010c4:	19200040 	.word	0x19200040

080010c8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0a4      	sub	sp, #144	@ 0x90
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e4:	2254      	movs	r2, #84	@ 0x54
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 fabf 	bl	800a66c <memset>
  if(adcHandle->Instance==ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f6:	f040 80a0 	bne.w	800123a <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001100:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f906 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001116:	f000 fa87 	bl	8001628 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800111a:	4b79      	ldr	r3, [pc, #484]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a77      	ldr	r2, [pc, #476]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001124:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10b      	bne.n	8001144 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800112c:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a74      	ldr	r2, [pc, #464]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a6e      	ldr	r2, [pc, #440]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b6c      	ldr	r3, [pc, #432]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b69      	ldr	r3, [pc, #420]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a62      	ldr	r2, [pc, #392]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b60      	ldr	r3, [pc, #384]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800118c:	2304      	movs	r3, #4
 800118e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4859      	ldr	r0, [pc, #356]	@ (8001308 <HAL_ADC_MspInit+0x240>)
 80011a4:	f003 f8e8 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011a8:	2302      	movs	r3, #2
 80011aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f003 f8d9 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c6:	2303      	movs	r3, #3
 80011c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011da:	4619      	mov	r1, r3
 80011dc:	484b      	ldr	r0, [pc, #300]	@ (800130c <HAL_ADC_MspInit+0x244>)
 80011de:	f003 f8cb 	bl	8004378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80011e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001314 <HAL_ADC_MspInit+0x24c>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011e8:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011ea:	2205      	movs	r2, #5
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b46      	ldr	r3, [pc, #280]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001202:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 800120a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001210:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001212:	2220      	movs	r2, #32
 8001214:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800121c:	483c      	ldr	r0, [pc, #240]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 800121e:	f002 fd79 	bl	8003d14 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001228:	f000 f9fe 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a38      	ldr	r2, [pc, #224]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54
 8001232:	4a37      	ldr	r2, [pc, #220]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001238:	e05e      	b.n	80012f8 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a36      	ldr	r2, [pc, #216]	@ (8001318 <HAL_ADC_MspInit+0x250>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d159      	bne.n	80012f8 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001254:	4618      	mov	r0, r3
 8001256:	f004 f861 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8001260:	f000 f9e2 	bl	8001628 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 800126c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10b      	bne.n	800128e <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800127c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012be:	230b      	movs	r3, #11
 80012c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HAL_ADC_MspInit+0x240>)
 80012d6:	f003 f84f 	bl	8004378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012da:	2301      	movs	r3, #1
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f4:	f003 f840 	bl	8004378 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3790      	adds	r7, #144	@ 0x90
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000328 	.word	0x20000328
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800
 800130c:	48000400 	.word	0x48000400
 8001310:	200002c8 	.word	0x200002c8
 8001314:	4002001c 	.word	0x4002001c
 8001318:	50000100 	.word	0x50000100

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_DMA_Init+0x50>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <MX_DMA_Init+0x50>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6493      	str	r3, [r2, #72]	@ 0x48
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_DMA_Init+0x50>)
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_DMA_Init+0x50>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133e:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <MX_DMA_Init+0x50>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6493      	str	r3, [r2, #72]	@ 0x48
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_DMA_Init+0x50>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	200c      	movs	r0, #12
 8001358:	f002 fcb4 	bl	8003cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800135c:	200c      	movs	r0, #12
 800135e:	f002 fccb 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <MX_GPIO_Init+0x134>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <MX_GPIO_Init+0x134>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <MX_GPIO_Init+0x134>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a40      	ldr	r2, [pc, #256]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a3a      	ldr	r2, [pc, #232]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a34      	ldr	r2, [pc, #208]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001406:	f003 f939 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2104      	movs	r1, #4
 800140e:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <MX_GPIO_Init+0x138>)
 8001410:	f003 f934 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4820      	ldr	r0, [pc, #128]	@ (80014ac <MX_GPIO_Init+0x13c>)
 800142c:	f002 ffa4 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001430:	2320      	movs	r3, #32
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f002 ff95 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800144e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001460:	2307      	movs	r3, #7
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <MX_GPIO_Init+0x13c>)
 800146c:	f002 ff84 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001470:	2304      	movs	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_GPIO_Init+0x138>)
 8001488:	f002 ff76 	bl	8004378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2028      	movs	r0, #40	@ 0x28
 8001492:	f002 fc17 	bl	8003cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001496:	2028      	movs	r0, #40	@ 0x28
 8001498:	f002 fc2e 	bl	8003cf8 <HAL_NVIC_EnableIRQ>

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48000800 	.word	0x48000800

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	@ 0x70
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int32_t ch_MCC = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f000 ff8c 	bl	80023da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f855 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f7ff ff53 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ca:	f7ff ff27 	bl	800131c <MX_DMA_Init>
  MX_ADC2_Init();
 80014ce:	f7ff fd95 	bl	8000ffc <MX_ADC2_Init>
  MX_ADC1_Init();
 80014d2:	f7ff fd19 	bl	8000f08 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014d6:	f000 fc9d 	bl	8001e14 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014da:	f000 fd69 	bl	8001fb0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014de:	f000 fea7 	bl	8002230 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE);
 80014e2:	2208      	movs	r2, #8
 80014e4:	491a      	ldr	r1, [pc, #104]	@ (8001550 <main+0xa0>)
 80014e6:	481b      	ldr	r0, [pc, #108]	@ (8001554 <main+0xa4>)
 80014e8:	f001 fbaa 	bl	8002c40 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim1);
 80014ec:	481a      	ldr	r0, [pc, #104]	@ (8001558 <main+0xa8>)
 80014ee:	f004 f9bb 	bl	8005868 <HAL_TIM_Base_Start>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2224      	movs	r2, #36	@ 0x24
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 f8b7 	bl	800a66c <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	2240      	movs	r2, #64	@ 0x40
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f009 f8b0 	bl	800a66c <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <main+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001512:	2240      	movs	r2, #64	@ 0x40
 8001514:	2100      	movs	r1, #0
 8001516:	4812      	ldr	r0, [pc, #72]	@ (8001560 <main+0xb0>)
 8001518:	f009 f8a8 	bl	800a66c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800151c:	2201      	movs	r2, #1
 800151e:	490f      	ldr	r1, [pc, #60]	@ (800155c <main+0xac>)
 8001520:	4810      	ldr	r0, [pc, #64]	@ (8001564 <main+0xb4>)
 8001522:	f006 f927 	bl	8007774 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 ff8e 	bl	8002448 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	225f      	movs	r2, #95	@ 0x5f
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <main+0xb8>)
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <main+0xb4>)
 8001536:	f006 f88f 	bl	8007658 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	2218      	movs	r2, #24
 8001540:	490a      	ldr	r1, [pc, #40]	@ (800156c <main+0xbc>)
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <main+0xb4>)
 8001544:	f006 f888 	bl	8007658 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		shell();
 8001548:	f000 f88a 	bl	8001660 <shell>
	{
 800154c:	bf00      	nop
 800154e:	e7fb      	b.n	8001548 <main+0x98>
 8001550:	20000370 	.word	0x20000370
 8001554:	200001f0 	.word	0x200001f0
 8001558:	2000041c 	.word	0x2000041c
 800155c:	2000032c 	.word	0x2000032c
 8001560:	20000330 	.word	0x20000330
 8001564:	200004b4 	.word	0x200004b4
 8001568:	0800c7b4 	.word	0x0800c7b4
 800156c:	0800c79c 	.word	0x0800c79c

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	@ 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2238      	movs	r2, #56	@ 0x38
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f009 f874 	bl	800a66c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001592:	2000      	movs	r0, #0
 8001594:	f003 f8ae 	bl	80046f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	2303      	movs	r3, #3
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015aa:	2306      	movs	r3, #6
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ae:	2355      	movs	r3, #85	@ 0x55
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f94a 	bl	800485c <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ce:	f000 f82b 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2303      	movs	r3, #3
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2104      	movs	r1, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fc48 	bl	8004e80 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015f6:	f000 f817 	bl	8001628 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001616:	f000 fef9 	bl	800240c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40001000 	.word	0x40001000

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_UART_RxCpltCallback>:
uint8_t former_speed = 0;




void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_UART_RxCpltCallback+0x20>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001642:	2201      	movs	r2, #1
 8001644:	4904      	ldr	r1, [pc, #16]	@ (8001658 <HAL_UART_RxCpltCallback+0x24>)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_UART_RxCpltCallback+0x28>)
 8001648:	f006 f894 	bl	8007774 <HAL_UART_Receive_IT>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200003c4 	.word	0x200003c4
 8001658:	200003c8 	.word	0x200003c8
 800165c:	200004b4 	.word	0x200004b4

08001660 <shell>:
//  if (htim->Instance == TIM1) {
//    ADC();
//}
//}

void shell(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	if (uartRxReceived == 1)
 8001664:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <shell+0x88>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d13a      	bne.n	80016e2 <shell+0x82>
	{
		printf("OK \r\n");
 800166c:	481f      	ldr	r0, [pc, #124]	@ (80016ec <shell+0x8c>)
 800166e:	f008 fee9 	bl	800a444 <puts>
		// Si caractère reçu est ENTER
		if (uartRxBuffer[0] == ASCII_ENTER)
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <shell+0x90>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0d      	cmp	r3, #13
 8001678:	d11e      	bne.n	80016b8 <shell+0x58>
		{
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	2203      	movs	r2, #3
 8001680:	491c      	ldr	r1, [pc, #112]	@ (80016f4 <shell+0x94>)
 8001682:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <shell+0x98>)
 8001684:	f005 ffe8 	bl	8007658 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <shell+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <shell+0xa0>)
 800168e:	2100      	movs	r1, #0
 8001690:	54d1      	strb	r1, [r2, r3]

			// Process the command
			processCommand(cmdBuffer);
 8001692:	481b      	ldr	r0, [pc, #108]	@ (8001700 <shell+0xa0>)
 8001694:	f000 f8c8 	bl	8001828 <processCommand>



			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2218      	movs	r2, #24
 800169e:	4919      	ldr	r1, [pc, #100]	@ (8001704 <shell+0xa4>)
 80016a0:	4815      	ldr	r0, [pc, #84]	@ (80016f8 <shell+0x98>)
 80016a2:	f005 ffd9 	bl	8007658 <HAL_UART_Transmit>
			idx_cmd = 0;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <shell+0x9c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 80016ac:	2240      	movs	r2, #64	@ 0x40
 80016ae:	2100      	movs	r1, #0
 80016b0:	4813      	ldr	r0, [pc, #76]	@ (8001700 <shell+0xa0>)
 80016b2:	f008 ffdb 	bl	800a66c <memset>
 80016b6:	e00c      	b.n	80016d2 <shell+0x72>
		}
		else
		{
			// Si ce n'est pas ENTER, stocker le caractère dans le buffer
			if (idx_cmd < CMD_BUFFER_SIZE - 1)
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <shell+0x9c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80016be:	dc08      	bgt.n	80016d2 <shell+0x72>
			{
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <shell+0x9c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <shell+0x9c>)
 80016c8:	600a      	str	r2, [r1, #0]
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <shell+0x90>)
 80016cc:	7811      	ldrb	r1, [r2, #0]
 80016ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <shell+0xa0>)
 80016d0:	54d1      	strb	r1, [r2, r3]
			}
		}
		HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80016d2:	2201      	movs	r2, #1
 80016d4:	4906      	ldr	r1, [pc, #24]	@ (80016f0 <shell+0x90>)
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <shell+0x98>)
 80016d8:	f006 f84c 	bl	8007774 <HAL_UART_Receive_IT>

		uartRxReceived = 0;
 80016dc:	4b02      	ldr	r3, [pc, #8]	@ (80016e8 <shell+0x88>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
	}

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003c4 	.word	0x200003c4
 80016ec:	0800c710 	.word	0x0800c710
 80016f0:	200003c8 	.word	0x200003c8
 80016f4:	0800c82c 	.word	0x0800c82c
 80016f8:	200004b4 	.word	0x200004b4
 80016fc:	200003c0 	.word	0x200003c0
 8001700:	20000380 	.word	0x20000380
 8001704:	0800c814 	.word	0x0800c814

08001708 <speed>:

void speed(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b092      	sub	sp, #72	@ 0x48
 800170c:	af02      	add	r7, sp, #8

	float speed_count = __HAL_TIM_GET_COUNTER(&htim3);
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <speed+0x4c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float motor_speed = speed_count/(735/495);
 8001720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
	char speed_adc[50];
	int taille = snprintf(speed_adc, sizeof(speed_adc),"Speed_encoder: %f\r\n,", motor_speed);
 8001724:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001726:	f7fe ff47 	bl	80005b8 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4638      	mov	r0, r7
 8001730:	e9cd 2300 	strd	r2, r3, [sp]
 8001734:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <speed+0x50>)
 8001736:	2132      	movs	r1, #50	@ 0x32
 8001738:	f008 fe8c 	bl	800a454 <sniprintf>
 800173c:	6378      	str	r0, [r7, #52]	@ 0x34

	HAL_UART_Transmit(&huart2, (uint8_t*)speed_adc, taille, 100);
 800173e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001740:	b29a      	uxth	r2, r3
 8001742:	4639      	mov	r1, r7
 8001744:	2364      	movs	r3, #100	@ 0x64
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <speed+0x54>)
 8001748:	f005 ff86 	bl	8007658 <HAL_UART_Transmit>

}
 800174c:	bf00      	nop
 800174e:	3740      	adds	r7, #64	@ 0x40
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000468 	.word	0x20000468
 8001758:	0800c718 	.word	0x0800c718
 800175c:	200004b4 	.word	0x200004b4

08001760 <ADC>:

void ADC(){
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b09a      	sub	sp, #104	@ 0x68
 8001766:	af06      	add	r7, sp, #24

	HAL_Delay(100);
 8001768:	2064      	movs	r0, #100	@ 0x64
 800176a:	f000 fe6d 	bl	8002448 <HAL_Delay>
	//HAL_ADC_Start(&hadc1);


	// Lecture de la valeur ADC
	//uint32_t ADC_value = HAL_ADC_GetValue(&hadc1);
	float ADC_value = ADC_buffer[0];
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <ADC+0xac>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	HAL_Delay(10);
 800177e:	200a      	movs	r0, #10
 8001780:	f000 fe62 	bl	8002448 <HAL_Delay>
	float sensivity = 0.05;  // Sensibilité du capteur en V/A
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <ADC+0xb0>)
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48
	float V_offset = 1.65;
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <ADC+0xb4>)
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
	float V_adc = (ADC_value * 3.3f / 4095.0f); // Tension mesurée
 800178c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001790:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001818 <ADC+0xb8>
 8001794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001798:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800181c <ADC+0xbc>
 800179c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float I_current = (V_adc - V_offset) / sensivity; // Courant calculé
 80017a4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80017a8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017b0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80017b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	char buffer_adc[50];
	int taille = snprintf(buffer_adc, sizeof(buffer_adc),"ADC: %f, V: %.2f, I: %.2f\r\n", ADC_value, V_adc, I_current);
 80017bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80017be:	f7fe fefb 	bl	80005b8 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80017c8:	f7fe fef6 	bl	80005b8 <__aeabi_f2d>
 80017cc:	4680      	mov	r8, r0
 80017ce:	4689      	mov	r9, r1
 80017d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80017d2:	f7fe fef1 	bl	80005b8 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	1d38      	adds	r0, r7, #4
 80017dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017e4:	e9cd 4500 	strd	r4, r5, [sp]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <ADC+0xc0>)
 80017ea:	2132      	movs	r1, #50	@ 0x32
 80017ec:	f008 fe32 	bl	800a454 <sniprintf>
 80017f0:	63b8      	str	r0, [r7, #56]	@ 0x38

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer_adc, taille, 100);
 80017f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	1d39      	adds	r1, r7, #4
 80017f8:	2364      	movs	r3, #100	@ 0x64
 80017fa:	480a      	ldr	r0, [pc, #40]	@ (8001824 <ADC+0xc4>)
 80017fc:	f005 ff2c 	bl	8007658 <HAL_UART_Transmit>

}
 8001800:	bf00      	nop
 8001802:	3750      	adds	r7, #80	@ 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800180a:	bf00      	nop
 800180c:	20000370 	.word	0x20000370
 8001810:	3d4ccccd 	.word	0x3d4ccccd
 8001814:	3fd33333 	.word	0x3fd33333
 8001818:	40533333 	.word	0x40533333
 800181c:	457ff000 	.word	0x457ff000
 8001820:	0800c730 	.word	0x0800c730
 8001824:	200004b4 	.word	0x200004b4

08001828 <processCommand>:

void processCommand(char *cmd){
 8001828:	b580      	push	{r7, lr}
 800182a:	b092      	sub	sp, #72	@ 0x48
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	if (strcmp(cmd, "help") == 0) {
 8001830:	4987      	ldr	r1, [pc, #540]	@ (8001a50 <processCommand+0x228>)
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7fe fcf4 	bl	8000220 <strcmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	223b      	movs	r2, #59	@ 0x3b
 8001844:	4983      	ldr	r1, [pc, #524]	@ (8001a54 <processCommand+0x22c>)
 8001846:	4884      	ldr	r0, [pc, #528]	@ (8001a58 <processCommand+0x230>)
 8001848:	f005 ff06 	bl	8007658 <HAL_UART_Transmit>


	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 800184c:	e0fc      	b.n	8001a48 <processCommand+0x220>
	else if (strcmp(cmd, "pinout") == 0) {
 800184e:	4983      	ldr	r1, [pc, #524]	@ (8001a5c <processCommand+0x234>)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7fe fce5 	bl	8000220 <strcmp>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	221a      	movs	r2, #26
 8001862:	497f      	ldr	r1, [pc, #508]	@ (8001a60 <processCommand+0x238>)
 8001864:	487c      	ldr	r0, [pc, #496]	@ (8001a58 <processCommand+0x230>)
 8001866:	f005 fef7 	bl	8007658 <HAL_UART_Transmit>
}
 800186a:	e0ed      	b.n	8001a48 <processCommand+0x220>
	else if (strcmp(cmd, "start") == 0) {
 800186c:	497d      	ldr	r1, [pc, #500]	@ (8001a64 <processCommand+0x23c>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fcd6 	bl	8000220 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d124      	bne.n	80018c4 <processCommand+0x9c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 800187a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a68 <processCommand+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 8001884:	4b78      	ldr	r3, [pc, #480]	@ (8001a68 <processCommand+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188c:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	220a      	movs	r2, #10
 8001894:	4975      	ldr	r1, [pc, #468]	@ (8001a6c <processCommand+0x244>)
 8001896:	4870      	ldr	r0, [pc, #448]	@ (8001a58 <processCommand+0x230>)
 8001898:	f005 fede 	bl	8007658 <HAL_UART_Transmit>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800189c:	2100      	movs	r1, #0
 800189e:	4872      	ldr	r0, [pc, #456]	@ (8001a68 <processCommand+0x240>)
 80018a0:	f004 f92c 	bl	8005afc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018a4:	2100      	movs	r1, #0
 80018a6:	4870      	ldr	r0, [pc, #448]	@ (8001a68 <processCommand+0x240>)
 80018a8:	f005 fbbe 	bl	8007028 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018ac:	2104      	movs	r1, #4
 80018ae:	486e      	ldr	r0, [pc, #440]	@ (8001a68 <processCommand+0x240>)
 80018b0:	f004 f924 	bl	8005afc <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018b4:	2104      	movs	r1, #4
 80018b6:	486c      	ldr	r0, [pc, #432]	@ (8001a68 <processCommand+0x240>)
 80018b8:	f005 fbb6 	bl	8007028 <HAL_TIMEx_PWMN_Start>
		former_speed = 50;
 80018bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a70 <processCommand+0x248>)
 80018be:	2232      	movs	r2, #50	@ 0x32
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	e0c1      	b.n	8001a48 <processCommand+0x220>
	else if (strcmp(cmd, "stop") == 0) {
 80018c4:	496b      	ldr	r1, [pc, #428]	@ (8001a74 <processCommand+0x24c>)
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fcaa 	bl	8000220 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11a      	bne.n	8001908 <processCommand+0xe0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	220b      	movs	r2, #11
 80018d8:	4967      	ldr	r1, [pc, #412]	@ (8001a78 <processCommand+0x250>)
 80018da:	485f      	ldr	r0, [pc, #380]	@ (8001a58 <processCommand+0x230>)
 80018dc:	f005 febc 	bl	8007658 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4861      	ldr	r0, [pc, #388]	@ (8001a68 <processCommand+0x240>)
 80018e4:	f004 fa1c 	bl	8005d20 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	485f      	ldr	r0, [pc, #380]	@ (8001a68 <processCommand+0x240>)
 80018ec:	f005 fc5e 	bl	80071ac <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018f0:	2104      	movs	r1, #4
 80018f2:	485d      	ldr	r0, [pc, #372]	@ (8001a68 <processCommand+0x240>)
 80018f4:	f004 fa14 	bl	8005d20 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80018f8:	2104      	movs	r1, #4
 80018fa:	485b      	ldr	r0, [pc, #364]	@ (8001a68 <processCommand+0x240>)
 80018fc:	f005 fc56 	bl	80071ac <HAL_TIMEx_PWMN_Stop>
		former_speed = 0;
 8001900:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <processCommand+0x248>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	e09f      	b.n	8001a48 <processCommand+0x220>
	else if (strncmp(cmd, "speed", 5) == 0) {
 8001908:	2205      	movs	r2, #5
 800190a:	495c      	ldr	r1, [pc, #368]	@ (8001a7c <processCommand+0x254>)
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f008 feb5 	bl	800a67c <strncmp>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d17c      	bne.n	8001a12 <processCommand+0x1ea>
		int speed_value = atoi(cmd + 6);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3306      	adds	r3, #6
 800191c:	4618      	mov	r0, r3
 800191e:	f007 ff99 	bl	8009854 <atoi>
 8001922:	6478      	str	r0, [r7, #68]	@ 0x44
		if (speed_value > MAX_SPEED) {
 8001924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192a:	dd10      	ble.n	800194e <processCommand+0x126>
			speed_value = MAX_SPEED;
 800192c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
			char maxSpeedMsg[] = "Max Speed\r\n";
 8001932:	4a53      	ldr	r2, [pc, #332]	@ (8001a80 <processCommand+0x258>)
 8001934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001938:	ca07      	ldmia	r2, {r0, r1, r2}
 800193a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, (uint8_t *)maxSpeedMsg, sizeof(maxSpeedMsg) - 1, HAL_MAX_DELAY);
 800193e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	220b      	movs	r2, #11
 8001948:	4843      	ldr	r0, [pc, #268]	@ (8001a58 <processCommand+0x230>)
 800194a:	f005 fe85 	bl	8007658 <HAL_UART_Transmit>
		int i = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	643b      	str	r3, [r7, #64]	@ 0x40
		uint32_t pwm_value = (speed_value * MAX_SPEED) / 100;
 8001952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	4a4b      	ldr	r2, [pc, #300]	@ (8001a84 <processCommand+0x25c>)
 8001958:	fb82 1203 	smull	r1, r2, r2, r3
 800195c:	1152      	asrs	r2, r2, #5
 800195e:	17db      	asrs	r3, r3, #31
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint32_t former_pwm_value = (former_speed * MAX_SPEED) / 100;
 8001964:	4b42      	ldr	r3, [pc, #264]	@ (8001a70 <processCommand+0x248>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4a46      	ldr	r2, [pc, #280]	@ (8001a84 <processCommand+0x25c>)
 800196c:	fb82 1203 	smull	r1, r2, r2, r3
 8001970:	1152      	asrs	r2, r2, #5
 8001972:	17db      	asrs	r3, r3, #31
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
		if(pwm_value >= former_pwm_value){
 8001978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800197a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800197c:	429a      	cmp	r2, r3
 800197e:	d317      	bcc.n	80019b0 <processCommand+0x188>
			for(i = former_pwm_value; i < pwm_value; i++){
 8001980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
 8001984:	e00f      	b.n	80019a6 <processCommand+0x17e>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <processCommand+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800198c:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 800198e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001990:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 8001994:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <processCommand+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 800199a:	200a      	movs	r0, #10
 800199c:	f000 fd54 	bl	8002448 <HAL_Delay>
			for(i = former_pwm_value; i < pwm_value; i++){
 80019a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a2:	3301      	adds	r3, #1
 80019a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80019a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d8eb      	bhi.n	8001986 <processCommand+0x15e>
 80019ae:	e016      	b.n	80019de <processCommand+0x1b6>
			for(i = former_pwm_value; i > pwm_value; i--){
 80019b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80019b4:	e00f      	b.n	80019d6 <processCommand+0x1ae>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 80019b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a68 <processCommand+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 80019be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c0:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 80019c4:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <processCommand+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 80019ca:	200a      	movs	r0, #10
 80019cc:	f000 fd3c 	bl	8002448 <HAL_Delay>
			for(i = former_pwm_value; i > pwm_value; i--){
 80019d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d2:	3b01      	subs	r3, #1
 80019d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80019d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3eb      	bcc.n	80019b6 <processCommand+0x18e>
		former_speed = speed_value;
 80019de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <processCommand+0x248>)
 80019e4:	701a      	strb	r2, [r3, #0]
		snprintf(speedMsg, sizeof(speedMsg), "Speed : %d\r\n", speed_value);
 80019e6:	f107 000c 	add.w	r0, r7, #12
 80019ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ec:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <processCommand+0x260>)
 80019ee:	2120      	movs	r1, #32
 80019f0:	f008 fd30 	bl	800a454 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)speedMsg, strlen(speedMsg), HAL_MAX_DELAY);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc71 	bl	80002e0 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 010c 	add.w	r1, r7, #12
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	4813      	ldr	r0, [pc, #76]	@ (8001a58 <processCommand+0x230>)
 8001a0c:	f005 fe24 	bl	8007658 <HAL_UART_Transmit>
}
 8001a10:	e01a      	b.n	8001a48 <processCommand+0x220>
	else if (strcmp(cmd, "ADC") == 0) {
 8001a12:	491e      	ldr	r1, [pc, #120]	@ (8001a8c <processCommand+0x264>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7fe fc03 	bl	8000220 <strcmp>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <processCommand+0x1fe>
		ADC();
 8001a20:	f7ff fe9e 	bl	8001760 <ADC>
}
 8001a24:	e010      	b.n	8001a48 <processCommand+0x220>
	else if (strcmp(cmd, "SPEED") == 0) {
 8001a26:	491a      	ldr	r1, [pc, #104]	@ (8001a90 <processCommand+0x268>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fbf9 	bl	8000220 <strcmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <processCommand+0x212>
		speed();
 8001a34:	f7ff fe68 	bl	8001708 <speed>
}
 8001a38:	e006      	b.n	8001a48 <processCommand+0x220>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	2213      	movs	r2, #19
 8001a40:	4914      	ldr	r1, [pc, #80]	@ (8001a94 <processCommand+0x26c>)
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <processCommand+0x230>)
 8001a44:	f005 fe08 	bl	8007658 <HAL_UART_Transmit>
}
 8001a48:	bf00      	nop
 8001a4a:	3748      	adds	r7, #72	@ 0x48
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800c74c 	.word	0x0800c74c
 8001a54:	0800c844 	.word	0x0800c844
 8001a58:	200004b4 	.word	0x200004b4
 8001a5c:	0800c754 	.word	0x0800c754
 8001a60:	0800c880 	.word	0x0800c880
 8001a64:	0800c75c 	.word	0x0800c75c
 8001a68:	2000041c 	.word	0x2000041c
 8001a6c:	0800c89c 	.word	0x0800c89c
 8001a70:	200003c9 	.word	0x200003c9
 8001a74:	0800c764 	.word	0x0800c764
 8001a78:	0800c8a8 	.word	0x0800c8a8
 8001a7c:	0800c76c 	.word	0x0800c76c
 8001a80:	0800c790 	.word	0x0800c790
 8001a84:	51eb851f 	.word	0x51eb851f
 8001a88:	0800c774 	.word	0x0800c774
 8001a8c:	0800c784 	.word	0x0800c784
 8001a90:	0800c788 	.word	0x0800c788
 8001a94:	0800c830 	.word	0x0800c830

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ace:	f002 feb5 	bl	800483c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <HAL_InitTick+0xc4>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba4 <HAL_InitTick+0xc4>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afc:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <HAL_InitTick+0xc4>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fb8a 	bl	800522c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b18:	f003 fb5c 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_InitTick+0xc8>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b2e:	4a20      	ldr	r2, [pc, #128]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001b4c:	4817      	ldr	r0, [pc, #92]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b4e:	f003 fe33 	bl	80057b8 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11b      	bne.n	8001b98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b60:	4812      	ldr	r0, [pc, #72]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b62:	f003 fef1 	bl	8005948 <HAL_TIM_Base_Start_IT>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b74:	2036      	movs	r0, #54	@ 0x36
 8001b76:	f002 f8bf 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d808      	bhi.n	8001b92 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	2036      	movs	r0, #54	@ 0x36
 8001b86:	f002 f89d 	bl	8003cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <HAL_InitTick+0xd4>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e002      	b.n	8001b98 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3730      	adds	r7, #48	@ 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	200003cc 	.word	0x200003cc
 8001bb0:	40001000 	.word	0x40001000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <NMI_Handler+0x4>

08001bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Channel2_IRQHandler+0x10>)
 8001c1e:	f002 fa5c 	bl	80040da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200002c8 	.word	0x200002c8

08001c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <USART2_IRQHandler+0x10>)
 8001c32:	f005 fdeb 	bl	800780c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200004b4 	.word	0x200004b4

08001c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001c44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c48:	f002 fd30 	bl	80046ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM6_DAC_IRQHandler+0x10>)
 8001c56:	f004 f9a5 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003cc 	.word	0x200003cc

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f008 fd59 	bl	800a734 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	bf00      	nop
 8001ca8:	e7fd      	b.n	8001ca6 <_exit+0x12>

08001caa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e00a      	b.n	8001cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	4601      	mov	r1, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf0      	blt.n	8001cbc <_read+0x12>
  }

  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e009      	b.n	8001d0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbf1      	blt.n	8001cf6 <_write+0x12>
  }
  return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_close>:

int _close(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d44:	605a      	str	r2, [r3, #4]
  return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_isatty>:

int _isatty(int file)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f008 fcbe 	bl	800a734 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000418 	.word	0x20000418
 8001dec:	20000698 	.word	0x20000698

08001df0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b09c      	sub	sp, #112	@ 0x70
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2234      	movs	r2, #52	@ 0x34
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f008 fc0c 	bl	800a66c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e54:	4b54      	ldr	r3, [pc, #336]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e56:	4a55      	ldr	r2, [pc, #340]	@ (8001fac <MX_TIM1_Init+0x198>)
 8001e58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001e5a:	4b53      	ldr	r3, [pc, #332]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e60:	4b51      	ldr	r3, [pc, #324]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e62:	2220      	movs	r2, #32
 8001e64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001e66:	4b50      	ldr	r3, [pc, #320]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e74:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e7c:	2280      	movs	r2, #128	@ 0x80
 8001e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e80:	4849      	ldr	r0, [pc, #292]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e82:	f003 fc99 	bl	80057b8 <HAL_TIM_Base_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e8c:	f7ff fbcc 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e94:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4842      	ldr	r0, [pc, #264]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001e9e:	f004 fae5 	bl	800646c <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ea8:	f7ff fbbe 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eac:	483e      	ldr	r0, [pc, #248]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001eae:	f003 fdc3 	bl	8005a38 <HAL_TIM_PWM_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001eb8:	f7ff fbb6 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4836      	ldr	r0, [pc, #216]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001ed0:	f005 f9ca 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001eda:	f7ff fba5 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ede:	2360      	movs	r3, #96	@ 0x60
 8001ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 512;
 8001ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4828      	ldr	r0, [pc, #160]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f06:	f004 f99d 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001f10:	f7ff fb8a 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4822      	ldr	r0, [pc, #136]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f1e:	f004 f991 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001f28:	f7ff fb7e 	bl	8001628 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f34:	2208      	movs	r2, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	481b      	ldr	r0, [pc, #108]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f3a:	f004 f983 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001f44:	f7ff fb70 	bl	8001628 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001f48:	4817      	ldr	r0, [pc, #92]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f4a:	f005 fab7 	bl	80074bc <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 8001f5a:	2323      	movs	r3, #35	@ 0x23
 8001f5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f8c:	f005 fa02 	bl	8007394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001f96:	f7ff fb47 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9a:	4803      	ldr	r0, [pc, #12]	@ (8001fa8 <MX_TIM1_Init+0x194>)
 8001f9c:	f000 f8e0 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001fa0:	bf00      	nop
 8001fa2:	3770      	adds	r7, #112	@ 0x70
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000041c 	.word	0x2000041c
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	@ 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f008 fb54 	bl	800a66c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001fd0:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <MX_TIM3_Init+0xa8>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001fe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_TIM3_Init+0xa4>)
 8002020:	f003 ff1a 	bl	8005e58 <HAL_TIM_Encoder_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800202a:	f7ff fafd 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002036:	463b      	mov	r3, r7
 8002038:	4619      	mov	r1, r3
 800203a:	4806      	ldr	r0, [pc, #24]	@ (8002054 <MX_TIM3_Init+0xa4>)
 800203c:	f005 f914 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002046:	f7ff faef 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	@ 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000468 	.word	0x20000468
 8002058:	40000400 	.word	0x40000400

0800205c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <HAL_TIM_Base_MspInit+0x38>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10b      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_TIM_Base_MspInit+0x3c>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_TIM_Base_MspInit+0x3c>)
 8002074:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002078:	6613      	str	r3, [r2, #96]	@ 0x60
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_TIM_Base_MspInit+0x3c>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <HAL_TIM_Encoder_MspInit+0xb8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d145      	bne.n	800214a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	4a25      	ldr	r2, [pc, #148]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a1f      	ldr	r2, [pc, #124]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_TIM_Encoder_MspInit+0xbc>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002106:	2350      	movs	r3, #80	@ 0x50
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002116:	2302      	movs	r3, #2
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002124:	f002 f928 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800213a:	2302      	movs	r3, #2
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <HAL_TIM_Encoder_MspInit+0xc0>)
 8002146:	f002 f917 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	@ 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40000400 	.word	0x40000400
 8002158:	40021000 	.word	0x40021000
 800215c:	48000800 	.word	0x48000800

08002160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a29      	ldr	r2, [pc, #164]	@ (8002224 <HAL_TIM_MspPostInit+0xc4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d14b      	bne.n	800221a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	4b29      	ldr	r3, [pc, #164]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_TIM_MspPostInit+0xc8>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80021b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021c4:	2306      	movs	r3, #6
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4817      	ldr	r0, [pc, #92]	@ (800222c <HAL_TIM_MspPostInit+0xcc>)
 80021d0:	f002 f8d2 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80021d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80021e6:	2304      	movs	r3, #4
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480e      	ldr	r0, [pc, #56]	@ (800222c <HAL_TIM_MspPostInit+0xcc>)
 80021f2:	f002 f8c1 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80021f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002208:	2306      	movs	r3, #6
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002216:	f002 f8af 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	@ 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40021000 	.word	0x40021000
 800222c:	48000400 	.word	0x48000400

08002230 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002234:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002236:	4a23      	ldr	r2, [pc, #140]	@ (80022c4 <MX_USART2_UART_Init+0x94>)
 8002238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800223a:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002278:	4811      	ldr	r0, [pc, #68]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800227a:	f005 f99d 	bl	80075b8 <HAL_UART_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002284:	f7ff f9d0 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800228c:	f007 fa17 	bl	80096be <HAL_UARTEx_SetTxFifoThreshold>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002296:	f7ff f9c7 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4808      	ldr	r0, [pc, #32]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 800229e:	f007 fa4c 	bl	800973a <HAL_UARTEx_SetRxFifoThreshold>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80022a8:	f7ff f9be 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_USART2_UART_Init+0x90>)
 80022ae:	f007 f9cd 	bl	800964c <HAL_UARTEx_DisableFifoMode>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80022b8:	f7ff f9b6 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200004b4 	.word	0x200004b4
 80022c4:	40004400 	.word	0x40004400

080022c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b09e      	sub	sp, #120	@ 0x78
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	2254      	movs	r2, #84	@ 0x54
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f008 f9bf 	bl	800a66c <memset>
  if(uartHandle->Instance==USART2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <HAL_UART_MspInit+0xb8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d13e      	bne.n	8002376 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4618      	mov	r0, r3
 8002306:	f003 f809 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002310:	f7ff f98a 	bl	8001628 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002318:	4a1a      	ldr	r2, [pc, #104]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_UART_MspInit+0xbc>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002344:	230c      	movs	r3, #12
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f002 f809 	bl	8004378 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2026      	movs	r0, #38	@ 0x26
 800236c:	f001 fcaa 	bl	8003cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002370:	2026      	movs	r0, #38	@ 0x26
 8002372:	f001 fcc1 	bl	8003cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002376:	bf00      	nop
 8002378:	3778      	adds	r7, #120	@ 0x78
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40004400 	.word	0x40004400
 8002384:	40021000 	.word	0x40021000

08002388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002388:	480d      	ldr	r0, [pc, #52]	@ (80023c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800238a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800238c:	f7ff fd30 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	@ (80023c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <LoopForever+0xe>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	@ (80023d4 <LoopForever+0x16>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b6:	f008 f9c3 	bl	800a740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ba:	f7ff f879 	bl	80014b0 <main>

080023be <LoopForever>:

LoopForever:
    b LoopForever
 80023be:	e7fe      	b.n	80023be <LoopForever>
  ldr   r0, =_estack
 80023c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023cc:	0800cc78 	.word	0x0800cc78
  ldr r2, =_sbss
 80023d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023d4:	20000698 	.word	0x20000698

080023d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC1_2_IRQHandler>

080023da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f001 fc62 	bl	8003cae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ea:	200f      	movs	r0, #15
 80023ec:	f7ff fb78 	bl	8001ae0 <HAL_InitTick>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	e001      	b.n	8002400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023fc:	f7ff fb4c 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002400:	79fb      	ldrb	r3, [r7, #7]

}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_IncTick+0x1c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_IncTick+0x20>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4413      	add	r3, r2
 800241a:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <HAL_IncTick+0x1c>)
 800241c:	6013      	str	r3, [r2, #0]
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20000548 	.word	0x20000548
 800242c:	20000008 	.word	0x20000008

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000548 	.word	0x20000548

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d004      	beq.n	800246c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_Delay+0x40>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4413      	add	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246c:	bf00      	nop
 800246e:	f7ff ffdf 	bl	8002430 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	429a      	cmp	r2, r3
 800247c:	d8f7      	bhi.n	800246e <HAL_Delay+0x26>
  {
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000008 	.word	0x20000008

0800248c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3360      	adds	r3, #96	@ 0x60
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <LL_ADC_SetOffset+0x44>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	4313      	orrs	r3, r2
 8002524:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	03fff000 	.word	0x03fff000

0800253c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3360      	adds	r3, #96	@ 0x60
 800254a:	461a      	mov	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3360      	adds	r3, #96	@ 0x60
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	431a      	orrs	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800259e:	b480      	push	{r7}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3360      	adds	r3, #96	@ 0x60
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3360      	adds	r3, #96	@ 0x60
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	615a      	str	r2, [r3, #20]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3330      	adds	r3, #48	@ 0x30
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	211f      	movs	r1, #31
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	f003 011f 	and.w	r1, r3, #31
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3314      	adds	r3, #20
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0e5b      	lsrs	r3, r3, #25
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2107      	movs	r1, #7
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	431a      	orrs	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0318 	and.w	r3, r3, #24
 8002726:	4908      	ldr	r1, [pc, #32]	@ (8002748 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002728:	40d9      	lsrs	r1, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	400b      	ands	r3, r1
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	0007ffff 	.word	0x0007ffff

0800274c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 031f 	and.w	r3, r3, #31
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002778:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <LL_ADC_IsEnabled+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_ADC_IsEnabled+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d101      	bne.n	8002892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1a9      	b.n	8002c36 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7fe fbe9 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff3f 	bl	800278c <LL_ADC_IsDeepPowerDownEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff25 	bl	8002768 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff5a 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff3e 	bl	80027b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002938:	4b9c      	ldr	r3, [pc, #624]	@ (8002bac <HAL_ADC_Init+0x2e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	4a9c      	ldr	r2, [pc, #624]	@ (8002bb0 <HAL_ADC_Init+0x2e8>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800294c:	e002      	b.n	8002954 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff3c 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff75 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002990:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8142 	bne.w	8002c24 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 813e 	bne.w	8002c24 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff35 	bl	800282c <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d141      	bne.n	8002a4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_Init+0x114>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a77      	ldr	r2, [pc, #476]	@ (8002bb4 <HAL_ADC_Init+0x2ec>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d10f      	bne.n	80029fc <HAL_ADC_Init+0x134>
 80029dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029e0:	f7ff ff24 	bl	800282c <LL_ADC_IsEnabled>
 80029e4:	4604      	mov	r4, r0
 80029e6:	4873      	ldr	r0, [pc, #460]	@ (8002bb4 <HAL_ADC_Init+0x2ec>)
 80029e8:	f7ff ff20 	bl	800282c <LL_ADC_IsEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4323      	orrs	r3, r4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_ADC_Init+0x15a>
 80029fc:	486e      	ldr	r0, [pc, #440]	@ (8002bb8 <HAL_ADC_Init+0x2f0>)
 80029fe:	f7ff ff15 	bl	800282c <LL_ADC_IsEnabled>
 8002a02:	4604      	mov	r4, r0
 8002a04:	486d      	ldr	r0, [pc, #436]	@ (8002bbc <HAL_ADC_Init+0x2f4>)
 8002a06:	f7ff ff11 	bl	800282c <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	431c      	orrs	r4, r3
 8002a0e:	486c      	ldr	r0, [pc, #432]	@ (8002bc0 <HAL_ADC_Init+0x2f8>)
 8002a10:	f7ff ff0c 	bl	800282c <LL_ADC_IsEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4323      	orrs	r3, r4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d012      	beq.n	8002a4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2e:	d004      	beq.n	8002a3a <HAL_ADC_Init+0x172>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb4 <HAL_ADC_Init+0x2ec>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Init+0x176>
 8002a3a:	4a62      	ldr	r2, [pc, #392]	@ (8002bc4 <HAL_ADC_Init+0x2fc>)
 8002a3c:	e000      	b.n	8002a40 <HAL_ADC_Init+0x178>
 8002a3e:	4a62      	ldr	r2, [pc, #392]	@ (8002bc8 <HAL_ADC_Init+0x300>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f7ff fd20 	bl	800248c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f5b      	ldrb	r3, [r3, #29]
 8002a50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	045b      	lsls	r3, r3, #17
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	4b48      	ldr	r3, [pc, #288]	@ (8002bcc <HAL_ADC_Init+0x304>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fee4 	bl	80028a0 <LL_ADC_INJ_IsConversionOngoing>
 8002ad8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d17f      	bne.n	8002be0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d17c      	bne.n	8002be0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002af2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b02:	f023 0302 	bic.w	r3, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6911      	ldr	r1, [r2, #16]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b46:	e013      	b.n	8002b70 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b6c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d12a      	bne.n	8002bd0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b90:	4311      	orrs	r1, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	e019      	b.n	8002be0 <HAL_ADC_Init+0x318>
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	50000100 	.word	0x50000100
 8002bb8:	50000400 	.word	0x50000400
 8002bbc:	50000500 	.word	0x50000500
 8002bc0:	50000600 	.word	0x50000600
 8002bc4:	50000300 	.word	0x50000300
 8002bc8:	50000700 	.word	0x50000700
 8002bcc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f023 010f 	bic.w	r1, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	1e5a      	subs	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c00:	e007      	b.n	8002c12 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020f 	bic.w	r2, r2, #15
 8002c10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c22:	e007      	b.n	8002c34 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	f043 0210 	orr.w	r2, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
 8002c3e:	bf00      	nop

08002c40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_Start_DMA+0x20>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc4 <HAL_ADC_Start_DMA+0x184>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_Start_DMA+0x24>
 8002c60:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_ADC_Start_DMA+0x188>)
 8002c62:	e000      	b.n	8002c66 <HAL_ADC_Start_DMA+0x26>
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_ADC_Start_DMA+0x18c>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd70 	bl	800274c <LL_ADC_GetMultimode>
 8002c6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe01 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 809b 	bne.w	8002db6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Start_DMA+0x4e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e096      	b.n	8002dbc <HAL_ADC_Start_DMA+0x17c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd0 <HAL_ADC_Start_DMA+0x190>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d008      	beq.n	8002cb2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d002      	beq.n	8002cb2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b09      	cmp	r3, #9
 8002cb0:	d17a      	bne.n	8002da8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fcf6 	bl	80036a4 <ADC_Enable>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d16d      	bne.n	8002d9e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a3a      	ldr	r2, [pc, #232]	@ (8002dc4 <HAL_ADC_Start_DMA+0x184>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_ADC_Start_DMA+0xb4>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd4 <HAL_ADC_Start_DMA+0x194>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d002      	beq.n	8002cf0 <HAL_ADC_Start_DMA+0xb0>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e003      	b.n	8002cf8 <HAL_ADC_Start_DMA+0xb8>
 8002cf0:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_ADC_Start_DMA+0x198>)
 8002cf2:	e001      	b.n	8002cf8 <HAL_ADC_Start_DMA+0xb8>
 8002cf4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d002      	beq.n	8002d06 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d22:	f023 0206 	bic.w	r2, r3, #6
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d2a:	e002      	b.n	8002d32 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <HAL_ADC_Start_DMA+0x19c>)
 8002d38:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	4a28      	ldr	r2, [pc, #160]	@ (8002de0 <HAL_ADC_Start_DMA+0x1a0>)
 8002d40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_ADC_Start_DMA+0x1a4>)
 8002d48:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	221c      	movs	r2, #28
 8002d50:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0210 	orr.w	r2, r2, #16
 8002d68:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3340      	adds	r3, #64	@ 0x40
 8002d84:	4619      	mov	r1, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f001 f86b 	bl	8003e64 <HAL_DMA_Start_IT>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fd5b 	bl	8002852 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d9c:	e00d      	b.n	8002dba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002da6:	e008      	b.n	8002dba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002db4:	e001      	b.n	8002dba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	50000100 	.word	0x50000100
 8002dc8:	50000300 	.word	0x50000300
 8002dcc:	50000700 	.word	0x50000700
 8002dd0:	50000600 	.word	0x50000600
 8002dd4:	50000500 	.word	0x50000500
 8002dd8:	50000400 	.word	0x50000400
 8002ddc:	080037d1 	.word	0x080037d1
 8002de0:	080038a9 	.word	0x080038a9
 8002de4:	080038c5 	.word	0x080038c5

08002de8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0b6      	sub	sp, #216	@ 0xd8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x24>
 8002e42:	2302      	movs	r3, #2
 8002e44:	f000 bc13 	b.w	800366e <HAL_ADC_ConfigChannel+0x84a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd10 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 83f3 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7ff fbf1 	bl	8002656 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fcfe 	bl	800287a <LL_ADC_REG_IsConversionOngoing>
 8002e7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fd0a 	bl	80028a0 <LL_ADC_INJ_IsConversionOngoing>
 8002e8c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 81d9 	bne.w	800324c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 81d4 	bne.w	800324c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eac:	d10f      	bne.n	8002ece <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7ff fbf8 	bl	80026ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fb9f 	bl	800260a <LL_ADC_SetSamplingTimeCommonConfig>
 8002ecc:	e00e      	b.n	8002eec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f7ff fbe7 	bl	80026ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fb8f 	bl	800260a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	08db      	lsrs	r3, r3, #3
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d022      	beq.n	8002f54 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f1e:	f7ff fae9 	bl	80024f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f7ff fb35 	bl	800259e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x126>
 8002f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f48:	e000      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x128>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f7ff fb41 	bl	80025d4 <LL_ADC_SetOffsetSaturation>
 8002f52:	e17b      	b.n	800324c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff faee 	bl	800253c <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x15c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fae3 	bl	800253c <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	f003 021f 	and.w	r2, r3, #31
 8002f7e:	e01e      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x19a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fad8 	bl	800253c <LL_ADC_GetOffsetChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e004      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x1b2>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	e018      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1e4>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff faa7 	bl	8002568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fa8b 	bl	800253c <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x222>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fa80 	bl	800253c <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	e01e      	b.n	8003084 <HAL_ADC_ConfigChannel+0x260>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fa75 	bl	800253c <LL_ADC_GetOffsetChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003064:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800306c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e004      	b.n	8003082 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_ADC_ConfigChannel+0x278>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	e018      	b.n	80030ce <HAL_ADC_ConfigChannel+0x2aa>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e004      	b.n	80030ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80030c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d106      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fa44 	bl	8002568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fa28 	bl	800253c <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x2e8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fa1d 	bl	800253c <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	e01e      	b.n	800314a <HAL_ADC_ConfigChannel+0x326>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fa12 	bl	800253c <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800312a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800312e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003132:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e004      	b.n	8003148 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800313e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x33e>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	e016      	b.n	8003190 <HAL_ADC_ConfigChannel+0x36c>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800317a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e004      	b.n	8003190 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003186:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff f9e3 	bl	8002568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2103      	movs	r1, #3
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff f9c7 	bl	800253c <LL_ADC_GetOffsetChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x3aa>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2103      	movs	r1, #3
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f9bc 	bl	800253c <LL_ADC_GetOffsetChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	e017      	b.n	80031fe <HAL_ADC_ConfigChannel+0x3da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2103      	movs	r1, #3
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f9b1 	bl	800253c <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80031ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e003      	b.n	80031fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80031f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x3f2>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	e011      	b.n	800323a <HAL_ADC_ConfigChannel+0x416>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003226:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e003      	b.n	800323a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800323a:	429a      	cmp	r2, r3
 800323c:	d106      	bne.n	800324c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	2103      	movs	r1, #3
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f98e 	bl	8002568 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff faeb 	bl	800282c <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 813d 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff fa4a 	bl	8002704 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4aa2      	ldr	r2, [pc, #648]	@ (8003500 <HAL_ADC_ConfigChannel+0x6dc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f040 812e 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x480>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	3301      	adds	r3, #1
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b09      	cmp	r3, #9
 800329a:	bf94      	ite	ls
 800329c:	2301      	movls	r3, #1
 800329e:	2300      	movhi	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e019      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x4b4>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80032c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	bf94      	ite	ls
 80032d2:	2301      	movls	r3, #1
 80032d4:	2300      	movhi	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d079      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x4d4>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	069b      	lsls	r3, r3, #26
 80032f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f6:	e015      	b.n	8003324 <HAL_ADC_ConfigChannel+0x500>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003308:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e003      	b.n	800331c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	069b      	lsls	r3, r3, #26
 8003320:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x520>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	e017      	b.n	8003374 <HAL_ADC_ConfigChannel+0x550>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	ea42 0103 	orr.w	r1, r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_ADC_ConfigChannel+0x576>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	3301      	adds	r3, #1
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	051b      	lsls	r3, r3, #20
 8003398:	e018      	b.n	80033cc <HAL_ADC_ConfigChannel+0x5a8>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80033b2:	2320      	movs	r3, #32
 80033b4:	e003      	b.n	80033be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80033b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033cc:	430b      	orrs	r3, r1
 80033ce:	e07e      	b.n	80034ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x5c8>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	3301      	adds	r3, #1
 80033e4:	069b      	lsls	r3, r3, #26
 80033e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ea:	e015      	b.n	8003418 <HAL_ADC_ConfigChannel+0x5f4>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80033fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e003      	b.n	8003410 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	069b      	lsls	r3, r3, #26
 8003414:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x614>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	e017      	b.n	8003468 <HAL_ADC_ConfigChannel+0x644>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	61fb      	str	r3, [r7, #28]
  return result;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	ea42 0103 	orr.w	r1, r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x670>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	3b1e      	subs	r3, #30
 800348c:	051b      	lsls	r3, r3, #20
 800348e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003492:	e01b      	b.n	80034cc <HAL_ADC_ConfigChannel+0x6a8>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	613b      	str	r3, [r7, #16]
  return result;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80034ac:	2320      	movs	r3, #32
 80034ae:	e003      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f003 021f 	and.w	r2, r3, #31
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	3b1e      	subs	r3, #30
 80034c6:	051b      	lsls	r3, r3, #20
 80034c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d2:	4619      	mov	r1, r3
 80034d4:	f7ff f8eb 	bl	80026ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <HAL_ADC_ConfigChannel+0x6e0>)
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80be 	beq.w	8003662 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_ConfigChannel+0x6d6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <HAL_ADC_ConfigChannel+0x6e4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10a      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x6ec>
 80034fa:	4b04      	ldr	r3, [pc, #16]	@ (800350c <HAL_ADC_ConfigChannel+0x6e8>)
 80034fc:	e009      	b.n	8003512 <HAL_ADC_ConfigChannel+0x6ee>
 80034fe:	bf00      	nop
 8003500:	407f0000 	.word	0x407f0000
 8003504:	80080000 	.word	0x80080000
 8003508:	50000100 	.word	0x50000100
 800350c:	50000300 	.word	0x50000300
 8003510:	4b59      	ldr	r3, [pc, #356]	@ (8003678 <HAL_ADC_ConfigChannel+0x854>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ffe0 	bl	80024d8 <LL_ADC_GetCommonPathInternalCh>
 8003518:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a56      	ldr	r2, [pc, #344]	@ (800367c <HAL_ADC_ConfigChannel+0x858>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_ADC_ConfigChannel+0x70c>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a55      	ldr	r2, [pc, #340]	@ (8003680 <HAL_ADC_ConfigChannel+0x85c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d13a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003534:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d134      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003544:	d005      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x72e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4e      	ldr	r2, [pc, #312]	@ (8003684 <HAL_ADC_ConfigChannel+0x860>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f040 8085 	bne.w	800365c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355a:	d004      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x742>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a49      	ldr	r2, [pc, #292]	@ (8003688 <HAL_ADC_ConfigChannel+0x864>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x746>
 8003566:	4a49      	ldr	r2, [pc, #292]	@ (800368c <HAL_ADC_ConfigChannel+0x868>)
 8003568:	e000      	b.n	800356c <HAL_ADC_ConfigChannel+0x748>
 800356a:	4a43      	ldr	r2, [pc, #268]	@ (8003678 <HAL_ADC_ConfigChannel+0x854>)
 800356c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003570:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f7fe ff9b 	bl	80024b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800357c:	4b44      	ldr	r3, [pc, #272]	@ (8003690 <HAL_ADC_ConfigChannel+0x86c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	4a44      	ldr	r2, [pc, #272]	@ (8003694 <HAL_ADC_ConfigChannel+0x870>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003596:	e002      	b.n	800359e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3b01      	subs	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f9      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a4:	e05a      	b.n	800365c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003698 <HAL_ADC_ConfigChannel+0x874>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d125      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11f      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a31      	ldr	r2, [pc, #196]	@ (8003688 <HAL_ADC_ConfigChannel+0x864>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d104      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7ac>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a34      	ldr	r2, [pc, #208]	@ (800369c <HAL_ADC_ConfigChannel+0x878>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d047      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035d8:	d004      	beq.n	80035e4 <HAL_ADC_ConfigChannel+0x7c0>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <HAL_ADC_ConfigChannel+0x864>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x7c4>
 80035e4:	4a29      	ldr	r2, [pc, #164]	@ (800368c <HAL_ADC_ConfigChannel+0x868>)
 80035e6:	e000      	b.n	80035ea <HAL_ADC_ConfigChannel+0x7c6>
 80035e8:	4a23      	ldr	r2, [pc, #140]	@ (8003678 <HAL_ADC_ConfigChannel+0x854>)
 80035ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe ff5c 	bl	80024b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035fa:	e031      	b.n	8003660 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <HAL_ADC_ConfigChannel+0x87c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d12d      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d127      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_ADC_ConfigChannel+0x864>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x80c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <HAL_ADC_ConfigChannel+0x864>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x810>
 8003630:	4a16      	ldr	r2, [pc, #88]	@ (800368c <HAL_ADC_ConfigChannel+0x868>)
 8003632:	e000      	b.n	8003636 <HAL_ADC_ConfigChannel+0x812>
 8003634:	4a10      	ldr	r2, [pc, #64]	@ (8003678 <HAL_ADC_ConfigChannel+0x854>)
 8003636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800363a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7fe ff36 	bl	80024b2 <LL_ADC_SetCommonPathInternalCh>
 8003646:	e00c      	b.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003660:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800366a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800366e:	4618      	mov	r0, r3
 8003670:	37d8      	adds	r7, #216	@ 0xd8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	50000700 	.word	0x50000700
 800367c:	c3210000 	.word	0xc3210000
 8003680:	90c00010 	.word	0x90c00010
 8003684:	50000600 	.word	0x50000600
 8003688:	50000100 	.word	0x50000100
 800368c:	50000300 	.word	0x50000300
 8003690:	20000000 	.word	0x20000000
 8003694:	053e2d63 	.word	0x053e2d63
 8003698:	c7520000 	.word	0xc7520000
 800369c:	50000500 	.word	0x50000500
 80036a0:	cb840000 	.word	0xcb840000

080036a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f8b9 	bl	800282c <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d176      	bne.n	80037ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b3c      	ldr	r3, [pc, #240]	@ (80037b8 <ADC_Enable+0x114>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e062      	b.n	80037b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f888 	bl	8002804 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036fc:	d004      	beq.n	8003708 <ADC_Enable+0x64>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2e      	ldr	r2, [pc, #184]	@ (80037bc <ADC_Enable+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <ADC_Enable+0x68>
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <ADC_Enable+0x11c>)
 800370a:	e000      	b.n	800370e <ADC_Enable+0x6a>
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <ADC_Enable+0x120>)
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fee2 	bl	80024d8 <LL_ADC_GetCommonPathInternalCh>
 8003714:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800371a:	2b00      	cmp	r3, #0
 800371c:	d013      	beq.n	8003746 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371e:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <ADC_Enable+0x124>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	4a29      	ldr	r2, [pc, #164]	@ (80037cc <ADC_Enable+0x128>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003738:	e002      	b.n	8003740 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3b01      	subs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f9      	bne.n	800373a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003746:	f7fe fe73 	bl	8002430 <HAL_GetTick>
 800374a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374c:	e028      	b.n	80037a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f86a 	bl	800282c <LL_ADC_IsEnabled>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f84e 	bl	8002804 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003768:	f7fe fe62 	bl	8002430 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d914      	bls.n	80037a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d00d      	beq.n	80037a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	f043 0210 	orr.w	r2, r3, #16
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d1cf      	bne.n	800374e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	8000003f 	.word	0x8000003f
 80037bc:	50000100 	.word	0x50000100
 80037c0:	50000300 	.word	0x50000300
 80037c4:	50000700 	.word	0x50000700
 80037c8:	20000000 	.word	0x20000000
 80037cc:	053e2d63 	.word	0x053e2d63

080037d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d14b      	bne.n	8003882 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d021      	beq.n	8003848 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe ff11 	bl	8002630 <LL_ADC_REG_IsTriggerSourceSWStart>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d032      	beq.n	800387a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d12b      	bne.n	800387a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11f      	bne.n	800387a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003846:	e018      	b.n	800387a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d111      	bne.n	800387a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fab4 	bl	8002de8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003880:	e00e      	b.n	80038a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff fabe 	bl	8002e10 <HAL_ADC_ErrorCallback>
}
 8003894:	e004      	b.n	80038a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff faa0 	bl	8002dfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	f043 0204 	orr.w	r2, r3, #4
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fa90 	bl	8002e10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <LL_ADC_IsEnabled>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <LL_ADC_IsEnabled+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_ADC_IsEnabled+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_ADC_REG_IsConversionOngoing>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d101      	bne.n	8003936 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b0a1      	sub	sp, #132	@ 0x84
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800395e:	2302      	movs	r3, #2
 8003960:	e0e7      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800396a:	2300      	movs	r3, #0
 800396c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800396e:	2300      	movs	r3, #0
 8003970:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397a:	d102      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800397c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e009      	b.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6e      	ldr	r2, [pc, #440]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d102      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800398c:	4b6d      	ldr	r3, [pc, #436]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	e001      	b.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0be      	b.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ffb1 	bl	800391e <LL_ADC_REG_IsConversionOngoing>
 80039bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ffab 	bl	800391e <LL_ADC_REG_IsConversionOngoing>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80a0 	bne.w	8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80039d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 809c 	bne.w	8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e0:	d004      	beq.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a55      	ldr	r2, [pc, #340]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039ec:	4b56      	ldr	r3, [pc, #344]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80039ee:	e000      	b.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039f0:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80039f2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d04b      	beq.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a0e:	035b      	lsls	r3, r3, #13
 8003a10:	430b      	orrs	r3, r1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a20:	d004      	beq.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a45      	ldr	r2, [pc, #276]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d10f      	bne.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a30:	f7ff ff62 	bl	80038f8 <LL_ADC_IsEnabled>
 8003a34:	4604      	mov	r4, r0
 8003a36:	4841      	ldr	r0, [pc, #260]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a38:	f7ff ff5e 	bl	80038f8 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4323      	orrs	r3, r4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e012      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a4c:	483c      	ldr	r0, [pc, #240]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a4e:	f7ff ff53 	bl	80038f8 <LL_ADC_IsEnabled>
 8003a52:	4604      	mov	r4, r0
 8003a54:	483b      	ldr	r0, [pc, #236]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a56:	f7ff ff4f 	bl	80038f8 <LL_ADC_IsEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	431c      	orrs	r4, r3
 8003a5e:	483c      	ldr	r0, [pc, #240]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a60:	f7ff ff4a 	bl	80038f8 <LL_ADC_IsEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4323      	orrs	r3, r4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d056      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a7e:	f023 030f 	bic.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6811      	ldr	r1, [r2, #0]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6892      	ldr	r2, [r2, #8]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a90:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a92:	e047      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa8:	d004      	beq.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a23      	ldr	r2, [pc, #140]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ab4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ab8:	f7ff ff1e 	bl	80038f8 <LL_ADC_IsEnabled>
 8003abc:	4604      	mov	r4, r0
 8003abe:	481f      	ldr	r0, [pc, #124]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ac0:	f7ff ff1a 	bl	80038f8 <LL_ADC_IsEnabled>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4323      	orrs	r3, r4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ad4:	481a      	ldr	r0, [pc, #104]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ad6:	f7ff ff0f 	bl	80038f8 <LL_ADC_IsEnabled>
 8003ada:	4604      	mov	r4, r0
 8003adc:	4819      	ldr	r0, [pc, #100]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ade:	f7ff ff0b 	bl	80038f8 <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	431c      	orrs	r4, r3
 8003ae6:	481a      	ldr	r0, [pc, #104]	@ (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ae8:	f7ff ff06 	bl	80038f8 <LL_ADC_IsEnabled>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4323      	orrs	r3, r4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d012      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b0c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b0e:	e009      	b.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b22:	e000      	b.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3784      	adds	r7, #132	@ 0x84
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000400 	.word	0x50000400
 8003b44:	50000500 	.word	0x50000500
 8003b48:	50000300 	.word	0x50000300
 8003b4c:	50000700 	.word	0x50000700
 8003b50:	50000600 	.word	0x50000600

08003b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b86:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	60d3      	str	r3, [r2, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba0:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0307 	and.w	r3, r3, #7
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	db0b      	blt.n	8003be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	f003 021f 	and.w	r2, r3, #31
 8003bd0:	4907      	ldr	r1, [pc, #28]	@ (8003bf0 <__NVIC_EnableIRQ+0x38>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2001      	movs	r0, #1
 8003bda:	fa00 f202 	lsl.w	r2, r0, r2
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000e100 	.word	0xe000e100

08003bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	db0a      	blt.n	8003c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	490c      	ldr	r1, [pc, #48]	@ (8003c40 <__NVIC_SetPriority+0x4c>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	440b      	add	r3, r1
 8003c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c1c:	e00a      	b.n	8003c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4908      	ldr	r1, [pc, #32]	@ (8003c44 <__NVIC_SetPriority+0x50>)
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	3b04      	subs	r3, #4
 8003c2c:	0112      	lsls	r2, r2, #4
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	440b      	add	r3, r1
 8003c32:	761a      	strb	r2, [r3, #24]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000e100 	.word	0xe000e100
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	@ 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f1c3 0307 	rsb	r3, r3, #7
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	bf28      	it	cs
 8003c66:	2304      	movcs	r3, #4
 8003c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d902      	bls.n	8003c78 <NVIC_EncodePriority+0x30>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3b03      	subs	r3, #3
 8003c76:	e000      	b.n	8003c7a <NVIC_EncodePriority+0x32>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c90:	f04f 31ff 	mov.w	r1, #4294967295
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	43d9      	mvns	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca0:	4313      	orrs	r3, r2
         );
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3724      	adds	r7, #36	@ 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff4c 	bl	8003b54 <__NVIC_SetPriorityGrouping>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd2:	f7ff ff63 	bl	8003b9c <__NVIC_GetPriorityGrouping>
 8003cd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f7ff ffb3 	bl	8003c48 <NVIC_EncodePriority>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff82 	bl	8003bf4 <__NVIC_SetPriority>
}
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ff56 	bl	8003bb8 <__NVIC_EnableIRQ>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e08d      	b.n	8003e42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_DMA_Init+0x138>)
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d80f      	bhi.n	8003d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b45      	ldr	r3, [pc, #276]	@ (8003e50 <HAL_DMA_Init+0x13c>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a45      	ldr	r2, [pc, #276]	@ (8003e54 <HAL_DMA_Init+0x140>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a42      	ldr	r2, [pc, #264]	@ (8003e58 <HAL_DMA_Init+0x144>)
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d50:	e00e      	b.n	8003d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b40      	ldr	r3, [pc, #256]	@ (8003e5c <HAL_DMA_Init+0x148>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e54 <HAL_DMA_Init+0x140>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e60 <HAL_DMA_Init+0x14c>)
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa76 	bl	80042b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd0:	d102      	bne.n	8003dd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_DMA_Init+0x104>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d80c      	bhi.n	8003e18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa96 	bl	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e008      	b.n	8003e2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40020407 	.word	0x40020407
 8003e50:	bffdfff8 	.word	0xbffdfff8
 8003e54:	cccccccd 	.word	0xcccccccd
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	bffdfbf8 	.word	0xbffdfbf8
 8003e60:	40020400 	.word	0x40020400

08003e64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_Start_IT+0x20>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e066      	b.n	8003f52 <HAL_DMA_Start_IT+0xee>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d155      	bne.n	8003f44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9bb 	bl	8004238 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 020e 	orr.w	r2, r2, #14
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00f      	b.n	8003efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0204 	bic.w	r2, r2, #4
 8003eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 020a 	orr.w	r2, r2, #10
 8003efa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e005      	b.n	8003f50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e037      	b.n	8003fee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 020e 	bic.w	r2, r2, #14
 8003f8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	f003 021f 	and.w	r2, r3, #31
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fe2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00d      	beq.n	8004040 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2204      	movs	r2, #4
 8004028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	e047      	b.n	80040d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 020e 	bic.w	r2, r2, #14
 800404e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800406e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f202 	lsl.w	r2, r1, r2
 8004082:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800408c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
    }
  }
  return status;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2204      	movs	r2, #4
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d026      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7a>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d021      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0204 	bic.w	r2, r2, #4
 800412c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f003 021f 	and.w	r2, r3, #31
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2104      	movs	r1, #4
 800413c:	fa01 f202 	lsl.w	r2, r1, r2
 8004140:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	2b00      	cmp	r3, #0
 8004148:	d071      	beq.n	800422e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004152:	e06c      	b.n	800422e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2202      	movs	r2, #2
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02e      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d029      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 020a 	bic.w	r2, r2, #10
 800418e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	2102      	movs	r1, #2
 80041a6:	fa01 f202 	lsl.w	r2, r1, r2
 80041aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d038      	beq.n	800422e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041c4:	e033      	b.n	800422e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2208      	movs	r2, #8
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02a      	beq.n	8004230 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d025      	beq.n	8004230 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020e 	bic.w	r2, r2, #14
 80041f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800422e:	bf00      	nop
 8004230:	bf00      	nop
}
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800424e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f003 021f 	and.w	r2, r3, #31
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b10      	cmp	r3, #16
 8004284:	d108      	bne.n	8004298 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004296:	e007      	b.n	80042a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b16      	ldr	r3, [pc, #88]	@ (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d802      	bhi.n	80042ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80042c8:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e001      	b.n	80042d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80042ce:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042d0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3b08      	subs	r3, #8
 80042de:	4a12      	ldr	r2, [pc, #72]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	009a      	lsls	r2, r3, #2
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a0b      	ldr	r2, [pc, #44]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2201      	movs	r2, #1
 8004308:	409a      	lsls	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40020407 	.word	0x40020407
 8004320:	40020800 	.word	0x40020800
 8004324:	40020820 	.word	0x40020820
 8004328:	cccccccd 	.word	0xcccccccd
 800432c:	40020880 	.word	0x40020880

08004330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004352:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	1000823f 	.word	0x1000823f
 8004374:	40020940 	.word	0x40020940

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004386:	e15a      	b.n	800463e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2101      	movs	r1, #1
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 814c 	beq.w	8004638 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d005      	beq.n	80043b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d130      	bne.n	800441a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ee:	2201      	movs	r2, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4013      	ands	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	f003 0201 	and.w	r2, r3, #1
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d017      	beq.n	8004456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	2203      	movs	r2, #3
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d123      	bne.n	80044aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	08da      	lsrs	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3208      	adds	r2, #8
 800446a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	220f      	movs	r2, #15
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	08da      	lsrs	r2, r3, #3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3208      	adds	r2, #8
 80044a4:	6939      	ldr	r1, [r7, #16]
 80044a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	2203      	movs	r2, #3
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80a6 	beq.w	8004638 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ec:	4b5b      	ldr	r3, [pc, #364]	@ (800465c <HAL_GPIO_Init+0x2e4>)
 80044ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f0:	4a5a      	ldr	r2, [pc, #360]	@ (800465c <HAL_GPIO_Init+0x2e4>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80044f8:	4b58      	ldr	r3, [pc, #352]	@ (800465c <HAL_GPIO_Init+0x2e4>)
 80044fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004504:	4a56      	ldr	r2, [pc, #344]	@ (8004660 <HAL_GPIO_Init+0x2e8>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800452e:	d01f      	beq.n	8004570 <HAL_GPIO_Init+0x1f8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a4c      	ldr	r2, [pc, #304]	@ (8004664 <HAL_GPIO_Init+0x2ec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d019      	beq.n	800456c <HAL_GPIO_Init+0x1f4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a4b      	ldr	r2, [pc, #300]	@ (8004668 <HAL_GPIO_Init+0x2f0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_GPIO_Init+0x1f0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a4a      	ldr	r2, [pc, #296]	@ (800466c <HAL_GPIO_Init+0x2f4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00d      	beq.n	8004564 <HAL_GPIO_Init+0x1ec>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a49      	ldr	r2, [pc, #292]	@ (8004670 <HAL_GPIO_Init+0x2f8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <HAL_GPIO_Init+0x1e8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a48      	ldr	r2, [pc, #288]	@ (8004674 <HAL_GPIO_Init+0x2fc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_GPIO_Init+0x1e4>
 8004558:	2305      	movs	r3, #5
 800455a:	e00a      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 800455c:	2306      	movs	r3, #6
 800455e:	e008      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004560:	2304      	movs	r3, #4
 8004562:	e006      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004564:	2303      	movs	r3, #3
 8004566:	e004      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004568:	2302      	movs	r3, #2
 800456a:	e002      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004570:	2300      	movs	r3, #0
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	4093      	lsls	r3, r2
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004582:	4937      	ldr	r1, [pc, #220]	@ (8004660 <HAL_GPIO_Init+0x2e8>)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004590:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <HAL_GPIO_Init+0x300>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045b4:	4a30      	ldr	r2, [pc, #192]	@ (8004678 <HAL_GPIO_Init+0x300>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004678 <HAL_GPIO_Init+0x300>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045de:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_GPIO_Init+0x300>)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045e4:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <HAL_GPIO_Init+0x300>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_GPIO_Init+0x300>)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800460e:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <HAL_GPIO_Init+0x300>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004632:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <HAL_GPIO_Init+0x300>)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3301      	adds	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f ae9d 	bne.w	8004388 <HAL_GPIO_Init+0x10>
  }
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40021000 	.word	0x40021000
 8004660:	40010000 	.word	0x40010000
 8004664:	48000400 	.word	0x48000400
 8004668:	48000800 	.word	0x48000800
 800466c:	48000c00 	.word	0x48000c00
 8004670:	48001000 	.word	0x48001000
 8004674:	48001400 	.word	0x48001400
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004698:	e002      	b.n	80046a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d006      	beq.n	80046d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c2:	4a05      	ldr	r2, [pc, #20]	@ (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f806 	bl	80046dc <HAL_GPIO_EXTI_Callback>
  }
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d141      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d131      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004710:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004720:	4b43      	ldr	r3, [pc, #268]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004728:	4a41      	ldr	r2, [pc, #260]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800472e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004730:	4b40      	ldr	r3, [pc, #256]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2232      	movs	r2, #50	@ 0x32
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	4a3f      	ldr	r2, [pc, #252]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	0c9b      	lsrs	r3, r3, #18
 8004742:	3301      	adds	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004746:	e002      	b.n	800474e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3b01      	subs	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475a:	d102      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004762:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476e:	d158      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e057      	b.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004774:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800477a:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004784:	e04d      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478c:	d141      	bne.n	8004812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d131      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800479c:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a2:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ac:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2232      	movs	r2, #50	@ 0x32
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d2:	e002      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047da:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	d102      	bne.n	80047ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f2      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ee:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d112      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e011      	b.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004806:	4a0a      	ldr	r2, [pc, #40]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004810:	e007      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800481a:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004820:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40007000 	.word	0x40007000
 8004834:	20000000 	.word	0x20000000
 8004838:	431bde83 	.word	0x431bde83

0800483c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a04      	ldr	r2, [pc, #16]	@ (8004858 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800484a:	6093      	str	r3, [r2, #8]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40007000 	.word	0x40007000

0800485c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e2fe      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d075      	beq.n	8004966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487a:	4b97      	ldr	r3, [pc, #604]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004884:	4b94      	ldr	r3, [pc, #592]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d102      	bne.n	800489a <HAL_RCC_OscConfig+0x3e>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d002      	beq.n	80048a0 <HAL_RCC_OscConfig+0x44>
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d10b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05b      	beq.n	8004964 <HAL_RCC_OscConfig+0x108>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d157      	bne.n	8004964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e2d9      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x74>
 80048c2:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a84      	ldr	r2, [pc, #528]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x98>
 80048da:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7b      	ldr	r2, [pc, #492]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048f4:	4b78      	ldr	r3, [pc, #480]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a77      	ldr	r2, [pc, #476]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b75      	ldr	r3, [pc, #468]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a74      	ldr	r2, [pc, #464]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fd8c 	bl	8002430 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd fd88 	bl	8002430 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	@ 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e29e      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xc0>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd fd78 	bl	8002430 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004944:	f7fd fd74 	bl	8002430 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	@ 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e28a      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004956:	4b60      	ldr	r3, [pc, #384]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0xe8>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d075      	beq.n	8004a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004972:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497c:	4b56      	ldr	r3, [pc, #344]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d102      	bne.n	8004992 <HAL_RCC_OscConfig+0x136>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d002      	beq.n	8004998 <HAL_RCC_OscConfig+0x13c>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11f      	bne.n	80049d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004998:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x154>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e25d      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b0:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	4946      	ldr	r1, [pc, #280]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd f889 	bl	8001ae0 <HAL_InitTick>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d043      	beq.n	8004a5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e249      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d023      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fd20 	bl	8002430 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fd fd1c 	bl	8002430 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e232      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a06:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b31      	ldr	r3, [pc, #196]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	492d      	ldr	r1, [pc, #180]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
 8004a26:	e01a      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a28:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fcfc 	bl	8002430 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fcf8 	bl	8002430 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e20e      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4e:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1e0>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d041      	beq.n	8004aee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01c      	beq.n	8004aac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fcd5 	bl	8002430 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fcd1 	bl	8002430 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1e7      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCC_OscConfig+0x22e>
 8004aaa:	e020      	b.n	8004aee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab2:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd fcb8 	bl	8002430 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ac2:	e00d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd fcb4 	bl	8002430 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d906      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1ca      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ea      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80a6 	beq.w	8004c48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b00:	4b84      	ldr	r3, [pc, #528]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2b4>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x2b6>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	4b7f      	ldr	r3, [pc, #508]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b22:	4b7c      	ldr	r3, [pc, #496]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b32:	4b79      	ldr	r3, [pc, #484]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3e:	4b76      	ldr	r3, [pc, #472]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a75      	ldr	r2, [pc, #468]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fc71 	bl	8002430 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fd fc6d 	bl	8002430 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e183      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b64:	4b6c      	ldr	r3, [pc, #432]	@ (8004d18 <HAL_RCC_OscConfig+0x4bc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d108      	bne.n	8004b8a <HAL_RCC_OscConfig+0x32e>
 8004b78:	4b66      	ldr	r3, [pc, #408]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	4a65      	ldr	r2, [pc, #404]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b88:	e024      	b.n	8004bd4 <HAL_RCC_OscConfig+0x378>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d110      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x358>
 8004b92:	4b60      	ldr	r3, [pc, #384]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	4a5e      	ldr	r2, [pc, #376]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCC_OscConfig+0x378>
 8004bb4:	4b57      	ldr	r3, [pc, #348]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	4a56      	ldr	r2, [pc, #344]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc4:	4b53      	ldr	r3, [pc, #332]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	4a52      	ldr	r2, [pc, #328]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d016      	beq.n	8004c0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fd fc28 	bl	8002430 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fd fc24 	bl	8002430 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e138      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b46      	ldr	r3, [pc, #280]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ed      	beq.n	8004be4 <HAL_RCC_OscConfig+0x388>
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fd fc11 	bl	8002430 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fd fc0d 	bl	8002430 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e121      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c28:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ed      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	4a34      	ldr	r2, [pc, #208]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d03c      	beq.n	8004cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c62:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fbe0 	bl	8002430 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c74:	f7fd fbdc 	bl	8002430 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0f2      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c86:	4b23      	ldr	r3, [pc, #140]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <HAL_RCC_OscConfig+0x418>
 8004c94:	e01b      	b.n	8004cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fd fbc3 	bl	8002430 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cae:	f7fd fbbf 	bl	8002430 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0d5      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc0:	4b14      	ldr	r3, [pc, #80]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ef      	bne.n	8004cae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80c9 	beq.w	8004e6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d15e      	bne.n	8004dac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a08      	ldr	r2, [pc, #32]	@ (8004d14 <HAL_RCC_OscConfig+0x4b8>)
 8004cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fb99 	bl	8002430 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d00:	e00c      	b.n	8004d1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd fb95 	bl	8002430 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d905      	bls.n	8004d1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0ab      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1c:	4b55      	ldr	r3, [pc, #340]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ec      	bne.n	8004d02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d28:	4b52      	ldr	r3, [pc, #328]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b52      	ldr	r3, [pc, #328]	@ (8004e78 <HAL_RCC_OscConfig+0x61c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6a11      	ldr	r1, [r2, #32]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d42:	0212      	lsls	r2, r2, #8
 8004d44:	4311      	orrs	r1, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0552      	lsls	r2, r2, #21
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0652      	lsls	r2, r2, #25
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d62:	06d2      	lsls	r2, r2, #27
 8004d64:	430a      	orrs	r2, r1
 8004d66:	4943      	ldr	r1, [pc, #268]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a40      	ldr	r2, [pc, #256]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d78:	4b3e      	ldr	r3, [pc, #248]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fb54 	bl	8002430 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fd fb50 	bl	8002430 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e066      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x530>
 8004daa:	e05e      	b.n	8004e6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b31      	ldr	r3, [pc, #196]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd fb3a 	bl	8002430 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fb36 	bl	8002430 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e04c      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd2:	4b28      	ldr	r3, [pc, #160]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dde:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	4924      	ldr	r1, [pc, #144]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x620>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	60cb      	str	r3, [r1, #12]
 8004dea:	e03e      	b.n	8004e6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e039      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004df8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <HAL_RCC_OscConfig+0x618>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0203 	and.w	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d12c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	3b01      	subs	r3, #1
 8004e18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d123      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11b      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d113      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	019f800c 	.word	0x019f800c
 8004e7c:	feeefffc 	.word	0xfeeefffc

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e11e      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e98:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d910      	bls.n	8004ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b8e      	ldr	r3, [pc, #568]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 020f 	bic.w	r2, r3, #15
 8004eae:	498c      	ldr	r1, [pc, #560]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e106      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d073      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d129      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004edc:	4b81      	ldr	r3, [pc, #516]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0f4      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004eec:	f000 f9d0 	bl	8005290 <RCC_GetSysClockFreqFromPLLSource>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4a7c      	ldr	r2, [pc, #496]	@ (80050e8 <HAL_RCC_ClockConfig+0x268>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d93f      	bls.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004efa:	4b7a      	ldr	r3, [pc, #488]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d033      	beq.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d12f      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f1a:	4b72      	ldr	r3, [pc, #456]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	4a70      	ldr	r2, [pc, #448]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e024      	b.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f38:	4b6a      	ldr	r3, [pc, #424]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0c6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0be      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f58:	f000 f8ce 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4a61      	ldr	r2, [pc, #388]	@ (80050e8 <HAL_RCC_ClockConfig+0x268>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d909      	bls.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f66:	4b5f      	ldr	r3, [pc, #380]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4957      	ldr	r1, [pc, #348]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fa50 	bl	8002430 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd fa4c 	bl	8002430 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e095      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b4e      	ldr	r3, [pc, #312]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d023      	beq.n	8005010 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd4:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4a42      	ldr	r2, [pc, #264]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fec:	4b3d      	ldr	r3, [pc, #244]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b39      	ldr	r3, [pc, #228]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4936      	ldr	r1, [pc, #216]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	e008      	b.n	8005022 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d105      	bne.n	8005022 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005016:	4b33      	ldr	r3, [pc, #204]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4a32      	ldr	r2, [pc, #200]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800501c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005020:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005022:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d21d      	bcs.n	800506c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005030:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 020f 	bic.w	r2, r3, #15
 8005038:	4929      	ldr	r1, [pc, #164]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005040:	f7fd f9f6 	bl	8002430 <HAL_GetTick>
 8005044:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fd f9f2 	bl	8002430 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e03b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <HAL_RCC_ClockConfig+0x260>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d1ed      	bne.n	8005048 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4917      	ldr	r1, [pc, #92]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	490f      	ldr	r1, [pc, #60]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050aa:	f000 f825 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	490c      	ldr	r1, [pc, #48]	@ (80050ec <HAL_RCC_ClockConfig+0x26c>)
 80050bc:	5ccb      	ldrb	r3, [r1, r3]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a0a      	ldr	r2, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x270>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050ca:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <HAL_RCC_ClockConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc fd06 	bl	8001ae0 <HAL_InitTick>
 80050d4:	4603      	mov	r3, r0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	04c4b400 	.word	0x04c4b400
 80050ec:	0800c8b4 	.word	0x0800c8b4
 80050f0:	20000000 	.word	0x20000000
 80050f4:	20000004 	.word	0x20000004

080050f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050fe:	4b2c      	ldr	r3, [pc, #176]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d102      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800510a:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e047      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005110:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d102      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800511c:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e03e      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005122:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d136      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800512e:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005138:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d10c      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800514c:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005156:	68d2      	ldr	r2, [r2, #12]
 8005158:	0a12      	lsrs	r2, r2, #8
 800515a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	617b      	str	r3, [r7, #20]
      break;
 8005164:	e00c      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005166:	4a13      	ldr	r2, [pc, #76]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	0a12      	lsrs	r2, r2, #8
 8005174:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
      break;
 800517e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0e5b      	lsrs	r3, r3, #25
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e001      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051a0:	693b      	ldr	r3, [r7, #16]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	016e3600 	.word	0x016e3600

080051bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c0:	4b03      	ldr	r3, [pc, #12]	@ (80051d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000000 	.word	0x20000000

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051d8:	f7ff fff0 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4904      	ldr	r1, [pc, #16]	@ (80051fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800c8c4 	.word	0x0800c8c4

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005204:	f7ff ffda 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0adb      	lsrs	r3, r3, #11
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4904      	ldr	r1, [pc, #16]	@ (8005228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	0800c8c4 	.word	0x0800c8c4

0800522c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	220f      	movs	r2, #15
 800523a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800523c:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005248:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005260:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800526e:	4b07      	ldr	r3, [pc, #28]	@ (800528c <HAL_RCC_GetClockConfig+0x60>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 020f 	and.w	r2, r3, #15
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000
 800528c:	40022000 	.word	0x40022000

08005290 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005296:	4b1e      	ldr	r3, [pc, #120]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d10c      	bne.n	80052ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052b4:	4a17      	ldr	r2, [pc, #92]	@ (8005314 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052be:	68d2      	ldr	r2, [r2, #12]
 80052c0:	0a12      	lsrs	r2, r2, #8
 80052c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	617b      	str	r3, [r7, #20]
    break;
 80052cc:	e00c      	b.n	80052e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ce:	4a12      	ldr	r2, [pc, #72]	@ (8005318 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	0a12      	lsrs	r2, r2, #8
 80052dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
    break;
 80052e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e8:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	0e5b      	lsrs	r3, r3, #25
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	3301      	adds	r3, #1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005302:	687b      	ldr	r3, [r7, #4]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40021000 	.word	0x40021000
 8005314:	016e3600 	.word	0x016e3600
 8005318:	00f42400 	.word	0x00f42400

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005324:	2300      	movs	r3, #0
 8005326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005328:	2300      	movs	r3, #0
 800532a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8098 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533e:	4b43      	ldr	r3, [pc, #268]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10d      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	4b40      	ldr	r3, [pc, #256]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	4a3f      	ldr	r2, [pc, #252]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	@ 0x58
 8005356:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005362:	2301      	movs	r3, #1
 8005364:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005366:	4b3a      	ldr	r3, [pc, #232]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a39      	ldr	r2, [pc, #228]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005372:	f7fd f85d 	bl	8002430 <HAL_GetTick>
 8005376:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005378:	e009      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537a:	f7fd f859 	bl	8002430 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	74fb      	strb	r3, [r7, #19]
        break;
 800538c:	e005      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800538e:	4b30      	ldr	r3, [pc, #192]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ef      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800539a:	7cfb      	ldrb	r3, [r7, #19]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d159      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a0:	4b2a      	ldr	r3, [pc, #168]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01e      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d019      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053bc:	4b23      	ldr	r3, [pc, #140]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c8:	4b20      	ldr	r3, [pc, #128]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d8:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fd f819 	bl	8002430 <HAL_GetTick>
 80053fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005400:	e00b      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fd f815 	bl	8002430 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d902      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	74fb      	strb	r3, [r7, #19]
            break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541a:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ec      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	4903      	ldr	r1, [pc, #12]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005444:	e008      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	74bb      	strb	r3, [r7, #18]
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005458:	7c7b      	ldrb	r3, [r7, #17]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4ba7      	ldr	r3, [pc, #668]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	4aa6      	ldr	r2, [pc, #664]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005468:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005476:	4ba1      	ldr	r3, [pc, #644]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547c:	f023 0203 	bic.w	r2, r3, #3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	499d      	ldr	r1, [pc, #628]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005498:	4b98      	ldr	r3, [pc, #608]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f023 020c 	bic.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4995      	ldr	r1, [pc, #596]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ba:	4b90      	ldr	r3, [pc, #576]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	498c      	ldr	r1, [pc, #560]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054dc:	4b87      	ldr	r3, [pc, #540]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	4984      	ldr	r1, [pc, #528]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054fe:	4b7f      	ldr	r3, [pc, #508]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	497b      	ldr	r1, [pc, #492]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005520:	4b76      	ldr	r3, [pc, #472]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	4973      	ldr	r1, [pc, #460]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005542:	4b6e      	ldr	r3, [pc, #440]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	496a      	ldr	r1, [pc, #424]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005564:	4b65      	ldr	r3, [pc, #404]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4962      	ldr	r1, [pc, #392]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005586:	4b5d      	ldr	r3, [pc, #372]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	4959      	ldr	r1, [pc, #356]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a8:	4b54      	ldr	r3, [pc, #336]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ae:	f023 0203 	bic.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	4951      	ldr	r1, [pc, #324]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ca:	4b4c      	ldr	r3, [pc, #304]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	4948      	ldr	r1, [pc, #288]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d015      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ec:	4b43      	ldr	r3, [pc, #268]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	4940      	ldr	r1, [pc, #256]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a3a      	ldr	r2, [pc, #232]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005616:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005624:	4b35      	ldr	r3, [pc, #212]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	4932      	ldr	r1, [pc, #200]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4a2c      	ldr	r2, [pc, #176]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005662:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	4924      	ldr	r1, [pc, #144]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567c:	4b1f      	ldr	r3, [pc, #124]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4a1e      	ldr	r2, [pc, #120]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005686:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a2:	4916      	ldr	r1, [pc, #88]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b2:	d105      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a10      	ldr	r2, [pc, #64]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d019      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	4908      	ldr	r1, [pc, #32]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ea:	d109      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ec:	4b03      	ldr	r3, [pc, #12]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4a02      	ldr	r2, [pc, #8]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056f6:	60d3      	str	r3, [r2, #12]
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800570c:	4b29      	ldr	r3, [pc, #164]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	4926      	ldr	r1, [pc, #152]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005736:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005744:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005752:	4918      	ldr	r1, [pc, #96]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005762:	d105      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005764:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a12      	ldr	r2, [pc, #72]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800576a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d015      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800577c:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005782:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578a:	490a      	ldr	r1, [pc, #40]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800579a:	d105      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579c:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e049      	b.n	800585e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fc3c 	bl	800205c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 ff76 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d001      	beq.n	8005880 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e04c      	b.n	800591a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a26      	ldr	r2, [pc, #152]	@ (8005928 <HAL_TIM_Base_Start+0xc0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589a:	d01d      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a22      	ldr	r2, [pc, #136]	@ (800592c <HAL_TIM_Base_Start+0xc4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <HAL_TIM_Base_Start+0xc8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <HAL_TIM_Base_Start+0xcc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <HAL_TIM_Base_Start+0xd0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <HAL_TIM_Base_Start+0xd4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start+0x70>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <HAL_TIM_Base_Start+0xd8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d115      	bne.n	8005904 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	4b19      	ldr	r3, [pc, #100]	@ (8005944 <HAL_TIM_Base_Start+0xdc>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d015      	beq.n	8005916 <HAL_TIM_Base_Start+0xae>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f0:	d011      	beq.n	8005916 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	e008      	b.n	8005916 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e000      	b.n	8005918 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40015000 	.word	0x40015000
 8005944:	00010007 	.word	0x00010007

08005948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e054      	b.n	8005a0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d022      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598a:	d01d      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xd8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d013      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xe0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x80>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xe8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d115      	bne.n	80059f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xec>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d015      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d011      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	e008      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e000      	b.n	8005a08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40015000 	.word	0x40015000
 8005a34:	00010007 	.word	0x00010007

08005a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e049      	b.n	8005ade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f841 	bl	8005ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fe36 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_TIM_PWM_Start+0x24>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e03c      	b.n	8005b9a <HAL_TIM_PWM_Start+0x9e>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d109      	bne.n	8005b3a <HAL_TIM_PWM_Start+0x3e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e02f      	b.n	8005b9a <HAL_TIM_PWM_Start+0x9e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d109      	bne.n	8005b54 <HAL_TIM_PWM_Start+0x58>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e022      	b.n	8005b9a <HAL_TIM_PWM_Start+0x9e>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d109      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x72>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e015      	b.n	8005b9a <HAL_TIM_PWM_Start+0x9e>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d109      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x8c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e008      	b.n	8005b9a <HAL_TIM_PWM_Start+0x9e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0a6      	b.n	8005cf0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0xb6>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb0:	e023      	b.n	8005bfa <HAL_TIM_PWM_Start+0xfe>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d104      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0xc6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bc0:	e01b      	b.n	8005bfa <HAL_TIM_PWM_Start+0xfe>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0xd6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bd0:	e013      	b.n	8005bfa <HAL_TIM_PWM_Start+0xfe>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_PWM_Start+0xe6>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be0:	e00b      	b.n	8005bfa <HAL_TIM_PWM_Start+0xfe>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0xf6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf0:	e003      	b.n	8005bfa <HAL_TIM_PWM_Start+0xfe>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 f9ea 	bl	8006fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8005cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d018      	beq.n	8005c44 <HAL_TIM_PWM_Start+0x148>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a39      	ldr	r2, [pc, #228]	@ (8005cfc <HAL_TIM_PWM_Start+0x200>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_TIM_PWM_Start+0x148>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a37      	ldr	r2, [pc, #220]	@ (8005d00 <HAL_TIM_PWM_Start+0x204>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIM_PWM_Start+0x148>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a36      	ldr	r2, [pc, #216]	@ (8005d04 <HAL_TIM_PWM_Start+0x208>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIM_PWM_Start+0x148>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a34      	ldr	r2, [pc, #208]	@ (8005d08 <HAL_TIM_PWM_Start+0x20c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_PWM_Start+0x148>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a33      	ldr	r2, [pc, #204]	@ (8005d0c <HAL_TIM_PWM_Start+0x210>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_PWM_Start+0x14c>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <HAL_TIM_PWM_Start+0x14e>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a25      	ldr	r2, [pc, #148]	@ (8005cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d022      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c70:	d01d      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a26      	ldr	r2, [pc, #152]	@ (8005d10 <HAL_TIM_PWM_Start+0x214>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d018      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a24      	ldr	r2, [pc, #144]	@ (8005d14 <HAL_TIM_PWM_Start+0x218>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a23      	ldr	r2, [pc, #140]	@ (8005d18 <HAL_TIM_PWM_Start+0x21c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a19      	ldr	r2, [pc, #100]	@ (8005cfc <HAL_TIM_PWM_Start+0x200>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a18      	ldr	r2, [pc, #96]	@ (8005d00 <HAL_TIM_PWM_Start+0x204>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_TIM_PWM_Start+0x1b2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_TIM_PWM_Start+0x210>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d115      	bne.n	8005cda <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <HAL_TIM_PWM_Start+0x220>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b06      	cmp	r3, #6
 8005cbe:	d015      	beq.n	8005cec <HAL_TIM_PWM_Start+0x1f0>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc6:	d011      	beq.n	8005cec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd8:	e008      	b.n	8005cec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e000      	b.n	8005cee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800
 8005d0c:	40015000 	.word	0x40015000
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	00010007 	.word	0x00010007

08005d20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f952 	bl	8006fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a40      	ldr	r2, [pc, #256]	@ (8005e40 <HAL_TIM_PWM_Stop+0x120>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIM_PWM_Stop+0x54>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3f      	ldr	r2, [pc, #252]	@ (8005e44 <HAL_TIM_PWM_Stop+0x124>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIM_PWM_Stop+0x54>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3d      	ldr	r2, [pc, #244]	@ (8005e48 <HAL_TIM_PWM_Stop+0x128>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_PWM_Stop+0x54>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8005e4c <HAL_TIM_PWM_Stop+0x12c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIM_PWM_Stop+0x54>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3a      	ldr	r2, [pc, #232]	@ (8005e50 <HAL_TIM_PWM_Stop+0x130>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_PWM_Stop+0x54>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	@ (8005e54 <HAL_TIM_PWM_Stop+0x134>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_PWM_Stop+0x58>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_TIM_PWM_Stop+0x5a>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10f      	bne.n	8005dae <HAL_TIM_PWM_Stop+0x8e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <HAL_TIM_PWM_Stop+0x8e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <HAL_TIM_PWM_Stop+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_PWM_Stop+0xbe>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Stop+0xce>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dec:	e023      	b.n	8005e36 <HAL_TIM_PWM_Stop+0x116>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Stop+0xde>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	e01b      	b.n	8005e36 <HAL_TIM_PWM_Stop+0x116>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0xee>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_PWM_Stop+0x116>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Stop+0xfe>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_PWM_Stop+0x116>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0x10e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_PWM_Stop+0x116>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	40015000 	.word	0x40015000

08005e58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e097      	b.n	8005f9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fc f90b 	bl	800209c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005e9c:	f023 0307 	bic.w	r3, r3, #7
 8005ea0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f000 fc1b 	bl	80066e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	4313      	orrs	r3, r2
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ef8:	f023 030c 	bic.w	r3, r3, #12
 8005efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	4313      	orrs	r3, r2
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	011a      	lsls	r2, r3, #4
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	031b      	lsls	r3, r3, #12
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0202 	mvn.w	r2, #2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb5c 	bl	80066ac <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fb4e 	bl	8006698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fb5f 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0204 	mvn.w	r2, #4
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb36 	bl	80066ac <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fb28 	bl	8006698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb39 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0208 	mvn.w	r2, #8
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fb10 	bl	80066ac <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb02 	bl	8006698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb13 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 faea 	bl	80066ac <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fadc 	bl	8006698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 faed 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb fa7a 	bl	8001604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f9dc 	bl	80074f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f9d4 	bl	800750a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 faa7 	bl	80066d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0220 	mvn.w	r2, #32
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f99c 	bl	80074e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f9a8 	bl	800751e <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f9a0 	bl	8007532 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800620e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f998 	bl	8007546 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f990 	bl	800755a <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800625e:	2302      	movs	r3, #2
 8006260:	e0ff      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b14      	cmp	r3, #20
 800626e:	f200 80f0 	bhi.w	8006452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006272:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006453 	.word	0x08006453
 8006280:	08006453 	.word	0x08006453
 8006284:	08006453 	.word	0x08006453
 8006288:	0800630d 	.word	0x0800630d
 800628c:	08006453 	.word	0x08006453
 8006290:	08006453 	.word	0x08006453
 8006294:	08006453 	.word	0x08006453
 8006298:	0800634f 	.word	0x0800634f
 800629c:	08006453 	.word	0x08006453
 80062a0:	08006453 	.word	0x08006453
 80062a4:	08006453 	.word	0x08006453
 80062a8:	0800638f 	.word	0x0800638f
 80062ac:	08006453 	.word	0x08006453
 80062b0:	08006453 	.word	0x08006453
 80062b4:	08006453 	.word	0x08006453
 80062b8:	080063d1 	.word	0x080063d1
 80062bc:	08006453 	.word	0x08006453
 80062c0:	08006453 	.word	0x08006453
 80062c4:	08006453 	.word	0x08006453
 80062c8:	08006411 	.word	0x08006411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fabc 	bl	8006850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
      break;
 800630a:	e0a5      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fb36 	bl	8006984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e084      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fba9 	bl	8006aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0208 	orr.w	r2, r2, #8
 8006368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e064      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fc1b 	bl	8006bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e043      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fc8e 	bl	8006cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800640e:	e023      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fcd8 	bl	8006dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800642a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800643a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006450:	e002      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop

0800646c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIM_ConfigClockSource+0x1c>
 8006484:	2302      	movs	r3, #2
 8006486:	e0f6      	b.n	8006676 <HAL_TIM_ConfigClockSource+0x20a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80064a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a6f      	ldr	r2, [pc, #444]	@ (8006680 <HAL_TIM_ConfigClockSource+0x214>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	f000 80c1 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 80064c8:	4a6d      	ldr	r2, [pc, #436]	@ (8006680 <HAL_TIM_ConfigClockSource+0x214>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	f200 80c6 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 80064d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006684 <HAL_TIM_ConfigClockSource+0x218>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	f000 80b9 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 80064d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006684 <HAL_TIM_ConfigClockSource+0x218>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	f200 80be 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 80064e0:	4a69      	ldr	r2, [pc, #420]	@ (8006688 <HAL_TIM_ConfigClockSource+0x21c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	f000 80b1 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 80064e8:	4a67      	ldr	r2, [pc, #412]	@ (8006688 <HAL_TIM_ConfigClockSource+0x21c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	f200 80b6 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 80064f0:	4a66      	ldr	r2, [pc, #408]	@ (800668c <HAL_TIM_ConfigClockSource+0x220>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	f000 80a9 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 80064f8:	4a64      	ldr	r2, [pc, #400]	@ (800668c <HAL_TIM_ConfigClockSource+0x220>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	f200 80ae 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006500:	4a63      	ldr	r2, [pc, #396]	@ (8006690 <HAL_TIM_ConfigClockSource+0x224>)
 8006502:	4293      	cmp	r3, r2
 8006504:	f000 80a1 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006508:	4a61      	ldr	r2, [pc, #388]	@ (8006690 <HAL_TIM_ConfigClockSource+0x224>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f200 80a6 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006510:	4a60      	ldr	r2, [pc, #384]	@ (8006694 <HAL_TIM_ConfigClockSource+0x228>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f000 8099 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006518:	4a5e      	ldr	r2, [pc, #376]	@ (8006694 <HAL_TIM_ConfigClockSource+0x228>)
 800651a:	4293      	cmp	r3, r2
 800651c:	f200 809e 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006520:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006524:	f000 8091 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006528:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800652c:	f200 8096 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006534:	f000 8089 	beq.w	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006538:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800653c:	f200 808e 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006544:	d03e      	beq.n	80065c4 <HAL_TIM_ConfigClockSource+0x158>
 8006546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800654a:	f200 8087 	bhi.w	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006552:	f000 8086 	beq.w	8006662 <HAL_TIM_ConfigClockSource+0x1f6>
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655a:	d87f      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 800655c:	2b70      	cmp	r3, #112	@ 0x70
 800655e:	d01a      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x12a>
 8006560:	2b70      	cmp	r3, #112	@ 0x70
 8006562:	d87b      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006564:	2b60      	cmp	r3, #96	@ 0x60
 8006566:	d050      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x19e>
 8006568:	2b60      	cmp	r3, #96	@ 0x60
 800656a:	d877      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 800656c:	2b50      	cmp	r3, #80	@ 0x50
 800656e:	d03c      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x17e>
 8006570:	2b50      	cmp	r3, #80	@ 0x50
 8006572:	d873      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006574:	2b40      	cmp	r3, #64	@ 0x40
 8006576:	d058      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x1be>
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	d86f      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 800657c:	2b30      	cmp	r3, #48	@ 0x30
 800657e:	d064      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006580:	2b30      	cmp	r3, #48	@ 0x30
 8006582:	d86b      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 8006584:	2b20      	cmp	r3, #32
 8006586:	d060      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006588:	2b20      	cmp	r3, #32
 800658a:	d867      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d05c      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006590:	2b10      	cmp	r3, #16
 8006592:	d05a      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x1de>
 8006594:	e062      	b.n	800665c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065a6:	f000 fcf9 	bl	8006f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	609a      	str	r2, [r3, #8]
      break;
 80065c2:	e04f      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d4:	f000 fce2 	bl	8006f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065e6:	609a      	str	r2, [r3, #8]
      break;
 80065e8:	e03c      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 fc54 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2150      	movs	r1, #80	@ 0x50
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fcad 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006608:	e02c      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006616:	461a      	mov	r2, r3
 8006618:	f000 fc73 	bl	8006f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2160      	movs	r1, #96	@ 0x60
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fc9d 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006628:	e01c      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006636:	461a      	mov	r2, r3
 8006638:	f000 fc34 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2140      	movs	r1, #64	@ 0x40
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fc8d 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006648:	e00c      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	4610      	mov	r0, r2
 8006656:	f000 fc84 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 800665a:	e003      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
      break;
 8006660:	e000      	b.n	8006664 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	00100070 	.word	0x00100070
 8006684:	00100060 	.word	0x00100060
 8006688:	00100050 	.word	0x00100050
 800668c:	00100040 	.word	0x00100040
 8006690:	00100030 	.word	0x00100030
 8006694:	00100020 	.word	0x00100020

08006698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a4c      	ldr	r2, [pc, #304]	@ (800682c <TIM_Base_SetConfig+0x144>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d017      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006706:	d013      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a49      	ldr	r2, [pc, #292]	@ (8006830 <TIM_Base_SetConfig+0x148>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a48      	ldr	r2, [pc, #288]	@ (8006834 <TIM_Base_SetConfig+0x14c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a47      	ldr	r2, [pc, #284]	@ (8006838 <TIM_Base_SetConfig+0x150>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a46      	ldr	r2, [pc, #280]	@ (800683c <TIM_Base_SetConfig+0x154>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a45      	ldr	r2, [pc, #276]	@ (8006840 <TIM_Base_SetConfig+0x158>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d108      	bne.n	8006742 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a39      	ldr	r2, [pc, #228]	@ (800682c <TIM_Base_SetConfig+0x144>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d023      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d01f      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a36      	ldr	r2, [pc, #216]	@ (8006830 <TIM_Base_SetConfig+0x148>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01b      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a35      	ldr	r2, [pc, #212]	@ (8006834 <TIM_Base_SetConfig+0x14c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d017      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a34      	ldr	r2, [pc, #208]	@ (8006838 <TIM_Base_SetConfig+0x150>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a33      	ldr	r2, [pc, #204]	@ (800683c <TIM_Base_SetConfig+0x154>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <TIM_Base_SetConfig+0x15c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a32      	ldr	r2, [pc, #200]	@ (8006848 <TIM_Base_SetConfig+0x160>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a31      	ldr	r2, [pc, #196]	@ (800684c <TIM_Base_SetConfig+0x164>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0xaa>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	@ (8006840 <TIM_Base_SetConfig+0x158>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a18      	ldr	r2, [pc, #96]	@ (800682c <TIM_Base_SetConfig+0x144>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x110>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1a      	ldr	r2, [pc, #104]	@ (800683c <TIM_Base_SetConfig+0x154>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1a      	ldr	r2, [pc, #104]	@ (8006844 <TIM_Base_SetConfig+0x15c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x110>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a19      	ldr	r2, [pc, #100]	@ (8006848 <TIM_Base_SetConfig+0x160>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x110>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a18      	ldr	r2, [pc, #96]	@ (800684c <TIM_Base_SetConfig+0x164>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x110>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a13      	ldr	r2, [pc, #76]	@ (8006840 <TIM_Base_SetConfig+0x158>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d103      	bne.n	8006800 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d105      	bne.n	800681e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	611a      	str	r2, [r3, #16]
  }
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40000c00 	.word	0x40000c00
 800683c:	40013400 	.word	0x40013400
 8006840:	40015000 	.word	0x40015000
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f023 0201 	bic.w	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 0302 	bic.w	r3, r3, #2
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a30      	ldr	r2, [pc, #192]	@ (800696c <TIM_OC1_SetConfig+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_OC1_SetConfig+0x88>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006970 <TIM_OC1_SetConfig+0x120>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC1_SetConfig+0x88>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006974 <TIM_OC1_SetConfig+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC1_SetConfig+0x88>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <TIM_OC1_SetConfig+0x128>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC1_SetConfig+0x88>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a2c      	ldr	r2, [pc, #176]	@ (800697c <TIM_OC1_SetConfig+0x12c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC1_SetConfig+0x88>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006980 <TIM_OC1_SetConfig+0x130>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10c      	bne.n	80068f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0308 	bic.w	r3, r3, #8
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1d      	ldr	r2, [pc, #116]	@ (800696c <TIM_OC1_SetConfig+0x11c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <TIM_OC1_SetConfig+0xd2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <TIM_OC1_SetConfig+0x120>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <TIM_OC1_SetConfig+0xd2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1b      	ldr	r2, [pc, #108]	@ (8006974 <TIM_OC1_SetConfig+0x124>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00b      	beq.n	8006922 <TIM_OC1_SetConfig+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1a      	ldr	r2, [pc, #104]	@ (8006978 <TIM_OC1_SetConfig+0x128>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_OC1_SetConfig+0xd2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a19      	ldr	r2, [pc, #100]	@ (800697c <TIM_OC1_SetConfig+0x12c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_OC1_SetConfig+0xd2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a18      	ldr	r2, [pc, #96]	@ (8006980 <TIM_OC1_SetConfig+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d111      	bne.n	8006946 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	621a      	str	r2, [r3, #32]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800
 8006980:	40015000 	.word	0x40015000

08006984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f023 0210 	bic.w	r2, r3, #16
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0320 	bic.w	r3, r3, #32
 80069d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a94 <TIM_OC2_SetConfig+0x110>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_OC2_SetConfig+0x74>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006a98 <TIM_OC2_SetConfig+0x114>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC2_SetConfig+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a9c <TIM_OC2_SetConfig+0x118>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d10d      	bne.n	8006a14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1f      	ldr	r2, [pc, #124]	@ (8006a94 <TIM_OC2_SetConfig+0x110>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <TIM_OC2_SetConfig+0xc0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a98 <TIM_OC2_SetConfig+0x114>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_OC2_SetConfig+0xc0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <TIM_OC2_SetConfig+0x11c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <TIM_OC2_SetConfig+0xc0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa4 <TIM_OC2_SetConfig+0x120>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_OC2_SetConfig+0xc0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <TIM_OC2_SetConfig+0x124>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC2_SetConfig+0xc0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	@ (8006a9c <TIM_OC2_SetConfig+0x118>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d113      	bne.n	8006a6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40013400 	.word	0x40013400
 8006a9c:	40015000 	.word	0x40015000
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800

08006aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a2b      	ldr	r2, [pc, #172]	@ (8006bb8 <TIM_OC3_SetConfig+0x10c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <TIM_OC3_SetConfig+0x72>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a2a      	ldr	r2, [pc, #168]	@ (8006bbc <TIM_OC3_SetConfig+0x110>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC3_SetConfig+0x72>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a29      	ldr	r2, [pc, #164]	@ (8006bc0 <TIM_OC3_SetConfig+0x114>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d10d      	bne.n	8006b3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb8 <TIM_OC3_SetConfig+0x10c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <TIM_OC3_SetConfig+0xbe>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <TIM_OC3_SetConfig+0x110>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00f      	beq.n	8006b6a <TIM_OC3_SetConfig+0xbe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc4 <TIM_OC3_SetConfig+0x118>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <TIM_OC3_SetConfig+0xbe>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc8 <TIM_OC3_SetConfig+0x11c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_OC3_SetConfig+0xbe>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bcc <TIM_OC3_SetConfig+0x120>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC3_SetConfig+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	@ (8006bc0 <TIM_OC3_SetConfig+0x114>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d113      	bne.n	8006b92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	621a      	str	r2, [r3, #32]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce0 <TIM_OC4_SetConfig+0x110>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_OC4_SetConfig+0x74>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce4 <TIM_OC4_SetConfig+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_OC4_SetConfig+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce8 <TIM_OC4_SetConfig+0x118>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10d      	bne.n	8006c60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce0 <TIM_OC4_SetConfig+0x110>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <TIM_OC4_SetConfig+0xc0>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce4 <TIM_OC4_SetConfig+0x114>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00f      	beq.n	8006c90 <TIM_OC4_SetConfig+0xc0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <TIM_OC4_SetConfig+0x11c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00b      	beq.n	8006c90 <TIM_OC4_SetConfig+0xc0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <TIM_OC4_SetConfig+0x120>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_OC4_SetConfig+0xc0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf4 <TIM_OC4_SetConfig+0x124>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC4_SetConfig+0xc0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ce8 <TIM_OC4_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d113      	bne.n	8006cb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	019b      	lsls	r3, r3, #6
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40013400 	.word	0x40013400
 8006ce8:	40015000 	.word	0x40015000
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800

08006cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <TIM_OC5_SetConfig+0xbc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <TIM_OC5_SetConfig+0x82>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <TIM_OC5_SetConfig+0xc0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00f      	beq.n	8006d7a <TIM_OC5_SetConfig+0x82>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <TIM_OC5_SetConfig+0xc4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_OC5_SetConfig+0x82>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a16      	ldr	r2, [pc, #88]	@ (8006dc0 <TIM_OC5_SetConfig+0xc8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_OC5_SetConfig+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <TIM_OC5_SetConfig+0xcc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC5_SetConfig+0x82>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a14      	ldr	r2, [pc, #80]	@ (8006dc8 <TIM_OC5_SetConfig+0xd0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d109      	bne.n	8006d8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40014400 	.word	0x40014400
 8006dc4:	40014800 	.word	0x40014800
 8006dc8:	40015000 	.word	0x40015000

08006dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1a      	ldr	r2, [pc, #104]	@ (8006e8c <TIM_OC6_SetConfig+0xc0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <TIM_OC6_SetConfig+0x84>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <TIM_OC6_SetConfig+0xc4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00f      	beq.n	8006e50 <TIM_OC6_SetConfig+0x84>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a18      	ldr	r2, [pc, #96]	@ (8006e94 <TIM_OC6_SetConfig+0xc8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_OC6_SetConfig+0x84>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <TIM_OC6_SetConfig+0xcc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_OC6_SetConfig+0x84>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a16      	ldr	r2, [pc, #88]	@ (8006e9c <TIM_OC6_SetConfig+0xd0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC6_SetConfig+0x84>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ea0 <TIM_OC6_SetConfig+0xd4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d109      	bne.n	8006e64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	029b      	lsls	r3, r3, #10
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800
 8006ea0:	40015000 	.word	0x40015000

08006ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f023 030a 	bic.w	r3, r3, #10
 8006ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f023 0210 	bic.w	r2, r3, #16
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f043 0307 	orr.w	r3, r3, #7
 8006f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	021a      	lsls	r2, r3, #8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	609a      	str	r2, [r3, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	2201      	movs	r2, #1
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1a      	ldr	r2, [r3, #32]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1a      	ldr	r2, [r3, #32]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	fa01 f303 	lsl.w	r3, r1, r3
 8007014:	431a      	orrs	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_TIMEx_PWMN_Start+0x24>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e022      	b.n	8007092 <HAL_TIMEx_PWMN_Start+0x6a>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b04      	cmp	r3, #4
 8007050:	d109      	bne.n	8007066 <HAL_TIMEx_PWMN_Start+0x3e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	bf14      	ite	ne
 800705e:	2301      	movne	r3, #1
 8007060:	2300      	moveq	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	e015      	b.n	8007092 <HAL_TIMEx_PWMN_Start+0x6a>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d109      	bne.n	8007080 <HAL_TIMEx_PWMN_Start+0x58>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e008      	b.n	8007092 <HAL_TIMEx_PWMN_Start+0x6a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	bf14      	ite	ne
 800708c:	2301      	movne	r3, #1
 800708e:	2300      	moveq	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e073      	b.n	8007182 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <HAL_TIMEx_PWMN_Start+0x82>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a8:	e013      	b.n	80070d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d104      	bne.n	80070ba <HAL_TIMEx_PWMN_Start+0x92>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070b8:	e00b      	b.n	80070d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d104      	bne.n	80070ca <HAL_TIMEx_PWMN_Start+0xa2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070c8:	e003      	b.n	80070d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2204      	movs	r2, #4
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fa47 	bl	800756e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a25      	ldr	r2, [pc, #148]	@ (800718c <HAL_TIMEx_PWMN_Start+0x164>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007102:	d01d      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a21      	ldr	r2, [pc, #132]	@ (8007190 <HAL_TIMEx_PWMN_Start+0x168>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a20      	ldr	r2, [pc, #128]	@ (8007194 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1e      	ldr	r2, [pc, #120]	@ (8007198 <HAL_TIMEx_PWMN_Start+0x170>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <HAL_TIMEx_PWMN_Start+0x174>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1b      	ldr	r2, [pc, #108]	@ (80071a0 <HAL_TIMEx_PWMN_Start+0x178>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_TIMEx_PWMN_Start+0x118>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1a      	ldr	r2, [pc, #104]	@ (80071a4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d115      	bne.n	800716c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	4b18      	ldr	r3, [pc, #96]	@ (80071a8 <HAL_TIMEx_PWMN_Start+0x180>)
 8007148:	4013      	ands	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b06      	cmp	r3, #6
 8007150:	d015      	beq.n	800717e <HAL_TIMEx_PWMN_Start+0x156>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007158:	d011      	beq.n	800717e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0201 	orr.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716a:	e008      	b.n	800717e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	e000      	b.n	8007180 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40013400 	.word	0x40013400
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40015000 	.word	0x40015000
 80071a8:	00010007 	.word	0x00010007

080071ac <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f9d5 	bl	800756e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10f      	bne.n	80071f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	f244 4344 	movw	r3, #17476	@ 0x4444
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d107      	bne.n	80071f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a1a      	ldr	r2, [r3, #32]
 80071fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <HAL_TIMEx_PWMN_Stop+0x78>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <HAL_TIMEx_PWMN_Stop+0x78>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d104      	bne.n	8007234 <HAL_TIMEx_PWMN_Stop+0x88>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007232:	e013      	b.n	800725c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b04      	cmp	r3, #4
 8007238:	d104      	bne.n	8007244 <HAL_TIMEx_PWMN_Stop+0x98>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007242:	e00b      	b.n	800725c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b08      	cmp	r3, #8
 8007248:	d104      	bne.n	8007254 <HAL_TIMEx_PWMN_Stop+0xa8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007252:	e003      	b.n	800725c <HAL_TIMEx_PWMN_Stop+0xb0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800727c:	2302      	movs	r3, #2
 800727e:	e074      	b.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a34      	ldr	r2, [pc, #208]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a33      	ldr	r2, [pc, #204]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a31      	ldr	r2, [pc, #196]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d108      	bne.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a21      	ldr	r2, [pc, #132]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007300:	d01d      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1f      	ldr	r2, [pc, #124]	@ (8007384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1d      	ldr	r2, [pc, #116]	@ (8007388 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1c      	ldr	r2, [pc, #112]	@ (800738c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a15      	ldr	r2, [pc, #84]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a11      	ldr	r2, [pc, #68]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d10c      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4313      	orrs	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40013400 	.word	0x40013400
 8007380:	40015000 	.word	0x40015000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40014000 	.word	0x40014000

08007394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e078      	b.n	80074a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1c      	ldr	r2, [pc, #112]	@ (80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1b      	ldr	r2, [pc, #108]	@ (80074b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a19      	ldr	r2, [pc, #100]	@ (80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d11c      	bne.n	8007490 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	051b      	lsls	r3, r3, #20
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40012c00 	.word	0x40012c00
 80074b4:	40013400 	.word	0x40013400
 80074b8:	40015000 	.word	0x40015000

080074bc <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80074d2:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	2204      	movs	r2, #4
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	43db      	mvns	r3, r3
 8007590:	401a      	ands	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1a      	ldr	r2, [r3, #32]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e042      	b.n	8007650 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fa fe73 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2224      	movs	r2, #36	@ 0x24
 80075e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 ff60 	bl	80084c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc61 	bl	8007ed0 <UART_SetConfig>
 800760e:	4603      	mov	r3, r0
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e01b      	b.n	8007650 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 ffdf 	bl	800860c <UART_CheckIdleState>
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766e:	2b20      	cmp	r3, #32
 8007670:	d17b      	bne.n	800776a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <HAL_UART_Transmit+0x26>
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e074      	b.n	800776c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2221      	movs	r2, #33	@ 0x21
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007692:	f7fa fecd 	bl	8002430 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	88fa      	ldrh	r2, [r7, #6]
 800769c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	88fa      	ldrh	r2, [r7, #6]
 80076a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b0:	d108      	bne.n	80076c4 <HAL_UART_Transmit+0x6c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	e003      	b.n	80076cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076cc:	e030      	b.n	8007730 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2180      	movs	r1, #128	@ 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 f841 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e03d      	b.n	800776c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007704:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3302      	adds	r3, #2
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	e007      	b.n	800771e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1c8      	bne.n	80076ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2200      	movs	r2, #0
 8007744:	2140      	movs	r1, #64	@ 0x40
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f001 f80a 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e006      	b.n	800776c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e000      	b.n	800776c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800776a:	2302      	movs	r3, #2
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	@ 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007788:	2b20      	cmp	r3, #32
 800778a:	d137      	bne.n	80077fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_UART_Receive_IT+0x24>
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e030      	b.n	80077fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <HAL_UART_Receive_IT+0x94>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d01f      	beq.n	80077ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d018      	beq.n	80077ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	613b      	str	r3, [r7, #16]
   return(result);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	623b      	str	r3, [r7, #32]
 80077da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69f9      	ldr	r1, [r7, #28]
 80077de:	6a3a      	ldr	r2, [r7, #32]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	461a      	mov	r2, r3
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f001 f822 	bl	800883c <UART_Start_Receive_IT>
 80077f8:	4603      	mov	r3, r0
 80077fa:	e000      	b.n	80077fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	@ 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40008000 	.word	0x40008000

0800780c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b0ba      	sub	sp, #232	@ 0xe8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800783a:	4013      	ands	r3, r2
 800783c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11b      	bne.n	8007880 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d105      	bne.n	800786c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8300 	beq.w	8007e76 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
      }
      return;
 800787e:	e2fa      	b.n	8007e76 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8123 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800788a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800788e:	4b8d      	ldr	r3, [pc, #564]	@ (8007ac4 <HAL_UART_IRQHandler+0x2b8>)
 8007890:	4013      	ands	r3, r2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800789a:	4b8b      	ldr	r3, [pc, #556]	@ (8007ac8 <HAL_UART_IRQHandler+0x2bc>)
 800789c:	4013      	ands	r3, r2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 8116 	beq.w	8007ad0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d011      	beq.n	80078d4 <HAL_UART_IRQHandler+0xc8>
 80078b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ca:	f043 0201 	orr.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d011      	beq.n	8007904 <HAL_UART_IRQHandler+0xf8>
 80078e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2202      	movs	r2, #2
 80078f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fa:	f043 0204 	orr.w	r2, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d011      	beq.n	8007934 <HAL_UART_IRQHandler+0x128>
 8007910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2204      	movs	r2, #4
 8007922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792a:	f043 0202 	orr.w	r2, r3, #2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b00      	cmp	r3, #0
 800793e:	d017      	beq.n	8007970 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800794c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007950:	4b5c      	ldr	r3, [pc, #368]	@ (8007ac4 <HAL_UART_IRQHandler+0x2b8>)
 8007952:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2208      	movs	r2, #8
 800795e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007966:	f043 0208 	orr.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <HAL_UART_IRQHandler+0x196>
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8266 	beq.w	8007e7a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d013      	beq.n	80079e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d105      	bne.n	80079d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d005      	beq.n	8007a06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d054      	beq.n	8007ab0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 f83a 	bl	8008a80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b40      	cmp	r3, #64	@ 0x40
 8007a18:	d146      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1d9      	bne.n	8007a1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d017      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a76:	4a15      	ldr	r2, [pc, #84]	@ (8007acc <HAL_UART_IRQHandler+0x2c0>)
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fc fac3 	bl	800400c <HAL_DMA_Abort_IT>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d019      	beq.n	8007ac0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9e:	e00f      	b.n	8007ac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f9ff 	bl	8007ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa6:	e00b      	b.n	8007ac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f9fb 	bl	8007ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	e007      	b.n	8007ac0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9f7 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007abe:	e1dc      	b.n	8007e7a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac0:	bf00      	nop
    return;
 8007ac2:	e1da      	b.n	8007e7a <HAL_UART_IRQHandler+0x66e>
 8007ac4:	10000001 	.word	0x10000001
 8007ac8:	04000120 	.word	0x04000120
 8007acc:	08008b4d 	.word	0x08008b4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	f040 8170 	bne.w	8007dba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8169 	beq.w	8007dba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8162 	beq.w	8007dba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2210      	movs	r2, #16
 8007afc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b08:	2b40      	cmp	r3, #64	@ 0x40
 8007b0a:	f040 80d8 	bne.w	8007cbe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80af 	beq.w	8007c84 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b30:	429a      	cmp	r2, r3
 8007b32:	f080 80a7 	bcs.w	8007c84 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 8087 	bne.w	8007c62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1da      	bne.n	8007b54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e1      	bne.n	8007b9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e3      	bne.n	8007bda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c30:	f023 0310 	bic.w	r3, r3, #16
 8007c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e4      	bne.n	8007c20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fc f97c 	bl	8003f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2202      	movs	r2, #2
 8007c66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f91b 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c82:	e0fc      	b.n	8007e7e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	f040 80f5 	bne.w	8007e7e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	f040 80eb 	bne.w	8007e7e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8fe 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
      return;
 8007cbc:	e0df      	b.n	8007e7e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80d1 	beq.w	8007e82 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80cc 	beq.w	8007e82 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e4      	bne.n	8007cea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3308      	adds	r3, #8
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	f023 0301 	bic.w	r3, r3, #1
 8007d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d48:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e1      	bne.n	8007d20 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f023 0310 	bic.w	r3, r3, #16
 8007d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	69b9      	ldr	r1, [r7, #24]
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e4      	bne.n	8007d70 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f880 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007db8:	e063      	b.n	8007e82 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <HAL_UART_IRQHandler+0x5d8>
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007dda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fc17 	bl	8009610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007de2:	e051      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d014      	beq.n	8007e1a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d03a      	beq.n	8007e86 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
    }
    return;
 8007e18:	e035      	b.n	8007e86 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_UART_IRQHandler+0x62e>
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fea0 	bl	8008b78 <UART_EndTransmit_IT>
    return;
 8007e38:	e026      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <HAL_UART_IRQHandler+0x64e>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 fbf0 	bl	8009638 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e58:	e016      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <HAL_UART_IRQHandler+0x67c>
 8007e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da0c      	bge.n	8007e88 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fbd8 	bl	8009624 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e74:	e008      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
      return;
 8007e76:	bf00      	nop
 8007e78:	e006      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
    return;
 8007e7a:	bf00      	nop
 8007e7c:	e004      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
      return;
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
      return;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <HAL_UART_IRQHandler+0x67c>
    return;
 8007e86:	bf00      	nop
  }
}
 8007e88:	37e8      	adds	r7, #232	@ 0xe8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed4:	b08c      	sub	sp, #48	@ 0x30
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4baa      	ldr	r3, [pc, #680]	@ (80081a8 <UART_SetConfig+0x2d8>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a9f      	ldr	r2, [pc, #636]	@ (80081ac <UART_SetConfig+0x2dc>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	f023 010f 	bic.w	r1, r3, #15
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a90      	ldr	r2, [pc, #576]	@ (80081b0 <UART_SetConfig+0x2e0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d125      	bne.n	8007fc0 <UART_SetConfig+0xf0>
 8007f74:	4b8f      	ldr	r3, [pc, #572]	@ (80081b4 <UART_SetConfig+0x2e4>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d81a      	bhi.n	8007fb8 <UART_SetConfig+0xe8>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <UART_SetConfig+0xb8>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e116      	b.n	80081ce <UART_SetConfig+0x2fe>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e112      	b.n	80081ce <UART_SetConfig+0x2fe>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fae:	e10e      	b.n	80081ce <UART_SetConfig+0x2fe>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	e10a      	b.n	80081ce <UART_SetConfig+0x2fe>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e106      	b.n	80081ce <UART_SetConfig+0x2fe>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a7c      	ldr	r2, [pc, #496]	@ (80081b8 <UART_SetConfig+0x2e8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d138      	bne.n	800803c <UART_SetConfig+0x16c>
 8007fca:	4b7a      	ldr	r3, [pc, #488]	@ (80081b4 <UART_SetConfig+0x2e4>)
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	d82d      	bhi.n	8008034 <UART_SetConfig+0x164>
 8007fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <UART_SetConfig+0x110>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008015 	.word	0x08008015
 8007fe4:	08008035 	.word	0x08008035
 8007fe8:	08008035 	.word	0x08008035
 8007fec:	08008035 	.word	0x08008035
 8007ff0:	08008025 	.word	0x08008025
 8007ff4:	08008035 	.word	0x08008035
 8007ff8:	08008035 	.word	0x08008035
 8007ffc:	08008035 	.word	0x08008035
 8008000:	0800801d 	.word	0x0800801d
 8008004:	08008035 	.word	0x08008035
 8008008:	08008035 	.word	0x08008035
 800800c:	08008035 	.word	0x08008035
 8008010:	0800802d 	.word	0x0800802d
 8008014:	2300      	movs	r3, #0
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e0d8      	b.n	80081ce <UART_SetConfig+0x2fe>
 800801c:	2302      	movs	r3, #2
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e0d4      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008024:	2304      	movs	r3, #4
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e0d0      	b.n	80081ce <UART_SetConfig+0x2fe>
 800802c:	2308      	movs	r3, #8
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e0cc      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803a:	e0c8      	b.n	80081ce <UART_SetConfig+0x2fe>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a5e      	ldr	r2, [pc, #376]	@ (80081bc <UART_SetConfig+0x2ec>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d125      	bne.n	8008092 <UART_SetConfig+0x1c2>
 8008046:	4b5b      	ldr	r3, [pc, #364]	@ (80081b4 <UART_SetConfig+0x2e4>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008050:	2b30      	cmp	r3, #48	@ 0x30
 8008052:	d016      	beq.n	8008082 <UART_SetConfig+0x1b2>
 8008054:	2b30      	cmp	r3, #48	@ 0x30
 8008056:	d818      	bhi.n	800808a <UART_SetConfig+0x1ba>
 8008058:	2b20      	cmp	r3, #32
 800805a:	d00a      	beq.n	8008072 <UART_SetConfig+0x1a2>
 800805c:	2b20      	cmp	r3, #32
 800805e:	d814      	bhi.n	800808a <UART_SetConfig+0x1ba>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <UART_SetConfig+0x19a>
 8008064:	2b10      	cmp	r3, #16
 8008066:	d008      	beq.n	800807a <UART_SetConfig+0x1aa>
 8008068:	e00f      	b.n	800808a <UART_SetConfig+0x1ba>
 800806a:	2300      	movs	r3, #0
 800806c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008070:	e0ad      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008072:	2302      	movs	r3, #2
 8008074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008078:	e0a9      	b.n	80081ce <UART_SetConfig+0x2fe>
 800807a:	2304      	movs	r3, #4
 800807c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008080:	e0a5      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008082:	2308      	movs	r3, #8
 8008084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008088:	e0a1      	b.n	80081ce <UART_SetConfig+0x2fe>
 800808a:	2310      	movs	r3, #16
 800808c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008090:	e09d      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a4a      	ldr	r2, [pc, #296]	@ (80081c0 <UART_SetConfig+0x2f0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d125      	bne.n	80080e8 <UART_SetConfig+0x218>
 800809c:	4b45      	ldr	r3, [pc, #276]	@ (80081b4 <UART_SetConfig+0x2e4>)
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80080a8:	d016      	beq.n	80080d8 <UART_SetConfig+0x208>
 80080aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80080ac:	d818      	bhi.n	80080e0 <UART_SetConfig+0x210>
 80080ae:	2b80      	cmp	r3, #128	@ 0x80
 80080b0:	d00a      	beq.n	80080c8 <UART_SetConfig+0x1f8>
 80080b2:	2b80      	cmp	r3, #128	@ 0x80
 80080b4:	d814      	bhi.n	80080e0 <UART_SetConfig+0x210>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <UART_SetConfig+0x1f0>
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d008      	beq.n	80080d0 <UART_SetConfig+0x200>
 80080be:	e00f      	b.n	80080e0 <UART_SetConfig+0x210>
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c6:	e082      	b.n	80081ce <UART_SetConfig+0x2fe>
 80080c8:	2302      	movs	r3, #2
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ce:	e07e      	b.n	80081ce <UART_SetConfig+0x2fe>
 80080d0:	2304      	movs	r3, #4
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d6:	e07a      	b.n	80081ce <UART_SetConfig+0x2fe>
 80080d8:	2308      	movs	r3, #8
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080de:	e076      	b.n	80081ce <UART_SetConfig+0x2fe>
 80080e0:	2310      	movs	r3, #16
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e6:	e072      	b.n	80081ce <UART_SetConfig+0x2fe>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a35      	ldr	r2, [pc, #212]	@ (80081c4 <UART_SetConfig+0x2f4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d12a      	bne.n	8008148 <UART_SetConfig+0x278>
 80080f2:	4b30      	ldr	r3, [pc, #192]	@ (80081b4 <UART_SetConfig+0x2e4>)
 80080f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008100:	d01a      	beq.n	8008138 <UART_SetConfig+0x268>
 8008102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008106:	d81b      	bhi.n	8008140 <UART_SetConfig+0x270>
 8008108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810c:	d00c      	beq.n	8008128 <UART_SetConfig+0x258>
 800810e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008112:	d815      	bhi.n	8008140 <UART_SetConfig+0x270>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <UART_SetConfig+0x250>
 8008118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800811c:	d008      	beq.n	8008130 <UART_SetConfig+0x260>
 800811e:	e00f      	b.n	8008140 <UART_SetConfig+0x270>
 8008120:	2300      	movs	r3, #0
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008126:	e052      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008128:	2302      	movs	r3, #2
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812e:	e04e      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008136:	e04a      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813e:	e046      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008146:	e042      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a17      	ldr	r2, [pc, #92]	@ (80081ac <UART_SetConfig+0x2dc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d13a      	bne.n	80081c8 <UART_SetConfig+0x2f8>
 8008152:	4b18      	ldr	r3, [pc, #96]	@ (80081b4 <UART_SetConfig+0x2e4>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800815c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008160:	d01a      	beq.n	8008198 <UART_SetConfig+0x2c8>
 8008162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008166:	d81b      	bhi.n	80081a0 <UART_SetConfig+0x2d0>
 8008168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800816c:	d00c      	beq.n	8008188 <UART_SetConfig+0x2b8>
 800816e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008172:	d815      	bhi.n	80081a0 <UART_SetConfig+0x2d0>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <UART_SetConfig+0x2b0>
 8008178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800817c:	d008      	beq.n	8008190 <UART_SetConfig+0x2c0>
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x2d0>
 8008180:	2300      	movs	r3, #0
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e022      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e01e      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e01a      	b.n	80081ce <UART_SetConfig+0x2fe>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e016      	b.n	80081ce <UART_SetConfig+0x2fe>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e012      	b.n	80081ce <UART_SetConfig+0x2fe>
 80081a8:	cfff69f3 	.word	0xcfff69f3
 80081ac:	40008000 	.word	0x40008000
 80081b0:	40013800 	.word	0x40013800
 80081b4:	40021000 	.word	0x40021000
 80081b8:	40004400 	.word	0x40004400
 80081bc:	40004800 	.word	0x40004800
 80081c0:	40004c00 	.word	0x40004c00
 80081c4:	40005000 	.word	0x40005000
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4aae      	ldr	r2, [pc, #696]	@ (800848c <UART_SetConfig+0x5bc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	f040 8097 	bne.w	8008308 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d823      	bhi.n	800822a <UART_SetConfig+0x35a>
 80081e2:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <UART_SetConfig+0x318>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	0800822b 	.word	0x0800822b
 80081f0:	08008215 	.word	0x08008215
 80081f4:	0800822b 	.word	0x0800822b
 80081f8:	0800821b 	.word	0x0800821b
 80081fc:	0800822b 	.word	0x0800822b
 8008200:	0800822b 	.word	0x0800822b
 8008204:	0800822b 	.word	0x0800822b
 8008208:	08008223 	.word	0x08008223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800820c:	f7fc ffe2 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8008210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008212:	e010      	b.n	8008236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008214:	4b9e      	ldr	r3, [pc, #632]	@ (8008490 <UART_SetConfig+0x5c0>)
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008218:	e00d      	b.n	8008236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800821a:	f7fc ff6d 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 800821e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008220:	e009      	b.n	8008236 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008228:	e005      	b.n	8008236 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8130 	beq.w	800849e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008242:	4a94      	ldr	r2, [pc, #592]	@ (8008494 <UART_SetConfig+0x5c4>)
 8008244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008248:	461a      	mov	r2, r3
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008250:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4413      	add	r3, r2
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	429a      	cmp	r2, r3
 8008260:	d305      	bcc.n	800826e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	429a      	cmp	r2, r3
 800826c:	d903      	bls.n	8008276 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008274:	e113      	b.n	800849e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	2200      	movs	r2, #0
 800827a:	60bb      	str	r3, [r7, #8]
 800827c:	60fa      	str	r2, [r7, #12]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	4a84      	ldr	r2, [pc, #528]	@ (8008494 <UART_SetConfig+0x5c4>)
 8008284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008288:	b29b      	uxth	r3, r3
 800828a:	2200      	movs	r2, #0
 800828c:	603b      	str	r3, [r7, #0]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008294:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008298:	f7f8 fcbe 	bl	8000c18 <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4610      	mov	r0, r2
 80082a2:	4619      	mov	r1, r3
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	020b      	lsls	r3, r1, #8
 80082ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082b2:	0202      	lsls	r2, r0, #8
 80082b4:	6979      	ldr	r1, [r7, #20]
 80082b6:	6849      	ldr	r1, [r1, #4]
 80082b8:	0849      	lsrs	r1, r1, #1
 80082ba:	2000      	movs	r0, #0
 80082bc:	460c      	mov	r4, r1
 80082be:	4605      	mov	r5, r0
 80082c0:	eb12 0804 	adds.w	r8, r2, r4
 80082c4:	eb43 0905 	adc.w	r9, r3, r5
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	469a      	mov	sl, r3
 80082d0:	4693      	mov	fp, r2
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 fc9d 	bl	8000c18 <__aeabi_uldivmod>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4613      	mov	r3, r2
 80082e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082ec:	d308      	bcc.n	8008300 <UART_SetConfig+0x430>
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082f4:	d204      	bcs.n	8008300 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a3a      	ldr	r2, [r7, #32]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	e0ce      	b.n	800849e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008306:	e0ca      	b.n	800849e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008310:	d166      	bne.n	80083e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008312:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008316:	2b08      	cmp	r3, #8
 8008318:	d827      	bhi.n	800836a <UART_SetConfig+0x49a>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x450>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800836b 	.word	0x0800836b
 8008338:	0800836b 	.word	0x0800836b
 800833c:	0800836b 	.word	0x0800836b
 8008340:	08008363 	.word	0x08008363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fc ff46 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8008348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834a:	e014      	b.n	8008376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fc ff58 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008352:	e010      	b.n	8008376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008354:	4b4e      	ldr	r3, [pc, #312]	@ (8008490 <UART_SetConfig+0x5c0>)
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008358:	e00d      	b.n	8008376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835a:	f7fc fecd 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 800835e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008360:	e009      	b.n	8008376 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008368:	e005      	b.n	8008376 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8090 	beq.w	800849e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008382:	4a44      	ldr	r2, [pc, #272]	@ (8008494 <UART_SetConfig+0x5c4>)
 8008384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008388:	461a      	mov	r2, r3
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008390:	005a      	lsls	r2, r3, #1
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	441a      	add	r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d916      	bls.n	80083d8 <UART_SetConfig+0x508>
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b0:	d212      	bcs.n	80083d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f023 030f 	bic.w	r3, r3, #15
 80083ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	8bfb      	ldrh	r3, [r7, #30]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	8bfa      	ldrh	r2, [r7, #30]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e062      	b.n	800849e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083de:	e05e      	b.n	800849e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d828      	bhi.n	800843a <UART_SetConfig+0x56a>
 80083e8:	a201      	add	r2, pc, #4	@ (adr r2, 80083f0 <UART_SetConfig+0x520>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008415 	.word	0x08008415
 80083f4:	0800841d 	.word	0x0800841d
 80083f8:	08008425 	.word	0x08008425
 80083fc:	0800843b 	.word	0x0800843b
 8008400:	0800842b 	.word	0x0800842b
 8008404:	0800843b 	.word	0x0800843b
 8008408:	0800843b 	.word	0x0800843b
 800840c:	0800843b 	.word	0x0800843b
 8008410:	08008433 	.word	0x08008433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008414:	f7fc fede 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8008418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800841a:	e014      	b.n	8008446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800841c:	f7fc fef0 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008422:	e010      	b.n	8008446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008424:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <UART_SetConfig+0x5c0>)
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008428:	e00d      	b.n	8008446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800842a:	f7fc fe65 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 800842e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008430:	e009      	b.n	8008446 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008438:	e005      	b.n	8008446 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008444:	bf00      	nop
    }

    if (pclk != 0U)
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d028      	beq.n	800849e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	4a10      	ldr	r2, [pc, #64]	@ (8008494 <UART_SetConfig+0x5c4>)
 8008452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008456:	461a      	mov	r2, r3
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	fbb3 f2f2 	udiv	r2, r3, r2
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	441a      	add	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	fbb2 f3f3 	udiv	r3, r2, r3
 800846e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	2b0f      	cmp	r3, #15
 8008474:	d910      	bls.n	8008498 <UART_SetConfig+0x5c8>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800847c:	d20c      	bcs.n	8008498 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	b29a      	uxth	r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	e009      	b.n	800849e <UART_SetConfig+0x5ce>
 800848a:	bf00      	nop
 800848c:	40008000 	.word	0x40008000
 8008490:	00f42400 	.word	0x00f42400
 8008494:	0800c8cc 	.word	0x0800c8cc
      }
      else
      {
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2200      	movs	r2, #0
 80084b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2200      	movs	r2, #0
 80084b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3730      	adds	r7, #48	@ 0x30
 80084c2:	46bd      	mov	sp, r7
 80084c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00a      	beq.n	8008536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01a      	beq.n	80085de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085c6:	d10a      	bne.n	80085de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	605a      	str	r2, [r3, #4]
  }
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b098      	sub	sp, #96	@ 0x60
 8008610:	af02      	add	r7, sp, #8
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800861c:	f7f9 ff08 	bl	8002430 <HAL_GetTick>
 8008620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b08      	cmp	r3, #8
 800862e:	d12f      	bne.n	8008690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008638:	2200      	movs	r2, #0
 800863a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f88e 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d022      	beq.n	8008690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800865e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008668:	647b      	str	r3, [r7, #68]	@ 0x44
 800866a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800866e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e6      	bne.n	800864a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e063      	b.n	8008758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b04      	cmp	r3, #4
 800869c:	d149      	bne.n	8008732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800869e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a6:	2200      	movs	r2, #0
 80086a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f857 	bl	8008760 <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d03c      	beq.n	8008732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	623b      	str	r3, [r7, #32]
   return(result);
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800870a:	61fa      	str	r2, [r7, #28]
 800870c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	69b9      	ldr	r1, [r7, #24]
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	617b      	str	r3, [r7, #20]
   return(result);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e012      	b.n	8008758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3758      	adds	r7, #88	@ 0x58
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	4613      	mov	r3, r2
 800876e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008770:	e04f      	b.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d04b      	beq.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800877a:	f7f9 fe59 	bl	8002430 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	429a      	cmp	r2, r3
 8008788:	d302      	bcc.n	8008790 <UART_WaitOnFlagUntilTimeout+0x30>
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e04e      	b.n	8008832 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d037      	beq.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b80      	cmp	r3, #128	@ 0x80
 80087a6:	d034      	beq.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b40      	cmp	r3, #64	@ 0x40
 80087ac:	d031      	beq.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d110      	bne.n	80087de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2208      	movs	r2, #8
 80087c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f95b 	bl	8008a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2208      	movs	r2, #8
 80087ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e029      	b.n	8008832 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ec:	d111      	bne.n	8008812 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f941 	bl	8008a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e00f      	b.n	8008832 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4013      	ands	r3, r2
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	429a      	cmp	r2, r3
 8008820:	bf0c      	ite	eq
 8008822:	2301      	moveq	r3, #1
 8008824:	2300      	movne	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	429a      	cmp	r2, r3
 800882e:	d0a0      	beq.n	8008772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800883c:	b480      	push	{r7}
 800883e:	b0a3      	sub	sp, #140	@ 0x8c
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	88fa      	ldrh	r2, [r7, #6]
 800885c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886e:	d10e      	bne.n	800888e <UART_Start_Receive_IT+0x52>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <UART_Start_Receive_IT+0x48>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800887e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008882:	e02d      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	22ff      	movs	r2, #255	@ 0xff
 8008888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800888c:	e028      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10d      	bne.n	80088b2 <UART_Start_Receive_IT+0x76>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <UART_Start_Receive_IT+0x6c>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	22ff      	movs	r2, #255	@ 0xff
 80088a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a6:	e01b      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	227f      	movs	r2, #127	@ 0x7f
 80088ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088b0:	e016      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ba:	d10d      	bne.n	80088d8 <UART_Start_Receive_IT+0x9c>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <UART_Start_Receive_IT+0x92>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	227f      	movs	r2, #127	@ 0x7f
 80088c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088cc:	e008      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	223f      	movs	r2, #63	@ 0x3f
 80088d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088d6:	e003      	b.n	80088e0 <UART_Start_Receive_IT+0xa4>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2222      	movs	r2, #34	@ 0x22
 80088ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008900:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008914:	673a      	str	r2, [r7, #112]	@ 0x70
 8008916:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800891a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e3      	bne.n	80088f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800892c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008930:	d14f      	bne.n	80089d2 <UART_Start_Receive_IT+0x196>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008938:	88fa      	ldrh	r2, [r7, #6]
 800893a:	429a      	cmp	r2, r3
 800893c:	d349      	bcc.n	80089d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008946:	d107      	bne.n	8008958 <UART_Start_Receive_IT+0x11c>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d103      	bne.n	8008958 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a47      	ldr	r2, [pc, #284]	@ (8008a70 <UART_Start_Receive_IT+0x234>)
 8008954:	675a      	str	r2, [r3, #116]	@ 0x74
 8008956:	e002      	b.n	800895e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4a46      	ldr	r2, [pc, #280]	@ (8008a74 <UART_Start_Receive_IT+0x238>)
 800895c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01a      	beq.n	800899c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800897a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800898a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800898e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3308      	adds	r3, #8
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e5      	bne.n	800899c <UART_Start_Receive_IT+0x160>
 80089d0:	e046      	b.n	8008a60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089da:	d107      	bne.n	80089ec <UART_Start_Receive_IT+0x1b0>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d103      	bne.n	80089ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a24      	ldr	r2, [pc, #144]	@ (8008a78 <UART_Start_Receive_IT+0x23c>)
 80089e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ea:	e002      	b.n	80089f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4a23      	ldr	r2, [pc, #140]	@ (8008a7c <UART_Start_Receive_IT+0x240>)
 80089f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d019      	beq.n	8008a2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_Start_Receive_IT+0x1be>
 8008a2c:	e018      	b.n	8008a60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f043 0320 	orr.w	r3, r3, #32
 8008a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e6      	bne.n	8008a2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	378c      	adds	r7, #140	@ 0x8c
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	080092a5 	.word	0x080092a5
 8008a74:	08008f41 	.word	0x08008f41
 8008a78:	08008d89 	.word	0x08008d89
 8008a7c:	08008bd1 	.word	0x08008bd1

08008a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b095      	sub	sp, #84	@ 0x54
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e3      	bne.n	8008aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d118      	bne.n	8008b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0310 	bic.w	r3, r3, #16
 8008b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	613b      	str	r3, [r7, #16]
   return(result);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e6      	bne.n	8008afa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b40:	bf00      	nop
 8008b42:	3754      	adds	r7, #84	@ 0x54
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff f99a 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6979      	ldr	r1, [r7, #20]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e6      	bne.n	8008b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f965 	bl	8007e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc6:	bf00      	nop
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b09c      	sub	sp, #112	@ 0x70
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008be8:	2b22      	cmp	r3, #34	@ 0x22
 8008bea:	f040 80be 	bne.w	8008d6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bfc:	b2d9      	uxtb	r1, r3
 8008bfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c08:	400a      	ands	r2, r1
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 80a1 	bne.w	8008d7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5e:	e841 2300 	strex	r3, r2, [r1]
 8008c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1e6      	bne.n	8008c38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e5      	bne.n	8008c6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a33      	ldr	r2, [pc, #204]	@ (8008d84 <UART_RxISR_8BIT+0x1b4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d01f      	beq.n	8008cfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d018      	beq.n	8008cfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e6      	bne.n	8008cca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d12e      	bne.n	8008d62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0310 	bic.w	r3, r3, #16
 8008d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d28:	61fb      	str	r3, [r7, #28]
 8008d2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	69b9      	ldr	r1, [r7, #24]
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	617b      	str	r3, [r7, #20]
   return(result);
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f003 0310 	and.w	r3, r3, #16
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d103      	bne.n	8008d52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2210      	movs	r2, #16
 8008d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff f8ac 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d60:	e00b      	b.n	8008d7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f8 fc66 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8008d68:	e007      	b.n	8008d7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699a      	ldr	r2, [r3, #24]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0208 	orr.w	r2, r2, #8
 8008d78:	619a      	str	r2, [r3, #24]
}
 8008d7a:	bf00      	nop
 8008d7c:	3770      	adds	r7, #112	@ 0x70
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40008000 	.word	0x40008000

08008d88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b09c      	sub	sp, #112	@ 0x70
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008da0:	2b22      	cmp	r3, #34	@ 0x22
 8008da2:	f040 80be 	bne.w	8008f22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008db6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	1c9a      	adds	r2, r3, #2
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 80a1 	bne.w	8008f32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e04:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e6      	bne.n	8008df0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e42:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a33      	ldr	r2, [pc, #204]	@ (8008f3c <UART_RxISR_16BIT+0x1b4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d01f      	beq.n	8008eb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d018      	beq.n	8008eb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e6      	bne.n	8008e82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d12e      	bne.n	8008f1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f023 0310 	bic.w	r3, r3, #16
 8008ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	613b      	str	r3, [r7, #16]
   return(result);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e6      	bne.n	8008ec2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d103      	bne.n	8008f0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe ffd0 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f18:	e00b      	b.n	8008f32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7f8 fb8a 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8008f20:	e007      	b.n	8008f32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0208 	orr.w	r2, r2, #8
 8008f30:	619a      	str	r2, [r3, #24]
}
 8008f32:	bf00      	nop
 8008f34:	3770      	adds	r7, #112	@ 0x70
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	40008000 	.word	0x40008000

08008f40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b0ac      	sub	sp, #176	@ 0xb0
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f76:	2b22      	cmp	r3, #34	@ 0x22
 8008f78:	f040 8183 	bne.w	8009282 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f86:	e126      	b.n	80091d6 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008f96:	b2d9      	uxtb	r1, r3
 8008f98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa2:	400a      	ands	r2, r1
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d053      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d011      	beq.n	800900a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009000:	f043 0201 	orr.w	r2, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800900a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d011      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2202      	movs	r2, #2
 8009028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009030:	f043 0204 	orr.w	r2, r3, #4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800903a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d011      	beq.n	800906a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009060:	f043 0202 	orr.w	r2, r3, #2
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009070:	2b00      	cmp	r3, #0
 8009072:	d006      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7fe ff15 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009088:	b29b      	uxth	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	f040 80a3 	bne.w	80091d6 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800909e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80090c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e4      	bne.n	8009090 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80090d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090ee:	66ba      	str	r2, [r7, #104]	@ 0x68
 80090f0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80090f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80090fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e1      	bne.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a60      	ldr	r2, [pc, #384]	@ (800929c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d021      	beq.n	8009164 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01a      	beq.n	8009164 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800913c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800913e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009150:	657b      	str	r3, [r7, #84]	@ 0x54
 8009152:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009156:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800915e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e4      	bne.n	800912e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d130      	bne.n	80091ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f023 0310 	bic.w	r3, r3, #16
 8009186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009194:	643b      	str	r3, [r7, #64]	@ 0x40
 8009196:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800919a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e4      	bne.n	8009172 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d103      	bne.n	80091be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2210      	movs	r2, #16
 80091bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7fe fe76 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80091cc:	e00e      	b.n	80091ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f8 fa30 	bl	8001634 <HAL_UART_RxCpltCallback>
        break;
 80091d4:	e00a      	b.n	80091ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80091de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f47f aece 	bne.w	8008f88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d049      	beq.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x352>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009204:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009208:	429a      	cmp	r2, r3
 800920a:	d242      	bcs.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	61fb      	str	r3, [r7, #28]
   return(result);
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009230:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009232:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e3      	bne.n	800920c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009248:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60bb      	str	r3, [r7, #8]
   return(result);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	613b      	str	r3, [r7, #16]
   return(result);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e4      	bne.n	800924a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009280:	e007      	b.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0208 	orr.w	r2, r2, #8
 8009290:	619a      	str	r2, [r3, #24]
}
 8009292:	bf00      	nop
 8009294:	37b0      	adds	r7, #176	@ 0xb0
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40008000 	.word	0x40008000
 80092a0:	08008bd1 	.word	0x08008bd1

080092a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b0ae      	sub	sp, #184	@ 0xb8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092da:	2b22      	cmp	r3, #34	@ 0x22
 80092dc:	f040 8187 	bne.w	80095ee <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ea:	e12a      	b.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80092fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009302:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009306:	4013      	ands	r3, r2
 8009308:	b29a      	uxth	r2, r3
 800930a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800930e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009314:	1c9a      	adds	r2, r3, #2
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	2b00      	cmp	r3, #0
 8009340:	d053      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d011      	beq.n	8009372 <UART_RxISR_16BIT_FIFOEN+0xce>
 800934e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00b      	beq.n	8009372 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2201      	movs	r2, #1
 8009360:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009368:	f043 0201 	orr.w	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d011      	beq.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800937e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00b      	beq.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2202      	movs	r2, #2
 8009390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009398:	f043 0204 	orr.w	r2, r3, #4
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d011      	beq.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2204      	movs	r2, #4
 80093c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c8:	f043 0202 	orr.w	r2, r3, #2
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fe fd61 	bl	8007ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 80a5 	bne.w	8009542 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800940c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800941a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800941e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800942c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e2      	bne.n	80093f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3308      	adds	r3, #8
 8009438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800945a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800945c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009460:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e1      	bne.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a60      	ldr	r2, [pc, #384]	@ (8009608 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d021      	beq.n	80094d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01a      	beq.n	80094d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80094bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e4      	bne.n	800949a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d130      	bne.n	800953a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ee:	f023 0310 	bic.w	r3, r3, #16
 80094f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009500:	647b      	str	r3, [r7, #68]	@ 0x44
 8009502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800950e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e4      	bne.n	80094de <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b10      	cmp	r3, #16
 8009520:	d103      	bne.n	800952a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2210      	movs	r2, #16
 8009528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7fe fcc0 	bl	8007eb8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009538:	e00e      	b.n	8009558 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7f8 f87a 	bl	8001634 <HAL_UART_RxCpltCallback>
        break;
 8009540:	e00a      	b.n	8009558 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009542:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800954a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	f47f aeca 	bne.w	80092ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800955e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009562:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009566:	2b00      	cmp	r3, #0
 8009568:	d049      	beq.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x35a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009570:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009574:	429a      	cmp	r2, r3
 8009576:	d242      	bcs.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	623b      	str	r3, [r7, #32]
   return(result);
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800958e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800959c:	633a      	str	r2, [r7, #48]	@ 0x30
 800959e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e3      	bne.n	8009578 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a16      	ldr	r2, [pc, #88]	@ (800960c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80095b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f043 0320 	orr.w	r3, r3, #32
 80095ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	69b9      	ldr	r1, [r7, #24]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	617b      	str	r3, [r7, #20]
   return(result);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e4      	bne.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ec:	e007      	b.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0208 	orr.w	r2, r2, #8
 80095fc:	619a      	str	r2, [r3, #24]
}
 80095fe:	bf00      	nop
 8009600:	37b8      	adds	r7, #184	@ 0xb8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	40008000 	.word	0x40008000
 800960c:	08008d89 	.word	0x08008d89

08009610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_UARTEx_DisableFifoMode+0x16>
 800965e:	2302      	movs	r3, #2
 8009660:	e027      	b.n	80096b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2224      	movs	r2, #36	@ 0x24
 800966e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0201 	bic.w	r2, r2, #1
 8009688:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009690:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e02d      	b.n	8009732 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2224      	movs	r2, #36	@ 0x24
 80096e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f850 	bl	80097b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2220      	movs	r2, #32
 8009724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800974e:	2302      	movs	r3, #2
 8009750:	e02d      	b.n	80097ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	@ 0x24
 800975e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f812 	bl	80097b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d108      	bne.n	80097da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097d8:	e031      	b.n	800983e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097da:	2308      	movs	r3, #8
 80097dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097de:	2308      	movs	r3, #8
 80097e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	0e5b      	lsrs	r3, r3, #25
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	0f5b      	lsrs	r3, r3, #29
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	7b3a      	ldrb	r2, [r7, #12]
 8009806:	4911      	ldr	r1, [pc, #68]	@ (800984c <UARTEx_SetNbDataToProcess+0x94>)
 8009808:	5c8a      	ldrb	r2, [r1, r2]
 800980a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800980e:	7b3a      	ldrb	r2, [r7, #12]
 8009810:	490f      	ldr	r1, [pc, #60]	@ (8009850 <UARTEx_SetNbDataToProcess+0x98>)
 8009812:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009814:	fb93 f3f2 	sdiv	r3, r3, r2
 8009818:	b29a      	uxth	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	7b7a      	ldrb	r2, [r7, #13]
 8009824:	4909      	ldr	r1, [pc, #36]	@ (800984c <UARTEx_SetNbDataToProcess+0x94>)
 8009826:	5c8a      	ldrb	r2, [r1, r2]
 8009828:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800982c:	7b7a      	ldrb	r2, [r7, #13]
 800982e:	4908      	ldr	r1, [pc, #32]	@ (8009850 <UARTEx_SetNbDataToProcess+0x98>)
 8009830:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009832:	fb93 f3f2 	sdiv	r3, r3, r2
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	0800c8e4 	.word	0x0800c8e4
 8009850:	0800c8ec 	.word	0x0800c8ec

08009854 <atoi>:
 8009854:	220a      	movs	r2, #10
 8009856:	2100      	movs	r1, #0
 8009858:	f000 b87a 	b.w	8009950 <strtol>

0800985c <_strtol_l.constprop.0>:
 800985c:	2b24      	cmp	r3, #36	@ 0x24
 800985e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009862:	4686      	mov	lr, r0
 8009864:	4690      	mov	r8, r2
 8009866:	d801      	bhi.n	800986c <_strtol_l.constprop.0+0x10>
 8009868:	2b01      	cmp	r3, #1
 800986a:	d106      	bne.n	800987a <_strtol_l.constprop.0+0x1e>
 800986c:	f000 ff62 	bl	800a734 <__errno>
 8009870:	2316      	movs	r3, #22
 8009872:	6003      	str	r3, [r0, #0]
 8009874:	2000      	movs	r0, #0
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	4834      	ldr	r0, [pc, #208]	@ (800994c <_strtol_l.constprop.0+0xf0>)
 800987c:	460d      	mov	r5, r1
 800987e:	462a      	mov	r2, r5
 8009880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009884:	5d06      	ldrb	r6, [r0, r4]
 8009886:	f016 0608 	ands.w	r6, r6, #8
 800988a:	d1f8      	bne.n	800987e <_strtol_l.constprop.0+0x22>
 800988c:	2c2d      	cmp	r4, #45	@ 0x2d
 800988e:	d12d      	bne.n	80098ec <_strtol_l.constprop.0+0x90>
 8009890:	782c      	ldrb	r4, [r5, #0]
 8009892:	2601      	movs	r6, #1
 8009894:	1c95      	adds	r5, r2, #2
 8009896:	f033 0210 	bics.w	r2, r3, #16
 800989a:	d109      	bne.n	80098b0 <_strtol_l.constprop.0+0x54>
 800989c:	2c30      	cmp	r4, #48	@ 0x30
 800989e:	d12a      	bne.n	80098f6 <_strtol_l.constprop.0+0x9a>
 80098a0:	782a      	ldrb	r2, [r5, #0]
 80098a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80098a6:	2a58      	cmp	r2, #88	@ 0x58
 80098a8:	d125      	bne.n	80098f6 <_strtol_l.constprop.0+0x9a>
 80098aa:	786c      	ldrb	r4, [r5, #1]
 80098ac:	2310      	movs	r3, #16
 80098ae:	3502      	adds	r5, #2
 80098b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80098b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098b8:	2200      	movs	r2, #0
 80098ba:	fbbc f9f3 	udiv	r9, ip, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80098c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80098c8:	2f09      	cmp	r7, #9
 80098ca:	d81b      	bhi.n	8009904 <_strtol_l.constprop.0+0xa8>
 80098cc:	463c      	mov	r4, r7
 80098ce:	42a3      	cmp	r3, r4
 80098d0:	dd27      	ble.n	8009922 <_strtol_l.constprop.0+0xc6>
 80098d2:	1c57      	adds	r7, r2, #1
 80098d4:	d007      	beq.n	80098e6 <_strtol_l.constprop.0+0x8a>
 80098d6:	4581      	cmp	r9, r0
 80098d8:	d320      	bcc.n	800991c <_strtol_l.constprop.0+0xc0>
 80098da:	d101      	bne.n	80098e0 <_strtol_l.constprop.0+0x84>
 80098dc:	45a2      	cmp	sl, r4
 80098de:	db1d      	blt.n	800991c <_strtol_l.constprop.0+0xc0>
 80098e0:	fb00 4003 	mla	r0, r0, r3, r4
 80098e4:	2201      	movs	r2, #1
 80098e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ea:	e7eb      	b.n	80098c4 <_strtol_l.constprop.0+0x68>
 80098ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80098ee:	bf04      	itt	eq
 80098f0:	782c      	ldrbeq	r4, [r5, #0]
 80098f2:	1c95      	addeq	r5, r2, #2
 80098f4:	e7cf      	b.n	8009896 <_strtol_l.constprop.0+0x3a>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1da      	bne.n	80098b0 <_strtol_l.constprop.0+0x54>
 80098fa:	2c30      	cmp	r4, #48	@ 0x30
 80098fc:	bf0c      	ite	eq
 80098fe:	2308      	moveq	r3, #8
 8009900:	230a      	movne	r3, #10
 8009902:	e7d5      	b.n	80098b0 <_strtol_l.constprop.0+0x54>
 8009904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009908:	2f19      	cmp	r7, #25
 800990a:	d801      	bhi.n	8009910 <_strtol_l.constprop.0+0xb4>
 800990c:	3c37      	subs	r4, #55	@ 0x37
 800990e:	e7de      	b.n	80098ce <_strtol_l.constprop.0+0x72>
 8009910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009914:	2f19      	cmp	r7, #25
 8009916:	d804      	bhi.n	8009922 <_strtol_l.constprop.0+0xc6>
 8009918:	3c57      	subs	r4, #87	@ 0x57
 800991a:	e7d8      	b.n	80098ce <_strtol_l.constprop.0+0x72>
 800991c:	f04f 32ff 	mov.w	r2, #4294967295
 8009920:	e7e1      	b.n	80098e6 <_strtol_l.constprop.0+0x8a>
 8009922:	1c53      	adds	r3, r2, #1
 8009924:	d108      	bne.n	8009938 <_strtol_l.constprop.0+0xdc>
 8009926:	2322      	movs	r3, #34	@ 0x22
 8009928:	f8ce 3000 	str.w	r3, [lr]
 800992c:	4660      	mov	r0, ip
 800992e:	f1b8 0f00 	cmp.w	r8, #0
 8009932:	d0a0      	beq.n	8009876 <_strtol_l.constprop.0+0x1a>
 8009934:	1e69      	subs	r1, r5, #1
 8009936:	e006      	b.n	8009946 <_strtol_l.constprop.0+0xea>
 8009938:	b106      	cbz	r6, 800993c <_strtol_l.constprop.0+0xe0>
 800993a:	4240      	negs	r0, r0
 800993c:	f1b8 0f00 	cmp.w	r8, #0
 8009940:	d099      	beq.n	8009876 <_strtol_l.constprop.0+0x1a>
 8009942:	2a00      	cmp	r2, #0
 8009944:	d1f6      	bne.n	8009934 <_strtol_l.constprop.0+0xd8>
 8009946:	f8c8 1000 	str.w	r1, [r8]
 800994a:	e794      	b.n	8009876 <_strtol_l.constprop.0+0x1a>
 800994c:	0800c8f5 	.word	0x0800c8f5

08009950 <strtol>:
 8009950:	4613      	mov	r3, r2
 8009952:	460a      	mov	r2, r1
 8009954:	4601      	mov	r1, r0
 8009956:	4802      	ldr	r0, [pc, #8]	@ (8009960 <strtol+0x10>)
 8009958:	6800      	ldr	r0, [r0, #0]
 800995a:	f7ff bf7f 	b.w	800985c <_strtol_l.constprop.0>
 800995e:	bf00      	nop
 8009960:	20000018 	.word	0x20000018

08009964 <__cvt>:
 8009964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	ec57 6b10 	vmov	r6, r7, d0
 800996c:	2f00      	cmp	r7, #0
 800996e:	460c      	mov	r4, r1
 8009970:	4619      	mov	r1, r3
 8009972:	463b      	mov	r3, r7
 8009974:	bfbb      	ittet	lt
 8009976:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800997a:	461f      	movlt	r7, r3
 800997c:	2300      	movge	r3, #0
 800997e:	232d      	movlt	r3, #45	@ 0x2d
 8009980:	700b      	strb	r3, [r1, #0]
 8009982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009984:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009988:	4691      	mov	r9, r2
 800998a:	f023 0820 	bic.w	r8, r3, #32
 800998e:	bfbc      	itt	lt
 8009990:	4632      	movlt	r2, r6
 8009992:	4616      	movlt	r6, r2
 8009994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009998:	d005      	beq.n	80099a6 <__cvt+0x42>
 800999a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800999e:	d100      	bne.n	80099a2 <__cvt+0x3e>
 80099a0:	3401      	adds	r4, #1
 80099a2:	2102      	movs	r1, #2
 80099a4:	e000      	b.n	80099a8 <__cvt+0x44>
 80099a6:	2103      	movs	r1, #3
 80099a8:	ab03      	add	r3, sp, #12
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	ab02      	add	r3, sp, #8
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	ec47 6b10 	vmov	d0, r6, r7
 80099b4:	4653      	mov	r3, sl
 80099b6:	4622      	mov	r2, r4
 80099b8:	f000 ff72 	bl	800a8a0 <_dtoa_r>
 80099bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099c0:	4605      	mov	r5, r0
 80099c2:	d119      	bne.n	80099f8 <__cvt+0x94>
 80099c4:	f019 0f01 	tst.w	r9, #1
 80099c8:	d00e      	beq.n	80099e8 <__cvt+0x84>
 80099ca:	eb00 0904 	add.w	r9, r0, r4
 80099ce:	2200      	movs	r2, #0
 80099d0:	2300      	movs	r3, #0
 80099d2:	4630      	mov	r0, r6
 80099d4:	4639      	mov	r1, r7
 80099d6:	f7f7 f8af 	bl	8000b38 <__aeabi_dcmpeq>
 80099da:	b108      	cbz	r0, 80099e0 <__cvt+0x7c>
 80099dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80099e0:	2230      	movs	r2, #48	@ 0x30
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	454b      	cmp	r3, r9
 80099e6:	d31e      	bcc.n	8009a26 <__cvt+0xc2>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ec:	1b5b      	subs	r3, r3, r5
 80099ee:	4628      	mov	r0, r5
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	b004      	add	sp, #16
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099fc:	eb00 0904 	add.w	r9, r0, r4
 8009a00:	d1e5      	bne.n	80099ce <__cvt+0x6a>
 8009a02:	7803      	ldrb	r3, [r0, #0]
 8009a04:	2b30      	cmp	r3, #48	@ 0x30
 8009a06:	d10a      	bne.n	8009a1e <__cvt+0xba>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4639      	mov	r1, r7
 8009a10:	f7f7 f892 	bl	8000b38 <__aeabi_dcmpeq>
 8009a14:	b918      	cbnz	r0, 8009a1e <__cvt+0xba>
 8009a16:	f1c4 0401 	rsb	r4, r4, #1
 8009a1a:	f8ca 4000 	str.w	r4, [sl]
 8009a1e:	f8da 3000 	ldr.w	r3, [sl]
 8009a22:	4499      	add	r9, r3
 8009a24:	e7d3      	b.n	80099ce <__cvt+0x6a>
 8009a26:	1c59      	adds	r1, r3, #1
 8009a28:	9103      	str	r1, [sp, #12]
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	e7d9      	b.n	80099e2 <__cvt+0x7e>

08009a2e <__exponent>:
 8009a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a30:	2900      	cmp	r1, #0
 8009a32:	bfba      	itte	lt
 8009a34:	4249      	neglt	r1, r1
 8009a36:	232d      	movlt	r3, #45	@ 0x2d
 8009a38:	232b      	movge	r3, #43	@ 0x2b
 8009a3a:	2909      	cmp	r1, #9
 8009a3c:	7002      	strb	r2, [r0, #0]
 8009a3e:	7043      	strb	r3, [r0, #1]
 8009a40:	dd29      	ble.n	8009a96 <__exponent+0x68>
 8009a42:	f10d 0307 	add.w	r3, sp, #7
 8009a46:	461d      	mov	r5, r3
 8009a48:	270a      	movs	r7, #10
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a50:	fb07 1416 	mls	r4, r7, r6, r1
 8009a54:	3430      	adds	r4, #48	@ 0x30
 8009a56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	2c63      	cmp	r4, #99	@ 0x63
 8009a5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a62:	4631      	mov	r1, r6
 8009a64:	dcf1      	bgt.n	8009a4a <__exponent+0x1c>
 8009a66:	3130      	adds	r1, #48	@ 0x30
 8009a68:	1e94      	subs	r4, r2, #2
 8009a6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a6e:	1c41      	adds	r1, r0, #1
 8009a70:	4623      	mov	r3, r4
 8009a72:	42ab      	cmp	r3, r5
 8009a74:	d30a      	bcc.n	8009a8c <__exponent+0x5e>
 8009a76:	f10d 0309 	add.w	r3, sp, #9
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	42ac      	cmp	r4, r5
 8009a7e:	bf88      	it	hi
 8009a80:	2300      	movhi	r3, #0
 8009a82:	3302      	adds	r3, #2
 8009a84:	4403      	add	r3, r0
 8009a86:	1a18      	subs	r0, r3, r0
 8009a88:	b003      	add	sp, #12
 8009a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a94:	e7ed      	b.n	8009a72 <__exponent+0x44>
 8009a96:	2330      	movs	r3, #48	@ 0x30
 8009a98:	3130      	adds	r1, #48	@ 0x30
 8009a9a:	7083      	strb	r3, [r0, #2]
 8009a9c:	70c1      	strb	r1, [r0, #3]
 8009a9e:	1d03      	adds	r3, r0, #4
 8009aa0:	e7f1      	b.n	8009a86 <__exponent+0x58>
	...

08009aa4 <_printf_float>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	b08d      	sub	sp, #52	@ 0x34
 8009aaa:	460c      	mov	r4, r1
 8009aac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	f000 fdf3 	bl	800a6a0 <_localeconv_r>
 8009aba:	6803      	ldr	r3, [r0, #0]
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f6 fc0e 	bl	80002e0 <strlen>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8009acc:	9005      	str	r0, [sp, #20]
 8009ace:	3307      	adds	r3, #7
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	f103 0208 	add.w	r2, r3, #8
 8009ad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009adc:	f8d4 b000 	ldr.w	fp, [r4]
 8009ae0:	f8c8 2000 	str.w	r2, [r8]
 8009ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	f8cd 8018 	str.w	r8, [sp, #24]
 8009af2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009afa:	4b9c      	ldr	r3, [pc, #624]	@ (8009d6c <_printf_float+0x2c8>)
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	f7f7 f84c 	bl	8000b9c <__aeabi_dcmpun>
 8009b04:	bb70      	cbnz	r0, 8009b64 <_printf_float+0xc0>
 8009b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b0a:	4b98      	ldr	r3, [pc, #608]	@ (8009d6c <_printf_float+0x2c8>)
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	f7f7 f826 	bl	8000b60 <__aeabi_dcmple>
 8009b14:	bb30      	cbnz	r0, 8009b64 <_printf_float+0xc0>
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f7 f815 	bl	8000b4c <__aeabi_dcmplt>
 8009b22:	b110      	cbz	r0, 8009b2a <_printf_float+0x86>
 8009b24:	232d      	movs	r3, #45	@ 0x2d
 8009b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b2a:	4a91      	ldr	r2, [pc, #580]	@ (8009d70 <_printf_float+0x2cc>)
 8009b2c:	4b91      	ldr	r3, [pc, #580]	@ (8009d74 <_printf_float+0x2d0>)
 8009b2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b32:	bf94      	ite	ls
 8009b34:	4690      	movls	r8, r2
 8009b36:	4698      	movhi	r8, r3
 8009b38:	2303      	movs	r3, #3
 8009b3a:	6123      	str	r3, [r4, #16]
 8009b3c:	f02b 0304 	bic.w	r3, fp, #4
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	f04f 0900 	mov.w	r9, #0
 8009b46:	9700      	str	r7, [sp, #0]
 8009b48:	4633      	mov	r3, r6
 8009b4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	4628      	mov	r0, r5
 8009b50:	f000 f9d2 	bl	8009ef8 <_printf_common>
 8009b54:	3001      	adds	r0, #1
 8009b56:	f040 808d 	bne.w	8009c74 <_printf_float+0x1d0>
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5e:	b00d      	add	sp, #52	@ 0x34
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	4642      	mov	r2, r8
 8009b66:	464b      	mov	r3, r9
 8009b68:	4640      	mov	r0, r8
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	f7f7 f816 	bl	8000b9c <__aeabi_dcmpun>
 8009b70:	b140      	cbz	r0, 8009b84 <_printf_float+0xe0>
 8009b72:	464b      	mov	r3, r9
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbc      	itt	lt
 8009b78:	232d      	movlt	r3, #45	@ 0x2d
 8009b7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8009d78 <_printf_float+0x2d4>)
 8009b80:	4b7e      	ldr	r3, [pc, #504]	@ (8009d7c <_printf_float+0x2d8>)
 8009b82:	e7d4      	b.n	8009b2e <_printf_float+0x8a>
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b8a:	9206      	str	r2, [sp, #24]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	d13b      	bne.n	8009c08 <_printf_float+0x164>
 8009b90:	2306      	movs	r3, #6
 8009b92:	6063      	str	r3, [r4, #4]
 8009b94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6022      	str	r2, [r4, #0]
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ba0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ba4:	ab09      	add	r3, sp, #36	@ 0x24
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	6861      	ldr	r1, [r4, #4]
 8009baa:	ec49 8b10 	vmov	d0, r8, r9
 8009bae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f7ff fed6 	bl	8009964 <__cvt>
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bbc:	2b47      	cmp	r3, #71	@ 0x47
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	d129      	bne.n	8009c16 <_printf_float+0x172>
 8009bc2:	1cc8      	adds	r0, r1, #3
 8009bc4:	db02      	blt.n	8009bcc <_printf_float+0x128>
 8009bc6:	6863      	ldr	r3, [r4, #4]
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	dd41      	ble.n	8009c50 <_printf_float+0x1ac>
 8009bcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bd0:	fa5f fa8a 	uxtb.w	sl, sl
 8009bd4:	3901      	subs	r1, #1
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009bdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8009bde:	f7ff ff26 	bl	8009a2e <__exponent>
 8009be2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009be4:	1813      	adds	r3, r2, r0
 8009be6:	2a01      	cmp	r2, #1
 8009be8:	4681      	mov	r9, r0
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	dc02      	bgt.n	8009bf4 <_printf_float+0x150>
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	07d2      	lsls	r2, r2, #31
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_float+0x154>
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0a2      	beq.n	8009b46 <_printf_float+0xa2>
 8009c00:	232d      	movs	r3, #45	@ 0x2d
 8009c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c06:	e79e      	b.n	8009b46 <_printf_float+0xa2>
 8009c08:	9a06      	ldr	r2, [sp, #24]
 8009c0a:	2a47      	cmp	r2, #71	@ 0x47
 8009c0c:	d1c2      	bne.n	8009b94 <_printf_float+0xf0>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1c0      	bne.n	8009b94 <_printf_float+0xf0>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7bd      	b.n	8009b92 <_printf_float+0xee>
 8009c16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c1a:	d9db      	bls.n	8009bd4 <_printf_float+0x130>
 8009c1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c20:	d118      	bne.n	8009c54 <_printf_float+0x1b0>
 8009c22:	2900      	cmp	r1, #0
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	dd0b      	ble.n	8009c40 <_printf_float+0x19c>
 8009c28:	6121      	str	r1, [r4, #16]
 8009c2a:	b913      	cbnz	r3, 8009c32 <_printf_float+0x18e>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	07d0      	lsls	r0, r2, #31
 8009c30:	d502      	bpl.n	8009c38 <_printf_float+0x194>
 8009c32:	3301      	adds	r3, #1
 8009c34:	440b      	add	r3, r1
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	e7db      	b.n	8009bf8 <_printf_float+0x154>
 8009c40:	b913      	cbnz	r3, 8009c48 <_printf_float+0x1a4>
 8009c42:	6822      	ldr	r2, [r4, #0]
 8009c44:	07d2      	lsls	r2, r2, #31
 8009c46:	d501      	bpl.n	8009c4c <_printf_float+0x1a8>
 8009c48:	3302      	adds	r3, #2
 8009c4a:	e7f4      	b.n	8009c36 <_printf_float+0x192>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7f2      	b.n	8009c36 <_printf_float+0x192>
 8009c50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	4299      	cmp	r1, r3
 8009c58:	db05      	blt.n	8009c66 <_printf_float+0x1c2>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	6121      	str	r1, [r4, #16]
 8009c5e:	07d8      	lsls	r0, r3, #31
 8009c60:	d5ea      	bpl.n	8009c38 <_printf_float+0x194>
 8009c62:	1c4b      	adds	r3, r1, #1
 8009c64:	e7e7      	b.n	8009c36 <_printf_float+0x192>
 8009c66:	2900      	cmp	r1, #0
 8009c68:	bfd4      	ite	le
 8009c6a:	f1c1 0202 	rsble	r2, r1, #2
 8009c6e:	2201      	movgt	r2, #1
 8009c70:	4413      	add	r3, r2
 8009c72:	e7e0      	b.n	8009c36 <_printf_float+0x192>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	055a      	lsls	r2, r3, #21
 8009c78:	d407      	bmi.n	8009c8a <_printf_float+0x1e6>
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	d12b      	bne.n	8009ce0 <_printf_float+0x23c>
 8009c88:	e767      	b.n	8009b5a <_printf_float+0xb6>
 8009c8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c8e:	f240 80dd 	bls.w	8009e4c <_printf_float+0x3a8>
 8009c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c96:	2200      	movs	r2, #0
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f7f6 ff4d 	bl	8000b38 <__aeabi_dcmpeq>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d033      	beq.n	8009d0a <_printf_float+0x266>
 8009ca2:	4a37      	ldr	r2, [pc, #220]	@ (8009d80 <_printf_float+0x2dc>)
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f af54 	beq.w	8009b5a <_printf_float+0xb6>
 8009cb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cb6:	4543      	cmp	r3, r8
 8009cb8:	db02      	blt.n	8009cc0 <_printf_float+0x21c>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	07d8      	lsls	r0, r3, #31
 8009cbe:	d50f      	bpl.n	8009ce0 <_printf_float+0x23c>
 8009cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f af45 	beq.w	8009b5a <_printf_float+0xb6>
 8009cd0:	f04f 0900 	mov.w	r9, #0
 8009cd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cd8:	f104 0a1a 	add.w	sl, r4, #26
 8009cdc:	45c8      	cmp	r8, r9
 8009cde:	dc09      	bgt.n	8009cf4 <_printf_float+0x250>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	079b      	lsls	r3, r3, #30
 8009ce4:	f100 8103 	bmi.w	8009eee <_printf_float+0x44a>
 8009ce8:	68e0      	ldr	r0, [r4, #12]
 8009cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cec:	4298      	cmp	r0, r3
 8009cee:	bfb8      	it	lt
 8009cf0:	4618      	movlt	r0, r3
 8009cf2:	e734      	b.n	8009b5e <_printf_float+0xba>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f43f af2b 	beq.w	8009b5a <_printf_float+0xb6>
 8009d04:	f109 0901 	add.w	r9, r9, #1
 8009d08:	e7e8      	b.n	8009cdc <_printf_float+0x238>
 8009d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dc39      	bgt.n	8009d84 <_printf_float+0x2e0>
 8009d10:	4a1b      	ldr	r2, [pc, #108]	@ (8009d80 <_printf_float+0x2dc>)
 8009d12:	2301      	movs	r3, #1
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f af1d 	beq.w	8009b5a <_printf_float+0xb6>
 8009d20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d24:	ea59 0303 	orrs.w	r3, r9, r3
 8009d28:	d102      	bne.n	8009d30 <_printf_float+0x28c>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d5d7      	bpl.n	8009ce0 <_printf_float+0x23c>
 8009d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f43f af0d 	beq.w	8009b5a <_printf_float+0xb6>
 8009d40:	f04f 0a00 	mov.w	sl, #0
 8009d44:	f104 0b1a 	add.w	fp, r4, #26
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	425b      	negs	r3, r3
 8009d4c:	4553      	cmp	r3, sl
 8009d4e:	dc01      	bgt.n	8009d54 <_printf_float+0x2b0>
 8009d50:	464b      	mov	r3, r9
 8009d52:	e793      	b.n	8009c7c <_printf_float+0x1d8>
 8009d54:	2301      	movs	r3, #1
 8009d56:	465a      	mov	r2, fp
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f43f aefb 	beq.w	8009b5a <_printf_float+0xb6>
 8009d64:	f10a 0a01 	add.w	sl, sl, #1
 8009d68:	e7ee      	b.n	8009d48 <_printf_float+0x2a4>
 8009d6a:	bf00      	nop
 8009d6c:	7fefffff 	.word	0x7fefffff
 8009d70:	0800c9f5 	.word	0x0800c9f5
 8009d74:	0800c9f9 	.word	0x0800c9f9
 8009d78:	0800c9fd 	.word	0x0800c9fd
 8009d7c:	0800ca01 	.word	0x0800ca01
 8009d80:	0800ca05 	.word	0x0800ca05
 8009d84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d8a:	4553      	cmp	r3, sl
 8009d8c:	bfa8      	it	ge
 8009d8e:	4653      	movge	r3, sl
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	4699      	mov	r9, r3
 8009d94:	dc36      	bgt.n	8009e04 <_printf_float+0x360>
 8009d96:	f04f 0b00 	mov.w	fp, #0
 8009d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d9e:	f104 021a 	add.w	r2, r4, #26
 8009da2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009da4:	9306      	str	r3, [sp, #24]
 8009da6:	eba3 0309 	sub.w	r3, r3, r9
 8009daa:	455b      	cmp	r3, fp
 8009dac:	dc31      	bgt.n	8009e12 <_printf_float+0x36e>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	459a      	cmp	sl, r3
 8009db2:	dc3a      	bgt.n	8009e2a <_printf_float+0x386>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	07da      	lsls	r2, r3, #31
 8009db8:	d437      	bmi.n	8009e2a <_printf_float+0x386>
 8009dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbc:	ebaa 0903 	sub.w	r9, sl, r3
 8009dc0:	9b06      	ldr	r3, [sp, #24]
 8009dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8009dc6:	4599      	cmp	r9, r3
 8009dc8:	bfa8      	it	ge
 8009dca:	4699      	movge	r9, r3
 8009dcc:	f1b9 0f00 	cmp.w	r9, #0
 8009dd0:	dc33      	bgt.n	8009e3a <_printf_float+0x396>
 8009dd2:	f04f 0800 	mov.w	r8, #0
 8009dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dda:	f104 0b1a 	add.w	fp, r4, #26
 8009dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de0:	ebaa 0303 	sub.w	r3, sl, r3
 8009de4:	eba3 0309 	sub.w	r3, r3, r9
 8009de8:	4543      	cmp	r3, r8
 8009dea:	f77f af79 	ble.w	8009ce0 <_printf_float+0x23c>
 8009dee:	2301      	movs	r3, #1
 8009df0:	465a      	mov	r2, fp
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f aeae 	beq.w	8009b5a <_printf_float+0xb6>
 8009dfe:	f108 0801 	add.w	r8, r8, #1
 8009e02:	e7ec      	b.n	8009dde <_printf_float+0x33a>
 8009e04:	4642      	mov	r2, r8
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d1c2      	bne.n	8009d96 <_printf_float+0x2f2>
 8009e10:	e6a3      	b.n	8009b5a <_printf_float+0xb6>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	9206      	str	r2, [sp, #24]
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f43f ae9c 	beq.w	8009b5a <_printf_float+0xb6>
 8009e22:	9a06      	ldr	r2, [sp, #24]
 8009e24:	f10b 0b01 	add.w	fp, fp, #1
 8009e28:	e7bb      	b.n	8009da2 <_printf_float+0x2fe>
 8009e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	d1c0      	bne.n	8009dba <_printf_float+0x316>
 8009e38:	e68f      	b.n	8009b5a <_printf_float+0xb6>
 8009e3a:	9a06      	ldr	r2, [sp, #24]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	4442      	add	r2, r8
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	d1c3      	bne.n	8009dd2 <_printf_float+0x32e>
 8009e4a:	e686      	b.n	8009b5a <_printf_float+0xb6>
 8009e4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e50:	f1ba 0f01 	cmp.w	sl, #1
 8009e54:	dc01      	bgt.n	8009e5a <_printf_float+0x3b6>
 8009e56:	07db      	lsls	r3, r3, #31
 8009e58:	d536      	bpl.n	8009ec8 <_printf_float+0x424>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f ae78 	beq.w	8009b5a <_printf_float+0xb6>
 8009e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b8      	blx	r7
 8009e74:	3001      	adds	r0, #1
 8009e76:	f43f ae70 	beq.w	8009b5a <_printf_float+0xb6>
 8009e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2300      	movs	r3, #0
 8009e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e86:	f7f6 fe57 	bl	8000b38 <__aeabi_dcmpeq>
 8009e8a:	b9c0      	cbnz	r0, 8009ebe <_printf_float+0x41a>
 8009e8c:	4653      	mov	r3, sl
 8009e8e:	f108 0201 	add.w	r2, r8, #1
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d10c      	bne.n	8009eb6 <_printf_float+0x412>
 8009e9c:	e65d      	b.n	8009b5a <_printf_float+0xb6>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	465a      	mov	r2, fp
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f ae56 	beq.w	8009b5a <_printf_float+0xb6>
 8009eae:	f108 0801 	add.w	r8, r8, #1
 8009eb2:	45d0      	cmp	r8, sl
 8009eb4:	dbf3      	blt.n	8009e9e <_printf_float+0x3fa>
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ebc:	e6df      	b.n	8009c7e <_printf_float+0x1da>
 8009ebe:	f04f 0800 	mov.w	r8, #0
 8009ec2:	f104 0b1a 	add.w	fp, r4, #26
 8009ec6:	e7f4      	b.n	8009eb2 <_printf_float+0x40e>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4642      	mov	r2, r8
 8009ecc:	e7e1      	b.n	8009e92 <_printf_float+0x3ee>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	464a      	mov	r2, r9
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f ae3e 	beq.w	8009b5a <_printf_float+0xb6>
 8009ede:	f108 0801 	add.w	r8, r8, #1
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ee6:	1a5b      	subs	r3, r3, r1
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	dcf0      	bgt.n	8009ece <_printf_float+0x42a>
 8009eec:	e6fc      	b.n	8009ce8 <_printf_float+0x244>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	f104 0919 	add.w	r9, r4, #25
 8009ef6:	e7f4      	b.n	8009ee2 <_printf_float+0x43e>

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	4698      	mov	r8, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bfb8      	it	lt
 8009f0c:	4613      	movlt	r3, r2
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f14:	4607      	mov	r7, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	b10a      	cbz	r2, 8009f1e <_printf_common+0x26>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	0699      	lsls	r1, r3, #26
 8009f22:	bf42      	ittt	mi
 8009f24:	6833      	ldrmi	r3, [r6, #0]
 8009f26:	3302      	addmi	r3, #2
 8009f28:	6033      	strmi	r3, [r6, #0]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d106      	bne.n	8009f40 <_printf_common+0x48>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	6832      	ldr	r2, [r6, #0]
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc26      	bgt.n	8009f8e <_printf_common+0x96>
 8009f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f44:	6822      	ldr	r2, [r4, #0]
 8009f46:	3b00      	subs	r3, #0
 8009f48:	bf18      	it	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	0692      	lsls	r2, r2, #26
 8009f4e:	d42b      	bmi.n	8009fa8 <_printf_common+0xb0>
 8009f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f54:	4641      	mov	r1, r8
 8009f56:	4638      	mov	r0, r7
 8009f58:	47c8      	blx	r9
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d01e      	beq.n	8009f9c <_printf_common+0xa4>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	f003 0306 	and.w	r3, r3, #6
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	bf02      	ittt	eq
 8009f6a:	68e5      	ldreq	r5, [r4, #12]
 8009f6c:	6833      	ldreq	r3, [r6, #0]
 8009f6e:	1aed      	subeq	r5, r5, r3
 8009f70:	68a3      	ldr	r3, [r4, #8]
 8009f72:	bf0c      	ite	eq
 8009f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f78:	2500      	movne	r5, #0
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bfc4      	itt	gt
 8009f7e:	1a9b      	subgt	r3, r3, r2
 8009f80:	18ed      	addgt	r5, r5, r3
 8009f82:	2600      	movs	r6, #0
 8009f84:	341a      	adds	r4, #26
 8009f86:	42b5      	cmp	r5, r6
 8009f88:	d11a      	bne.n	8009fc0 <_printf_common+0xc8>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e008      	b.n	8009fa0 <_printf_common+0xa8>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	4641      	mov	r1, r8
 8009f94:	4638      	mov	r0, r7
 8009f96:	47c8      	blx	r9
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d103      	bne.n	8009fa4 <_printf_common+0xac>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	e7c6      	b.n	8009f36 <_printf_common+0x3e>
 8009fa8:	18e1      	adds	r1, r4, r3
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	2030      	movs	r0, #48	@ 0x30
 8009fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fb2:	4422      	add	r2, r4
 8009fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	e7c7      	b.n	8009f50 <_printf_common+0x58>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	47c8      	blx	r9
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d0e6      	beq.n	8009f9c <_printf_common+0xa4>
 8009fce:	3601      	adds	r6, #1
 8009fd0:	e7d9      	b.n	8009f86 <_printf_common+0x8e>
	...

08009fd4 <_printf_i>:
 8009fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	7e0f      	ldrb	r7, [r1, #24]
 8009fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009fdc:	2f78      	cmp	r7, #120	@ 0x78
 8009fde:	4691      	mov	r9, r2
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009fea:	d807      	bhi.n	8009ffc <_printf_i+0x28>
 8009fec:	2f62      	cmp	r7, #98	@ 0x62
 8009fee:	d80a      	bhi.n	800a006 <_printf_i+0x32>
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	f000 80d2 	beq.w	800a19a <_printf_i+0x1c6>
 8009ff6:	2f58      	cmp	r7, #88	@ 0x58
 8009ff8:	f000 80b9 	beq.w	800a16e <_printf_i+0x19a>
 8009ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a004:	e03a      	b.n	800a07c <_printf_i+0xa8>
 800a006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a00a:	2b15      	cmp	r3, #21
 800a00c:	d8f6      	bhi.n	8009ffc <_printf_i+0x28>
 800a00e:	a101      	add	r1, pc, #4	@ (adr r1, 800a014 <_printf_i+0x40>)
 800a010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a014:	0800a06d 	.word	0x0800a06d
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	08009ffd 	.word	0x08009ffd
 800a020:	08009ffd 	.word	0x08009ffd
 800a024:	08009ffd 	.word	0x08009ffd
 800a028:	08009ffd 	.word	0x08009ffd
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	08009ffd 	.word	0x08009ffd
 800a034:	08009ffd 	.word	0x08009ffd
 800a038:	08009ffd 	.word	0x08009ffd
 800a03c:	08009ffd 	.word	0x08009ffd
 800a040:	0800a181 	.word	0x0800a181
 800a044:	0800a0ab 	.word	0x0800a0ab
 800a048:	0800a13b 	.word	0x0800a13b
 800a04c:	08009ffd 	.word	0x08009ffd
 800a050:	08009ffd 	.word	0x08009ffd
 800a054:	0800a1a3 	.word	0x0800a1a3
 800a058:	08009ffd 	.word	0x08009ffd
 800a05c:	0800a0ab 	.word	0x0800a0ab
 800a060:	08009ffd 	.word	0x08009ffd
 800a064:	08009ffd 	.word	0x08009ffd
 800a068:	0800a143 	.word	0x0800a143
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	1d1a      	adds	r2, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6032      	str	r2, [r6, #0]
 800a074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e09d      	b.n	800a1bc <_printf_i+0x1e8>
 800a080:	6833      	ldr	r3, [r6, #0]
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	1d19      	adds	r1, r3, #4
 800a086:	6031      	str	r1, [r6, #0]
 800a088:	0606      	lsls	r6, r0, #24
 800a08a:	d501      	bpl.n	800a090 <_printf_i+0xbc>
 800a08c:	681d      	ldr	r5, [r3, #0]
 800a08e:	e003      	b.n	800a098 <_printf_i+0xc4>
 800a090:	0645      	lsls	r5, r0, #25
 800a092:	d5fb      	bpl.n	800a08c <_printf_i+0xb8>
 800a094:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a098:	2d00      	cmp	r5, #0
 800a09a:	da03      	bge.n	800a0a4 <_printf_i+0xd0>
 800a09c:	232d      	movs	r3, #45	@ 0x2d
 800a09e:	426d      	negs	r5, r5
 800a0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0a4:	4859      	ldr	r0, [pc, #356]	@ (800a20c <_printf_i+0x238>)
 800a0a6:	230a      	movs	r3, #10
 800a0a8:	e011      	b.n	800a0ce <_printf_i+0xfa>
 800a0aa:	6821      	ldr	r1, [r4, #0]
 800a0ac:	6833      	ldr	r3, [r6, #0]
 800a0ae:	0608      	lsls	r0, r1, #24
 800a0b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0b4:	d402      	bmi.n	800a0bc <_printf_i+0xe8>
 800a0b6:	0649      	lsls	r1, r1, #25
 800a0b8:	bf48      	it	mi
 800a0ba:	b2ad      	uxthmi	r5, r5
 800a0bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0be:	4853      	ldr	r0, [pc, #332]	@ (800a20c <_printf_i+0x238>)
 800a0c0:	6033      	str	r3, [r6, #0]
 800a0c2:	bf14      	ite	ne
 800a0c4:	230a      	movne	r3, #10
 800a0c6:	2308      	moveq	r3, #8
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a0ce:	6866      	ldr	r6, [r4, #4]
 800a0d0:	60a6      	str	r6, [r4, #8]
 800a0d2:	2e00      	cmp	r6, #0
 800a0d4:	bfa2      	ittt	ge
 800a0d6:	6821      	ldrge	r1, [r4, #0]
 800a0d8:	f021 0104 	bicge.w	r1, r1, #4
 800a0dc:	6021      	strge	r1, [r4, #0]
 800a0de:	b90d      	cbnz	r5, 800a0e4 <_printf_i+0x110>
 800a0e0:	2e00      	cmp	r6, #0
 800a0e2:	d04b      	beq.n	800a17c <_printf_i+0x1a8>
 800a0e4:	4616      	mov	r6, r2
 800a0e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0ea:	fb03 5711 	mls	r7, r3, r1, r5
 800a0ee:	5dc7      	ldrb	r7, [r0, r7]
 800a0f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0f4:	462f      	mov	r7, r5
 800a0f6:	42bb      	cmp	r3, r7
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	d9f4      	bls.n	800a0e6 <_printf_i+0x112>
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d10b      	bne.n	800a118 <_printf_i+0x144>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	07df      	lsls	r7, r3, #31
 800a104:	d508      	bpl.n	800a118 <_printf_i+0x144>
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	6861      	ldr	r1, [r4, #4]
 800a10a:	4299      	cmp	r1, r3
 800a10c:	bfde      	ittt	le
 800a10e:	2330      	movle	r3, #48	@ 0x30
 800a110:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a114:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a118:	1b92      	subs	r2, r2, r6
 800a11a:	6122      	str	r2, [r4, #16]
 800a11c:	f8cd a000 	str.w	sl, [sp]
 800a120:	464b      	mov	r3, r9
 800a122:	aa03      	add	r2, sp, #12
 800a124:	4621      	mov	r1, r4
 800a126:	4640      	mov	r0, r8
 800a128:	f7ff fee6 	bl	8009ef8 <_printf_common>
 800a12c:	3001      	adds	r0, #1
 800a12e:	d14a      	bne.n	800a1c6 <_printf_i+0x1f2>
 800a130:	f04f 30ff 	mov.w	r0, #4294967295
 800a134:	b004      	add	sp, #16
 800a136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f043 0320 	orr.w	r3, r3, #32
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	4833      	ldr	r0, [pc, #204]	@ (800a210 <_printf_i+0x23c>)
 800a144:	2778      	movs	r7, #120	@ 0x78
 800a146:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	6831      	ldr	r1, [r6, #0]
 800a14e:	061f      	lsls	r7, r3, #24
 800a150:	f851 5b04 	ldr.w	r5, [r1], #4
 800a154:	d402      	bmi.n	800a15c <_printf_i+0x188>
 800a156:	065f      	lsls	r7, r3, #25
 800a158:	bf48      	it	mi
 800a15a:	b2ad      	uxthmi	r5, r5
 800a15c:	6031      	str	r1, [r6, #0]
 800a15e:	07d9      	lsls	r1, r3, #31
 800a160:	bf44      	itt	mi
 800a162:	f043 0320 	orrmi.w	r3, r3, #32
 800a166:	6023      	strmi	r3, [r4, #0]
 800a168:	b11d      	cbz	r5, 800a172 <_printf_i+0x19e>
 800a16a:	2310      	movs	r3, #16
 800a16c:	e7ac      	b.n	800a0c8 <_printf_i+0xf4>
 800a16e:	4827      	ldr	r0, [pc, #156]	@ (800a20c <_printf_i+0x238>)
 800a170:	e7e9      	b.n	800a146 <_printf_i+0x172>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	f023 0320 	bic.w	r3, r3, #32
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	e7f6      	b.n	800a16a <_printf_i+0x196>
 800a17c:	4616      	mov	r6, r2
 800a17e:	e7bd      	b.n	800a0fc <_printf_i+0x128>
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	6825      	ldr	r5, [r4, #0]
 800a184:	6961      	ldr	r1, [r4, #20]
 800a186:	1d18      	adds	r0, r3, #4
 800a188:	6030      	str	r0, [r6, #0]
 800a18a:	062e      	lsls	r6, r5, #24
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	d501      	bpl.n	800a194 <_printf_i+0x1c0>
 800a190:	6019      	str	r1, [r3, #0]
 800a192:	e002      	b.n	800a19a <_printf_i+0x1c6>
 800a194:	0668      	lsls	r0, r5, #25
 800a196:	d5fb      	bpl.n	800a190 <_printf_i+0x1bc>
 800a198:	8019      	strh	r1, [r3, #0]
 800a19a:	2300      	movs	r3, #0
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	4616      	mov	r6, r2
 800a1a0:	e7bc      	b.n	800a11c <_printf_i+0x148>
 800a1a2:	6833      	ldr	r3, [r6, #0]
 800a1a4:	1d1a      	adds	r2, r3, #4
 800a1a6:	6032      	str	r2, [r6, #0]
 800a1a8:	681e      	ldr	r6, [r3, #0]
 800a1aa:	6862      	ldr	r2, [r4, #4]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7f6 f846 	bl	8000240 <memchr>
 800a1b4:	b108      	cbz	r0, 800a1ba <_printf_i+0x1e6>
 800a1b6:	1b80      	subs	r0, r0, r6
 800a1b8:	6060      	str	r0, [r4, #4]
 800a1ba:	6863      	ldr	r3, [r4, #4]
 800a1bc:	6123      	str	r3, [r4, #16]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1c4:	e7aa      	b.n	800a11c <_printf_i+0x148>
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	47d0      	blx	sl
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d0ad      	beq.n	800a130 <_printf_i+0x15c>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	079b      	lsls	r3, r3, #30
 800a1d8:	d413      	bmi.n	800a202 <_printf_i+0x22e>
 800a1da:	68e0      	ldr	r0, [r4, #12]
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	4298      	cmp	r0, r3
 800a1e0:	bfb8      	it	lt
 800a1e2:	4618      	movlt	r0, r3
 800a1e4:	e7a6      	b.n	800a134 <_printf_i+0x160>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4632      	mov	r2, r6
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	47d0      	blx	sl
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d09d      	beq.n	800a130 <_printf_i+0x15c>
 800a1f4:	3501      	adds	r5, #1
 800a1f6:	68e3      	ldr	r3, [r4, #12]
 800a1f8:	9903      	ldr	r1, [sp, #12]
 800a1fa:	1a5b      	subs	r3, r3, r1
 800a1fc:	42ab      	cmp	r3, r5
 800a1fe:	dcf2      	bgt.n	800a1e6 <_printf_i+0x212>
 800a200:	e7eb      	b.n	800a1da <_printf_i+0x206>
 800a202:	2500      	movs	r5, #0
 800a204:	f104 0619 	add.w	r6, r4, #25
 800a208:	e7f5      	b.n	800a1f6 <_printf_i+0x222>
 800a20a:	bf00      	nop
 800a20c:	0800ca07 	.word	0x0800ca07
 800a210:	0800ca18 	.word	0x0800ca18

0800a214 <std>:
 800a214:	2300      	movs	r3, #0
 800a216:	b510      	push	{r4, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	e9c0 3300 	strd	r3, r3, [r0]
 800a21e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a222:	6083      	str	r3, [r0, #8]
 800a224:	8181      	strh	r1, [r0, #12]
 800a226:	6643      	str	r3, [r0, #100]	@ 0x64
 800a228:	81c2      	strh	r2, [r0, #14]
 800a22a:	6183      	str	r3, [r0, #24]
 800a22c:	4619      	mov	r1, r3
 800a22e:	2208      	movs	r2, #8
 800a230:	305c      	adds	r0, #92	@ 0x5c
 800a232:	f000 fa1b 	bl	800a66c <memset>
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <std+0x58>)
 800a238:	6263      	str	r3, [r4, #36]	@ 0x24
 800a23a:	4b0d      	ldr	r3, [pc, #52]	@ (800a270 <std+0x5c>)
 800a23c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a23e:	4b0d      	ldr	r3, [pc, #52]	@ (800a274 <std+0x60>)
 800a240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a242:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <std+0x64>)
 800a244:	6323      	str	r3, [r4, #48]	@ 0x30
 800a246:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <std+0x68>)
 800a248:	6224      	str	r4, [r4, #32]
 800a24a:	429c      	cmp	r4, r3
 800a24c:	d006      	beq.n	800a25c <std+0x48>
 800a24e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a252:	4294      	cmp	r4, r2
 800a254:	d002      	beq.n	800a25c <std+0x48>
 800a256:	33d0      	adds	r3, #208	@ 0xd0
 800a258:	429c      	cmp	r4, r3
 800a25a:	d105      	bne.n	800a268 <std+0x54>
 800a25c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a264:	f000 ba90 	b.w	800a788 <__retarget_lock_init_recursive>
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	bf00      	nop
 800a26c:	0800a4bd 	.word	0x0800a4bd
 800a270:	0800a4df 	.word	0x0800a4df
 800a274:	0800a517 	.word	0x0800a517
 800a278:	0800a53b 	.word	0x0800a53b
 800a27c:	2000054c 	.word	0x2000054c

0800a280 <stdio_exit_handler>:
 800a280:	4a02      	ldr	r2, [pc, #8]	@ (800a28c <stdio_exit_handler+0xc>)
 800a282:	4903      	ldr	r1, [pc, #12]	@ (800a290 <stdio_exit_handler+0x10>)
 800a284:	4803      	ldr	r0, [pc, #12]	@ (800a294 <stdio_exit_handler+0x14>)
 800a286:	f000 b869 	b.w	800a35c <_fwalk_sglue>
 800a28a:	bf00      	nop
 800a28c:	2000000c 	.word	0x2000000c
 800a290:	0800c0e5 	.word	0x0800c0e5
 800a294:	2000001c 	.word	0x2000001c

0800a298 <cleanup_stdio>:
 800a298:	6841      	ldr	r1, [r0, #4]
 800a29a:	4b0c      	ldr	r3, [pc, #48]	@ (800a2cc <cleanup_stdio+0x34>)
 800a29c:	4299      	cmp	r1, r3
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	d001      	beq.n	800a2a8 <cleanup_stdio+0x10>
 800a2a4:	f001 ff1e 	bl	800c0e4 <_fflush_r>
 800a2a8:	68a1      	ldr	r1, [r4, #8]
 800a2aa:	4b09      	ldr	r3, [pc, #36]	@ (800a2d0 <cleanup_stdio+0x38>)
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	d002      	beq.n	800a2b6 <cleanup_stdio+0x1e>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 ff17 	bl	800c0e4 <_fflush_r>
 800a2b6:	68e1      	ldr	r1, [r4, #12]
 800a2b8:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <cleanup_stdio+0x3c>)
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	d004      	beq.n	800a2c8 <cleanup_stdio+0x30>
 800a2be:	4620      	mov	r0, r4
 800a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c4:	f001 bf0e 	b.w	800c0e4 <_fflush_r>
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000054c 	.word	0x2000054c
 800a2d0:	200005b4 	.word	0x200005b4
 800a2d4:	2000061c 	.word	0x2000061c

0800a2d8 <global_stdio_init.part.0>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	4b0b      	ldr	r3, [pc, #44]	@ (800a308 <global_stdio_init.part.0+0x30>)
 800a2dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a30c <global_stdio_init.part.0+0x34>)
 800a2de:	4a0c      	ldr	r2, [pc, #48]	@ (800a310 <global_stdio_init.part.0+0x38>)
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2104      	movs	r1, #4
 800a2e8:	f7ff ff94 	bl	800a214 <std>
 800a2ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	2109      	movs	r1, #9
 800a2f4:	f7ff ff8e 	bl	800a214 <std>
 800a2f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a302:	2112      	movs	r1, #18
 800a304:	f7ff bf86 	b.w	800a214 <std>
 800a308:	20000684 	.word	0x20000684
 800a30c:	2000054c 	.word	0x2000054c
 800a310:	0800a281 	.word	0x0800a281

0800a314 <__sfp_lock_acquire>:
 800a314:	4801      	ldr	r0, [pc, #4]	@ (800a31c <__sfp_lock_acquire+0x8>)
 800a316:	f000 ba38 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800a31a:	bf00      	nop
 800a31c:	2000068d 	.word	0x2000068d

0800a320 <__sfp_lock_release>:
 800a320:	4801      	ldr	r0, [pc, #4]	@ (800a328 <__sfp_lock_release+0x8>)
 800a322:	f000 ba33 	b.w	800a78c <__retarget_lock_release_recursive>
 800a326:	bf00      	nop
 800a328:	2000068d 	.word	0x2000068d

0800a32c <__sinit>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4604      	mov	r4, r0
 800a330:	f7ff fff0 	bl	800a314 <__sfp_lock_acquire>
 800a334:	6a23      	ldr	r3, [r4, #32]
 800a336:	b11b      	cbz	r3, 800a340 <__sinit+0x14>
 800a338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33c:	f7ff bff0 	b.w	800a320 <__sfp_lock_release>
 800a340:	4b04      	ldr	r3, [pc, #16]	@ (800a354 <__sinit+0x28>)
 800a342:	6223      	str	r3, [r4, #32]
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <__sinit+0x2c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1f5      	bne.n	800a338 <__sinit+0xc>
 800a34c:	f7ff ffc4 	bl	800a2d8 <global_stdio_init.part.0>
 800a350:	e7f2      	b.n	800a338 <__sinit+0xc>
 800a352:	bf00      	nop
 800a354:	0800a299 	.word	0x0800a299
 800a358:	20000684 	.word	0x20000684

0800a35c <_fwalk_sglue>:
 800a35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a360:	4607      	mov	r7, r0
 800a362:	4688      	mov	r8, r1
 800a364:	4614      	mov	r4, r2
 800a366:	2600      	movs	r6, #0
 800a368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a36c:	f1b9 0901 	subs.w	r9, r9, #1
 800a370:	d505      	bpl.n	800a37e <_fwalk_sglue+0x22>
 800a372:	6824      	ldr	r4, [r4, #0]
 800a374:	2c00      	cmp	r4, #0
 800a376:	d1f7      	bne.n	800a368 <_fwalk_sglue+0xc>
 800a378:	4630      	mov	r0, r6
 800a37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d907      	bls.n	800a394 <_fwalk_sglue+0x38>
 800a384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a388:	3301      	adds	r3, #1
 800a38a:	d003      	beq.n	800a394 <_fwalk_sglue+0x38>
 800a38c:	4629      	mov	r1, r5
 800a38e:	4638      	mov	r0, r7
 800a390:	47c0      	blx	r8
 800a392:	4306      	orrs	r6, r0
 800a394:	3568      	adds	r5, #104	@ 0x68
 800a396:	e7e9      	b.n	800a36c <_fwalk_sglue+0x10>

0800a398 <_puts_r>:
 800a398:	6a03      	ldr	r3, [r0, #32]
 800a39a:	b570      	push	{r4, r5, r6, lr}
 800a39c:	6884      	ldr	r4, [r0, #8]
 800a39e:	4605      	mov	r5, r0
 800a3a0:	460e      	mov	r6, r1
 800a3a2:	b90b      	cbnz	r3, 800a3a8 <_puts_r+0x10>
 800a3a4:	f7ff ffc2 	bl	800a32c <__sinit>
 800a3a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d405      	bmi.n	800a3ba <_puts_r+0x22>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	0598      	lsls	r0, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_puts_r+0x22>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3b6:	f000 f9e8 	bl	800a78a <__retarget_lock_acquire_recursive>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	0719      	lsls	r1, r3, #28
 800a3be:	d502      	bpl.n	800a3c6 <_puts_r+0x2e>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d135      	bne.n	800a432 <_puts_r+0x9a>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f000 f8f9 	bl	800a5c0 <__swsetup_r>
 800a3ce:	b380      	cbz	r0, 800a432 <_puts_r+0x9a>
 800a3d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3d6:	07da      	lsls	r2, r3, #31
 800a3d8:	d405      	bmi.n	800a3e6 <_puts_r+0x4e>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	059b      	lsls	r3, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_puts_r+0x4e>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3e2:	f000 f9d3 	bl	800a78c <__retarget_lock_release_recursive>
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da04      	bge.n	800a3f8 <_puts_r+0x60>
 800a3ee:	69a2      	ldr	r2, [r4, #24]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	dc17      	bgt.n	800a424 <_puts_r+0x8c>
 800a3f4:	290a      	cmp	r1, #10
 800a3f6:	d015      	beq.n	800a424 <_puts_r+0x8c>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	6022      	str	r2, [r4, #0]
 800a3fe:	7019      	strb	r1, [r3, #0]
 800a400:	68a3      	ldr	r3, [r4, #8]
 800a402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a406:	3b01      	subs	r3, #1
 800a408:	60a3      	str	r3, [r4, #8]
 800a40a:	2900      	cmp	r1, #0
 800a40c:	d1ed      	bne.n	800a3ea <_puts_r+0x52>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	da11      	bge.n	800a436 <_puts_r+0x9e>
 800a412:	4622      	mov	r2, r4
 800a414:	210a      	movs	r1, #10
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f893 	bl	800a542 <__swbuf_r>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d0d7      	beq.n	800a3d0 <_puts_r+0x38>
 800a420:	250a      	movs	r5, #10
 800a422:	e7d7      	b.n	800a3d4 <_puts_r+0x3c>
 800a424:	4622      	mov	r2, r4
 800a426:	4628      	mov	r0, r5
 800a428:	f000 f88b 	bl	800a542 <__swbuf_r>
 800a42c:	3001      	adds	r0, #1
 800a42e:	d1e7      	bne.n	800a400 <_puts_r+0x68>
 800a430:	e7ce      	b.n	800a3d0 <_puts_r+0x38>
 800a432:	3e01      	subs	r6, #1
 800a434:	e7e4      	b.n	800a400 <_puts_r+0x68>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	6022      	str	r2, [r4, #0]
 800a43c:	220a      	movs	r2, #10
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	e7ee      	b.n	800a420 <_puts_r+0x88>
	...

0800a444 <puts>:
 800a444:	4b02      	ldr	r3, [pc, #8]	@ (800a450 <puts+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f7ff bfa5 	b.w	800a398 <_puts_r>
 800a44e:	bf00      	nop
 800a450:	20000018 	.word	0x20000018

0800a454 <sniprintf>:
 800a454:	b40c      	push	{r2, r3}
 800a456:	b530      	push	{r4, r5, lr}
 800a458:	4b17      	ldr	r3, [pc, #92]	@ (800a4b8 <sniprintf+0x64>)
 800a45a:	1e0c      	subs	r4, r1, #0
 800a45c:	681d      	ldr	r5, [r3, #0]
 800a45e:	b09d      	sub	sp, #116	@ 0x74
 800a460:	da08      	bge.n	800a474 <sniprintf+0x20>
 800a462:	238b      	movs	r3, #139	@ 0x8b
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	b01d      	add	sp, #116	@ 0x74
 800a46c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a470:	b002      	add	sp, #8
 800a472:	4770      	bx	lr
 800a474:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a478:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a47c:	bf14      	ite	ne
 800a47e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a482:	4623      	moveq	r3, r4
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	9307      	str	r3, [sp, #28]
 800a488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a48c:	9002      	str	r0, [sp, #8]
 800a48e:	9006      	str	r0, [sp, #24]
 800a490:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a494:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a496:	ab21      	add	r3, sp, #132	@ 0x84
 800a498:	a902      	add	r1, sp, #8
 800a49a:	4628      	mov	r0, r5
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	f001 fca1 	bl	800bde4 <_svfiprintf_r>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	bfbc      	itt	lt
 800a4a6:	238b      	movlt	r3, #139	@ 0x8b
 800a4a8:	602b      	strlt	r3, [r5, #0]
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	d0dd      	beq.n	800a46a <sniprintf+0x16>
 800a4ae:	9b02      	ldr	r3, [sp, #8]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e7d9      	b.n	800a46a <sniprintf+0x16>
 800a4b6:	bf00      	nop
 800a4b8:	20000018 	.word	0x20000018

0800a4bc <__sread>:
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	460c      	mov	r4, r1
 800a4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c4:	f000 f912 	bl	800a6ec <_read_r>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	bfab      	itete	ge
 800a4cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a4d0:	181b      	addge	r3, r3, r0
 800a4d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4d6:	bfac      	ite	ge
 800a4d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4da:	81a3      	strhlt	r3, [r4, #12]
 800a4dc:	bd10      	pop	{r4, pc}

0800a4de <__swrite>:
 800a4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	898b      	ldrh	r3, [r1, #12]
 800a4e6:	05db      	lsls	r3, r3, #23
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4616      	mov	r6, r2
 800a4ee:	d505      	bpl.n	800a4fc <__swrite+0x1e>
 800a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f000 f8e6 	bl	800a6c8 <_lseek_r>
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a506:	81a3      	strh	r3, [r4, #12]
 800a508:	4632      	mov	r2, r6
 800a50a:	463b      	mov	r3, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a512:	f000 b8fd 	b.w	800a710 <_write_r>

0800a516 <__sseek>:
 800a516:	b510      	push	{r4, lr}
 800a518:	460c      	mov	r4, r1
 800a51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51e:	f000 f8d3 	bl	800a6c8 <_lseek_r>
 800a522:	1c43      	adds	r3, r0, #1
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	bf15      	itete	ne
 800a528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a52a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a52e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a532:	81a3      	strheq	r3, [r4, #12]
 800a534:	bf18      	it	ne
 800a536:	81a3      	strhne	r3, [r4, #12]
 800a538:	bd10      	pop	{r4, pc}

0800a53a <__sclose>:
 800a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53e:	f000 b8b3 	b.w	800a6a8 <_close_r>

0800a542 <__swbuf_r>:
 800a542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a544:	460e      	mov	r6, r1
 800a546:	4614      	mov	r4, r2
 800a548:	4605      	mov	r5, r0
 800a54a:	b118      	cbz	r0, 800a554 <__swbuf_r+0x12>
 800a54c:	6a03      	ldr	r3, [r0, #32]
 800a54e:	b90b      	cbnz	r3, 800a554 <__swbuf_r+0x12>
 800a550:	f7ff feec 	bl	800a32c <__sinit>
 800a554:	69a3      	ldr	r3, [r4, #24]
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	071a      	lsls	r2, r3, #28
 800a55c:	d501      	bpl.n	800a562 <__swbuf_r+0x20>
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	b943      	cbnz	r3, 800a574 <__swbuf_r+0x32>
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f000 f82b 	bl	800a5c0 <__swsetup_r>
 800a56a:	b118      	cbz	r0, 800a574 <__swbuf_r+0x32>
 800a56c:	f04f 37ff 	mov.w	r7, #4294967295
 800a570:	4638      	mov	r0, r7
 800a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	6922      	ldr	r2, [r4, #16]
 800a578:	1a98      	subs	r0, r3, r2
 800a57a:	6963      	ldr	r3, [r4, #20]
 800a57c:	b2f6      	uxtb	r6, r6
 800a57e:	4283      	cmp	r3, r0
 800a580:	4637      	mov	r7, r6
 800a582:	dc05      	bgt.n	800a590 <__swbuf_r+0x4e>
 800a584:	4621      	mov	r1, r4
 800a586:	4628      	mov	r0, r5
 800a588:	f001 fdac 	bl	800c0e4 <_fflush_r>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1ed      	bne.n	800a56c <__swbuf_r+0x2a>
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	3b01      	subs	r3, #1
 800a594:	60a3      	str	r3, [r4, #8]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	6022      	str	r2, [r4, #0]
 800a59c:	701e      	strb	r6, [r3, #0]
 800a59e:	6962      	ldr	r2, [r4, #20]
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d004      	beq.n	800a5b0 <__swbuf_r+0x6e>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	07db      	lsls	r3, r3, #31
 800a5aa:	d5e1      	bpl.n	800a570 <__swbuf_r+0x2e>
 800a5ac:	2e0a      	cmp	r6, #10
 800a5ae:	d1df      	bne.n	800a570 <__swbuf_r+0x2e>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f001 fd96 	bl	800c0e4 <_fflush_r>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d0d9      	beq.n	800a570 <__swbuf_r+0x2e>
 800a5bc:	e7d6      	b.n	800a56c <__swbuf_r+0x2a>
	...

0800a5c0 <__swsetup_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4b29      	ldr	r3, [pc, #164]	@ (800a668 <__swsetup_r+0xa8>)
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	b118      	cbz	r0, 800a5d4 <__swsetup_r+0x14>
 800a5cc:	6a03      	ldr	r3, [r0, #32]
 800a5ce:	b90b      	cbnz	r3, 800a5d4 <__swsetup_r+0x14>
 800a5d0:	f7ff feac 	bl	800a32c <__sinit>
 800a5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d8:	0719      	lsls	r1, r3, #28
 800a5da:	d422      	bmi.n	800a622 <__swsetup_r+0x62>
 800a5dc:	06da      	lsls	r2, r3, #27
 800a5de:	d407      	bmi.n	800a5f0 <__swsetup_r+0x30>
 800a5e0:	2209      	movs	r2, #9
 800a5e2:	602a      	str	r2, [r5, #0]
 800a5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5e8:	81a3      	strh	r3, [r4, #12]
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ee:	e033      	b.n	800a658 <__swsetup_r+0x98>
 800a5f0:	0758      	lsls	r0, r3, #29
 800a5f2:	d512      	bpl.n	800a61a <__swsetup_r+0x5a>
 800a5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5f6:	b141      	cbz	r1, 800a60a <__swsetup_r+0x4a>
 800a5f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5fc:	4299      	cmp	r1, r3
 800a5fe:	d002      	beq.n	800a606 <__swsetup_r+0x46>
 800a600:	4628      	mov	r0, r5
 800a602:	f000 ff11 	bl	800b428 <_free_r>
 800a606:	2300      	movs	r3, #0
 800a608:	6363      	str	r3, [r4, #52]	@ 0x34
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	2300      	movs	r3, #0
 800a614:	6063      	str	r3, [r4, #4]
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f043 0308 	orr.w	r3, r3, #8
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	b94b      	cbnz	r3, 800a63a <__swsetup_r+0x7a>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a630:	d003      	beq.n	800a63a <__swsetup_r+0x7a>
 800a632:	4621      	mov	r1, r4
 800a634:	4628      	mov	r0, r5
 800a636:	f001 fda3 	bl	800c180 <__smakebuf_r>
 800a63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63e:	f013 0201 	ands.w	r2, r3, #1
 800a642:	d00a      	beq.n	800a65a <__swsetup_r+0x9a>
 800a644:	2200      	movs	r2, #0
 800a646:	60a2      	str	r2, [r4, #8]
 800a648:	6962      	ldr	r2, [r4, #20]
 800a64a:	4252      	negs	r2, r2
 800a64c:	61a2      	str	r2, [r4, #24]
 800a64e:	6922      	ldr	r2, [r4, #16]
 800a650:	b942      	cbnz	r2, 800a664 <__swsetup_r+0xa4>
 800a652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a656:	d1c5      	bne.n	800a5e4 <__swsetup_r+0x24>
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	0799      	lsls	r1, r3, #30
 800a65c:	bf58      	it	pl
 800a65e:	6962      	ldrpl	r2, [r4, #20]
 800a660:	60a2      	str	r2, [r4, #8]
 800a662:	e7f4      	b.n	800a64e <__swsetup_r+0x8e>
 800a664:	2000      	movs	r0, #0
 800a666:	e7f7      	b.n	800a658 <__swsetup_r+0x98>
 800a668:	20000018 	.word	0x20000018

0800a66c <memset>:
 800a66c:	4402      	add	r2, r0
 800a66e:	4603      	mov	r3, r0
 800a670:	4293      	cmp	r3, r2
 800a672:	d100      	bne.n	800a676 <memset+0xa>
 800a674:	4770      	bx	lr
 800a676:	f803 1b01 	strb.w	r1, [r3], #1
 800a67a:	e7f9      	b.n	800a670 <memset+0x4>

0800a67c <strncmp>:
 800a67c:	b510      	push	{r4, lr}
 800a67e:	b16a      	cbz	r2, 800a69c <strncmp+0x20>
 800a680:	3901      	subs	r1, #1
 800a682:	1884      	adds	r4, r0, r2
 800a684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a688:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d103      	bne.n	800a698 <strncmp+0x1c>
 800a690:	42a0      	cmp	r0, r4
 800a692:	d001      	beq.n	800a698 <strncmp+0x1c>
 800a694:	2a00      	cmp	r2, #0
 800a696:	d1f5      	bne.n	800a684 <strncmp+0x8>
 800a698:	1ad0      	subs	r0, r2, r3
 800a69a:	bd10      	pop	{r4, pc}
 800a69c:	4610      	mov	r0, r2
 800a69e:	e7fc      	b.n	800a69a <strncmp+0x1e>

0800a6a0 <_localeconv_r>:
 800a6a0:	4800      	ldr	r0, [pc, #0]	@ (800a6a4 <_localeconv_r+0x4>)
 800a6a2:	4770      	bx	lr
 800a6a4:	20000158 	.word	0x20000158

0800a6a8 <_close_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d06      	ldr	r5, [pc, #24]	@ (800a6c4 <_close_r+0x1c>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	602b      	str	r3, [r5, #0]
 800a6b4:	f7f7 fb32 	bl	8001d1c <_close>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d102      	bne.n	800a6c2 <_close_r+0x1a>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	b103      	cbz	r3, 800a6c2 <_close_r+0x1a>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}
 800a6c4:	20000688 	.word	0x20000688

0800a6c8 <_lseek_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	@ (800a6e8 <_lseek_r+0x20>)
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	602a      	str	r2, [r5, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f7f7 fb47 	bl	8001d6a <_lseek>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_lseek_r+0x1e>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_lseek_r+0x1e>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20000688 	.word	0x20000688

0800a6ec <_read_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d07      	ldr	r5, [pc, #28]	@ (800a70c <_read_r+0x20>)
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f7 fad5 	bl	8001caa <_read>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_read_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_read_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20000688 	.word	0x20000688

0800a710 <_write_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d07      	ldr	r5, [pc, #28]	@ (800a730 <_write_r+0x20>)
 800a714:	4604      	mov	r4, r0
 800a716:	4608      	mov	r0, r1
 800a718:	4611      	mov	r1, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f7f7 fae0 	bl	8001ce4 <_write>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_write_r+0x1e>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_write_r+0x1e>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000688 	.word	0x20000688

0800a734 <__errno>:
 800a734:	4b01      	ldr	r3, [pc, #4]	@ (800a73c <__errno+0x8>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000018 	.word	0x20000018

0800a740 <__libc_init_array>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4d0d      	ldr	r5, [pc, #52]	@ (800a778 <__libc_init_array+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	@ (800a77c <__libc_init_array+0x3c>)
 800a746:	1b64      	subs	r4, r4, r5
 800a748:	10a4      	asrs	r4, r4, #2
 800a74a:	2600      	movs	r6, #0
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	d109      	bne.n	800a764 <__libc_init_array+0x24>
 800a750:	4d0b      	ldr	r5, [pc, #44]	@ (800a780 <__libc_init_array+0x40>)
 800a752:	4c0c      	ldr	r4, [pc, #48]	@ (800a784 <__libc_init_array+0x44>)
 800a754:	f001 ffd0 	bl	800c6f8 <_init>
 800a758:	1b64      	subs	r4, r4, r5
 800a75a:	10a4      	asrs	r4, r4, #2
 800a75c:	2600      	movs	r6, #0
 800a75e:	42a6      	cmp	r6, r4
 800a760:	d105      	bne.n	800a76e <__libc_init_array+0x2e>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	f855 3b04 	ldr.w	r3, [r5], #4
 800a768:	4798      	blx	r3
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7ee      	b.n	800a74c <__libc_init_array+0xc>
 800a76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a772:	4798      	blx	r3
 800a774:	3601      	adds	r6, #1
 800a776:	e7f2      	b.n	800a75e <__libc_init_array+0x1e>
 800a778:	0800cc70 	.word	0x0800cc70
 800a77c:	0800cc70 	.word	0x0800cc70
 800a780:	0800cc70 	.word	0x0800cc70
 800a784:	0800cc74 	.word	0x0800cc74

0800a788 <__retarget_lock_init_recursive>:
 800a788:	4770      	bx	lr

0800a78a <__retarget_lock_acquire_recursive>:
 800a78a:	4770      	bx	lr

0800a78c <__retarget_lock_release_recursive>:
 800a78c:	4770      	bx	lr

0800a78e <quorem>:
 800a78e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a792:	6903      	ldr	r3, [r0, #16]
 800a794:	690c      	ldr	r4, [r1, #16]
 800a796:	42a3      	cmp	r3, r4
 800a798:	4607      	mov	r7, r0
 800a79a:	db7e      	blt.n	800a89a <quorem+0x10c>
 800a79c:	3c01      	subs	r4, #1
 800a79e:	f101 0814 	add.w	r8, r1, #20
 800a7a2:	00a3      	lsls	r3, r4, #2
 800a7a4:	f100 0514 	add.w	r5, r0, #20
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7c4:	d32e      	bcc.n	800a824 <quorem+0x96>
 800a7c6:	f04f 0a00 	mov.w	sl, #0
 800a7ca:	46c4      	mov	ip, r8
 800a7cc:	46ae      	mov	lr, r5
 800a7ce:	46d3      	mov	fp, sl
 800a7d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7d4:	b298      	uxth	r0, r3
 800a7d6:	fb06 a000 	mla	r0, r6, r0, sl
 800a7da:	0c02      	lsrs	r2, r0, #16
 800a7dc:	0c1b      	lsrs	r3, r3, #16
 800a7de:	fb06 2303 	mla	r3, r6, r3, r2
 800a7e2:	f8de 2000 	ldr.w	r2, [lr]
 800a7e6:	b280      	uxth	r0, r0
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	1a12      	subs	r2, r2, r0
 800a7ec:	445a      	add	r2, fp
 800a7ee:	f8de 0000 	ldr.w	r0, [lr]
 800a7f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a800:	b292      	uxth	r2, r2
 800a802:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a806:	45e1      	cmp	r9, ip
 800a808:	f84e 2b04 	str.w	r2, [lr], #4
 800a80c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a810:	d2de      	bcs.n	800a7d0 <quorem+0x42>
 800a812:	9b00      	ldr	r3, [sp, #0]
 800a814:	58eb      	ldr	r3, [r5, r3]
 800a816:	b92b      	cbnz	r3, 800a824 <quorem+0x96>
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	3b04      	subs	r3, #4
 800a81c:	429d      	cmp	r5, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	d32f      	bcc.n	800a882 <quorem+0xf4>
 800a822:	613c      	str	r4, [r7, #16]
 800a824:	4638      	mov	r0, r7
 800a826:	f001 f979 	bl	800bb1c <__mcmp>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	db25      	blt.n	800a87a <quorem+0xec>
 800a82e:	4629      	mov	r1, r5
 800a830:	2000      	movs	r0, #0
 800a832:	f858 2b04 	ldr.w	r2, [r8], #4
 800a836:	f8d1 c000 	ldr.w	ip, [r1]
 800a83a:	fa1f fe82 	uxth.w	lr, r2
 800a83e:	fa1f f38c 	uxth.w	r3, ip
 800a842:	eba3 030e 	sub.w	r3, r3, lr
 800a846:	4403      	add	r3, r0
 800a848:	0c12      	lsrs	r2, r2, #16
 800a84a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a84e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a852:	b29b      	uxth	r3, r3
 800a854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a858:	45c1      	cmp	r9, r8
 800a85a:	f841 3b04 	str.w	r3, [r1], #4
 800a85e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a862:	d2e6      	bcs.n	800a832 <quorem+0xa4>
 800a864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a86c:	b922      	cbnz	r2, 800a878 <quorem+0xea>
 800a86e:	3b04      	subs	r3, #4
 800a870:	429d      	cmp	r5, r3
 800a872:	461a      	mov	r2, r3
 800a874:	d30b      	bcc.n	800a88e <quorem+0x100>
 800a876:	613c      	str	r4, [r7, #16]
 800a878:	3601      	adds	r6, #1
 800a87a:	4630      	mov	r0, r6
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	3b04      	subs	r3, #4
 800a886:	2a00      	cmp	r2, #0
 800a888:	d1cb      	bne.n	800a822 <quorem+0x94>
 800a88a:	3c01      	subs	r4, #1
 800a88c:	e7c6      	b.n	800a81c <quorem+0x8e>
 800a88e:	6812      	ldr	r2, [r2, #0]
 800a890:	3b04      	subs	r3, #4
 800a892:	2a00      	cmp	r2, #0
 800a894:	d1ef      	bne.n	800a876 <quorem+0xe8>
 800a896:	3c01      	subs	r4, #1
 800a898:	e7ea      	b.n	800a870 <quorem+0xe2>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e7ee      	b.n	800a87c <quorem+0xee>
	...

0800a8a0 <_dtoa_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	69c7      	ldr	r7, [r0, #28]
 800a8a6:	b099      	sub	sp, #100	@ 0x64
 800a8a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8ac:	ec55 4b10 	vmov	r4, r5, d0
 800a8b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a8b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8ba:	b97f      	cbnz	r7, 800a8dc <_dtoa_r+0x3c>
 800a8bc:	2010      	movs	r0, #16
 800a8be:	f000 fdfd 	bl	800b4bc <malloc>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a8c8:	b920      	cbnz	r0, 800a8d4 <_dtoa_r+0x34>
 800a8ca:	4ba7      	ldr	r3, [pc, #668]	@ (800ab68 <_dtoa_r+0x2c8>)
 800a8cc:	21ef      	movs	r1, #239	@ 0xef
 800a8ce:	48a7      	ldr	r0, [pc, #668]	@ (800ab6c <_dtoa_r+0x2cc>)
 800a8d0:	f001 fcec 	bl	800c2ac <__assert_func>
 800a8d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a8d8:	6007      	str	r7, [r0, #0]
 800a8da:	60c7      	str	r7, [r0, #12]
 800a8dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8e0:	6819      	ldr	r1, [r3, #0]
 800a8e2:	b159      	cbz	r1, 800a8fc <_dtoa_r+0x5c>
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	604a      	str	r2, [r1, #4]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4093      	lsls	r3, r2
 800a8ec:	608b      	str	r3, [r1, #8]
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	f000 feda 	bl	800b6a8 <_Bfree>
 800a8f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	1e2b      	subs	r3, r5, #0
 800a8fe:	bfb9      	ittee	lt
 800a900:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a904:	9303      	strlt	r3, [sp, #12]
 800a906:	2300      	movge	r3, #0
 800a908:	6033      	strge	r3, [r6, #0]
 800a90a:	9f03      	ldr	r7, [sp, #12]
 800a90c:	4b98      	ldr	r3, [pc, #608]	@ (800ab70 <_dtoa_r+0x2d0>)
 800a90e:	bfbc      	itt	lt
 800a910:	2201      	movlt	r2, #1
 800a912:	6032      	strlt	r2, [r6, #0]
 800a914:	43bb      	bics	r3, r7
 800a916:	d112      	bne.n	800a93e <_dtoa_r+0x9e>
 800a918:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a91a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a924:	4323      	orrs	r3, r4
 800a926:	f000 854d 	beq.w	800b3c4 <_dtoa_r+0xb24>
 800a92a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a92c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab84 <_dtoa_r+0x2e4>
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 854f 	beq.w	800b3d4 <_dtoa_r+0xb34>
 800a936:	f10a 0303 	add.w	r3, sl, #3
 800a93a:	f000 bd49 	b.w	800b3d0 <_dtoa_r+0xb30>
 800a93e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	ec51 0b17 	vmov	r0, r1, d7
 800a948:	2300      	movs	r3, #0
 800a94a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a94e:	f7f6 f8f3 	bl	8000b38 <__aeabi_dcmpeq>
 800a952:	4680      	mov	r8, r0
 800a954:	b158      	cbz	r0, 800a96e <_dtoa_r+0xce>
 800a956:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a958:	2301      	movs	r3, #1
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a95e:	b113      	cbz	r3, 800a966 <_dtoa_r+0xc6>
 800a960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a962:	4b84      	ldr	r3, [pc, #528]	@ (800ab74 <_dtoa_r+0x2d4>)
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab88 <_dtoa_r+0x2e8>
 800a96a:	f000 bd33 	b.w	800b3d4 <_dtoa_r+0xb34>
 800a96e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a972:	aa16      	add	r2, sp, #88	@ 0x58
 800a974:	a917      	add	r1, sp, #92	@ 0x5c
 800a976:	4658      	mov	r0, fp
 800a978:	f001 f980 	bl	800bc7c <__d2b>
 800a97c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a980:	4681      	mov	r9, r0
 800a982:	2e00      	cmp	r6, #0
 800a984:	d077      	beq.n	800aa76 <_dtoa_r+0x1d6>
 800a986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a988:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a990:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a994:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a998:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a99c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4b74      	ldr	r3, [pc, #464]	@ (800ab78 <_dtoa_r+0x2d8>)
 800a9a6:	f7f5 fca7 	bl	80002f8 <__aeabi_dsub>
 800a9aa:	a369      	add	r3, pc, #420	@ (adr r3, 800ab50 <_dtoa_r+0x2b0>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fe5a 	bl	8000668 <__aeabi_dmul>
 800a9b4:	a368      	add	r3, pc, #416	@ (adr r3, 800ab58 <_dtoa_r+0x2b8>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc9f 	bl	80002fc <__adddf3>
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	f7f5 fde6 	bl	8000594 <__aeabi_i2d>
 800a9c8:	a365      	add	r3, pc, #404	@ (adr r3, 800ab60 <_dtoa_r+0x2c0>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe4b 	bl	8000668 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f5 fc8f 	bl	80002fc <__adddf3>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	f7f6 f8f1 	bl	8000bc8 <__aeabi_d2iz>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f6 f8ac 	bl	8000b4c <__aeabi_dcmplt>
 800a9f4:	b140      	cbz	r0, 800aa08 <_dtoa_r+0x168>
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f7f5 fdcc 	bl	8000594 <__aeabi_i2d>
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f7f6 f89a 	bl	8000b38 <__aeabi_dcmpeq>
 800aa04:	b900      	cbnz	r0, 800aa08 <_dtoa_r+0x168>
 800aa06:	3f01      	subs	r7, #1
 800aa08:	2f16      	cmp	r7, #22
 800aa0a:	d851      	bhi.n	800aab0 <_dtoa_r+0x210>
 800aa0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ab7c <_dtoa_r+0x2dc>)
 800aa0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa1a:	f7f6 f897 	bl	8000b4c <__aeabi_dcmplt>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d048      	beq.n	800aab4 <_dtoa_r+0x214>
 800aa22:	3f01      	subs	r7, #1
 800aa24:	2300      	movs	r3, #0
 800aa26:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa2a:	1b9b      	subs	r3, r3, r6
 800aa2c:	1e5a      	subs	r2, r3, #1
 800aa2e:	bf44      	itt	mi
 800aa30:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa34:	2300      	movmi	r3, #0
 800aa36:	9208      	str	r2, [sp, #32]
 800aa38:	bf54      	ite	pl
 800aa3a:	f04f 0800 	movpl.w	r8, #0
 800aa3e:	9308      	strmi	r3, [sp, #32]
 800aa40:	2f00      	cmp	r7, #0
 800aa42:	db39      	blt.n	800aab8 <_dtoa_r+0x218>
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aa48:	443b      	add	r3, r7
 800aa4a:	9308      	str	r3, [sp, #32]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d864      	bhi.n	800ab20 <_dtoa_r+0x280>
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	bfc4      	itt	gt
 800aa5a:	3b04      	subgt	r3, #4
 800aa5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	f1a3 0302 	sub.w	r3, r3, #2
 800aa64:	bfcc      	ite	gt
 800aa66:	2400      	movgt	r4, #0
 800aa68:	2401      	movle	r4, #1
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d863      	bhi.n	800ab36 <_dtoa_r+0x296>
 800aa6e:	e8df f003 	tbb	[pc, r3]
 800aa72:	372a      	.short	0x372a
 800aa74:	5535      	.short	0x5535
 800aa76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa7a:	441e      	add	r6, r3
 800aa7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	bfc1      	itttt	gt
 800aa84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa88:	409f      	lslgt	r7, r3
 800aa8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa92:	bfd6      	itet	le
 800aa94:	f1c3 0320 	rsble	r3, r3, #32
 800aa98:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa9c:	fa04 f003 	lslle.w	r0, r4, r3
 800aaa0:	f7f5 fd68 	bl	8000574 <__aeabi_ui2d>
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaaa:	3e01      	subs	r6, #1
 800aaac:	9214      	str	r2, [sp, #80]	@ 0x50
 800aaae:	e777      	b.n	800a9a0 <_dtoa_r+0x100>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7b8      	b.n	800aa26 <_dtoa_r+0x186>
 800aab4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aab6:	e7b7      	b.n	800aa28 <_dtoa_r+0x188>
 800aab8:	427b      	negs	r3, r7
 800aaba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aabc:	2300      	movs	r3, #0
 800aabe:	eba8 0807 	sub.w	r8, r8, r7
 800aac2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aac4:	e7c4      	b.n	800aa50 <_dtoa_r+0x1b0>
 800aac6:	2300      	movs	r3, #0
 800aac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dc35      	bgt.n	800ab3c <_dtoa_r+0x29c>
 800aad0:	2301      	movs	r3, #1
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	9307      	str	r3, [sp, #28]
 800aad6:	461a      	mov	r2, r3
 800aad8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aada:	e00b      	b.n	800aaf4 <_dtoa_r+0x254>
 800aadc:	2301      	movs	r3, #1
 800aade:	e7f3      	b.n	800aac8 <_dtoa_r+0x228>
 800aae0:	2300      	movs	r3, #0
 800aae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aae6:	18fb      	adds	r3, r7, r3
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	bfb8      	it	lt
 800aaf2:	2301      	movlt	r3, #1
 800aaf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2204      	movs	r2, #4
 800aafc:	f102 0514 	add.w	r5, r2, #20
 800ab00:	429d      	cmp	r5, r3
 800ab02:	d91f      	bls.n	800ab44 <_dtoa_r+0x2a4>
 800ab04:	6041      	str	r1, [r0, #4]
 800ab06:	4658      	mov	r0, fp
 800ab08:	f000 fd8e 	bl	800b628 <_Balloc>
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d13c      	bne.n	800ab8c <_dtoa_r+0x2ec>
 800ab12:	4b1b      	ldr	r3, [pc, #108]	@ (800ab80 <_dtoa_r+0x2e0>)
 800ab14:	4602      	mov	r2, r0
 800ab16:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab1a:	e6d8      	b.n	800a8ce <_dtoa_r+0x2e>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e7e0      	b.n	800aae2 <_dtoa_r+0x242>
 800ab20:	2401      	movs	r4, #1
 800ab22:	2300      	movs	r3, #0
 800ab24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	9307      	str	r3, [sp, #28]
 800ab30:	2200      	movs	r2, #0
 800ab32:	2312      	movs	r3, #18
 800ab34:	e7d0      	b.n	800aad8 <_dtoa_r+0x238>
 800ab36:	2301      	movs	r3, #1
 800ab38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab3a:	e7f5      	b.n	800ab28 <_dtoa_r+0x288>
 800ab3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	e7d7      	b.n	800aaf4 <_dtoa_r+0x254>
 800ab44:	3101      	adds	r1, #1
 800ab46:	0052      	lsls	r2, r2, #1
 800ab48:	e7d8      	b.n	800aafc <_dtoa_r+0x25c>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
 800ab50:	636f4361 	.word	0x636f4361
 800ab54:	3fd287a7 	.word	0x3fd287a7
 800ab58:	8b60c8b3 	.word	0x8b60c8b3
 800ab5c:	3fc68a28 	.word	0x3fc68a28
 800ab60:	509f79fb 	.word	0x509f79fb
 800ab64:	3fd34413 	.word	0x3fd34413
 800ab68:	0800ca36 	.word	0x0800ca36
 800ab6c:	0800ca4d 	.word	0x0800ca4d
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	0800ca06 	.word	0x0800ca06
 800ab78:	3ff80000 	.word	0x3ff80000
 800ab7c:	0800cb48 	.word	0x0800cb48
 800ab80:	0800caa5 	.word	0x0800caa5
 800ab84:	0800ca32 	.word	0x0800ca32
 800ab88:	0800ca05 	.word	0x0800ca05
 800ab8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab90:	6018      	str	r0, [r3, #0]
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	2b0e      	cmp	r3, #14
 800ab96:	f200 80a4 	bhi.w	800ace2 <_dtoa_r+0x442>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	f000 80a1 	beq.w	800ace2 <_dtoa_r+0x442>
 800aba0:	2f00      	cmp	r7, #0
 800aba2:	dd33      	ble.n	800ac0c <_dtoa_r+0x36c>
 800aba4:	4bad      	ldr	r3, [pc, #692]	@ (800ae5c <_dtoa_r+0x5bc>)
 800aba6:	f007 020f 	and.w	r2, r7, #15
 800abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abae:	ed93 7b00 	vldr	d7, [r3]
 800abb2:	05f8      	lsls	r0, r7, #23
 800abb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800abb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abbc:	d516      	bpl.n	800abec <_dtoa_r+0x34c>
 800abbe:	4ba8      	ldr	r3, [pc, #672]	@ (800ae60 <_dtoa_r+0x5c0>)
 800abc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abc8:	f7f5 fe78 	bl	80008bc <__aeabi_ddiv>
 800abcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd0:	f004 040f 	and.w	r4, r4, #15
 800abd4:	2603      	movs	r6, #3
 800abd6:	4da2      	ldr	r5, [pc, #648]	@ (800ae60 <_dtoa_r+0x5c0>)
 800abd8:	b954      	cbnz	r4, 800abf0 <_dtoa_r+0x350>
 800abda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe2:	f7f5 fe6b 	bl	80008bc <__aeabi_ddiv>
 800abe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abea:	e028      	b.n	800ac3e <_dtoa_r+0x39e>
 800abec:	2602      	movs	r6, #2
 800abee:	e7f2      	b.n	800abd6 <_dtoa_r+0x336>
 800abf0:	07e1      	lsls	r1, r4, #31
 800abf2:	d508      	bpl.n	800ac06 <_dtoa_r+0x366>
 800abf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abfc:	f7f5 fd34 	bl	8000668 <__aeabi_dmul>
 800ac00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac04:	3601      	adds	r6, #1
 800ac06:	1064      	asrs	r4, r4, #1
 800ac08:	3508      	adds	r5, #8
 800ac0a:	e7e5      	b.n	800abd8 <_dtoa_r+0x338>
 800ac0c:	f000 80d2 	beq.w	800adb4 <_dtoa_r+0x514>
 800ac10:	427c      	negs	r4, r7
 800ac12:	4b92      	ldr	r3, [pc, #584]	@ (800ae5c <_dtoa_r+0x5bc>)
 800ac14:	4d92      	ldr	r5, [pc, #584]	@ (800ae60 <_dtoa_r+0x5c0>)
 800ac16:	f004 020f 	and.w	r2, r4, #15
 800ac1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac26:	f7f5 fd1f 	bl	8000668 <__aeabi_dmul>
 800ac2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac2e:	1124      	asrs	r4, r4, #4
 800ac30:	2300      	movs	r3, #0
 800ac32:	2602      	movs	r6, #2
 800ac34:	2c00      	cmp	r4, #0
 800ac36:	f040 80b2 	bne.w	800ad9e <_dtoa_r+0x4fe>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1d3      	bne.n	800abe6 <_dtoa_r+0x346>
 800ac3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80b7 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac4a:	4b86      	ldr	r3, [pc, #536]	@ (800ae64 <_dtoa_r+0x5c4>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7f5 ff7b 	bl	8000b4c <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f000 80ae 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac5c:	9b07      	ldr	r3, [sp, #28]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 80aa 	beq.w	800adb8 <_dtoa_r+0x518>
 800ac64:	9b00      	ldr	r3, [sp, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd37      	ble.n	800acda <_dtoa_r+0x43a>
 800ac6a:	1e7b      	subs	r3, r7, #1
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4b7d      	ldr	r3, [pc, #500]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	4629      	mov	r1, r5
 800ac76:	f7f5 fcf7 	bl	8000668 <__aeabi_dmul>
 800ac7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7e:	9c00      	ldr	r4, [sp, #0]
 800ac80:	3601      	adds	r6, #1
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7f5 fc86 	bl	8000594 <__aeabi_i2d>
 800ac88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac8c:	f7f5 fcec 	bl	8000668 <__aeabi_dmul>
 800ac90:	4b76      	ldr	r3, [pc, #472]	@ (800ae6c <_dtoa_r+0x5cc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fb32 	bl	80002fc <__adddf3>
 800ac98:	4605      	mov	r5, r0
 800ac9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	f040 808d 	bne.w	800adbe <_dtoa_r+0x51e>
 800aca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca8:	4b71      	ldr	r3, [pc, #452]	@ (800ae70 <_dtoa_r+0x5d0>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 fb24 	bl	80002f8 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acb8:	462a      	mov	r2, r5
 800acba:	4633      	mov	r3, r6
 800acbc:	f7f5 ff64 	bl	8000b88 <__aeabi_dcmpgt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f040 828b 	bne.w	800b1dc <_dtoa_r+0x93c>
 800acc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acca:	462a      	mov	r2, r5
 800accc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acd0:	f7f5 ff3c 	bl	8000b4c <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 8128 	bne.w	800af2a <_dtoa_r+0x68a>
 800acda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800acde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ace2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f2c0 815a 	blt.w	800af9e <_dtoa_r+0x6fe>
 800acea:	2f0e      	cmp	r7, #14
 800acec:	f300 8157 	bgt.w	800af9e <_dtoa_r+0x6fe>
 800acf0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae5c <_dtoa_r+0x5bc>)
 800acf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800acf6:	ed93 7b00 	vldr	d7, [r3]
 800acfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	ed8d 7b00 	vstr	d7, [sp]
 800ad02:	da03      	bge.n	800ad0c <_dtoa_r+0x46c>
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f340 8101 	ble.w	800af0e <_dtoa_r+0x66e>
 800ad0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad10:	4656      	mov	r6, sl
 800ad12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fdcf 	bl	80008bc <__aeabi_ddiv>
 800ad1e:	f7f5 ff53 	bl	8000bc8 <__aeabi_d2iz>
 800ad22:	4680      	mov	r8, r0
 800ad24:	f7f5 fc36 	bl	8000594 <__aeabi_i2d>
 800ad28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad2c:	f7f5 fc9c 	bl	8000668 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4620      	mov	r0, r4
 800ad36:	4629      	mov	r1, r5
 800ad38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad3c:	f7f5 fadc 	bl	80002f8 <__aeabi_dsub>
 800ad40:	f806 4b01 	strb.w	r4, [r6], #1
 800ad44:	9d07      	ldr	r5, [sp, #28]
 800ad46:	eba6 040a 	sub.w	r4, r6, sl
 800ad4a:	42a5      	cmp	r5, r4
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	f040 8117 	bne.w	800af82 <_dtoa_r+0x6e2>
 800ad54:	f7f5 fad2 	bl	80002fc <__adddf3>
 800ad58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	460d      	mov	r5, r1
 800ad60:	f7f5 ff12 	bl	8000b88 <__aeabi_dcmpgt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 80f9 	bne.w	800af5c <_dtoa_r+0x6bc>
 800ad6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f5 fee1 	bl	8000b38 <__aeabi_dcmpeq>
 800ad76:	b118      	cbz	r0, 800ad80 <_dtoa_r+0x4e0>
 800ad78:	f018 0f01 	tst.w	r8, #1
 800ad7c:	f040 80ee 	bne.w	800af5c <_dtoa_r+0x6bc>
 800ad80:	4649      	mov	r1, r9
 800ad82:	4658      	mov	r0, fp
 800ad84:	f000 fc90 	bl	800b6a8 <_Bfree>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	7033      	strb	r3, [r6, #0]
 800ad8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad8e:	3701      	adds	r7, #1
 800ad90:	601f      	str	r7, [r3, #0]
 800ad92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 831d 	beq.w	800b3d4 <_dtoa_r+0xb34>
 800ad9a:	601e      	str	r6, [r3, #0]
 800ad9c:	e31a      	b.n	800b3d4 <_dtoa_r+0xb34>
 800ad9e:	07e2      	lsls	r2, r4, #31
 800ada0:	d505      	bpl.n	800adae <_dtoa_r+0x50e>
 800ada2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ada6:	f7f5 fc5f 	bl	8000668 <__aeabi_dmul>
 800adaa:	3601      	adds	r6, #1
 800adac:	2301      	movs	r3, #1
 800adae:	1064      	asrs	r4, r4, #1
 800adb0:	3508      	adds	r5, #8
 800adb2:	e73f      	b.n	800ac34 <_dtoa_r+0x394>
 800adb4:	2602      	movs	r6, #2
 800adb6:	e742      	b.n	800ac3e <_dtoa_r+0x39e>
 800adb8:	9c07      	ldr	r4, [sp, #28]
 800adba:	9704      	str	r7, [sp, #16]
 800adbc:	e761      	b.n	800ac82 <_dtoa_r+0x3e2>
 800adbe:	4b27      	ldr	r3, [pc, #156]	@ (800ae5c <_dtoa_r+0x5bc>)
 800adc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adca:	4454      	add	r4, sl
 800adcc:	2900      	cmp	r1, #0
 800adce:	d053      	beq.n	800ae78 <_dtoa_r+0x5d8>
 800add0:	4928      	ldr	r1, [pc, #160]	@ (800ae74 <_dtoa_r+0x5d4>)
 800add2:	2000      	movs	r0, #0
 800add4:	f7f5 fd72 	bl	80008bc <__aeabi_ddiv>
 800add8:	4633      	mov	r3, r6
 800adda:	462a      	mov	r2, r5
 800addc:	f7f5 fa8c 	bl	80002f8 <__aeabi_dsub>
 800ade0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ade4:	4656      	mov	r6, sl
 800ade6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adea:	f7f5 feed 	bl	8000bc8 <__aeabi_d2iz>
 800adee:	4605      	mov	r5, r0
 800adf0:	f7f5 fbd0 	bl	8000594 <__aeabi_i2d>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfc:	f7f5 fa7c 	bl	80002f8 <__aeabi_dsub>
 800ae00:	3530      	adds	r5, #48	@ 0x30
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae12:	f7f5 fe9b 	bl	8000b4c <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d171      	bne.n	800aefe <_dtoa_r+0x65e>
 800ae1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae1e:	4911      	ldr	r1, [pc, #68]	@ (800ae64 <_dtoa_r+0x5c4>)
 800ae20:	2000      	movs	r0, #0
 800ae22:	f7f5 fa69 	bl	80002f8 <__aeabi_dsub>
 800ae26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae2a:	f7f5 fe8f 	bl	8000b4c <__aeabi_dcmplt>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f040 8095 	bne.w	800af5e <_dtoa_r+0x6be>
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	f43f af50 	beq.w	800acda <_dtoa_r+0x43a>
 800ae3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	f7f5 fc11 	bl	8000668 <__aeabi_dmul>
 800ae46:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <_dtoa_r+0x5c8>)
 800ae48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae52:	f7f5 fc09 	bl	8000668 <__aeabi_dmul>
 800ae56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae5a:	e7c4      	b.n	800ade6 <_dtoa_r+0x546>
 800ae5c:	0800cb48 	.word	0x0800cb48
 800ae60:	0800cb20 	.word	0x0800cb20
 800ae64:	3ff00000 	.word	0x3ff00000
 800ae68:	40240000 	.word	0x40240000
 800ae6c:	401c0000 	.word	0x401c0000
 800ae70:	40140000 	.word	0x40140000
 800ae74:	3fe00000 	.word	0x3fe00000
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f7f5 fbf4 	bl	8000668 <__aeabi_dmul>
 800ae80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae86:	4656      	mov	r6, sl
 800ae88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8c:	f7f5 fe9c 	bl	8000bc8 <__aeabi_d2iz>
 800ae90:	4605      	mov	r5, r0
 800ae92:	f7f5 fb7f 	bl	8000594 <__aeabi_i2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae9e:	f7f5 fa2b 	bl	80002f8 <__aeabi_dsub>
 800aea2:	3530      	adds	r5, #48	@ 0x30
 800aea4:	f806 5b01 	strb.w	r5, [r6], #1
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeb2:	f04f 0200 	mov.w	r2, #0
 800aeb6:	d124      	bne.n	800af02 <_dtoa_r+0x662>
 800aeb8:	4bac      	ldr	r3, [pc, #688]	@ (800b16c <_dtoa_r+0x8cc>)
 800aeba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aebe:	f7f5 fa1d 	bl	80002fc <__adddf3>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeca:	f7f5 fe5d 	bl	8000b88 <__aeabi_dcmpgt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d145      	bne.n	800af5e <_dtoa_r+0x6be>
 800aed2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aed6:	49a5      	ldr	r1, [pc, #660]	@ (800b16c <_dtoa_r+0x8cc>)
 800aed8:	2000      	movs	r0, #0
 800aeda:	f7f5 fa0d 	bl	80002f8 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee6:	f7f5 fe31 	bl	8000b4c <__aeabi_dcmplt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f aef5 	beq.w	800acda <_dtoa_r+0x43a>
 800aef0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aef2:	1e73      	subs	r3, r6, #1
 800aef4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aef6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aefa:	2b30      	cmp	r3, #48	@ 0x30
 800aefc:	d0f8      	beq.n	800aef0 <_dtoa_r+0x650>
 800aefe:	9f04      	ldr	r7, [sp, #16]
 800af00:	e73e      	b.n	800ad80 <_dtoa_r+0x4e0>
 800af02:	4b9b      	ldr	r3, [pc, #620]	@ (800b170 <_dtoa_r+0x8d0>)
 800af04:	f7f5 fbb0 	bl	8000668 <__aeabi_dmul>
 800af08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af0c:	e7bc      	b.n	800ae88 <_dtoa_r+0x5e8>
 800af0e:	d10c      	bne.n	800af2a <_dtoa_r+0x68a>
 800af10:	4b98      	ldr	r3, [pc, #608]	@ (800b174 <_dtoa_r+0x8d4>)
 800af12:	2200      	movs	r2, #0
 800af14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af18:	f7f5 fba6 	bl	8000668 <__aeabi_dmul>
 800af1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af20:	f7f5 fe28 	bl	8000b74 <__aeabi_dcmpge>
 800af24:	2800      	cmp	r0, #0
 800af26:	f000 8157 	beq.w	800b1d8 <_dtoa_r+0x938>
 800af2a:	2400      	movs	r4, #0
 800af2c:	4625      	mov	r5, r4
 800af2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af30:	43db      	mvns	r3, r3
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	4656      	mov	r6, sl
 800af36:	2700      	movs	r7, #0
 800af38:	4621      	mov	r1, r4
 800af3a:	4658      	mov	r0, fp
 800af3c:	f000 fbb4 	bl	800b6a8 <_Bfree>
 800af40:	2d00      	cmp	r5, #0
 800af42:	d0dc      	beq.n	800aefe <_dtoa_r+0x65e>
 800af44:	b12f      	cbz	r7, 800af52 <_dtoa_r+0x6b2>
 800af46:	42af      	cmp	r7, r5
 800af48:	d003      	beq.n	800af52 <_dtoa_r+0x6b2>
 800af4a:	4639      	mov	r1, r7
 800af4c:	4658      	mov	r0, fp
 800af4e:	f000 fbab 	bl	800b6a8 <_Bfree>
 800af52:	4629      	mov	r1, r5
 800af54:	4658      	mov	r0, fp
 800af56:	f000 fba7 	bl	800b6a8 <_Bfree>
 800af5a:	e7d0      	b.n	800aefe <_dtoa_r+0x65e>
 800af5c:	9704      	str	r7, [sp, #16]
 800af5e:	4633      	mov	r3, r6
 800af60:	461e      	mov	r6, r3
 800af62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af66:	2a39      	cmp	r2, #57	@ 0x39
 800af68:	d107      	bne.n	800af7a <_dtoa_r+0x6da>
 800af6a:	459a      	cmp	sl, r3
 800af6c:	d1f8      	bne.n	800af60 <_dtoa_r+0x6c0>
 800af6e:	9a04      	ldr	r2, [sp, #16]
 800af70:	3201      	adds	r2, #1
 800af72:	9204      	str	r2, [sp, #16]
 800af74:	2230      	movs	r2, #48	@ 0x30
 800af76:	f88a 2000 	strb.w	r2, [sl]
 800af7a:	781a      	ldrb	r2, [r3, #0]
 800af7c:	3201      	adds	r2, #1
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e7bd      	b.n	800aefe <_dtoa_r+0x65e>
 800af82:	4b7b      	ldr	r3, [pc, #492]	@ (800b170 <_dtoa_r+0x8d0>)
 800af84:	2200      	movs	r2, #0
 800af86:	f7f5 fb6f 	bl	8000668 <__aeabi_dmul>
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	f7f5 fdd1 	bl	8000b38 <__aeabi_dcmpeq>
 800af96:	2800      	cmp	r0, #0
 800af98:	f43f aebb 	beq.w	800ad12 <_dtoa_r+0x472>
 800af9c:	e6f0      	b.n	800ad80 <_dtoa_r+0x4e0>
 800af9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afa0:	2a00      	cmp	r2, #0
 800afa2:	f000 80db 	beq.w	800b15c <_dtoa_r+0x8bc>
 800afa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa8:	2a01      	cmp	r2, #1
 800afaa:	f300 80bf 	bgt.w	800b12c <_dtoa_r+0x88c>
 800afae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	f000 80b7 	beq.w	800b124 <_dtoa_r+0x884>
 800afb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afbc:	4646      	mov	r6, r8
 800afbe:	9a08      	ldr	r2, [sp, #32]
 800afc0:	2101      	movs	r1, #1
 800afc2:	441a      	add	r2, r3
 800afc4:	4658      	mov	r0, fp
 800afc6:	4498      	add	r8, r3
 800afc8:	9208      	str	r2, [sp, #32]
 800afca:	f000 fc21 	bl	800b810 <__i2b>
 800afce:	4605      	mov	r5, r0
 800afd0:	b15e      	cbz	r6, 800afea <_dtoa_r+0x74a>
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd08      	ble.n	800afea <_dtoa_r+0x74a>
 800afd8:	42b3      	cmp	r3, r6
 800afda:	9a08      	ldr	r2, [sp, #32]
 800afdc:	bfa8      	it	ge
 800afde:	4633      	movge	r3, r6
 800afe0:	eba8 0803 	sub.w	r8, r8, r3
 800afe4:	1af6      	subs	r6, r6, r3
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	9308      	str	r3, [sp, #32]
 800afea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afec:	b1f3      	cbz	r3, 800b02c <_dtoa_r+0x78c>
 800afee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 80b7 	beq.w	800b164 <_dtoa_r+0x8c4>
 800aff6:	b18c      	cbz	r4, 800b01c <_dtoa_r+0x77c>
 800aff8:	4629      	mov	r1, r5
 800affa:	4622      	mov	r2, r4
 800affc:	4658      	mov	r0, fp
 800affe:	f000 fcc7 	bl	800b990 <__pow5mult>
 800b002:	464a      	mov	r2, r9
 800b004:	4601      	mov	r1, r0
 800b006:	4605      	mov	r5, r0
 800b008:	4658      	mov	r0, fp
 800b00a:	f000 fc17 	bl	800b83c <__multiply>
 800b00e:	4649      	mov	r1, r9
 800b010:	9004      	str	r0, [sp, #16]
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fb48 	bl	800b6a8 <_Bfree>
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	4699      	mov	r9, r3
 800b01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b01e:	1b1a      	subs	r2, r3, r4
 800b020:	d004      	beq.n	800b02c <_dtoa_r+0x78c>
 800b022:	4649      	mov	r1, r9
 800b024:	4658      	mov	r0, fp
 800b026:	f000 fcb3 	bl	800b990 <__pow5mult>
 800b02a:	4681      	mov	r9, r0
 800b02c:	2101      	movs	r1, #1
 800b02e:	4658      	mov	r0, fp
 800b030:	f000 fbee 	bl	800b810 <__i2b>
 800b034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b036:	4604      	mov	r4, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 81cf 	beq.w	800b3dc <_dtoa_r+0xb3c>
 800b03e:	461a      	mov	r2, r3
 800b040:	4601      	mov	r1, r0
 800b042:	4658      	mov	r0, fp
 800b044:	f000 fca4 	bl	800b990 <__pow5mult>
 800b048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	4604      	mov	r4, r0
 800b04e:	f300 8095 	bgt.w	800b17c <_dtoa_r+0x8dc>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f040 8087 	bne.w	800b168 <_dtoa_r+0x8c8>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b060:	2b00      	cmp	r3, #0
 800b062:	f040 8089 	bne.w	800b178 <_dtoa_r+0x8d8>
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b06c:	0d1b      	lsrs	r3, r3, #20
 800b06e:	051b      	lsls	r3, r3, #20
 800b070:	b12b      	cbz	r3, 800b07e <_dtoa_r+0x7de>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	3301      	adds	r3, #1
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	f108 0801 	add.w	r8, r8, #1
 800b07c:	2301      	movs	r3, #1
 800b07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 81b0 	beq.w	800b3e8 <_dtoa_r+0xb48>
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b08e:	6918      	ldr	r0, [r3, #16]
 800b090:	f000 fb72 	bl	800b778 <__hi0bits>
 800b094:	f1c0 0020 	rsb	r0, r0, #32
 800b098:	9b08      	ldr	r3, [sp, #32]
 800b09a:	4418      	add	r0, r3
 800b09c:	f010 001f 	ands.w	r0, r0, #31
 800b0a0:	d077      	beq.n	800b192 <_dtoa_r+0x8f2>
 800b0a2:	f1c0 0320 	rsb	r3, r0, #32
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	dd6b      	ble.n	800b182 <_dtoa_r+0x8e2>
 800b0aa:	9b08      	ldr	r3, [sp, #32]
 800b0ac:	f1c0 001c 	rsb	r0, r0, #28
 800b0b0:	4403      	add	r3, r0
 800b0b2:	4480      	add	r8, r0
 800b0b4:	4406      	add	r6, r0
 800b0b6:	9308      	str	r3, [sp, #32]
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	dd05      	ble.n	800b0ca <_dtoa_r+0x82a>
 800b0be:	4649      	mov	r1, r9
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 fcbe 	bl	800ba44 <__lshift>
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd05      	ble.n	800b0dc <_dtoa_r+0x83c>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4658      	mov	r0, fp
 800b0d6:	f000 fcb5 	bl	800ba44 <__lshift>
 800b0da:	4604      	mov	r4, r0
 800b0dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d059      	beq.n	800b196 <_dtoa_r+0x8f6>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4648      	mov	r0, r9
 800b0e6:	f000 fd19 	bl	800bb1c <__mcmp>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	da53      	bge.n	800b196 <_dtoa_r+0x8f6>
 800b0ee:	1e7b      	subs	r3, r7, #1
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	220a      	movs	r2, #10
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	f000 faf7 	bl	800b6ec <__multadd>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b100:	4681      	mov	r9, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 8172 	beq.w	800b3ec <_dtoa_r+0xb4c>
 800b108:	2300      	movs	r3, #0
 800b10a:	4629      	mov	r1, r5
 800b10c:	220a      	movs	r2, #10
 800b10e:	4658      	mov	r0, fp
 800b110:	f000 faec 	bl	800b6ec <__multadd>
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	4605      	mov	r5, r0
 800b11a:	dc67      	bgt.n	800b1ec <_dtoa_r+0x94c>
 800b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11e:	2b02      	cmp	r3, #2
 800b120:	dc41      	bgt.n	800b1a6 <_dtoa_r+0x906>
 800b122:	e063      	b.n	800b1ec <_dtoa_r+0x94c>
 800b124:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b126:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b12a:	e746      	b.n	800afba <_dtoa_r+0x71a>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	1e5c      	subs	r4, r3, #1
 800b130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b132:	42a3      	cmp	r3, r4
 800b134:	bfbf      	itttt	lt
 800b136:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b138:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b13a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b13c:	1ae3      	sublt	r3, r4, r3
 800b13e:	bfb4      	ite	lt
 800b140:	18d2      	addlt	r2, r2, r3
 800b142:	1b1c      	subge	r4, r3, r4
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	bfbc      	itt	lt
 800b148:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b14a:	2400      	movlt	r4, #0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfb5      	itete	lt
 800b150:	eba8 0603 	sublt.w	r6, r8, r3
 800b154:	9b07      	ldrge	r3, [sp, #28]
 800b156:	2300      	movlt	r3, #0
 800b158:	4646      	movge	r6, r8
 800b15a:	e730      	b.n	800afbe <_dtoa_r+0x71e>
 800b15c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b15e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b160:	4646      	mov	r6, r8
 800b162:	e735      	b.n	800afd0 <_dtoa_r+0x730>
 800b164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b166:	e75c      	b.n	800b022 <_dtoa_r+0x782>
 800b168:	2300      	movs	r3, #0
 800b16a:	e788      	b.n	800b07e <_dtoa_r+0x7de>
 800b16c:	3fe00000 	.word	0x3fe00000
 800b170:	40240000 	.word	0x40240000
 800b174:	40140000 	.word	0x40140000
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	e780      	b.n	800b07e <_dtoa_r+0x7de>
 800b17c:	2300      	movs	r3, #0
 800b17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b180:	e782      	b.n	800b088 <_dtoa_r+0x7e8>
 800b182:	d099      	beq.n	800b0b8 <_dtoa_r+0x818>
 800b184:	9a08      	ldr	r2, [sp, #32]
 800b186:	331c      	adds	r3, #28
 800b188:	441a      	add	r2, r3
 800b18a:	4498      	add	r8, r3
 800b18c:	441e      	add	r6, r3
 800b18e:	9208      	str	r2, [sp, #32]
 800b190:	e792      	b.n	800b0b8 <_dtoa_r+0x818>
 800b192:	4603      	mov	r3, r0
 800b194:	e7f6      	b.n	800b184 <_dtoa_r+0x8e4>
 800b196:	9b07      	ldr	r3, [sp, #28]
 800b198:	9704      	str	r7, [sp, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc20      	bgt.n	800b1e0 <_dtoa_r+0x940>
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	dd1e      	ble.n	800b1e4 <_dtoa_r+0x944>
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f47f aec0 	bne.w	800af2e <_dtoa_r+0x68e>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	2205      	movs	r2, #5
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f000 fa9a 	bl	800b6ec <__multadd>
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4648      	mov	r0, r9
 800b1be:	f000 fcad 	bl	800bb1c <__mcmp>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f77f aeb3 	ble.w	800af2e <_dtoa_r+0x68e>
 800b1c8:	4656      	mov	r6, sl
 800b1ca:	2331      	movs	r3, #49	@ 0x31
 800b1cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	e6ae      	b.n	800af36 <_dtoa_r+0x696>
 800b1d8:	9c07      	ldr	r4, [sp, #28]
 800b1da:	9704      	str	r7, [sp, #16]
 800b1dc:	4625      	mov	r5, r4
 800b1de:	e7f3      	b.n	800b1c8 <_dtoa_r+0x928>
 800b1e0:	9b07      	ldr	r3, [sp, #28]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 8104 	beq.w	800b3f4 <_dtoa_r+0xb54>
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	dd05      	ble.n	800b1fc <_dtoa_r+0x95c>
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	f000 fc25 	bl	800ba44 <__lshift>
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d05a      	beq.n	800b2b8 <_dtoa_r+0xa18>
 800b202:	6869      	ldr	r1, [r5, #4]
 800b204:	4658      	mov	r0, fp
 800b206:	f000 fa0f 	bl	800b628 <_Balloc>
 800b20a:	4606      	mov	r6, r0
 800b20c:	b928      	cbnz	r0, 800b21a <_dtoa_r+0x97a>
 800b20e:	4b84      	ldr	r3, [pc, #528]	@ (800b420 <_dtoa_r+0xb80>)
 800b210:	4602      	mov	r2, r0
 800b212:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b216:	f7ff bb5a 	b.w	800a8ce <_dtoa_r+0x2e>
 800b21a:	692a      	ldr	r2, [r5, #16]
 800b21c:	3202      	adds	r2, #2
 800b21e:	0092      	lsls	r2, r2, #2
 800b220:	f105 010c 	add.w	r1, r5, #12
 800b224:	300c      	adds	r0, #12
 800b226:	f001 f833 	bl	800c290 <memcpy>
 800b22a:	2201      	movs	r2, #1
 800b22c:	4631      	mov	r1, r6
 800b22e:	4658      	mov	r0, fp
 800b230:	f000 fc08 	bl	800ba44 <__lshift>
 800b234:	f10a 0301 	add.w	r3, sl, #1
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	4453      	add	r3, sl
 800b23e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	462f      	mov	r7, r5
 800b248:	930a      	str	r3, [sp, #40]	@ 0x28
 800b24a:	4605      	mov	r5, r0
 800b24c:	9b07      	ldr	r3, [sp, #28]
 800b24e:	4621      	mov	r1, r4
 800b250:	3b01      	subs	r3, #1
 800b252:	4648      	mov	r0, r9
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	f7ff fa9a 	bl	800a78e <quorem>
 800b25a:	4639      	mov	r1, r7
 800b25c:	9002      	str	r0, [sp, #8]
 800b25e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fc5a 	bl	800bb1c <__mcmp>
 800b268:	462a      	mov	r2, r5
 800b26a:	9008      	str	r0, [sp, #32]
 800b26c:	4621      	mov	r1, r4
 800b26e:	4658      	mov	r0, fp
 800b270:	f000 fc70 	bl	800bb54 <__mdiff>
 800b274:	68c2      	ldr	r2, [r0, #12]
 800b276:	4606      	mov	r6, r0
 800b278:	bb02      	cbnz	r2, 800b2bc <_dtoa_r+0xa1c>
 800b27a:	4601      	mov	r1, r0
 800b27c:	4648      	mov	r0, r9
 800b27e:	f000 fc4d 	bl	800bb1c <__mcmp>
 800b282:	4602      	mov	r2, r0
 800b284:	4631      	mov	r1, r6
 800b286:	4658      	mov	r0, fp
 800b288:	920e      	str	r2, [sp, #56]	@ 0x38
 800b28a:	f000 fa0d 	bl	800b6a8 <_Bfree>
 800b28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b290:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b292:	9e07      	ldr	r6, [sp, #28]
 800b294:	ea43 0102 	orr.w	r1, r3, r2
 800b298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b29a:	4319      	orrs	r1, r3
 800b29c:	d110      	bne.n	800b2c0 <_dtoa_r+0xa20>
 800b29e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2a2:	d029      	beq.n	800b2f8 <_dtoa_r+0xa58>
 800b2a4:	9b08      	ldr	r3, [sp, #32]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	dd02      	ble.n	800b2b0 <_dtoa_r+0xa10>
 800b2aa:	9b02      	ldr	r3, [sp, #8]
 800b2ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	f883 8000 	strb.w	r8, [r3]
 800b2b6:	e63f      	b.n	800af38 <_dtoa_r+0x698>
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	e7bb      	b.n	800b234 <_dtoa_r+0x994>
 800b2bc:	2201      	movs	r2, #1
 800b2be:	e7e1      	b.n	800b284 <_dtoa_r+0x9e4>
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	db04      	blt.n	800b2d0 <_dtoa_r+0xa30>
 800b2c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2cc:	430b      	orrs	r3, r1
 800b2ce:	d120      	bne.n	800b312 <_dtoa_r+0xa72>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	dded      	ble.n	800b2b0 <_dtoa_r+0xa10>
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4658      	mov	r0, fp
 800b2da:	f000 fbb3 	bl	800ba44 <__lshift>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	f000 fc1b 	bl	800bb1c <__mcmp>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	dc03      	bgt.n	800b2f2 <_dtoa_r+0xa52>
 800b2ea:	d1e1      	bne.n	800b2b0 <_dtoa_r+0xa10>
 800b2ec:	f018 0f01 	tst.w	r8, #1
 800b2f0:	d0de      	beq.n	800b2b0 <_dtoa_r+0xa10>
 800b2f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2f6:	d1d8      	bne.n	800b2aa <_dtoa_r+0xa0a>
 800b2f8:	9a00      	ldr	r2, [sp, #0]
 800b2fa:	2339      	movs	r3, #57	@ 0x39
 800b2fc:	7013      	strb	r3, [r2, #0]
 800b2fe:	4633      	mov	r3, r6
 800b300:	461e      	mov	r6, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b308:	2a39      	cmp	r2, #57	@ 0x39
 800b30a:	d052      	beq.n	800b3b2 <_dtoa_r+0xb12>
 800b30c:	3201      	adds	r2, #1
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	e612      	b.n	800af38 <_dtoa_r+0x698>
 800b312:	2a00      	cmp	r2, #0
 800b314:	dd07      	ble.n	800b326 <_dtoa_r+0xa86>
 800b316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b31a:	d0ed      	beq.n	800b2f8 <_dtoa_r+0xa58>
 800b31c:	9a00      	ldr	r2, [sp, #0]
 800b31e:	f108 0301 	add.w	r3, r8, #1
 800b322:	7013      	strb	r3, [r2, #0]
 800b324:	e608      	b.n	800af38 <_dtoa_r+0x698>
 800b326:	9b07      	ldr	r3, [sp, #28]
 800b328:	9a07      	ldr	r2, [sp, #28]
 800b32a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b330:	4293      	cmp	r3, r2
 800b332:	d028      	beq.n	800b386 <_dtoa_r+0xae6>
 800b334:	4649      	mov	r1, r9
 800b336:	2300      	movs	r3, #0
 800b338:	220a      	movs	r2, #10
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 f9d6 	bl	800b6ec <__multadd>
 800b340:	42af      	cmp	r7, r5
 800b342:	4681      	mov	r9, r0
 800b344:	f04f 0300 	mov.w	r3, #0
 800b348:	f04f 020a 	mov.w	r2, #10
 800b34c:	4639      	mov	r1, r7
 800b34e:	4658      	mov	r0, fp
 800b350:	d107      	bne.n	800b362 <_dtoa_r+0xac2>
 800b352:	f000 f9cb 	bl	800b6ec <__multadd>
 800b356:	4607      	mov	r7, r0
 800b358:	4605      	mov	r5, r0
 800b35a:	9b07      	ldr	r3, [sp, #28]
 800b35c:	3301      	adds	r3, #1
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	e774      	b.n	800b24c <_dtoa_r+0x9ac>
 800b362:	f000 f9c3 	bl	800b6ec <__multadd>
 800b366:	4629      	mov	r1, r5
 800b368:	4607      	mov	r7, r0
 800b36a:	2300      	movs	r3, #0
 800b36c:	220a      	movs	r2, #10
 800b36e:	4658      	mov	r0, fp
 800b370:	f000 f9bc 	bl	800b6ec <__multadd>
 800b374:	4605      	mov	r5, r0
 800b376:	e7f0      	b.n	800b35a <_dtoa_r+0xaba>
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfcc      	ite	gt
 800b37e:	461e      	movgt	r6, r3
 800b380:	2601      	movle	r6, #1
 800b382:	4456      	add	r6, sl
 800b384:	2700      	movs	r7, #0
 800b386:	4649      	mov	r1, r9
 800b388:	2201      	movs	r2, #1
 800b38a:	4658      	mov	r0, fp
 800b38c:	f000 fb5a 	bl	800ba44 <__lshift>
 800b390:	4621      	mov	r1, r4
 800b392:	4681      	mov	r9, r0
 800b394:	f000 fbc2 	bl	800bb1c <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	dcb0      	bgt.n	800b2fe <_dtoa_r+0xa5e>
 800b39c:	d102      	bne.n	800b3a4 <_dtoa_r+0xb04>
 800b39e:	f018 0f01 	tst.w	r8, #1
 800b3a2:	d1ac      	bne.n	800b2fe <_dtoa_r+0xa5e>
 800b3a4:	4633      	mov	r3, r6
 800b3a6:	461e      	mov	r6, r3
 800b3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ac:	2a30      	cmp	r2, #48	@ 0x30
 800b3ae:	d0fa      	beq.n	800b3a6 <_dtoa_r+0xb06>
 800b3b0:	e5c2      	b.n	800af38 <_dtoa_r+0x698>
 800b3b2:	459a      	cmp	sl, r3
 800b3b4:	d1a4      	bne.n	800b300 <_dtoa_r+0xa60>
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	9304      	str	r3, [sp, #16]
 800b3bc:	2331      	movs	r3, #49	@ 0x31
 800b3be:	f88a 3000 	strb.w	r3, [sl]
 800b3c2:	e5b9      	b.n	800af38 <_dtoa_r+0x698>
 800b3c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b424 <_dtoa_r+0xb84>
 800b3ca:	b11b      	cbz	r3, 800b3d4 <_dtoa_r+0xb34>
 800b3cc:	f10a 0308 	add.w	r3, sl, #8
 800b3d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	b019      	add	sp, #100	@ 0x64
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	f77f ae37 	ble.w	800b052 <_dtoa_r+0x7b2>
 800b3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	e655      	b.n	800b098 <_dtoa_r+0x7f8>
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f77f aed6 	ble.w	800b1a0 <_dtoa_r+0x900>
 800b3f4:	4656      	mov	r6, sl
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4648      	mov	r0, r9
 800b3fa:	f7ff f9c8 	bl	800a78e <quorem>
 800b3fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b402:	f806 8b01 	strb.w	r8, [r6], #1
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	eba6 020a 	sub.w	r2, r6, sl
 800b40c:	4293      	cmp	r3, r2
 800b40e:	ddb3      	ble.n	800b378 <_dtoa_r+0xad8>
 800b410:	4649      	mov	r1, r9
 800b412:	2300      	movs	r3, #0
 800b414:	220a      	movs	r2, #10
 800b416:	4658      	mov	r0, fp
 800b418:	f000 f968 	bl	800b6ec <__multadd>
 800b41c:	4681      	mov	r9, r0
 800b41e:	e7ea      	b.n	800b3f6 <_dtoa_r+0xb56>
 800b420:	0800caa5 	.word	0x0800caa5
 800b424:	0800ca29 	.word	0x0800ca29

0800b428 <_free_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4605      	mov	r5, r0
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d041      	beq.n	800b4b4 <_free_r+0x8c>
 800b430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b434:	1f0c      	subs	r4, r1, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	bfb8      	it	lt
 800b43a:	18e4      	addlt	r4, r4, r3
 800b43c:	f000 f8e8 	bl	800b610 <__malloc_lock>
 800b440:	4a1d      	ldr	r2, [pc, #116]	@ (800b4b8 <_free_r+0x90>)
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	b933      	cbnz	r3, 800b454 <_free_r+0x2c>
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6014      	str	r4, [r2, #0]
 800b44a:	4628      	mov	r0, r5
 800b44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b450:	f000 b8e4 	b.w	800b61c <__malloc_unlock>
 800b454:	42a3      	cmp	r3, r4
 800b456:	d908      	bls.n	800b46a <_free_r+0x42>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	1821      	adds	r1, r4, r0
 800b45c:	428b      	cmp	r3, r1
 800b45e:	bf01      	itttt	eq
 800b460:	6819      	ldreq	r1, [r3, #0]
 800b462:	685b      	ldreq	r3, [r3, #4]
 800b464:	1809      	addeq	r1, r1, r0
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	e7ed      	b.n	800b446 <_free_r+0x1e>
 800b46a:	461a      	mov	r2, r3
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b10b      	cbz	r3, 800b474 <_free_r+0x4c>
 800b470:	42a3      	cmp	r3, r4
 800b472:	d9fa      	bls.n	800b46a <_free_r+0x42>
 800b474:	6811      	ldr	r1, [r2, #0]
 800b476:	1850      	adds	r0, r2, r1
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d10b      	bne.n	800b494 <_free_r+0x6c>
 800b47c:	6820      	ldr	r0, [r4, #0]
 800b47e:	4401      	add	r1, r0
 800b480:	1850      	adds	r0, r2, r1
 800b482:	4283      	cmp	r3, r0
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	d1e0      	bne.n	800b44a <_free_r+0x22>
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	4408      	add	r0, r1
 800b490:	6010      	str	r0, [r2, #0]
 800b492:	e7da      	b.n	800b44a <_free_r+0x22>
 800b494:	d902      	bls.n	800b49c <_free_r+0x74>
 800b496:	230c      	movs	r3, #12
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	e7d6      	b.n	800b44a <_free_r+0x22>
 800b49c:	6820      	ldr	r0, [r4, #0]
 800b49e:	1821      	adds	r1, r4, r0
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf04      	itt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	bf04      	itt	eq
 800b4ac:	1809      	addeq	r1, r1, r0
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	6054      	str	r4, [r2, #4]
 800b4b2:	e7ca      	b.n	800b44a <_free_r+0x22>
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000694 	.word	0x20000694

0800b4bc <malloc>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <malloc+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f000 b825 	b.w	800b510 <_malloc_r>
 800b4c6:	bf00      	nop
 800b4c8:	20000018 	.word	0x20000018

0800b4cc <sbrk_aligned>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b50c <sbrk_aligned+0x40>)
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	6831      	ldr	r1, [r6, #0]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b911      	cbnz	r1, 800b4de <sbrk_aligned+0x12>
 800b4d8:	f000 feca 	bl	800c270 <_sbrk_r>
 800b4dc:	6030      	str	r0, [r6, #0]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f000 fec5 	bl	800c270 <_sbrk_r>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d103      	bne.n	800b4f2 <sbrk_aligned+0x26>
 800b4ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	1cc4      	adds	r4, r0, #3
 800b4f4:	f024 0403 	bic.w	r4, r4, #3
 800b4f8:	42a0      	cmp	r0, r4
 800b4fa:	d0f8      	beq.n	800b4ee <sbrk_aligned+0x22>
 800b4fc:	1a21      	subs	r1, r4, r0
 800b4fe:	4628      	mov	r0, r5
 800b500:	f000 feb6 	bl	800c270 <_sbrk_r>
 800b504:	3001      	adds	r0, #1
 800b506:	d1f2      	bne.n	800b4ee <sbrk_aligned+0x22>
 800b508:	e7ef      	b.n	800b4ea <sbrk_aligned+0x1e>
 800b50a:	bf00      	nop
 800b50c:	20000690 	.word	0x20000690

0800b510 <_malloc_r>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	1ccd      	adds	r5, r1, #3
 800b516:	f025 0503 	bic.w	r5, r5, #3
 800b51a:	3508      	adds	r5, #8
 800b51c:	2d0c      	cmp	r5, #12
 800b51e:	bf38      	it	cc
 800b520:	250c      	movcc	r5, #12
 800b522:	2d00      	cmp	r5, #0
 800b524:	4606      	mov	r6, r0
 800b526:	db01      	blt.n	800b52c <_malloc_r+0x1c>
 800b528:	42a9      	cmp	r1, r5
 800b52a:	d904      	bls.n	800b536 <_malloc_r+0x26>
 800b52c:	230c      	movs	r3, #12
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	2000      	movs	r0, #0
 800b532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b60c <_malloc_r+0xfc>
 800b53a:	f000 f869 	bl	800b610 <__malloc_lock>
 800b53e:	f8d8 3000 	ldr.w	r3, [r8]
 800b542:	461c      	mov	r4, r3
 800b544:	bb44      	cbnz	r4, 800b598 <_malloc_r+0x88>
 800b546:	4629      	mov	r1, r5
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ffbf 	bl	800b4cc <sbrk_aligned>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	4604      	mov	r4, r0
 800b552:	d158      	bne.n	800b606 <_malloc_r+0xf6>
 800b554:	f8d8 4000 	ldr.w	r4, [r8]
 800b558:	4627      	mov	r7, r4
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d143      	bne.n	800b5e6 <_malloc_r+0xd6>
 800b55e:	2c00      	cmp	r4, #0
 800b560:	d04b      	beq.n	800b5fa <_malloc_r+0xea>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	4639      	mov	r1, r7
 800b566:	4630      	mov	r0, r6
 800b568:	eb04 0903 	add.w	r9, r4, r3
 800b56c:	f000 fe80 	bl	800c270 <_sbrk_r>
 800b570:	4581      	cmp	r9, r0
 800b572:	d142      	bne.n	800b5fa <_malloc_r+0xea>
 800b574:	6821      	ldr	r1, [r4, #0]
 800b576:	1a6d      	subs	r5, r5, r1
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa6 	bl	800b4cc <sbrk_aligned>
 800b580:	3001      	adds	r0, #1
 800b582:	d03a      	beq.n	800b5fa <_malloc_r+0xea>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	442b      	add	r3, r5
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	f8d8 3000 	ldr.w	r3, [r8]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	bb62      	cbnz	r2, 800b5ec <_malloc_r+0xdc>
 800b592:	f8c8 7000 	str.w	r7, [r8]
 800b596:	e00f      	b.n	800b5b8 <_malloc_r+0xa8>
 800b598:	6822      	ldr	r2, [r4, #0]
 800b59a:	1b52      	subs	r2, r2, r5
 800b59c:	d420      	bmi.n	800b5e0 <_malloc_r+0xd0>
 800b59e:	2a0b      	cmp	r2, #11
 800b5a0:	d917      	bls.n	800b5d2 <_malloc_r+0xc2>
 800b5a2:	1961      	adds	r1, r4, r5
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	6025      	str	r5, [r4, #0]
 800b5a8:	bf18      	it	ne
 800b5aa:	6059      	strne	r1, [r3, #4]
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	bf08      	it	eq
 800b5b0:	f8c8 1000 	streq.w	r1, [r8]
 800b5b4:	5162      	str	r2, [r4, r5]
 800b5b6:	604b      	str	r3, [r1, #4]
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f000 f82f 	bl	800b61c <__malloc_unlock>
 800b5be:	f104 000b 	add.w	r0, r4, #11
 800b5c2:	1d23      	adds	r3, r4, #4
 800b5c4:	f020 0007 	bic.w	r0, r0, #7
 800b5c8:	1ac2      	subs	r2, r0, r3
 800b5ca:	bf1c      	itt	ne
 800b5cc:	1a1b      	subne	r3, r3, r0
 800b5ce:	50a3      	strne	r3, [r4, r2]
 800b5d0:	e7af      	b.n	800b532 <_malloc_r+0x22>
 800b5d2:	6862      	ldr	r2, [r4, #4]
 800b5d4:	42a3      	cmp	r3, r4
 800b5d6:	bf0c      	ite	eq
 800b5d8:	f8c8 2000 	streq.w	r2, [r8]
 800b5dc:	605a      	strne	r2, [r3, #4]
 800b5de:	e7eb      	b.n	800b5b8 <_malloc_r+0xa8>
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	6864      	ldr	r4, [r4, #4]
 800b5e4:	e7ae      	b.n	800b544 <_malloc_r+0x34>
 800b5e6:	463c      	mov	r4, r7
 800b5e8:	687f      	ldr	r7, [r7, #4]
 800b5ea:	e7b6      	b.n	800b55a <_malloc_r+0x4a>
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	d1fb      	bne.n	800b5ec <_malloc_r+0xdc>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6053      	str	r3, [r2, #4]
 800b5f8:	e7de      	b.n	800b5b8 <_malloc_r+0xa8>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	6033      	str	r3, [r6, #0]
 800b5fe:	4630      	mov	r0, r6
 800b600:	f000 f80c 	bl	800b61c <__malloc_unlock>
 800b604:	e794      	b.n	800b530 <_malloc_r+0x20>
 800b606:	6005      	str	r5, [r0, #0]
 800b608:	e7d6      	b.n	800b5b8 <_malloc_r+0xa8>
 800b60a:	bf00      	nop
 800b60c:	20000694 	.word	0x20000694

0800b610 <__malloc_lock>:
 800b610:	4801      	ldr	r0, [pc, #4]	@ (800b618 <__malloc_lock+0x8>)
 800b612:	f7ff b8ba 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800b616:	bf00      	nop
 800b618:	2000068c 	.word	0x2000068c

0800b61c <__malloc_unlock>:
 800b61c:	4801      	ldr	r0, [pc, #4]	@ (800b624 <__malloc_unlock+0x8>)
 800b61e:	f7ff b8b5 	b.w	800a78c <__retarget_lock_release_recursive>
 800b622:	bf00      	nop
 800b624:	2000068c 	.word	0x2000068c

0800b628 <_Balloc>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	69c6      	ldr	r6, [r0, #28]
 800b62c:	4604      	mov	r4, r0
 800b62e:	460d      	mov	r5, r1
 800b630:	b976      	cbnz	r6, 800b650 <_Balloc+0x28>
 800b632:	2010      	movs	r0, #16
 800b634:	f7ff ff42 	bl	800b4bc <malloc>
 800b638:	4602      	mov	r2, r0
 800b63a:	61e0      	str	r0, [r4, #28]
 800b63c:	b920      	cbnz	r0, 800b648 <_Balloc+0x20>
 800b63e:	4b18      	ldr	r3, [pc, #96]	@ (800b6a0 <_Balloc+0x78>)
 800b640:	4818      	ldr	r0, [pc, #96]	@ (800b6a4 <_Balloc+0x7c>)
 800b642:	216b      	movs	r1, #107	@ 0x6b
 800b644:	f000 fe32 	bl	800c2ac <__assert_func>
 800b648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b64c:	6006      	str	r6, [r0, #0]
 800b64e:	60c6      	str	r6, [r0, #12]
 800b650:	69e6      	ldr	r6, [r4, #28]
 800b652:	68f3      	ldr	r3, [r6, #12]
 800b654:	b183      	cbz	r3, 800b678 <_Balloc+0x50>
 800b656:	69e3      	ldr	r3, [r4, #28]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b65e:	b9b8      	cbnz	r0, 800b690 <_Balloc+0x68>
 800b660:	2101      	movs	r1, #1
 800b662:	fa01 f605 	lsl.w	r6, r1, r5
 800b666:	1d72      	adds	r2, r6, #5
 800b668:	0092      	lsls	r2, r2, #2
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 fe3c 	bl	800c2e8 <_calloc_r>
 800b670:	b160      	cbz	r0, 800b68c <_Balloc+0x64>
 800b672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b676:	e00e      	b.n	800b696 <_Balloc+0x6e>
 800b678:	2221      	movs	r2, #33	@ 0x21
 800b67a:	2104      	movs	r1, #4
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 fe33 	bl	800c2e8 <_calloc_r>
 800b682:	69e3      	ldr	r3, [r4, #28]
 800b684:	60f0      	str	r0, [r6, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e4      	bne.n	800b656 <_Balloc+0x2e>
 800b68c:	2000      	movs	r0, #0
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	6802      	ldr	r2, [r0, #0]
 800b692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b696:	2300      	movs	r3, #0
 800b698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b69c:	e7f7      	b.n	800b68e <_Balloc+0x66>
 800b69e:	bf00      	nop
 800b6a0:	0800ca36 	.word	0x0800ca36
 800b6a4:	0800cab6 	.word	0x0800cab6

0800b6a8 <_Bfree>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	69c6      	ldr	r6, [r0, #28]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	b976      	cbnz	r6, 800b6d0 <_Bfree+0x28>
 800b6b2:	2010      	movs	r0, #16
 800b6b4:	f7ff ff02 	bl	800b4bc <malloc>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	61e8      	str	r0, [r5, #28]
 800b6bc:	b920      	cbnz	r0, 800b6c8 <_Bfree+0x20>
 800b6be:	4b09      	ldr	r3, [pc, #36]	@ (800b6e4 <_Bfree+0x3c>)
 800b6c0:	4809      	ldr	r0, [pc, #36]	@ (800b6e8 <_Bfree+0x40>)
 800b6c2:	218f      	movs	r1, #143	@ 0x8f
 800b6c4:	f000 fdf2 	bl	800c2ac <__assert_func>
 800b6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6cc:	6006      	str	r6, [r0, #0]
 800b6ce:	60c6      	str	r6, [r0, #12]
 800b6d0:	b13c      	cbz	r4, 800b6e2 <_Bfree+0x3a>
 800b6d2:	69eb      	ldr	r3, [r5, #28]
 800b6d4:	6862      	ldr	r2, [r4, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6dc:	6021      	str	r1, [r4, #0]
 800b6de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	0800ca36 	.word	0x0800ca36
 800b6e8:	0800cab6 	.word	0x0800cab6

0800b6ec <__multadd>:
 800b6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f0:	690d      	ldr	r5, [r1, #16]
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	461e      	mov	r6, r3
 800b6f8:	f101 0c14 	add.w	ip, r1, #20
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b702:	b299      	uxth	r1, r3
 800b704:	fb02 6101 	mla	r1, r2, r1, r6
 800b708:	0c1e      	lsrs	r6, r3, #16
 800b70a:	0c0b      	lsrs	r3, r1, #16
 800b70c:	fb02 3306 	mla	r3, r2, r6, r3
 800b710:	b289      	uxth	r1, r1
 800b712:	3001      	adds	r0, #1
 800b714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b718:	4285      	cmp	r5, r0
 800b71a:	f84c 1b04 	str.w	r1, [ip], #4
 800b71e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b722:	dcec      	bgt.n	800b6fe <__multadd+0x12>
 800b724:	b30e      	cbz	r6, 800b76a <__multadd+0x7e>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	42ab      	cmp	r3, r5
 800b72a:	dc19      	bgt.n	800b760 <__multadd+0x74>
 800b72c:	6861      	ldr	r1, [r4, #4]
 800b72e:	4638      	mov	r0, r7
 800b730:	3101      	adds	r1, #1
 800b732:	f7ff ff79 	bl	800b628 <_Balloc>
 800b736:	4680      	mov	r8, r0
 800b738:	b928      	cbnz	r0, 800b746 <__multadd+0x5a>
 800b73a:	4602      	mov	r2, r0
 800b73c:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <__multadd+0x84>)
 800b73e:	480d      	ldr	r0, [pc, #52]	@ (800b774 <__multadd+0x88>)
 800b740:	21ba      	movs	r1, #186	@ 0xba
 800b742:	f000 fdb3 	bl	800c2ac <__assert_func>
 800b746:	6922      	ldr	r2, [r4, #16]
 800b748:	3202      	adds	r2, #2
 800b74a:	f104 010c 	add.w	r1, r4, #12
 800b74e:	0092      	lsls	r2, r2, #2
 800b750:	300c      	adds	r0, #12
 800b752:	f000 fd9d 	bl	800c290 <memcpy>
 800b756:	4621      	mov	r1, r4
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ffa5 	bl	800b6a8 <_Bfree>
 800b75e:	4644      	mov	r4, r8
 800b760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b764:	3501      	adds	r5, #1
 800b766:	615e      	str	r6, [r3, #20]
 800b768:	6125      	str	r5, [r4, #16]
 800b76a:	4620      	mov	r0, r4
 800b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b770:	0800caa5 	.word	0x0800caa5
 800b774:	0800cab6 	.word	0x0800cab6

0800b778 <__hi0bits>:
 800b778:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b77c:	4603      	mov	r3, r0
 800b77e:	bf36      	itet	cc
 800b780:	0403      	lslcc	r3, r0, #16
 800b782:	2000      	movcs	r0, #0
 800b784:	2010      	movcc	r0, #16
 800b786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b78a:	bf3c      	itt	cc
 800b78c:	021b      	lslcc	r3, r3, #8
 800b78e:	3008      	addcc	r0, #8
 800b790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b794:	bf3c      	itt	cc
 800b796:	011b      	lslcc	r3, r3, #4
 800b798:	3004      	addcc	r0, #4
 800b79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b79e:	bf3c      	itt	cc
 800b7a0:	009b      	lslcc	r3, r3, #2
 800b7a2:	3002      	addcc	r0, #2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	db05      	blt.n	800b7b4 <__hi0bits+0x3c>
 800b7a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7ac:	f100 0001 	add.w	r0, r0, #1
 800b7b0:	bf08      	it	eq
 800b7b2:	2020      	moveq	r0, #32
 800b7b4:	4770      	bx	lr

0800b7b6 <__lo0bits>:
 800b7b6:	6803      	ldr	r3, [r0, #0]
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	f013 0007 	ands.w	r0, r3, #7
 800b7be:	d00b      	beq.n	800b7d8 <__lo0bits+0x22>
 800b7c0:	07d9      	lsls	r1, r3, #31
 800b7c2:	d421      	bmi.n	800b808 <__lo0bits+0x52>
 800b7c4:	0798      	lsls	r0, r3, #30
 800b7c6:	bf49      	itett	mi
 800b7c8:	085b      	lsrmi	r3, r3, #1
 800b7ca:	089b      	lsrpl	r3, r3, #2
 800b7cc:	2001      	movmi	r0, #1
 800b7ce:	6013      	strmi	r3, [r2, #0]
 800b7d0:	bf5c      	itt	pl
 800b7d2:	6013      	strpl	r3, [r2, #0]
 800b7d4:	2002      	movpl	r0, #2
 800b7d6:	4770      	bx	lr
 800b7d8:	b299      	uxth	r1, r3
 800b7da:	b909      	cbnz	r1, 800b7e0 <__lo0bits+0x2a>
 800b7dc:	0c1b      	lsrs	r3, r3, #16
 800b7de:	2010      	movs	r0, #16
 800b7e0:	b2d9      	uxtb	r1, r3
 800b7e2:	b909      	cbnz	r1, 800b7e8 <__lo0bits+0x32>
 800b7e4:	3008      	adds	r0, #8
 800b7e6:	0a1b      	lsrs	r3, r3, #8
 800b7e8:	0719      	lsls	r1, r3, #28
 800b7ea:	bf04      	itt	eq
 800b7ec:	091b      	lsreq	r3, r3, #4
 800b7ee:	3004      	addeq	r0, #4
 800b7f0:	0799      	lsls	r1, r3, #30
 800b7f2:	bf04      	itt	eq
 800b7f4:	089b      	lsreq	r3, r3, #2
 800b7f6:	3002      	addeq	r0, #2
 800b7f8:	07d9      	lsls	r1, r3, #31
 800b7fa:	d403      	bmi.n	800b804 <__lo0bits+0x4e>
 800b7fc:	085b      	lsrs	r3, r3, #1
 800b7fe:	f100 0001 	add.w	r0, r0, #1
 800b802:	d003      	beq.n	800b80c <__lo0bits+0x56>
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	4770      	bx	lr
 800b808:	2000      	movs	r0, #0
 800b80a:	4770      	bx	lr
 800b80c:	2020      	movs	r0, #32
 800b80e:	4770      	bx	lr

0800b810 <__i2b>:
 800b810:	b510      	push	{r4, lr}
 800b812:	460c      	mov	r4, r1
 800b814:	2101      	movs	r1, #1
 800b816:	f7ff ff07 	bl	800b628 <_Balloc>
 800b81a:	4602      	mov	r2, r0
 800b81c:	b928      	cbnz	r0, 800b82a <__i2b+0x1a>
 800b81e:	4b05      	ldr	r3, [pc, #20]	@ (800b834 <__i2b+0x24>)
 800b820:	4805      	ldr	r0, [pc, #20]	@ (800b838 <__i2b+0x28>)
 800b822:	f240 1145 	movw	r1, #325	@ 0x145
 800b826:	f000 fd41 	bl	800c2ac <__assert_func>
 800b82a:	2301      	movs	r3, #1
 800b82c:	6144      	str	r4, [r0, #20]
 800b82e:	6103      	str	r3, [r0, #16]
 800b830:	bd10      	pop	{r4, pc}
 800b832:	bf00      	nop
 800b834:	0800caa5 	.word	0x0800caa5
 800b838:	0800cab6 	.word	0x0800cab6

0800b83c <__multiply>:
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	4614      	mov	r4, r2
 800b842:	690a      	ldr	r2, [r1, #16]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	429a      	cmp	r2, r3
 800b848:	bfa8      	it	ge
 800b84a:	4623      	movge	r3, r4
 800b84c:	460f      	mov	r7, r1
 800b84e:	bfa4      	itt	ge
 800b850:	460c      	movge	r4, r1
 800b852:	461f      	movge	r7, r3
 800b854:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b858:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b85c:	68a3      	ldr	r3, [r4, #8]
 800b85e:	6861      	ldr	r1, [r4, #4]
 800b860:	eb0a 0609 	add.w	r6, sl, r9
 800b864:	42b3      	cmp	r3, r6
 800b866:	b085      	sub	sp, #20
 800b868:	bfb8      	it	lt
 800b86a:	3101      	addlt	r1, #1
 800b86c:	f7ff fedc 	bl	800b628 <_Balloc>
 800b870:	b930      	cbnz	r0, 800b880 <__multiply+0x44>
 800b872:	4602      	mov	r2, r0
 800b874:	4b44      	ldr	r3, [pc, #272]	@ (800b988 <__multiply+0x14c>)
 800b876:	4845      	ldr	r0, [pc, #276]	@ (800b98c <__multiply+0x150>)
 800b878:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b87c:	f000 fd16 	bl	800c2ac <__assert_func>
 800b880:	f100 0514 	add.w	r5, r0, #20
 800b884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b888:	462b      	mov	r3, r5
 800b88a:	2200      	movs	r2, #0
 800b88c:	4543      	cmp	r3, r8
 800b88e:	d321      	bcc.n	800b8d4 <__multiply+0x98>
 800b890:	f107 0114 	add.w	r1, r7, #20
 800b894:	f104 0214 	add.w	r2, r4, #20
 800b898:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b89c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b8a0:	9302      	str	r3, [sp, #8]
 800b8a2:	1b13      	subs	r3, r2, r4
 800b8a4:	3b15      	subs	r3, #21
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	f104 0715 	add.w	r7, r4, #21
 800b8b0:	42ba      	cmp	r2, r7
 800b8b2:	bf38      	it	cc
 800b8b4:	2304      	movcc	r3, #4
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	9103      	str	r1, [sp, #12]
 800b8bc:	428b      	cmp	r3, r1
 800b8be:	d80c      	bhi.n	800b8da <__multiply+0x9e>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	dd03      	ble.n	800b8cc <__multiply+0x90>
 800b8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d05b      	beq.n	800b984 <__multiply+0x148>
 800b8cc:	6106      	str	r6, [r0, #16]
 800b8ce:	b005      	add	sp, #20
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	f843 2b04 	str.w	r2, [r3], #4
 800b8d8:	e7d8      	b.n	800b88c <__multiply+0x50>
 800b8da:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8de:	f1ba 0f00 	cmp.w	sl, #0
 800b8e2:	d024      	beq.n	800b92e <__multiply+0xf2>
 800b8e4:	f104 0e14 	add.w	lr, r4, #20
 800b8e8:	46a9      	mov	r9, r5
 800b8ea:	f04f 0c00 	mov.w	ip, #0
 800b8ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8f2:	f8d9 3000 	ldr.w	r3, [r9]
 800b8f6:	fa1f fb87 	uxth.w	fp, r7
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b900:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b904:	f8d9 7000 	ldr.w	r7, [r9]
 800b908:	4463      	add	r3, ip
 800b90a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b90e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b912:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b916:	b29b      	uxth	r3, r3
 800b918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b91c:	4572      	cmp	r2, lr
 800b91e:	f849 3b04 	str.w	r3, [r9], #4
 800b922:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b926:	d8e2      	bhi.n	800b8ee <__multiply+0xb2>
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	f845 c003 	str.w	ip, [r5, r3]
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b934:	3104      	adds	r1, #4
 800b936:	f1b9 0f00 	cmp.w	r9, #0
 800b93a:	d021      	beq.n	800b980 <__multiply+0x144>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	f104 0c14 	add.w	ip, r4, #20
 800b942:	46ae      	mov	lr, r5
 800b944:	f04f 0a00 	mov.w	sl, #0
 800b948:	f8bc b000 	ldrh.w	fp, [ip]
 800b94c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b950:	fb09 770b 	mla	r7, r9, fp, r7
 800b954:	4457      	add	r7, sl
 800b956:	b29b      	uxth	r3, r3
 800b958:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b95c:	f84e 3b04 	str.w	r3, [lr], #4
 800b960:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b968:	f8be 3000 	ldrh.w	r3, [lr]
 800b96c:	fb09 330a 	mla	r3, r9, sl, r3
 800b970:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b974:	4562      	cmp	r2, ip
 800b976:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b97a:	d8e5      	bhi.n	800b948 <__multiply+0x10c>
 800b97c:	9f01      	ldr	r7, [sp, #4]
 800b97e:	51eb      	str	r3, [r5, r7]
 800b980:	3504      	adds	r5, #4
 800b982:	e799      	b.n	800b8b8 <__multiply+0x7c>
 800b984:	3e01      	subs	r6, #1
 800b986:	e79b      	b.n	800b8c0 <__multiply+0x84>
 800b988:	0800caa5 	.word	0x0800caa5
 800b98c:	0800cab6 	.word	0x0800cab6

0800b990 <__pow5mult>:
 800b990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b994:	4615      	mov	r5, r2
 800b996:	f012 0203 	ands.w	r2, r2, #3
 800b99a:	4607      	mov	r7, r0
 800b99c:	460e      	mov	r6, r1
 800b99e:	d007      	beq.n	800b9b0 <__pow5mult+0x20>
 800b9a0:	4c25      	ldr	r4, [pc, #148]	@ (800ba38 <__pow5mult+0xa8>)
 800b9a2:	3a01      	subs	r2, #1
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9aa:	f7ff fe9f 	bl	800b6ec <__multadd>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	10ad      	asrs	r5, r5, #2
 800b9b2:	d03d      	beq.n	800ba30 <__pow5mult+0xa0>
 800b9b4:	69fc      	ldr	r4, [r7, #28]
 800b9b6:	b97c      	cbnz	r4, 800b9d8 <__pow5mult+0x48>
 800b9b8:	2010      	movs	r0, #16
 800b9ba:	f7ff fd7f 	bl	800b4bc <malloc>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	61f8      	str	r0, [r7, #28]
 800b9c2:	b928      	cbnz	r0, 800b9d0 <__pow5mult+0x40>
 800b9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba3c <__pow5mult+0xac>)
 800b9c6:	481e      	ldr	r0, [pc, #120]	@ (800ba40 <__pow5mult+0xb0>)
 800b9c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9cc:	f000 fc6e 	bl	800c2ac <__assert_func>
 800b9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9d4:	6004      	str	r4, [r0, #0]
 800b9d6:	60c4      	str	r4, [r0, #12]
 800b9d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9e0:	b94c      	cbnz	r4, 800b9f6 <__pow5mult+0x66>
 800b9e2:	f240 2171 	movw	r1, #625	@ 0x271
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f7ff ff12 	bl	800b810 <__i2b>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	6003      	str	r3, [r0, #0]
 800b9f6:	f04f 0900 	mov.w	r9, #0
 800b9fa:	07eb      	lsls	r3, r5, #31
 800b9fc:	d50a      	bpl.n	800ba14 <__pow5mult+0x84>
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4622      	mov	r2, r4
 800ba02:	4638      	mov	r0, r7
 800ba04:	f7ff ff1a 	bl	800b83c <__multiply>
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7ff fe4b 	bl	800b6a8 <_Bfree>
 800ba12:	4646      	mov	r6, r8
 800ba14:	106d      	asrs	r5, r5, #1
 800ba16:	d00b      	beq.n	800ba30 <__pow5mult+0xa0>
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	b938      	cbnz	r0, 800ba2c <__pow5mult+0x9c>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4638      	mov	r0, r7
 800ba22:	f7ff ff0b 	bl	800b83c <__multiply>
 800ba26:	6020      	str	r0, [r4, #0]
 800ba28:	f8c0 9000 	str.w	r9, [r0]
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	e7e4      	b.n	800b9fa <__pow5mult+0x6a>
 800ba30:	4630      	mov	r0, r6
 800ba32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba36:	bf00      	nop
 800ba38:	0800cb10 	.word	0x0800cb10
 800ba3c:	0800ca36 	.word	0x0800ca36
 800ba40:	0800cab6 	.word	0x0800cab6

0800ba44 <__lshift>:
 800ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	460c      	mov	r4, r1
 800ba4a:	6849      	ldr	r1, [r1, #4]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	4607      	mov	r7, r0
 800ba56:	4691      	mov	r9, r2
 800ba58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba5c:	f108 0601 	add.w	r6, r8, #1
 800ba60:	42b3      	cmp	r3, r6
 800ba62:	db0b      	blt.n	800ba7c <__lshift+0x38>
 800ba64:	4638      	mov	r0, r7
 800ba66:	f7ff fddf 	bl	800b628 <_Balloc>
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	b948      	cbnz	r0, 800ba82 <__lshift+0x3e>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	4b28      	ldr	r3, [pc, #160]	@ (800bb14 <__lshift+0xd0>)
 800ba72:	4829      	ldr	r0, [pc, #164]	@ (800bb18 <__lshift+0xd4>)
 800ba74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba78:	f000 fc18 	bl	800c2ac <__assert_func>
 800ba7c:	3101      	adds	r1, #1
 800ba7e:	005b      	lsls	r3, r3, #1
 800ba80:	e7ee      	b.n	800ba60 <__lshift+0x1c>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f100 0114 	add.w	r1, r0, #20
 800ba88:	f100 0210 	add.w	r2, r0, #16
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	4553      	cmp	r3, sl
 800ba90:	db33      	blt.n	800bafa <__lshift+0xb6>
 800ba92:	6920      	ldr	r0, [r4, #16]
 800ba94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba98:	f104 0314 	add.w	r3, r4, #20
 800ba9c:	f019 091f 	ands.w	r9, r9, #31
 800baa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800baa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800baa8:	d02b      	beq.n	800bb02 <__lshift+0xbe>
 800baaa:	f1c9 0e20 	rsb	lr, r9, #32
 800baae:	468a      	mov	sl, r1
 800bab0:	2200      	movs	r2, #0
 800bab2:	6818      	ldr	r0, [r3, #0]
 800bab4:	fa00 f009 	lsl.w	r0, r0, r9
 800bab8:	4310      	orrs	r0, r2
 800baba:	f84a 0b04 	str.w	r0, [sl], #4
 800babe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bac2:	459c      	cmp	ip, r3
 800bac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bac8:	d8f3      	bhi.n	800bab2 <__lshift+0x6e>
 800baca:	ebac 0304 	sub.w	r3, ip, r4
 800bace:	3b15      	subs	r3, #21
 800bad0:	f023 0303 	bic.w	r3, r3, #3
 800bad4:	3304      	adds	r3, #4
 800bad6:	f104 0015 	add.w	r0, r4, #21
 800bada:	4584      	cmp	ip, r0
 800badc:	bf38      	it	cc
 800bade:	2304      	movcc	r3, #4
 800bae0:	50ca      	str	r2, [r1, r3]
 800bae2:	b10a      	cbz	r2, 800bae8 <__lshift+0xa4>
 800bae4:	f108 0602 	add.w	r6, r8, #2
 800bae8:	3e01      	subs	r6, #1
 800baea:	4638      	mov	r0, r7
 800baec:	612e      	str	r6, [r5, #16]
 800baee:	4621      	mov	r1, r4
 800baf0:	f7ff fdda 	bl	800b6a8 <_Bfree>
 800baf4:	4628      	mov	r0, r5
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bafe:	3301      	adds	r3, #1
 800bb00:	e7c5      	b.n	800ba8e <__lshift+0x4a>
 800bb02:	3904      	subs	r1, #4
 800bb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb08:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb0c:	459c      	cmp	ip, r3
 800bb0e:	d8f9      	bhi.n	800bb04 <__lshift+0xc0>
 800bb10:	e7ea      	b.n	800bae8 <__lshift+0xa4>
 800bb12:	bf00      	nop
 800bb14:	0800caa5 	.word	0x0800caa5
 800bb18:	0800cab6 	.word	0x0800cab6

0800bb1c <__mcmp>:
 800bb1c:	690a      	ldr	r2, [r1, #16]
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6900      	ldr	r0, [r0, #16]
 800bb22:	1a80      	subs	r0, r0, r2
 800bb24:	b530      	push	{r4, r5, lr}
 800bb26:	d10e      	bne.n	800bb46 <__mcmp+0x2a>
 800bb28:	3314      	adds	r3, #20
 800bb2a:	3114      	adds	r1, #20
 800bb2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb3c:	4295      	cmp	r5, r2
 800bb3e:	d003      	beq.n	800bb48 <__mcmp+0x2c>
 800bb40:	d205      	bcs.n	800bb4e <__mcmp+0x32>
 800bb42:	f04f 30ff 	mov.w	r0, #4294967295
 800bb46:	bd30      	pop	{r4, r5, pc}
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d3f3      	bcc.n	800bb34 <__mcmp+0x18>
 800bb4c:	e7fb      	b.n	800bb46 <__mcmp+0x2a>
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e7f9      	b.n	800bb46 <__mcmp+0x2a>
	...

0800bb54 <__mdiff>:
 800bb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	4689      	mov	r9, r1
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	4648      	mov	r0, r9
 800bb60:	4614      	mov	r4, r2
 800bb62:	f7ff ffdb 	bl	800bb1c <__mcmp>
 800bb66:	1e05      	subs	r5, r0, #0
 800bb68:	d112      	bne.n	800bb90 <__mdiff+0x3c>
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff fd5b 	bl	800b628 <_Balloc>
 800bb72:	4602      	mov	r2, r0
 800bb74:	b928      	cbnz	r0, 800bb82 <__mdiff+0x2e>
 800bb76:	4b3f      	ldr	r3, [pc, #252]	@ (800bc74 <__mdiff+0x120>)
 800bb78:	f240 2137 	movw	r1, #567	@ 0x237
 800bb7c:	483e      	ldr	r0, [pc, #248]	@ (800bc78 <__mdiff+0x124>)
 800bb7e:	f000 fb95 	bl	800c2ac <__assert_func>
 800bb82:	2301      	movs	r3, #1
 800bb84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb88:	4610      	mov	r0, r2
 800bb8a:	b003      	add	sp, #12
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	bfbc      	itt	lt
 800bb92:	464b      	movlt	r3, r9
 800bb94:	46a1      	movlt	r9, r4
 800bb96:	4630      	mov	r0, r6
 800bb98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb9c:	bfba      	itte	lt
 800bb9e:	461c      	movlt	r4, r3
 800bba0:	2501      	movlt	r5, #1
 800bba2:	2500      	movge	r5, #0
 800bba4:	f7ff fd40 	bl	800b628 <_Balloc>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	b918      	cbnz	r0, 800bbb4 <__mdiff+0x60>
 800bbac:	4b31      	ldr	r3, [pc, #196]	@ (800bc74 <__mdiff+0x120>)
 800bbae:	f240 2145 	movw	r1, #581	@ 0x245
 800bbb2:	e7e3      	b.n	800bb7c <__mdiff+0x28>
 800bbb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbb8:	6926      	ldr	r6, [r4, #16]
 800bbba:	60c5      	str	r5, [r0, #12]
 800bbbc:	f109 0310 	add.w	r3, r9, #16
 800bbc0:	f109 0514 	add.w	r5, r9, #20
 800bbc4:	f104 0e14 	add.w	lr, r4, #20
 800bbc8:	f100 0b14 	add.w	fp, r0, #20
 800bbcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	46d9      	mov	r9, fp
 800bbd8:	f04f 0c00 	mov.w	ip, #0
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bbe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	fa1f f38a 	uxth.w	r3, sl
 800bbec:	4619      	mov	r1, r3
 800bbee:	b283      	uxth	r3, r0
 800bbf0:	1acb      	subs	r3, r1, r3
 800bbf2:	0c00      	lsrs	r0, r0, #16
 800bbf4:	4463      	add	r3, ip
 800bbf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bbfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc04:	4576      	cmp	r6, lr
 800bc06:	f849 3b04 	str.w	r3, [r9], #4
 800bc0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc0e:	d8e5      	bhi.n	800bbdc <__mdiff+0x88>
 800bc10:	1b33      	subs	r3, r6, r4
 800bc12:	3b15      	subs	r3, #21
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	3415      	adds	r4, #21
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	42a6      	cmp	r6, r4
 800bc1e:	bf38      	it	cc
 800bc20:	2304      	movcc	r3, #4
 800bc22:	441d      	add	r5, r3
 800bc24:	445b      	add	r3, fp
 800bc26:	461e      	mov	r6, r3
 800bc28:	462c      	mov	r4, r5
 800bc2a:	4544      	cmp	r4, r8
 800bc2c:	d30e      	bcc.n	800bc4c <__mdiff+0xf8>
 800bc2e:	f108 0103 	add.w	r1, r8, #3
 800bc32:	1b49      	subs	r1, r1, r5
 800bc34:	f021 0103 	bic.w	r1, r1, #3
 800bc38:	3d03      	subs	r5, #3
 800bc3a:	45a8      	cmp	r8, r5
 800bc3c:	bf38      	it	cc
 800bc3e:	2100      	movcc	r1, #0
 800bc40:	440b      	add	r3, r1
 800bc42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc46:	b191      	cbz	r1, 800bc6e <__mdiff+0x11a>
 800bc48:	6117      	str	r7, [r2, #16]
 800bc4a:	e79d      	b.n	800bb88 <__mdiff+0x34>
 800bc4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc50:	46e6      	mov	lr, ip
 800bc52:	0c08      	lsrs	r0, r1, #16
 800bc54:	fa1c fc81 	uxtah	ip, ip, r1
 800bc58:	4471      	add	r1, lr
 800bc5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc5e:	b289      	uxth	r1, r1
 800bc60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc64:	f846 1b04 	str.w	r1, [r6], #4
 800bc68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc6c:	e7dd      	b.n	800bc2a <__mdiff+0xd6>
 800bc6e:	3f01      	subs	r7, #1
 800bc70:	e7e7      	b.n	800bc42 <__mdiff+0xee>
 800bc72:	bf00      	nop
 800bc74:	0800caa5 	.word	0x0800caa5
 800bc78:	0800cab6 	.word	0x0800cab6

0800bc7c <__d2b>:
 800bc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc80:	460f      	mov	r7, r1
 800bc82:	2101      	movs	r1, #1
 800bc84:	ec59 8b10 	vmov	r8, r9, d0
 800bc88:	4616      	mov	r6, r2
 800bc8a:	f7ff fccd 	bl	800b628 <_Balloc>
 800bc8e:	4604      	mov	r4, r0
 800bc90:	b930      	cbnz	r0, 800bca0 <__d2b+0x24>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b23      	ldr	r3, [pc, #140]	@ (800bd24 <__d2b+0xa8>)
 800bc96:	4824      	ldr	r0, [pc, #144]	@ (800bd28 <__d2b+0xac>)
 800bc98:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc9c:	f000 fb06 	bl	800c2ac <__assert_func>
 800bca0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bca8:	b10d      	cbz	r5, 800bcae <__d2b+0x32>
 800bcaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcae:	9301      	str	r3, [sp, #4]
 800bcb0:	f1b8 0300 	subs.w	r3, r8, #0
 800bcb4:	d023      	beq.n	800bcfe <__d2b+0x82>
 800bcb6:	4668      	mov	r0, sp
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	f7ff fd7c 	bl	800b7b6 <__lo0bits>
 800bcbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bcc2:	b1d0      	cbz	r0, 800bcfa <__d2b+0x7e>
 800bcc4:	f1c0 0320 	rsb	r3, r0, #32
 800bcc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bccc:	430b      	orrs	r3, r1
 800bcce:	40c2      	lsrs	r2, r0
 800bcd0:	6163      	str	r3, [r4, #20]
 800bcd2:	9201      	str	r2, [sp, #4]
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	61a3      	str	r3, [r4, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bf0c      	ite	eq
 800bcdc:	2201      	moveq	r2, #1
 800bcde:	2202      	movne	r2, #2
 800bce0:	6122      	str	r2, [r4, #16]
 800bce2:	b1a5      	cbz	r5, 800bd0e <__d2b+0x92>
 800bce4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bce8:	4405      	add	r5, r0
 800bcea:	603d      	str	r5, [r7, #0]
 800bcec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bcf0:	6030      	str	r0, [r6, #0]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	b003      	add	sp, #12
 800bcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	6161      	str	r1, [r4, #20]
 800bcfc:	e7ea      	b.n	800bcd4 <__d2b+0x58>
 800bcfe:	a801      	add	r0, sp, #4
 800bd00:	f7ff fd59 	bl	800b7b6 <__lo0bits>
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	6163      	str	r3, [r4, #20]
 800bd08:	3020      	adds	r0, #32
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	e7e8      	b.n	800bce0 <__d2b+0x64>
 800bd0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd16:	6038      	str	r0, [r7, #0]
 800bd18:	6918      	ldr	r0, [r3, #16]
 800bd1a:	f7ff fd2d 	bl	800b778 <__hi0bits>
 800bd1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd22:	e7e5      	b.n	800bcf0 <__d2b+0x74>
 800bd24:	0800caa5 	.word	0x0800caa5
 800bd28:	0800cab6 	.word	0x0800cab6

0800bd2c <__ssputs_r>:
 800bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	688e      	ldr	r6, [r1, #8]
 800bd32:	461f      	mov	r7, r3
 800bd34:	42be      	cmp	r6, r7
 800bd36:	680b      	ldr	r3, [r1, #0]
 800bd38:	4682      	mov	sl, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	4690      	mov	r8, r2
 800bd3e:	d82d      	bhi.n	800bd9c <__ssputs_r+0x70>
 800bd40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd48:	d026      	beq.n	800bd98 <__ssputs_r+0x6c>
 800bd4a:	6965      	ldr	r5, [r4, #20]
 800bd4c:	6909      	ldr	r1, [r1, #16]
 800bd4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd52:	eba3 0901 	sub.w	r9, r3, r1
 800bd56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd5a:	1c7b      	adds	r3, r7, #1
 800bd5c:	444b      	add	r3, r9
 800bd5e:	106d      	asrs	r5, r5, #1
 800bd60:	429d      	cmp	r5, r3
 800bd62:	bf38      	it	cc
 800bd64:	461d      	movcc	r5, r3
 800bd66:	0553      	lsls	r3, r2, #21
 800bd68:	d527      	bpl.n	800bdba <__ssputs_r+0x8e>
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f7ff fbd0 	bl	800b510 <_malloc_r>
 800bd70:	4606      	mov	r6, r0
 800bd72:	b360      	cbz	r0, 800bdce <__ssputs_r+0xa2>
 800bd74:	6921      	ldr	r1, [r4, #16]
 800bd76:	464a      	mov	r2, r9
 800bd78:	f000 fa8a 	bl	800c290 <memcpy>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	6126      	str	r6, [r4, #16]
 800bd8a:	6165      	str	r5, [r4, #20]
 800bd8c:	444e      	add	r6, r9
 800bd8e:	eba5 0509 	sub.w	r5, r5, r9
 800bd92:	6026      	str	r6, [r4, #0]
 800bd94:	60a5      	str	r5, [r4, #8]
 800bd96:	463e      	mov	r6, r7
 800bd98:	42be      	cmp	r6, r7
 800bd9a:	d900      	bls.n	800bd9e <__ssputs_r+0x72>
 800bd9c:	463e      	mov	r6, r7
 800bd9e:	6820      	ldr	r0, [r4, #0]
 800bda0:	4632      	mov	r2, r6
 800bda2:	4641      	mov	r1, r8
 800bda4:	f000 fa28 	bl	800c1f8 <memmove>
 800bda8:	68a3      	ldr	r3, [r4, #8]
 800bdaa:	1b9b      	subs	r3, r3, r6
 800bdac:	60a3      	str	r3, [r4, #8]
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	4433      	add	r3, r6
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdba:	462a      	mov	r2, r5
 800bdbc:	f000 faba 	bl	800c334 <_realloc_r>
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d1e0      	bne.n	800bd88 <__ssputs_r+0x5c>
 800bdc6:	6921      	ldr	r1, [r4, #16]
 800bdc8:	4650      	mov	r0, sl
 800bdca:	f7ff fb2d 	bl	800b428 <_free_r>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	f8ca 3000 	str.w	r3, [sl]
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdda:	81a3      	strh	r3, [r4, #12]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e7e9      	b.n	800bdb6 <__ssputs_r+0x8a>
	...

0800bde4 <_svfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	4698      	mov	r8, r3
 800bdea:	898b      	ldrh	r3, [r1, #12]
 800bdec:	061b      	lsls	r3, r3, #24
 800bdee:	b09d      	sub	sp, #116	@ 0x74
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	4614      	mov	r4, r2
 800bdf6:	d510      	bpl.n	800be1a <_svfiprintf_r+0x36>
 800bdf8:	690b      	ldr	r3, [r1, #16]
 800bdfa:	b973      	cbnz	r3, 800be1a <_svfiprintf_r+0x36>
 800bdfc:	2140      	movs	r1, #64	@ 0x40
 800bdfe:	f7ff fb87 	bl	800b510 <_malloc_r>
 800be02:	6028      	str	r0, [r5, #0]
 800be04:	6128      	str	r0, [r5, #16]
 800be06:	b930      	cbnz	r0, 800be16 <_svfiprintf_r+0x32>
 800be08:	230c      	movs	r3, #12
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	b01d      	add	sp, #116	@ 0x74
 800be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be16:	2340      	movs	r3, #64	@ 0x40
 800be18:	616b      	str	r3, [r5, #20]
 800be1a:	2300      	movs	r3, #0
 800be1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be1e:	2320      	movs	r3, #32
 800be20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be24:	f8cd 800c 	str.w	r8, [sp, #12]
 800be28:	2330      	movs	r3, #48	@ 0x30
 800be2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfc8 <_svfiprintf_r+0x1e4>
 800be2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be32:	f04f 0901 	mov.w	r9, #1
 800be36:	4623      	mov	r3, r4
 800be38:	469a      	mov	sl, r3
 800be3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be3e:	b10a      	cbz	r2, 800be44 <_svfiprintf_r+0x60>
 800be40:	2a25      	cmp	r2, #37	@ 0x25
 800be42:	d1f9      	bne.n	800be38 <_svfiprintf_r+0x54>
 800be44:	ebba 0b04 	subs.w	fp, sl, r4
 800be48:	d00b      	beq.n	800be62 <_svfiprintf_r+0x7e>
 800be4a:	465b      	mov	r3, fp
 800be4c:	4622      	mov	r2, r4
 800be4e:	4629      	mov	r1, r5
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff ff6b 	bl	800bd2c <__ssputs_r>
 800be56:	3001      	adds	r0, #1
 800be58:	f000 80a7 	beq.w	800bfaa <_svfiprintf_r+0x1c6>
 800be5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be5e:	445a      	add	r2, fp
 800be60:	9209      	str	r2, [sp, #36]	@ 0x24
 800be62:	f89a 3000 	ldrb.w	r3, [sl]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 809f 	beq.w	800bfaa <_svfiprintf_r+0x1c6>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be76:	f10a 0a01 	add.w	sl, sl, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	9307      	str	r3, [sp, #28]
 800be7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be82:	931a      	str	r3, [sp, #104]	@ 0x68
 800be84:	4654      	mov	r4, sl
 800be86:	2205      	movs	r2, #5
 800be88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8c:	484e      	ldr	r0, [pc, #312]	@ (800bfc8 <_svfiprintf_r+0x1e4>)
 800be8e:	f7f4 f9d7 	bl	8000240 <memchr>
 800be92:	9a04      	ldr	r2, [sp, #16]
 800be94:	b9d8      	cbnz	r0, 800bece <_svfiprintf_r+0xea>
 800be96:	06d0      	lsls	r0, r2, #27
 800be98:	bf44      	itt	mi
 800be9a:	2320      	movmi	r3, #32
 800be9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bea0:	0711      	lsls	r1, r2, #28
 800bea2:	bf44      	itt	mi
 800bea4:	232b      	movmi	r3, #43	@ 0x2b
 800bea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beaa:	f89a 3000 	ldrb.w	r3, [sl]
 800beae:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb0:	d015      	beq.n	800bede <_svfiprintf_r+0xfa>
 800beb2:	9a07      	ldr	r2, [sp, #28]
 800beb4:	4654      	mov	r4, sl
 800beb6:	2000      	movs	r0, #0
 800beb8:	f04f 0c0a 	mov.w	ip, #10
 800bebc:	4621      	mov	r1, r4
 800bebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec2:	3b30      	subs	r3, #48	@ 0x30
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	d94b      	bls.n	800bf60 <_svfiprintf_r+0x17c>
 800bec8:	b1b0      	cbz	r0, 800bef8 <_svfiprintf_r+0x114>
 800beca:	9207      	str	r2, [sp, #28]
 800becc:	e014      	b.n	800bef8 <_svfiprintf_r+0x114>
 800bece:	eba0 0308 	sub.w	r3, r0, r8
 800bed2:	fa09 f303 	lsl.w	r3, r9, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	46a2      	mov	sl, r4
 800bedc:	e7d2      	b.n	800be84 <_svfiprintf_r+0xa0>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	1d19      	adds	r1, r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	9103      	str	r1, [sp, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfbb      	ittet	lt
 800beea:	425b      	neglt	r3, r3
 800beec:	f042 0202 	orrlt.w	r2, r2, #2
 800bef0:	9307      	strge	r3, [sp, #28]
 800bef2:	9307      	strlt	r3, [sp, #28]
 800bef4:	bfb8      	it	lt
 800bef6:	9204      	strlt	r2, [sp, #16]
 800bef8:	7823      	ldrb	r3, [r4, #0]
 800befa:	2b2e      	cmp	r3, #46	@ 0x2e
 800befc:	d10a      	bne.n	800bf14 <_svfiprintf_r+0x130>
 800befe:	7863      	ldrb	r3, [r4, #1]
 800bf00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf02:	d132      	bne.n	800bf6a <_svfiprintf_r+0x186>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d1a      	adds	r2, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9203      	str	r2, [sp, #12]
 800bf0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf10:	3402      	adds	r4, #2
 800bf12:	9305      	str	r3, [sp, #20]
 800bf14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfd8 <_svfiprintf_r+0x1f4>
 800bf18:	7821      	ldrb	r1, [r4, #0]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	4650      	mov	r0, sl
 800bf1e:	f7f4 f98f 	bl	8000240 <memchr>
 800bf22:	b138      	cbz	r0, 800bf34 <_svfiprintf_r+0x150>
 800bf24:	9b04      	ldr	r3, [sp, #16]
 800bf26:	eba0 000a 	sub.w	r0, r0, sl
 800bf2a:	2240      	movs	r2, #64	@ 0x40
 800bf2c:	4082      	lsls	r2, r0
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	3401      	adds	r4, #1
 800bf32:	9304      	str	r3, [sp, #16]
 800bf34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf38:	4824      	ldr	r0, [pc, #144]	@ (800bfcc <_svfiprintf_r+0x1e8>)
 800bf3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf3e:	2206      	movs	r2, #6
 800bf40:	f7f4 f97e 	bl	8000240 <memchr>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d036      	beq.n	800bfb6 <_svfiprintf_r+0x1d2>
 800bf48:	4b21      	ldr	r3, [pc, #132]	@ (800bfd0 <_svfiprintf_r+0x1ec>)
 800bf4a:	bb1b      	cbnz	r3, 800bf94 <_svfiprintf_r+0x1b0>
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	3307      	adds	r3, #7
 800bf50:	f023 0307 	bic.w	r3, r3, #7
 800bf54:	3308      	adds	r3, #8
 800bf56:	9303      	str	r3, [sp, #12]
 800bf58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5a:	4433      	add	r3, r6
 800bf5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf5e:	e76a      	b.n	800be36 <_svfiprintf_r+0x52>
 800bf60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf64:	460c      	mov	r4, r1
 800bf66:	2001      	movs	r0, #1
 800bf68:	e7a8      	b.n	800bebc <_svfiprintf_r+0xd8>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	3401      	adds	r4, #1
 800bf6e:	9305      	str	r3, [sp, #20]
 800bf70:	4619      	mov	r1, r3
 800bf72:	f04f 0c0a 	mov.w	ip, #10
 800bf76:	4620      	mov	r0, r4
 800bf78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7c:	3a30      	subs	r2, #48	@ 0x30
 800bf7e:	2a09      	cmp	r2, #9
 800bf80:	d903      	bls.n	800bf8a <_svfiprintf_r+0x1a6>
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0c6      	beq.n	800bf14 <_svfiprintf_r+0x130>
 800bf86:	9105      	str	r1, [sp, #20]
 800bf88:	e7c4      	b.n	800bf14 <_svfiprintf_r+0x130>
 800bf8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf8e:	4604      	mov	r4, r0
 800bf90:	2301      	movs	r3, #1
 800bf92:	e7f0      	b.n	800bf76 <_svfiprintf_r+0x192>
 800bf94:	ab03      	add	r3, sp, #12
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	462a      	mov	r2, r5
 800bf9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfd4 <_svfiprintf_r+0x1f0>)
 800bf9c:	a904      	add	r1, sp, #16
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f7fd fd80 	bl	8009aa4 <_printf_float>
 800bfa4:	1c42      	adds	r2, r0, #1
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	d1d6      	bne.n	800bf58 <_svfiprintf_r+0x174>
 800bfaa:	89ab      	ldrh	r3, [r5, #12]
 800bfac:	065b      	lsls	r3, r3, #25
 800bfae:	f53f af2d 	bmi.w	800be0c <_svfiprintf_r+0x28>
 800bfb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfb4:	e72c      	b.n	800be10 <_svfiprintf_r+0x2c>
 800bfb6:	ab03      	add	r3, sp, #12
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	462a      	mov	r2, r5
 800bfbc:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <_svfiprintf_r+0x1f0>)
 800bfbe:	a904      	add	r1, sp, #16
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	f7fe f807 	bl	8009fd4 <_printf_i>
 800bfc6:	e7ed      	b.n	800bfa4 <_svfiprintf_r+0x1c0>
 800bfc8:	0800cc10 	.word	0x0800cc10
 800bfcc:	0800cc1a 	.word	0x0800cc1a
 800bfd0:	08009aa5 	.word	0x08009aa5
 800bfd4:	0800bd2d 	.word	0x0800bd2d
 800bfd8:	0800cc16 	.word	0x0800cc16

0800bfdc <__sflush_r>:
 800bfdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe4:	0716      	lsls	r6, r2, #28
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	460c      	mov	r4, r1
 800bfea:	d454      	bmi.n	800c096 <__sflush_r+0xba>
 800bfec:	684b      	ldr	r3, [r1, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	dc02      	bgt.n	800bff8 <__sflush_r+0x1c>
 800bff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd48      	ble.n	800c08a <__sflush_r+0xae>
 800bff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bffa:	2e00      	cmp	r6, #0
 800bffc:	d045      	beq.n	800c08a <__sflush_r+0xae>
 800bffe:	2300      	movs	r3, #0
 800c000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c004:	682f      	ldr	r7, [r5, #0]
 800c006:	6a21      	ldr	r1, [r4, #32]
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	d030      	beq.n	800c06e <__sflush_r+0x92>
 800c00c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	0759      	lsls	r1, r3, #29
 800c012:	d505      	bpl.n	800c020 <__sflush_r+0x44>
 800c014:	6863      	ldr	r3, [r4, #4]
 800c016:	1ad2      	subs	r2, r2, r3
 800c018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c01a:	b10b      	cbz	r3, 800c020 <__sflush_r+0x44>
 800c01c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c01e:	1ad2      	subs	r2, r2, r3
 800c020:	2300      	movs	r3, #0
 800c022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c024:	6a21      	ldr	r1, [r4, #32]
 800c026:	4628      	mov	r0, r5
 800c028:	47b0      	blx	r6
 800c02a:	1c43      	adds	r3, r0, #1
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	d106      	bne.n	800c03e <__sflush_r+0x62>
 800c030:	6829      	ldr	r1, [r5, #0]
 800c032:	291d      	cmp	r1, #29
 800c034:	d82b      	bhi.n	800c08e <__sflush_r+0xb2>
 800c036:	4a2a      	ldr	r2, [pc, #168]	@ (800c0e0 <__sflush_r+0x104>)
 800c038:	410a      	asrs	r2, r1
 800c03a:	07d6      	lsls	r6, r2, #31
 800c03c:	d427      	bmi.n	800c08e <__sflush_r+0xb2>
 800c03e:	2200      	movs	r2, #0
 800c040:	6062      	str	r2, [r4, #4]
 800c042:	04d9      	lsls	r1, r3, #19
 800c044:	6922      	ldr	r2, [r4, #16]
 800c046:	6022      	str	r2, [r4, #0]
 800c048:	d504      	bpl.n	800c054 <__sflush_r+0x78>
 800c04a:	1c42      	adds	r2, r0, #1
 800c04c:	d101      	bne.n	800c052 <__sflush_r+0x76>
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	b903      	cbnz	r3, 800c054 <__sflush_r+0x78>
 800c052:	6560      	str	r0, [r4, #84]	@ 0x54
 800c054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c056:	602f      	str	r7, [r5, #0]
 800c058:	b1b9      	cbz	r1, 800c08a <__sflush_r+0xae>
 800c05a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c05e:	4299      	cmp	r1, r3
 800c060:	d002      	beq.n	800c068 <__sflush_r+0x8c>
 800c062:	4628      	mov	r0, r5
 800c064:	f7ff f9e0 	bl	800b428 <_free_r>
 800c068:	2300      	movs	r3, #0
 800c06a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c06c:	e00d      	b.n	800c08a <__sflush_r+0xae>
 800c06e:	2301      	movs	r3, #1
 800c070:	4628      	mov	r0, r5
 800c072:	47b0      	blx	r6
 800c074:	4602      	mov	r2, r0
 800c076:	1c50      	adds	r0, r2, #1
 800c078:	d1c9      	bne.n	800c00e <__sflush_r+0x32>
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0c6      	beq.n	800c00e <__sflush_r+0x32>
 800c080:	2b1d      	cmp	r3, #29
 800c082:	d001      	beq.n	800c088 <__sflush_r+0xac>
 800c084:	2b16      	cmp	r3, #22
 800c086:	d11e      	bne.n	800c0c6 <__sflush_r+0xea>
 800c088:	602f      	str	r7, [r5, #0]
 800c08a:	2000      	movs	r0, #0
 800c08c:	e022      	b.n	800c0d4 <__sflush_r+0xf8>
 800c08e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c092:	b21b      	sxth	r3, r3
 800c094:	e01b      	b.n	800c0ce <__sflush_r+0xf2>
 800c096:	690f      	ldr	r7, [r1, #16]
 800c098:	2f00      	cmp	r7, #0
 800c09a:	d0f6      	beq.n	800c08a <__sflush_r+0xae>
 800c09c:	0793      	lsls	r3, r2, #30
 800c09e:	680e      	ldr	r6, [r1, #0]
 800c0a0:	bf08      	it	eq
 800c0a2:	694b      	ldreq	r3, [r1, #20]
 800c0a4:	600f      	str	r7, [r1, #0]
 800c0a6:	bf18      	it	ne
 800c0a8:	2300      	movne	r3, #0
 800c0aa:	eba6 0807 	sub.w	r8, r6, r7
 800c0ae:	608b      	str	r3, [r1, #8]
 800c0b0:	f1b8 0f00 	cmp.w	r8, #0
 800c0b4:	dde9      	ble.n	800c08a <__sflush_r+0xae>
 800c0b6:	6a21      	ldr	r1, [r4, #32]
 800c0b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0ba:	4643      	mov	r3, r8
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b0      	blx	r6
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	dc08      	bgt.n	800c0d8 <__sflush_r+0xfc>
 800c0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ce:	81a3      	strh	r3, [r4, #12]
 800c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	4407      	add	r7, r0
 800c0da:	eba8 0800 	sub.w	r8, r8, r0
 800c0de:	e7e7      	b.n	800c0b0 <__sflush_r+0xd4>
 800c0e0:	dfbffffe 	.word	0xdfbffffe

0800c0e4 <_fflush_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	690b      	ldr	r3, [r1, #16]
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	b913      	cbnz	r3, 800c0f4 <_fflush_r+0x10>
 800c0ee:	2500      	movs	r5, #0
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
 800c0f4:	b118      	cbz	r0, 800c0fe <_fflush_r+0x1a>
 800c0f6:	6a03      	ldr	r3, [r0, #32]
 800c0f8:	b90b      	cbnz	r3, 800c0fe <_fflush_r+0x1a>
 800c0fa:	f7fe f917 	bl	800a32c <__sinit>
 800c0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0f3      	beq.n	800c0ee <_fflush_r+0xa>
 800c106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c108:	07d0      	lsls	r0, r2, #31
 800c10a:	d404      	bmi.n	800c116 <_fflush_r+0x32>
 800c10c:	0599      	lsls	r1, r3, #22
 800c10e:	d402      	bmi.n	800c116 <_fflush_r+0x32>
 800c110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c112:	f7fe fb3a 	bl	800a78a <__retarget_lock_acquire_recursive>
 800c116:	4628      	mov	r0, r5
 800c118:	4621      	mov	r1, r4
 800c11a:	f7ff ff5f 	bl	800bfdc <__sflush_r>
 800c11e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c120:	07da      	lsls	r2, r3, #31
 800c122:	4605      	mov	r5, r0
 800c124:	d4e4      	bmi.n	800c0f0 <_fflush_r+0xc>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	059b      	lsls	r3, r3, #22
 800c12a:	d4e1      	bmi.n	800c0f0 <_fflush_r+0xc>
 800c12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c12e:	f7fe fb2d 	bl	800a78c <__retarget_lock_release_recursive>
 800c132:	e7dd      	b.n	800c0f0 <_fflush_r+0xc>

0800c134 <__swhatbuf_r>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	460c      	mov	r4, r1
 800c138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13c:	2900      	cmp	r1, #0
 800c13e:	b096      	sub	sp, #88	@ 0x58
 800c140:	4615      	mov	r5, r2
 800c142:	461e      	mov	r6, r3
 800c144:	da0d      	bge.n	800c162 <__swhatbuf_r+0x2e>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c14c:	f04f 0100 	mov.w	r1, #0
 800c150:	bf14      	ite	ne
 800c152:	2340      	movne	r3, #64	@ 0x40
 800c154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c158:	2000      	movs	r0, #0
 800c15a:	6031      	str	r1, [r6, #0]
 800c15c:	602b      	str	r3, [r5, #0]
 800c15e:	b016      	add	sp, #88	@ 0x58
 800c160:	bd70      	pop	{r4, r5, r6, pc}
 800c162:	466a      	mov	r2, sp
 800c164:	f000 f862 	bl	800c22c <_fstat_r>
 800c168:	2800      	cmp	r0, #0
 800c16a:	dbec      	blt.n	800c146 <__swhatbuf_r+0x12>
 800c16c:	9901      	ldr	r1, [sp, #4]
 800c16e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c176:	4259      	negs	r1, r3
 800c178:	4159      	adcs	r1, r3
 800c17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c17e:	e7eb      	b.n	800c158 <__swhatbuf_r+0x24>

0800c180 <__smakebuf_r>:
 800c180:	898b      	ldrh	r3, [r1, #12]
 800c182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c184:	079d      	lsls	r5, r3, #30
 800c186:	4606      	mov	r6, r0
 800c188:	460c      	mov	r4, r1
 800c18a:	d507      	bpl.n	800c19c <__smakebuf_r+0x1c>
 800c18c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	6123      	str	r3, [r4, #16]
 800c194:	2301      	movs	r3, #1
 800c196:	6163      	str	r3, [r4, #20]
 800c198:	b003      	add	sp, #12
 800c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19c:	ab01      	add	r3, sp, #4
 800c19e:	466a      	mov	r2, sp
 800c1a0:	f7ff ffc8 	bl	800c134 <__swhatbuf_r>
 800c1a4:	9f00      	ldr	r7, [sp, #0]
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	4639      	mov	r1, r7
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff f9b0 	bl	800b510 <_malloc_r>
 800c1b0:	b948      	cbnz	r0, 800c1c6 <__smakebuf_r+0x46>
 800c1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1b6:	059a      	lsls	r2, r3, #22
 800c1b8:	d4ee      	bmi.n	800c198 <__smakebuf_r+0x18>
 800c1ba:	f023 0303 	bic.w	r3, r3, #3
 800c1be:	f043 0302 	orr.w	r3, r3, #2
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	e7e2      	b.n	800c18c <__smakebuf_r+0xc>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	6020      	str	r0, [r4, #0]
 800c1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	9b01      	ldr	r3, [sp, #4]
 800c1d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1d6:	b15b      	cbz	r3, 800c1f0 <__smakebuf_r+0x70>
 800c1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f000 f837 	bl	800c250 <_isatty_r>
 800c1e2:	b128      	cbz	r0, 800c1f0 <__smakebuf_r+0x70>
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	f023 0303 	bic.w	r3, r3, #3
 800c1ea:	f043 0301 	orr.w	r3, r3, #1
 800c1ee:	81a3      	strh	r3, [r4, #12]
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	431d      	orrs	r5, r3
 800c1f4:	81a5      	strh	r5, [r4, #12]
 800c1f6:	e7cf      	b.n	800c198 <__smakebuf_r+0x18>

0800c1f8 <memmove>:
 800c1f8:	4288      	cmp	r0, r1
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	eb01 0402 	add.w	r4, r1, r2
 800c200:	d902      	bls.n	800c208 <memmove+0x10>
 800c202:	4284      	cmp	r4, r0
 800c204:	4623      	mov	r3, r4
 800c206:	d807      	bhi.n	800c218 <memmove+0x20>
 800c208:	1e43      	subs	r3, r0, #1
 800c20a:	42a1      	cmp	r1, r4
 800c20c:	d008      	beq.n	800c220 <memmove+0x28>
 800c20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c216:	e7f8      	b.n	800c20a <memmove+0x12>
 800c218:	4402      	add	r2, r0
 800c21a:	4601      	mov	r1, r0
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d100      	bne.n	800c222 <memmove+0x2a>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22a:	e7f7      	b.n	800c21c <memmove+0x24>

0800c22c <_fstat_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	@ (800c24c <_fstat_r+0x20>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	4611      	mov	r1, r2
 800c238:	602b      	str	r3, [r5, #0]
 800c23a:	f7f5 fd7b 	bl	8001d34 <_fstat>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	d102      	bne.n	800c248 <_fstat_r+0x1c>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b103      	cbz	r3, 800c248 <_fstat_r+0x1c>
 800c246:	6023      	str	r3, [r4, #0]
 800c248:	bd38      	pop	{r3, r4, r5, pc}
 800c24a:	bf00      	nop
 800c24c:	20000688 	.word	0x20000688

0800c250 <_isatty_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d06      	ldr	r5, [pc, #24]	@ (800c26c <_isatty_r+0x1c>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7f5 fd7a 	bl	8001d54 <_isatty>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_isatty_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_isatty_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20000688 	.word	0x20000688

0800c270 <_sbrk_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d06      	ldr	r5, [pc, #24]	@ (800c28c <_sbrk_r+0x1c>)
 800c274:	2300      	movs	r3, #0
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	602b      	str	r3, [r5, #0]
 800c27c:	f7f5 fd82 	bl	8001d84 <_sbrk>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_sbrk_r+0x1a>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	b103      	cbz	r3, 800c28a <_sbrk_r+0x1a>
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20000688 	.word	0x20000688

0800c290 <memcpy>:
 800c290:	440a      	add	r2, r1
 800c292:	4291      	cmp	r1, r2
 800c294:	f100 33ff 	add.w	r3, r0, #4294967295
 800c298:	d100      	bne.n	800c29c <memcpy+0xc>
 800c29a:	4770      	bx	lr
 800c29c:	b510      	push	{r4, lr}
 800c29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2a6:	4291      	cmp	r1, r2
 800c2a8:	d1f9      	bne.n	800c29e <memcpy+0xe>
 800c2aa:	bd10      	pop	{r4, pc}

0800c2ac <__assert_func>:
 800c2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ae:	4614      	mov	r4, r2
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4b09      	ldr	r3, [pc, #36]	@ (800c2d8 <__assert_func+0x2c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	68d8      	ldr	r0, [r3, #12]
 800c2ba:	b954      	cbnz	r4, 800c2d2 <__assert_func+0x26>
 800c2bc:	4b07      	ldr	r3, [pc, #28]	@ (800c2dc <__assert_func+0x30>)
 800c2be:	461c      	mov	r4, r3
 800c2c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2c4:	9100      	str	r1, [sp, #0]
 800c2c6:	462b      	mov	r3, r5
 800c2c8:	4905      	ldr	r1, [pc, #20]	@ (800c2e0 <__assert_func+0x34>)
 800c2ca:	f000 f86f 	bl	800c3ac <fiprintf>
 800c2ce:	f000 f87f 	bl	800c3d0 <abort>
 800c2d2:	4b04      	ldr	r3, [pc, #16]	@ (800c2e4 <__assert_func+0x38>)
 800c2d4:	e7f4      	b.n	800c2c0 <__assert_func+0x14>
 800c2d6:	bf00      	nop
 800c2d8:	20000018 	.word	0x20000018
 800c2dc:	0800cc66 	.word	0x0800cc66
 800c2e0:	0800cc38 	.word	0x0800cc38
 800c2e4:	0800cc2b 	.word	0x0800cc2b

0800c2e8 <_calloc_r>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	fba1 5402 	umull	r5, r4, r1, r2
 800c2ee:	b93c      	cbnz	r4, 800c300 <_calloc_r+0x18>
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7ff f90d 	bl	800b510 <_malloc_r>
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	b928      	cbnz	r0, 800c306 <_calloc_r+0x1e>
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	220c      	movs	r2, #12
 800c302:	6002      	str	r2, [r0, #0]
 800c304:	e7f9      	b.n	800c2fa <_calloc_r+0x12>
 800c306:	462a      	mov	r2, r5
 800c308:	4621      	mov	r1, r4
 800c30a:	f7fe f9af 	bl	800a66c <memset>
 800c30e:	e7f5      	b.n	800c2fc <_calloc_r+0x14>

0800c310 <__ascii_mbtowc>:
 800c310:	b082      	sub	sp, #8
 800c312:	b901      	cbnz	r1, 800c316 <__ascii_mbtowc+0x6>
 800c314:	a901      	add	r1, sp, #4
 800c316:	b142      	cbz	r2, 800c32a <__ascii_mbtowc+0x1a>
 800c318:	b14b      	cbz	r3, 800c32e <__ascii_mbtowc+0x1e>
 800c31a:	7813      	ldrb	r3, [r2, #0]
 800c31c:	600b      	str	r3, [r1, #0]
 800c31e:	7812      	ldrb	r2, [r2, #0]
 800c320:	1e10      	subs	r0, r2, #0
 800c322:	bf18      	it	ne
 800c324:	2001      	movne	r0, #1
 800c326:	b002      	add	sp, #8
 800c328:	4770      	bx	lr
 800c32a:	4610      	mov	r0, r2
 800c32c:	e7fb      	b.n	800c326 <__ascii_mbtowc+0x16>
 800c32e:	f06f 0001 	mvn.w	r0, #1
 800c332:	e7f8      	b.n	800c326 <__ascii_mbtowc+0x16>

0800c334 <_realloc_r>:
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	4680      	mov	r8, r0
 800c33a:	4615      	mov	r5, r2
 800c33c:	460c      	mov	r4, r1
 800c33e:	b921      	cbnz	r1, 800c34a <_realloc_r+0x16>
 800c340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	4611      	mov	r1, r2
 800c346:	f7ff b8e3 	b.w	800b510 <_malloc_r>
 800c34a:	b92a      	cbnz	r2, 800c358 <_realloc_r+0x24>
 800c34c:	f7ff f86c 	bl	800b428 <_free_r>
 800c350:	2400      	movs	r4, #0
 800c352:	4620      	mov	r0, r4
 800c354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c358:	f000 f841 	bl	800c3de <_malloc_usable_size_r>
 800c35c:	4285      	cmp	r5, r0
 800c35e:	4606      	mov	r6, r0
 800c360:	d802      	bhi.n	800c368 <_realloc_r+0x34>
 800c362:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c366:	d8f4      	bhi.n	800c352 <_realloc_r+0x1e>
 800c368:	4629      	mov	r1, r5
 800c36a:	4640      	mov	r0, r8
 800c36c:	f7ff f8d0 	bl	800b510 <_malloc_r>
 800c370:	4607      	mov	r7, r0
 800c372:	2800      	cmp	r0, #0
 800c374:	d0ec      	beq.n	800c350 <_realloc_r+0x1c>
 800c376:	42b5      	cmp	r5, r6
 800c378:	462a      	mov	r2, r5
 800c37a:	4621      	mov	r1, r4
 800c37c:	bf28      	it	cs
 800c37e:	4632      	movcs	r2, r6
 800c380:	f7ff ff86 	bl	800c290 <memcpy>
 800c384:	4621      	mov	r1, r4
 800c386:	4640      	mov	r0, r8
 800c388:	f7ff f84e 	bl	800b428 <_free_r>
 800c38c:	463c      	mov	r4, r7
 800c38e:	e7e0      	b.n	800c352 <_realloc_r+0x1e>

0800c390 <__ascii_wctomb>:
 800c390:	4603      	mov	r3, r0
 800c392:	4608      	mov	r0, r1
 800c394:	b141      	cbz	r1, 800c3a8 <__ascii_wctomb+0x18>
 800c396:	2aff      	cmp	r2, #255	@ 0xff
 800c398:	d904      	bls.n	800c3a4 <__ascii_wctomb+0x14>
 800c39a:	228a      	movs	r2, #138	@ 0x8a
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a2:	4770      	bx	lr
 800c3a4:	700a      	strb	r2, [r1, #0]
 800c3a6:	2001      	movs	r0, #1
 800c3a8:	4770      	bx	lr
	...

0800c3ac <fiprintf>:
 800c3ac:	b40e      	push	{r1, r2, r3}
 800c3ae:	b503      	push	{r0, r1, lr}
 800c3b0:	4601      	mov	r1, r0
 800c3b2:	ab03      	add	r3, sp, #12
 800c3b4:	4805      	ldr	r0, [pc, #20]	@ (800c3cc <fiprintf+0x20>)
 800c3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	f000 f83f 	bl	800c440 <_vfiprintf_r>
 800c3c2:	b002      	add	sp, #8
 800c3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c8:	b003      	add	sp, #12
 800c3ca:	4770      	bx	lr
 800c3cc:	20000018 	.word	0x20000018

0800c3d0 <abort>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2006      	movs	r0, #6
 800c3d4:	f000 f974 	bl	800c6c0 <raise>
 800c3d8:	2001      	movs	r0, #1
 800c3da:	f7f5 fc5b 	bl	8001c94 <_exit>

0800c3de <_malloc_usable_size_r>:
 800c3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e2:	1f18      	subs	r0, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfbc      	itt	lt
 800c3e8:	580b      	ldrlt	r3, [r1, r0]
 800c3ea:	18c0      	addlt	r0, r0, r3
 800c3ec:	4770      	bx	lr

0800c3ee <__sfputc_r>:
 800c3ee:	6893      	ldr	r3, [r2, #8]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	b410      	push	{r4}
 800c3f6:	6093      	str	r3, [r2, #8]
 800c3f8:	da08      	bge.n	800c40c <__sfputc_r+0x1e>
 800c3fa:	6994      	ldr	r4, [r2, #24]
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	db01      	blt.n	800c404 <__sfputc_r+0x16>
 800c400:	290a      	cmp	r1, #10
 800c402:	d103      	bne.n	800c40c <__sfputc_r+0x1e>
 800c404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c408:	f7fe b89b 	b.w	800a542 <__swbuf_r>
 800c40c:	6813      	ldr	r3, [r2, #0]
 800c40e:	1c58      	adds	r0, r3, #1
 800c410:	6010      	str	r0, [r2, #0]
 800c412:	7019      	strb	r1, [r3, #0]
 800c414:	4608      	mov	r0, r1
 800c416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <__sfputs_r>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	4614      	mov	r4, r2
 800c424:	18d5      	adds	r5, r2, r3
 800c426:	42ac      	cmp	r4, r5
 800c428:	d101      	bne.n	800c42e <__sfputs_r+0x12>
 800c42a:	2000      	movs	r0, #0
 800c42c:	e007      	b.n	800c43e <__sfputs_r+0x22>
 800c42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c432:	463a      	mov	r2, r7
 800c434:	4630      	mov	r0, r6
 800c436:	f7ff ffda 	bl	800c3ee <__sfputc_r>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d1f3      	bne.n	800c426 <__sfputs_r+0xa>
 800c43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c440 <_vfiprintf_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	460d      	mov	r5, r1
 800c446:	b09d      	sub	sp, #116	@ 0x74
 800c448:	4614      	mov	r4, r2
 800c44a:	4698      	mov	r8, r3
 800c44c:	4606      	mov	r6, r0
 800c44e:	b118      	cbz	r0, 800c458 <_vfiprintf_r+0x18>
 800c450:	6a03      	ldr	r3, [r0, #32]
 800c452:	b90b      	cbnz	r3, 800c458 <_vfiprintf_r+0x18>
 800c454:	f7fd ff6a 	bl	800a32c <__sinit>
 800c458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c466:	f7fe f990 	bl	800a78a <__retarget_lock_acquire_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	071b      	lsls	r3, r3, #28
 800c46e:	d501      	bpl.n	800c474 <_vfiprintf_r+0x34>
 800c470:	692b      	ldr	r3, [r5, #16]
 800c472:	b99b      	cbnz	r3, 800c49c <_vfiprintf_r+0x5c>
 800c474:	4629      	mov	r1, r5
 800c476:	4630      	mov	r0, r6
 800c478:	f7fe f8a2 	bl	800a5c0 <__swsetup_r>
 800c47c:	b170      	cbz	r0, 800c49c <_vfiprintf_r+0x5c>
 800c47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c480:	07dc      	lsls	r4, r3, #31
 800c482:	d504      	bpl.n	800c48e <_vfiprintf_r+0x4e>
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b01d      	add	sp, #116	@ 0x74
 800c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	0598      	lsls	r0, r3, #22
 800c492:	d4f7      	bmi.n	800c484 <_vfiprintf_r+0x44>
 800c494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c496:	f7fe f979 	bl	800a78c <__retarget_lock_release_recursive>
 800c49a:	e7f3      	b.n	800c484 <_vfiprintf_r+0x44>
 800c49c:	2300      	movs	r3, #0
 800c49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4aa:	2330      	movs	r3, #48	@ 0x30
 800c4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c65c <_vfiprintf_r+0x21c>
 800c4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4b4:	f04f 0901 	mov.w	r9, #1
 800c4b8:	4623      	mov	r3, r4
 800c4ba:	469a      	mov	sl, r3
 800c4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c0:	b10a      	cbz	r2, 800c4c6 <_vfiprintf_r+0x86>
 800c4c2:	2a25      	cmp	r2, #37	@ 0x25
 800c4c4:	d1f9      	bne.n	800c4ba <_vfiprintf_r+0x7a>
 800c4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ca:	d00b      	beq.n	800c4e4 <_vfiprintf_r+0xa4>
 800c4cc:	465b      	mov	r3, fp
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ffa2 	bl	800c41c <__sfputs_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	f000 80a7 	beq.w	800c62c <_vfiprintf_r+0x1ec>
 800c4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e0:	445a      	add	r2, fp
 800c4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 809f 	beq.w	800c62c <_vfiprintf_r+0x1ec>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f8:	f10a 0a01 	add.w	sl, sl, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c504:	931a      	str	r3, [sp, #104]	@ 0x68
 800c506:	4654      	mov	r4, sl
 800c508:	2205      	movs	r2, #5
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	4853      	ldr	r0, [pc, #332]	@ (800c65c <_vfiprintf_r+0x21c>)
 800c510:	f7f3 fe96 	bl	8000240 <memchr>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	b9d8      	cbnz	r0, 800c550 <_vfiprintf_r+0x110>
 800c518:	06d1      	lsls	r1, r2, #27
 800c51a:	bf44      	itt	mi
 800c51c:	2320      	movmi	r3, #32
 800c51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c522:	0713      	lsls	r3, r2, #28
 800c524:	bf44      	itt	mi
 800c526:	232b      	movmi	r3, #43	@ 0x2b
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c52c:	f89a 3000 	ldrb.w	r3, [sl]
 800c530:	2b2a      	cmp	r3, #42	@ 0x2a
 800c532:	d015      	beq.n	800c560 <_vfiprintf_r+0x120>
 800c534:	9a07      	ldr	r2, [sp, #28]
 800c536:	4654      	mov	r4, sl
 800c538:	2000      	movs	r0, #0
 800c53a:	f04f 0c0a 	mov.w	ip, #10
 800c53e:	4621      	mov	r1, r4
 800c540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c544:	3b30      	subs	r3, #48	@ 0x30
 800c546:	2b09      	cmp	r3, #9
 800c548:	d94b      	bls.n	800c5e2 <_vfiprintf_r+0x1a2>
 800c54a:	b1b0      	cbz	r0, 800c57a <_vfiprintf_r+0x13a>
 800c54c:	9207      	str	r2, [sp, #28]
 800c54e:	e014      	b.n	800c57a <_vfiprintf_r+0x13a>
 800c550:	eba0 0308 	sub.w	r3, r0, r8
 800c554:	fa09 f303 	lsl.w	r3, r9, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	46a2      	mov	sl, r4
 800c55e:	e7d2      	b.n	800c506 <_vfiprintf_r+0xc6>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	1d19      	adds	r1, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbb      	ittet	lt
 800c56c:	425b      	neglt	r3, r3
 800c56e:	f042 0202 	orrlt.w	r2, r2, #2
 800c572:	9307      	strge	r3, [sp, #28]
 800c574:	9307      	strlt	r3, [sp, #28]
 800c576:	bfb8      	it	lt
 800c578:	9204      	strlt	r2, [sp, #16]
 800c57a:	7823      	ldrb	r3, [r4, #0]
 800c57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c57e:	d10a      	bne.n	800c596 <_vfiprintf_r+0x156>
 800c580:	7863      	ldrb	r3, [r4, #1]
 800c582:	2b2a      	cmp	r3, #42	@ 0x2a
 800c584:	d132      	bne.n	800c5ec <_vfiprintf_r+0x1ac>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9203      	str	r2, [sp, #12]
 800c58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c592:	3402      	adds	r4, #2
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c66c <_vfiprintf_r+0x22c>
 800c59a:	7821      	ldrb	r1, [r4, #0]
 800c59c:	2203      	movs	r2, #3
 800c59e:	4650      	mov	r0, sl
 800c5a0:	f7f3 fe4e 	bl	8000240 <memchr>
 800c5a4:	b138      	cbz	r0, 800c5b6 <_vfiprintf_r+0x176>
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	eba0 000a 	sub.w	r0, r0, sl
 800c5ac:	2240      	movs	r2, #64	@ 0x40
 800c5ae:	4082      	lsls	r2, r0
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	3401      	adds	r4, #1
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ba:	4829      	ldr	r0, [pc, #164]	@ (800c660 <_vfiprintf_r+0x220>)
 800c5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5c0:	2206      	movs	r2, #6
 800c5c2:	f7f3 fe3d 	bl	8000240 <memchr>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d03f      	beq.n	800c64a <_vfiprintf_r+0x20a>
 800c5ca:	4b26      	ldr	r3, [pc, #152]	@ (800c664 <_vfiprintf_r+0x224>)
 800c5cc:	bb1b      	cbnz	r3, 800c616 <_vfiprintf_r+0x1d6>
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	3307      	adds	r3, #7
 800c5d2:	f023 0307 	bic.w	r3, r3, #7
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5dc:	443b      	add	r3, r7
 800c5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e0:	e76a      	b.n	800c4b8 <_vfiprintf_r+0x78>
 800c5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	e7a8      	b.n	800c53e <_vfiprintf_r+0xfe>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	3401      	adds	r4, #1
 800c5f0:	9305      	str	r3, [sp, #20]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f04f 0c0a 	mov.w	ip, #10
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5fe:	3a30      	subs	r2, #48	@ 0x30
 800c600:	2a09      	cmp	r2, #9
 800c602:	d903      	bls.n	800c60c <_vfiprintf_r+0x1cc>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0c6      	beq.n	800c596 <_vfiprintf_r+0x156>
 800c608:	9105      	str	r1, [sp, #20]
 800c60a:	e7c4      	b.n	800c596 <_vfiprintf_r+0x156>
 800c60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c610:	4604      	mov	r4, r0
 800c612:	2301      	movs	r3, #1
 800c614:	e7f0      	b.n	800c5f8 <_vfiprintf_r+0x1b8>
 800c616:	ab03      	add	r3, sp, #12
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	462a      	mov	r2, r5
 800c61c:	4b12      	ldr	r3, [pc, #72]	@ (800c668 <_vfiprintf_r+0x228>)
 800c61e:	a904      	add	r1, sp, #16
 800c620:	4630      	mov	r0, r6
 800c622:	f7fd fa3f 	bl	8009aa4 <_printf_float>
 800c626:	4607      	mov	r7, r0
 800c628:	1c78      	adds	r0, r7, #1
 800c62a:	d1d6      	bne.n	800c5da <_vfiprintf_r+0x19a>
 800c62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c62e:	07d9      	lsls	r1, r3, #31
 800c630:	d405      	bmi.n	800c63e <_vfiprintf_r+0x1fe>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	059a      	lsls	r2, r3, #22
 800c636:	d402      	bmi.n	800c63e <_vfiprintf_r+0x1fe>
 800c638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63a:	f7fe f8a7 	bl	800a78c <__retarget_lock_release_recursive>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	065b      	lsls	r3, r3, #25
 800c642:	f53f af1f 	bmi.w	800c484 <_vfiprintf_r+0x44>
 800c646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c648:	e71e      	b.n	800c488 <_vfiprintf_r+0x48>
 800c64a:	ab03      	add	r3, sp, #12
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	462a      	mov	r2, r5
 800c650:	4b05      	ldr	r3, [pc, #20]	@ (800c668 <_vfiprintf_r+0x228>)
 800c652:	a904      	add	r1, sp, #16
 800c654:	4630      	mov	r0, r6
 800c656:	f7fd fcbd 	bl	8009fd4 <_printf_i>
 800c65a:	e7e4      	b.n	800c626 <_vfiprintf_r+0x1e6>
 800c65c:	0800cc10 	.word	0x0800cc10
 800c660:	0800cc1a 	.word	0x0800cc1a
 800c664:	08009aa5 	.word	0x08009aa5
 800c668:	0800c41d 	.word	0x0800c41d
 800c66c:	0800cc16 	.word	0x0800cc16

0800c670 <_raise_r>:
 800c670:	291f      	cmp	r1, #31
 800c672:	b538      	push	{r3, r4, r5, lr}
 800c674:	4605      	mov	r5, r0
 800c676:	460c      	mov	r4, r1
 800c678:	d904      	bls.n	800c684 <_raise_r+0x14>
 800c67a:	2316      	movs	r3, #22
 800c67c:	6003      	str	r3, [r0, #0]
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c686:	b112      	cbz	r2, 800c68e <_raise_r+0x1e>
 800c688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c68c:	b94b      	cbnz	r3, 800c6a2 <_raise_r+0x32>
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 f830 	bl	800c6f4 <_getpid_r>
 800c694:	4622      	mov	r2, r4
 800c696:	4601      	mov	r1, r0
 800c698:	4628      	mov	r0, r5
 800c69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c69e:	f000 b817 	b.w	800c6d0 <_kill_r>
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d00a      	beq.n	800c6bc <_raise_r+0x4c>
 800c6a6:	1c59      	adds	r1, r3, #1
 800c6a8:	d103      	bne.n	800c6b2 <_raise_r+0x42>
 800c6aa:	2316      	movs	r3, #22
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	e7e7      	b.n	800c682 <_raise_r+0x12>
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4798      	blx	r3
 800c6bc:	2000      	movs	r0, #0
 800c6be:	e7e0      	b.n	800c682 <_raise_r+0x12>

0800c6c0 <raise>:
 800c6c0:	4b02      	ldr	r3, [pc, #8]	@ (800c6cc <raise+0xc>)
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f7ff bfd3 	b.w	800c670 <_raise_r>
 800c6ca:	bf00      	nop
 800c6cc:	20000018 	.word	0x20000018

0800c6d0 <_kill_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d07      	ldr	r5, [pc, #28]	@ (800c6f0 <_kill_r+0x20>)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	4611      	mov	r1, r2
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	f7f5 fac9 	bl	8001c74 <_kill>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	d102      	bne.n	800c6ec <_kill_r+0x1c>
 800c6e6:	682b      	ldr	r3, [r5, #0]
 800c6e8:	b103      	cbz	r3, 800c6ec <_kill_r+0x1c>
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000688 	.word	0x20000688

0800c6f4 <_getpid_r>:
 800c6f4:	f7f5 bab6 	b.w	8001c64 <_getpid>

0800c6f8 <_init>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	bf00      	nop
 800c6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fe:	bc08      	pop	{r3}
 800c700:	469e      	mov	lr, r3
 800c702:	4770      	bx	lr

0800c704 <_fini>:
 800c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c706:	bf00      	nop
 800c708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70a:	bc08      	pop	{r3}
 800c70c:	469e      	mov	lr, r3
 800c70e:	4770      	bx	lr
