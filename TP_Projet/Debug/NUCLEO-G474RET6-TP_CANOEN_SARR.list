
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08008c9c  08008c9c  00009c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f28  08008f28  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008f28  08008f28  00009f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f30  08008f30  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f30  08008f30  00009f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f34  08008f34  00009f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008f38  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000068  08008fa0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08008fa0  0000a480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1ee  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003538  00000000  00000000  00024286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000277c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001140  00000000  00000000  00028db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029df8  00000000  00000000  00029ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac56  00000000  00000000  00053cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146de  00000000  00000000  0006e946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006484  00000000  00000000  00183068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  001894ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c84 	.word	0x08008c84

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08008c84 	.word	0x08008c84

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_uldivmod>:
 800023c:	b953      	cbnz	r3, 8000254 <__aeabi_uldivmod+0x18>
 800023e:	b94a      	cbnz	r2, 8000254 <__aeabi_uldivmod+0x18>
 8000240:	2900      	cmp	r1, #0
 8000242:	bf08      	it	eq
 8000244:	2800      	cmpeq	r0, #0
 8000246:	bf1c      	itt	ne
 8000248:	f04f 31ff 	movne.w	r1, #4294967295
 800024c:	f04f 30ff 	movne.w	r0, #4294967295
 8000250:	f000 b96a 	b.w	8000528 <__aeabi_idiv0>
 8000254:	f1ad 0c08 	sub.w	ip, sp, #8
 8000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000268:	b004      	add	sp, #16
 800026a:	4770      	bx	lr

0800026c <__udivmoddi4>:
 800026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000270:	9d08      	ldr	r5, [sp, #32]
 8000272:	460c      	mov	r4, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14e      	bne.n	8000316 <__udivmoddi4+0xaa>
 8000278:	4694      	mov	ip, r2
 800027a:	458c      	cmp	ip, r1
 800027c:	4686      	mov	lr, r0
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	d962      	bls.n	800034a <__udivmoddi4+0xde>
 8000284:	b14a      	cbz	r2, 800029a <__udivmoddi4+0x2e>
 8000286:	f1c2 0320 	rsb	r3, r2, #32
 800028a:	4091      	lsls	r1, r2
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	fa0c fc02 	lsl.w	ip, ip, r2
 8000294:	4319      	orrs	r1, r3
 8000296:	fa00 fe02 	lsl.w	lr, r0, r2
 800029a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029e:	fa1f f68c 	uxth.w	r6, ip
 80002a2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002aa:	fb07 1114 	mls	r1, r7, r4, r1
 80002ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b2:	fb04 f106 	mul.w	r1, r4, r6
 80002b6:	4299      	cmp	r1, r3
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x64>
 80002ba:	eb1c 0303 	adds.w	r3, ip, r3
 80002be:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c2:	f080 8112 	bcs.w	80004ea <__udivmoddi4+0x27e>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 810f 	bls.w	80004ea <__udivmoddi4+0x27e>
 80002cc:	3c02      	subs	r4, #2
 80002ce:	4463      	add	r3, ip
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	fa1f f38e 	uxth.w	r3, lr
 80002d6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002da:	fb07 1110 	mls	r1, r7, r0, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb00 f606 	mul.w	r6, r0, r6
 80002e6:	429e      	cmp	r6, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x94>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f2:	f080 80fc 	bcs.w	80004ee <__udivmoddi4+0x282>
 80002f6:	429e      	cmp	r6, r3
 80002f8:	f240 80f9 	bls.w	80004ee <__udivmoddi4+0x282>
 80002fc:	4463      	add	r3, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	1b9b      	subs	r3, r3, r6
 8000302:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa6>
 800030a:	40d3      	lsrs	r3, r2
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xba>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb4>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa6>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x150>
 800032e:	42a3      	cmp	r3, r4
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xcc>
 8000332:	4290      	cmp	r0, r2
 8000334:	f0c0 80f0 	bcc.w	8000518 <__udivmoddi4+0x2ac>
 8000338:	1a86      	subs	r6, r0, r2
 800033a:	eb64 0303 	sbc.w	r3, r4, r3
 800033e:	2001      	movs	r0, #1
 8000340:	2d00      	cmp	r5, #0
 8000342:	d0e6      	beq.n	8000312 <__udivmoddi4+0xa6>
 8000344:	e9c5 6300 	strd	r6, r3, [r5]
 8000348:	e7e3      	b.n	8000312 <__udivmoddi4+0xa6>
 800034a:	2a00      	cmp	r2, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x204>
 8000350:	eba1 040c 	sub.w	r4, r1, ip
 8000354:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000358:	fa1f f78c 	uxth.w	r7, ip
 800035c:	2101      	movs	r1, #1
 800035e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000362:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000366:	fb08 4416 	mls	r4, r8, r6, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb07 f006 	mul.w	r0, r7, r6
 8000372:	4298      	cmp	r0, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x11c>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f106 34ff 	add.w	r4, r6, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x11a>
 8000380:	4298      	cmp	r0, r3
 8000382:	f200 80cd 	bhi.w	8000520 <__udivmoddi4+0x2b4>
 8000386:	4626      	mov	r6, r4
 8000388:	1a1c      	subs	r4, r3, r0
 800038a:	fa1f f38e 	uxth.w	r3, lr
 800038e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000392:	fb08 4410 	mls	r4, r8, r0, r4
 8000396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039a:	fb00 f707 	mul.w	r7, r0, r7
 800039e:	429f      	cmp	r7, r3
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x148>
 80003a2:	eb1c 0303 	adds.w	r3, ip, r3
 80003a6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x146>
 80003ac:	429f      	cmp	r7, r3
 80003ae:	f200 80b0 	bhi.w	8000512 <__udivmoddi4+0x2a6>
 80003b2:	4620      	mov	r0, r4
 80003b4:	1bdb      	subs	r3, r3, r7
 80003b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x9c>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003cc:	fa04 f301 	lsl.w	r3, r4, r1
 80003d0:	ea43 030c 	orr.w	r3, r3, ip
 80003d4:	40f4      	lsrs	r4, r6
 80003d6:	fa00 f801 	lsl.w	r8, r0, r1
 80003da:	0c38      	lsrs	r0, r7, #16
 80003dc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e0:	fbb4 fef0 	udiv	lr, r4, r0
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a1      	cmp	r9, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x1a6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	f080 8084 	bcs.w	800050e <__udivmoddi4+0x2a2>
 8000406:	45a1      	cmp	r9, r4
 8000408:	f240 8081 	bls.w	800050e <__udivmoddi4+0x2a2>
 800040c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000410:	443c      	add	r4, r7
 8000412:	eba4 0409 	sub.w	r4, r4, r9
 8000416:	fa1f f983 	uxth.w	r9, r3
 800041a:	fbb4 f3f0 	udiv	r3, r4, r0
 800041e:	fb00 4413 	mls	r4, r0, r3, r4
 8000422:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	45a4      	cmp	ip, r4
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x1d2>
 800042e:	193c      	adds	r4, r7, r4
 8000430:	f103 30ff 	add.w	r0, r3, #4294967295
 8000434:	d267      	bcs.n	8000506 <__udivmoddi4+0x29a>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d965      	bls.n	8000506 <__udivmoddi4+0x29a>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000442:	fba0 9302 	umull	r9, r3, r0, r2
 8000446:	eba4 040c 	sub.w	r4, r4, ip
 800044a:	429c      	cmp	r4, r3
 800044c:	46ce      	mov	lr, r9
 800044e:	469c      	mov	ip, r3
 8000450:	d351      	bcc.n	80004f6 <__udivmoddi4+0x28a>
 8000452:	d04e      	beq.n	80004f2 <__udivmoddi4+0x286>
 8000454:	b155      	cbz	r5, 800046c <__udivmoddi4+0x200>
 8000456:	ebb8 030e 	subs.w	r3, r8, lr
 800045a:	eb64 040c 	sbc.w	r4, r4, ip
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	40cb      	lsrs	r3, r1
 8000464:	431e      	orrs	r6, r3
 8000466:	40cc      	lsrs	r4, r1
 8000468:	e9c5 6400 	strd	r6, r4, [r5]
 800046c:	2100      	movs	r1, #0
 800046e:	e750      	b.n	8000312 <__udivmoddi4+0xa6>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f103 	lsr.w	r1, r0, r3
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	fa24 f303 	lsr.w	r3, r4, r3
 8000480:	4094      	lsls	r4, r2
 8000482:	430c      	orrs	r4, r1
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	fa00 fe02 	lsl.w	lr, r0, r2
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	fbb3 f0f8 	udiv	r0, r3, r8
 8000494:	fb08 3110 	mls	r1, r8, r0, r3
 8000498:	0c23      	lsrs	r3, r4, #16
 800049a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049e:	fb00 f107 	mul.w	r1, r0, r7
 80004a2:	4299      	cmp	r1, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x24c>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ae:	d22c      	bcs.n	800050a <__udivmoddi4+0x29e>
 80004b0:	4299      	cmp	r1, r3
 80004b2:	d92a      	bls.n	800050a <__udivmoddi4+0x29e>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c0:	fb08 3311 	mls	r3, r8, r1, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb01 f307 	mul.w	r3, r1, r7
 80004cc:	42a3      	cmp	r3, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x276>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d8:	d213      	bcs.n	8000502 <__udivmoddi4+0x296>
 80004da:	42a3      	cmp	r3, r4
 80004dc:	d911      	bls.n	8000502 <__udivmoddi4+0x296>
 80004de:	3902      	subs	r1, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	1ae4      	subs	r4, r4, r3
 80004e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e8:	e739      	b.n	800035e <__udivmoddi4+0xf2>
 80004ea:	4604      	mov	r4, r0
 80004ec:	e6f0      	b.n	80002d0 <__udivmoddi4+0x64>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e706      	b.n	8000300 <__udivmoddi4+0x94>
 80004f2:	45c8      	cmp	r8, r9
 80004f4:	d2ae      	bcs.n	8000454 <__udivmoddi4+0x1e8>
 80004f6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fe:	3801      	subs	r0, #1
 8000500:	e7a8      	b.n	8000454 <__udivmoddi4+0x1e8>
 8000502:	4631      	mov	r1, r6
 8000504:	e7ed      	b.n	80004e2 <__udivmoddi4+0x276>
 8000506:	4603      	mov	r3, r0
 8000508:	e799      	b.n	800043e <__udivmoddi4+0x1d2>
 800050a:	4630      	mov	r0, r6
 800050c:	e7d4      	b.n	80004b8 <__udivmoddi4+0x24c>
 800050e:	46d6      	mov	lr, sl
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1a6>
 8000512:	4463      	add	r3, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e74d      	b.n	80003b4 <__udivmoddi4+0x148>
 8000518:	4606      	mov	r6, r0
 800051a:	4623      	mov	r3, r4
 800051c:	4608      	mov	r0, r1
 800051e:	e70f      	b.n	8000340 <__udivmoddi4+0xd4>
 8000520:	3e02      	subs	r6, #2
 8000522:	4463      	add	r3, ip
 8000524:	e730      	b.n	8000388 <__udivmoddi4+0x11c>
 8000526:	bf00      	nop

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	@ 0x30
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2220      	movs	r2, #32
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f008 f8d5 	bl	80086f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800054a:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800054c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000550:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000554:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000558:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055a:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000560:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000566:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056c:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000574:	2204      	movs	r2, #4
 8000576:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000578:	4b26      	ldr	r3, [pc, #152]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800057a:	2200      	movs	r2, #0
 800057c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057e:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000580:	2200      	movs	r2, #0
 8000582:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000586:	2201      	movs	r2, #1
 8000588:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000592:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_ADC1_Init+0xe8>)
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_ADC1_Init+0xe8>)
 800059a:	2200      	movs	r2, #0
 800059c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800059e:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b4:	4817      	ldr	r0, [pc, #92]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005b6:	f001 fad9 	bl	8001b6c <HAL_ADC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005c0:	f000 fc30 	bl	8000e24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005cc:	4619      	mov	r1, r3
 80005ce:	4811      	ldr	r0, [pc, #68]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005d0:	f002 f8ee 	bl	80027b0 <HAL_ADCEx_MultiModeConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005da:	f000 fc23 	bl	8000e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_ADC1_Init+0xec>)
 80005e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e2:	2306      	movs	r3, #6
 80005e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ea:	237f      	movs	r3, #127	@ 0x7f
 80005ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ee:	2304      	movs	r3, #4
 80005f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <MX_ADC1_Init+0xe8>)
 80005fc:	f001 fc72 	bl	8001ee4 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000606:	f000 fc0d 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	3730      	adds	r7, #48	@ 0x30
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000084 	.word	0x20000084
 8000618:	21800100 	.word	0x21800100

0800061c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f008 f863 	bl	80086f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000630:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <MX_ADC2_Init+0xc4>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000636:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800063a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000656:	2204      	movs	r2, #4
 8000658:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800065c:	2200      	movs	r2, #0
 800065e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000668:	2201      	movs	r2, #1
 800066a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC2_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000696:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_ADC2_Init+0xc0>)
 8000698:	f001 fa68 	bl	8001b6c <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80006a2:	f000 fbbf 	bl	8000e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_ADC2_Init+0xc8>)
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2306      	movs	r3, #6
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b2:	237f      	movs	r3, #127	@ 0x7f
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2304      	movs	r3, #4
 80006b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_ADC2_Init+0xc0>)
 80006c4:	f001 fc0e 	bl	8001ee4 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006ce:	f000 fba9 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000f0 	.word	0x200000f0
 80006e0:	50000100 	.word	0x50000100
 80006e4:	19200040 	.word	0x19200040

080006e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0a4      	sub	sp, #144	@ 0x90
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000704:	2254      	movs	r2, #84	@ 0x54
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f007 fff3 	bl	80086f4 <memset>
  if(adcHandle->Instance==ADC1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000716:	d174      	bne.n	8000802 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800071e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000722:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fabb 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000734:	f000 fb76 	bl	8000e24 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000738:	4b63      	ldr	r3, [pc, #396]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a62      	ldr	r2, [pc, #392]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 8000740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000742:	4b61      	ldr	r3, [pc, #388]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d10b      	bne.n	8000762 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800074a:	4b60      	ldr	r3, [pc, #384]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a5f      	ldr	r2, [pc, #380]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000750:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b5d      	ldr	r3, [pc, #372]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b5a      	ldr	r3, [pc, #360]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a59      	ldr	r2, [pc, #356]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b57      	ldr	r3, [pc, #348]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	623b      	str	r3, [r7, #32]
 8000778:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b54      	ldr	r3, [pc, #336]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a53      	ldr	r2, [pc, #332]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b51      	ldr	r3, [pc, #324]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b4e      	ldr	r3, [pc, #312]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a4d      	ldr	r2, [pc, #308]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b4b      	ldr	r3, [pc, #300]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80007aa:	2304      	movs	r3, #4
 80007ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ae:	2303      	movs	r3, #3
 80007b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007be:	4619      	mov	r1, r3
 80007c0:	4843      	ldr	r0, [pc, #268]	@ (80008d0 <HAL_ADC_MspInit+0x1e8>)
 80007c2:	f002 fa9d 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007c6:	2302      	movs	r3, #2
 80007c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ca:	2303      	movs	r3, #3
 80007cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f002 fa8e 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e4:	2303      	movs	r3, #3
 80007e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e8:	2303      	movs	r3, #3
 80007ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007f8:	4619      	mov	r1, r3
 80007fa:	4836      	ldr	r0, [pc, #216]	@ (80008d4 <HAL_ADC_MspInit+0x1ec>)
 80007fc:	f002 fa80 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000800:	e05e      	b.n	80008c0 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a34      	ldr	r2, [pc, #208]	@ (80008d8 <HAL_ADC_MspInit+0x1f0>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d159      	bne.n	80008c0 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800080c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000812:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fa41 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000828:	f000 fafc 	bl	8000e24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 8000834:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <HAL_ADC_MspInit+0x1e0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10b      	bne.n	8000856 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_ADC_MspInit+0x1e4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000886:	230b      	movs	r3, #11
 8000888:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <HAL_ADC_MspInit+0x1e8>)
 800089e:	f002 fa2f 	bl	8002d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a6:	2303      	movs	r3, #3
 80008a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f002 fa20 	bl	8002d00 <HAL_GPIO_Init>
}
 80008c0:	bf00      	nop
 80008c2:	3790      	adds	r7, #144	@ 0x90
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000015c 	.word	0x2000015c
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000400 	.word	0x48000400
 80008d8:	50000100 	.word	0x50000100

080008dc <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b47      	ldr	r3, [pc, #284]	@ (8000a10 <MX_GPIO_Init+0x134>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a46      	ldr	r2, [pc, #280]	@ (8000a10 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b44      	ldr	r3, [pc, #272]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b41      	ldr	r3, [pc, #260]	@ (8000a10 <MX_GPIO_Init+0x134>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a40      	ldr	r2, [pc, #256]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b3e      	ldr	r3, [pc, #248]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b3b      	ldr	r3, [pc, #236]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a3a      	ldr	r2, [pc, #232]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b35      	ldr	r3, [pc, #212]	@ (8000a10 <MX_GPIO_Init+0x134>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a34      	ldr	r2, [pc, #208]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b2f      	ldr	r3, [pc, #188]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a2e      	ldr	r2, [pc, #184]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_GPIO_Init+0x134>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000972:	f002 fb47 	bl	8003004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2104      	movs	r1, #4
 800097a:	4826      	ldr	r0, [pc, #152]	@ (8000a14 <MX_GPIO_Init+0x138>)
 800097c:	f002 fb42 	bl	8003004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4820      	ldr	r0, [pc, #128]	@ (8000a18 <MX_GPIO_Init+0x13c>)
 8000998:	f002 f9b2 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f002 f9a3 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009cc:	2307      	movs	r3, #7
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <MX_GPIO_Init+0x13c>)
 80009d8:	f002 f992 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <MX_GPIO_Init+0x138>)
 80009f4:	f002 f984 	bl	8002d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2028      	movs	r0, #40	@ 0x28
 80009fe:	f002 f897 	bl	8002b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a02:	2028      	movs	r0, #40	@ 0x28
 8000a04:	f002 f8ae 	bl	8002b64 <HAL_NVIC_EnableIRQ>

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000c00 	.word	0x48000c00
 8000a18:	48000800 	.word	0x48000800

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	@ 0x70
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66bb      	str	r3, [r7, #104]	@ 0x68
	int32_t ch_MCC = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	667b      	str	r3, [r7, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fe70 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f895 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f7ff ff53 	bl	80008dc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000a36:	f7ff fdf1 	bl	800061c <MX_ADC2_Init>
  MX_ADC1_Init();
 8000a3a:	f7ff fd77 	bl	800052c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a3e:	f000 fb89 	bl	8001154 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a42:	f000 fc59 	bl	80012f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a46:	f000 fd8d 	bl	8001564 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2224      	movs	r2, #36	@ 0x24
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f007 fe4f 	bl	80086f4 <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	2240      	movs	r2, #64	@ 0x40
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fe48 	bl	80086f4 <memset>
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 8000a64:	4b33      	ldr	r3, [pc, #204]	@ (8000b34 <main+0x118>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000a6a:	2240      	movs	r2, #64	@ 0x40
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4832      	ldr	r0, [pc, #200]	@ (8000b38 <main+0x11c>)
 8000a70:	f007 fe40 	bl	80086f4 <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a74:	2201      	movs	r2, #1
 8000a76:	492f      	ldr	r1, [pc, #188]	@ (8000b34 <main+0x118>)
 8000a78:	4830      	ldr	r0, [pc, #192]	@ (8000b3c <main+0x120>)
 8000a7a:	f005 fb4b 	bl	8006114 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000a7e:	200a      	movs	r0, #10
 8000a80:	f000 fe7c 	bl	800177c <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	225f      	movs	r2, #95	@ 0x5f
 8000a8a:	492d      	ldr	r1, [pc, #180]	@ (8000b40 <main+0x124>)
 8000a8c:	482b      	ldr	r0, [pc, #172]	@ (8000b3c <main+0x120>)
 8000a8e:	f005 fab3 	bl	8005ff8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2218      	movs	r2, #24
 8000a98:	492a      	ldr	r1, [pc, #168]	@ (8000b44 <main+0x128>)
 8000a9a:	4828      	ldr	r0, [pc, #160]	@ (8000b3c <main+0x120>)
 8000a9c:	f005 faac 	bl	8005ff8 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uartRxReceived == 1)
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <main+0x12c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d1fb      	bne.n	8000aa0 <main+0x84>
	  {
		  printf("OK \r\n");
 8000aa8:	4828      	ldr	r0, [pc, #160]	@ (8000b4c <main+0x130>)
 8000aaa:	f007 fd43 	bl	8008534 <puts>
		  // Si caractère reçu est ENTER
		  if (uartRxBuffer[0] == ASCII_ENTER)
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <main+0x118>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b0d      	cmp	r3, #13
 8000ab4:	d128      	bne.n	8000b08 <main+0xec>
		  {
			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	2203      	movs	r2, #3
 8000abc:	4924      	ldr	r1, [pc, #144]	@ (8000b50 <main+0x134>)
 8000abe:	481f      	ldr	r0, [pc, #124]	@ (8000b3c <main+0x120>)
 8000ac0:	f005 fa9a 	bl	8005ff8 <HAL_UART_Transmit>
			  cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8000ac4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]

			  // Process the command
			  processCommand(cmdBuffer);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f88b 	bl	8000bf0 <processCommand>

			  if(strcmp(Etat, "Start") == 0){
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <main+0x138>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	491e      	ldr	r1, [pc, #120]	@ (8000b58 <main+0x13c>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb99 	bl	8000218 <strcmp>

			  }


			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2218      	movs	r2, #24
 8000aec:	4915      	ldr	r1, [pc, #84]	@ (8000b44 <main+0x128>)
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <main+0x120>)
 8000af0:	f005 fa82 	bl	8005ff8 <HAL_UART_Transmit>
			  idx_cmd = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
			  memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	2240      	movs	r2, #64	@ 0x40
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 fdf7 	bl	80086f4 <memset>
 8000b06:	e00b      	b.n	8000b20 <main+0x104>
		  }
		  else
		  {
			  // Si ce n'est pas ENTER, stocker le caractère dans le buffer
			  if (idx_cmd < CMD_BUFFER_SIZE - 1)
 8000b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b0c:	dc08      	bgt.n	8000b20 <main+0x104>
			  {
				  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <main+0x118>)
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	3370      	adds	r3, #112	@ 0x70
 8000b1a:	443b      	add	r3, r7
 8000b1c:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b20:	2201      	movs	r2, #1
 8000b22:	4904      	ldr	r1, [pc, #16]	@ (8000b34 <main+0x118>)
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <main+0x120>)
 8000b26:	f005 faf5 	bl	8006114 <HAL_UART_Receive_IT>

		  uartRxReceived = 0;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <main+0x12c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	  if (uartRxReceived == 1)
 8000b30:	e7b6      	b.n	8000aa0 <main+0x84>
 8000b32:	bf00      	nop
 8000b34:	20000164 	.word	0x20000164
 8000b38:	20000168 	.word	0x20000168
 8000b3c:	2000029c 	.word	0x2000029c
 8000b40:	08008d00 	.word	0x08008d00
 8000b44:	08008ce8 	.word	0x08008ce8
 8000b48:	20000160 	.word	0x20000160
 8000b4c:	08008c9c 	.word	0x08008c9c
 8000b50:	08008d60 	.word	0x08008d60
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	08008ca4 	.word	0x08008ca4

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2238      	movs	r2, #56	@ 0x38
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fdc2 	bl	80086f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f002 fa7c 	bl	800307c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	2303      	movs	r3, #3
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b96:	2306      	movs	r3, #6
 8000b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b9a:	2355      	movs	r3, #85	@ 0x55
 8000b9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fb18 	bl	80031e4 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bba:	f000 f933 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fe16 	bl	8003808 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000be2:	f000 f91f 	bl	8000e24 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3750      	adds	r7, #80	@ 0x50
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <processCommand>:

/* USER CODE BEGIN 4 */
void processCommand(char *cmd)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if (strcmp(cmd, "help") == 0) {
 8000bf8:	4965      	ldr	r1, [pc, #404]	@ (8000d90 <processCommand+0x1a0>)
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fb0c 	bl	8000218 <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d107      	bne.n	8000c16 <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	2236      	movs	r2, #54	@ 0x36
 8000c0c:	4961      	ldr	r1, [pc, #388]	@ (8000d94 <processCommand+0x1a4>)
 8000c0e:	4862      	ldr	r0, [pc, #392]	@ (8000d98 <processCommand+0x1a8>)
 8000c10:	f005 f9f2 	bl	8005ff8 <HAL_UART_Transmit>
		}

	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 8000c14:	e0b7      	b.n	8000d86 <processCommand+0x196>
	else if (strcmp(cmd, "pinout") == 0) {
 8000c16:	4961      	ldr	r1, [pc, #388]	@ (8000d9c <processCommand+0x1ac>)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fafd 	bl	8000218 <strcmp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d107      	bne.n	8000c34 <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	221a      	movs	r2, #26
 8000c2a:	495d      	ldr	r1, [pc, #372]	@ (8000da0 <processCommand+0x1b0>)
 8000c2c:	485a      	ldr	r0, [pc, #360]	@ (8000d98 <processCommand+0x1a8>)
 8000c2e:	f005 f9e3 	bl	8005ff8 <HAL_UART_Transmit>
}
 8000c32:	e0a8      	b.n	8000d86 <processCommand+0x196>
	else if (strcmp(cmd, "start") == 0) {
 8000c34:	495b      	ldr	r1, [pc, #364]	@ (8000da4 <processCommand+0x1b4>)
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff faee 	bl	8000218 <strcmp>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d11b      	bne.n	8000c7a <processCommand+0x8a>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	220a      	movs	r2, #10
 8000c48:	4957      	ldr	r1, [pc, #348]	@ (8000da8 <processCommand+0x1b8>)
 8000c4a:	4853      	ldr	r0, [pc, #332]	@ (8000d98 <processCommand+0x1a8>)
 8000c4c:	f005 f9d4 	bl	8005ff8 <HAL_UART_Transmit>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c50:	2100      	movs	r1, #0
 8000c52:	4856      	ldr	r0, [pc, #344]	@ (8000dac <processCommand+0x1bc>)
 8000c54:	f003 fba6 	bl	80043a4 <HAL_TIM_PWM_Start>
		  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4854      	ldr	r0, [pc, #336]	@ (8000dac <processCommand+0x1bc>)
 8000c5c:	f004 feb4 	bl	80059c8 <HAL_TIMEx_PWMN_Start>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c60:	2104      	movs	r1, #4
 8000c62:	4852      	ldr	r0, [pc, #328]	@ (8000dac <processCommand+0x1bc>)
 8000c64:	f003 fb9e 	bl	80043a4 <HAL_TIM_PWM_Start>
		  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4850      	ldr	r0, [pc, #320]	@ (8000dac <processCommand+0x1bc>)
 8000c6c:	f004 feac 	bl	80059c8 <HAL_TIMEx_PWMN_Start>
		Etat = "Start";
 8000c70:	4b4f      	ldr	r3, [pc, #316]	@ (8000db0 <processCommand+0x1c0>)
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b4f      	ldr	r3, [pc, #316]	@ (8000db4 <processCommand+0x1c4>)
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	e085      	b.n	8000d86 <processCommand+0x196>
	else if (strcmp(cmd, "stop") == 0) {
 8000c7a:	494f      	ldr	r1, [pc, #316]	@ (8000db8 <processCommand+0x1c8>)
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff facb 	bl	8000218 <strcmp>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d11b      	bne.n	8000cc0 <processCommand+0xd0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	220b      	movs	r2, #11
 8000c8e:	494b      	ldr	r1, [pc, #300]	@ (8000dbc <processCommand+0x1cc>)
 8000c90:	4841      	ldr	r0, [pc, #260]	@ (8000d98 <processCommand+0x1a8>)
 8000c92:	f005 f9b1 	bl	8005ff8 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c96:	2100      	movs	r1, #0
 8000c98:	4844      	ldr	r0, [pc, #272]	@ (8000dac <processCommand+0x1bc>)
 8000c9a:	f003 fc95 	bl	80045c8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4842      	ldr	r0, [pc, #264]	@ (8000dac <processCommand+0x1bc>)
 8000ca2:	f004 ff53 	bl	8005b4c <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4840      	ldr	r0, [pc, #256]	@ (8000dac <processCommand+0x1bc>)
 8000caa:	f003 fc8d 	bl	80045c8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000cae:	2104      	movs	r1, #4
 8000cb0:	483e      	ldr	r0, [pc, #248]	@ (8000dac <processCommand+0x1bc>)
 8000cb2:	f004 ff4b 	bl	8005b4c <HAL_TIMEx_PWMN_Stop>
		Etat = "Stop";
 8000cb6:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <processCommand+0x1d0>)
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <processCommand+0x1c4>)
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	e062      	b.n	8000d86 <processCommand+0x196>
	else if(Etat = "Start"){
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <processCommand+0x1c0>)
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000db4 <processCommand+0x1c4>)
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	4b39      	ldr	r3, [pc, #228]	@ (8000db0 <processCommand+0x1c0>)
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d053      	beq.n	8000d78 <processCommand+0x188>
			strncpy(Speed_buf, cmd, 5);
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	483b      	ldr	r0, [pc, #236]	@ (8000dc4 <processCommand+0x1d4>)
 8000cd6:	f007 fd15 	bl	8008704 <strncpy>
			if(strcmp(Speed_buf,"speed") == 0){
 8000cda:	493b      	ldr	r1, [pc, #236]	@ (8000dc8 <processCommand+0x1d8>)
 8000cdc:	4839      	ldr	r0, [pc, #228]	@ (8000dc4 <processCommand+0x1d4>)
 8000cde:	f7ff fa9b 	bl	8000218 <strcmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14e      	bne.n	8000d86 <processCommand+0x196>
				strncpy(speed_value, cmd+(strlen(cmd)-6), 6);
 8000ce8:	7ffb      	ldrb	r3, [r7, #31]
 8000cea:	461c      	mov	r4, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fa9d 	bl	800022c <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	3b06      	subs	r3, #6
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2206      	movs	r2, #6
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4620      	mov	r0, r4
 8000d00:	f007 fd00 	bl	8008704 <strncpy>
				int speed_int = atoi(speed_value);
 8000d04:	7ffb      	ldrb	r3, [r7, #31]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f007 fa74 	bl	80081f4 <atoi>
 8000d0c:	61b8      	str	r0, [r7, #24]
				if(speed_int <= 100){
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2b64      	cmp	r3, #100	@ 0x64
 8000d12:	dc1a      	bgt.n	8000d4a <processCommand+0x15a>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed_int/2);
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	0fda      	lsrs	r2, r3, #31
 8000d18:	4413      	add	r3, r2
 8000d1a:	105b      	asrs	r3, r3, #1
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <processCommand+0x1bc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_int/2);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	0fda      	lsrs	r2, r3, #31
 8000d28:	4413      	add	r3, r2
 8000d2a:	105b      	asrs	r3, r3, #1
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <processCommand+0x1bc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	639a      	str	r2, [r3, #56]	@ 0x38
					char sp = speed_value;
 8000d34:	7ffb      	ldrb	r3, [r7, #31]
 8000d36:	75fb      	strb	r3, [r7, #23]
					HAL_UART_Transmit(&huart2, sp, sizeof(sp) - 1, HAL_MAX_DELAY);
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	2200      	movs	r2, #0
 8000d42:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <processCommand+0x1a8>)
 8000d44:	f005 f958 	bl	8005ff8 <HAL_UART_Transmit>
}
 8000d48:	e01d      	b.n	8000d86 <processCommand+0x196>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <processCommand+0x1bc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2232      	movs	r2, #50	@ 0x32
 8000d50:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 50);
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <processCommand+0x1bc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2232      	movs	r2, #50	@ 0x32
 8000d58:	639a      	str	r2, [r3, #56]	@ 0x38
					char msg[] = "Max Speed";
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <processCommand+0x1dc>)
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d62:	c303      	stmia	r3!, {r0, r1}
 8000d64:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg), HAL_MAX_DELAY);
 8000d66:	f107 010c 	add.w	r1, r7, #12
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	220a      	movs	r2, #10
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <processCommand+0x1a8>)
 8000d72:	f005 f941 	bl	8005ff8 <HAL_UART_Transmit>
}
 8000d76:	e006      	b.n	8000d86 <processCommand+0x196>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	2213      	movs	r2, #19
 8000d7e:	4914      	ldr	r1, [pc, #80]	@ (8000dd0 <processCommand+0x1e0>)
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <processCommand+0x1a8>)
 8000d82:	f005 f939 	bl	8005ff8 <HAL_UART_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08008cac 	.word	0x08008cac
 8000d94:	08008d78 	.word	0x08008d78
 8000d98:	2000029c 	.word	0x2000029c
 8000d9c:	08008cb4 	.word	0x08008cb4
 8000da0:	08008db0 	.word	0x08008db0
 8000da4:	08008cbc 	.word	0x08008cbc
 8000da8:	08008dcc 	.word	0x08008dcc
 8000dac:	20000204 	.word	0x20000204
 8000db0:	08008ca4 	.word	0x08008ca4
 8000db4:	200001a8 	.word	0x200001a8
 8000db8:	08008cc4 	.word	0x08008cc4
 8000dbc:	08008dd8 	.word	0x08008dd8
 8000dc0:	08008ccc 	.word	0x08008ccc
 8000dc4:	200001ac 	.word	0x200001ac
 8000dc8:	08008cd4 	.word	0x08008cd4
 8000dcc:	08008cdc 	.word	0x08008cdc
 8000dd0:	08008d64 	.word	0x08008d64

08000dd4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_UART_RxCpltCallback+0x20>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <HAL_UART_RxCpltCallback+0x24>)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_UART_RxCpltCallback+0x28>)
 8000de8:	f005 f994 	bl	8006114 <HAL_UART_Receive_IT>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000160 	.word	0x20000160
 8000df8:	20000164 	.word	0x20000164
 8000dfc:	2000029c 	.word	0x2000029c

08000e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e12:	f000 fc95 	bl	8001740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40001000 	.word	0x40001000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e66:	f002 f9ad 	bl	80031c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <HAL_InitTick+0xc4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f3c <HAL_InitTick+0xc4>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <HAL_InitTick+0xc4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fe82 	bl	8003bb4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eb0:	f002 fe54 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8000eb4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb8:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <HAL_InitTick+0xc8>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <HAL_InitTick+0xd0>)
 8000ec8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000ecc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ed0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ee4:	4817      	ldr	r0, [pc, #92]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000ee6:	f003 f92b 	bl	8004140 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11b      	bne.n	8000f30 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ef8:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <HAL_InitTick+0xcc>)
 8000efa:	f003 f979 	bl	80041f0 <HAL_TIM_Base_Start_IT>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d111      	bne.n	8000f30 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f0c:	2036      	movs	r0, #54	@ 0x36
 8000f0e:	f001 fe29 	bl	8002b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d808      	bhi.n	8000f2a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	2036      	movs	r0, #54	@ 0x36
 8000f1e:	f001 fe07 	bl	8002b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_InitTick+0xd4>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e002      	b.n	8000f30 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3730      	adds	r7, #48	@ 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	431bde83 	.word	0x431bde83
 8000f44:	200001b4 	.word	0x200001b4
 8000f48:	40001000 	.word	0x40001000
 8000f4c:	20000004 	.word	0x20000004

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <USART2_IRQHandler+0x10>)
 8000fb6:	f005 f8f9 	bl	80061ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000029c 	.word	0x2000029c

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000fc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fcc:	f002 f832 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM6_DAC_IRQHandler+0x10>)
 8000fda:	f003 fb91 	bl	8004700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001b4 	.word	0x200001b4

08000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
  }

  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
  }
  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001082:	605a      	str	r2, [r3, #4]
  return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	@ (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	@ (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f007 fb60 	bl	80087b8 <__errno>
 80010f8:	4603      	mov	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20020000 	.word	0x20020000
 8001124:	00000400 	.word	0x00000400
 8001128:	20000200 	.word	0x20000200
 800112c:	20000480 	.word	0x20000480

08001130 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <SystemInit+0x20>)
 8001136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <SystemInit+0x20>)
 800113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09c      	sub	sp, #112	@ 0x70
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001174:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2234      	movs	r2, #52	@ 0x34
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fab0 	bl	80086f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001194:	4b56      	ldr	r3, [pc, #344]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001196:	4a57      	ldr	r2, [pc, #348]	@ (80012f4 <MX_TIM1_Init+0x1a0>)
 8001198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800119a:	4b55      	ldr	r3, [pc, #340]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 800119c:	2207      	movs	r2, #7
 800119e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011a0:	4b53      	ldr	r3, [pc, #332]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011a2:	2220      	movs	r2, #32
 80011a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80011a6:	4b52      	ldr	r3, [pc, #328]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	4b50      	ldr	r3, [pc, #320]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b4:	4b4e      	ldr	r3, [pc, #312]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ba:	4b4d      	ldr	r3, [pc, #308]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011c0:	484b      	ldr	r0, [pc, #300]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011c2:	f002 ffbd 	bl	8004140 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f7ff fe2a 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011da:	4619      	mov	r1, r3
 80011dc:	4844      	ldr	r0, [pc, #272]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011de:	f003 fcf3 	bl	8004bc8 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011e8:	f7ff fe1c 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ec:	4840      	ldr	r0, [pc, #256]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80011ee:	f003 f877 	bl	80042e0 <HAL_TIM_PWM_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011f8:	f7ff fe14 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001208:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800120c:	4619      	mov	r1, r3
 800120e:	4838      	ldr	r0, [pc, #224]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001210:	f004 fcfa 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800121a:	f7ff fe03 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	@ 0x60
 8001220:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 615;
 8001222:	f240 2367 	movw	r3, #615	@ 0x267
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001246:	f003 fbab 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001250:	f7ff fde8 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.Pulse = 409;
 8001254:	f240 1399 	movw	r3, #409	@ 0x199
 8001258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125e:	2204      	movs	r2, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4823      	ldr	r0, [pc, #140]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001264:	f003 fb9c 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800126e:	f7ff fdd9 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001276:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800127a:	2208      	movs	r2, #8
 800127c:	4619      	mov	r1, r3
 800127e:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001280:	f003 fb8e 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800128a:	f7ff fdcb 	bl	8000e24 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 800128e:	4818      	ldr	r0, [pc, #96]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 8001290:	f004 fde4 	bl	8005e5c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 80012a0:	2323      	movs	r3, #35	@ 0x23
 80012a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80012d2:	f004 fd2f 	bl	8005d34 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80012dc:	f7ff fda2 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <MX_TIM1_Init+0x19c>)
 80012e2:	f000 f8d7 	bl	8001494 <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3770      	adds	r7, #112	@ 0x70
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000204 	.word	0x20000204
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001318:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <MX_TIM3_Init+0x94>)
 800131a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM3_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_TIM3_Init+0x90>)
 800132a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001354:	f004 fa89 	bl	800586a <HAL_TIMEx_HallSensor_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800135e:	f7ff fd61 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001362:	2350      	movs	r3, #80	@ 0x50
 8001364:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <MX_TIM3_Init+0x90>)
 8001370:	f004 fc4a 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800137a:	f7ff fd53 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000250 	.word	0x20000250
 800138c:	40000400 	.word	0x40000400

08001390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <HAL_TIM_Base_MspInit+0x38>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10b      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a26      	ldr	r2, [pc, #152]	@ (8001488 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d145      	bne.n	800147e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	4a25      	ldr	r2, [pc, #148]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800143a:	2350      	movs	r3, #80	@ 0x50
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800144a:	2302      	movs	r3, #2
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f001 fc52 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800145c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800147a:	f001 fc41 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40000400 	.word	0x40000400
 800148c:	40021000 	.word	0x40021000
 8001490:	48000800 	.word	0x48000800

08001494 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <HAL_TIM_MspPostInit+0xc4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d14b      	bne.n	800154e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b29      	ldr	r3, [pc, #164]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a28      	ldr	r2, [pc, #160]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a22      	ldr	r2, [pc, #136]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_TIM_MspPostInit+0xc8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80014e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014f8:	2306      	movs	r3, #6
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	@ (8001560 <HAL_TIM_MspPostInit+0xcc>)
 8001504:	f001 fbfc 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800151a:	2304      	movs	r3, #4
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480e      	ldr	r0, [pc, #56]	@ (8001560 <HAL_TIM_MspPostInit+0xcc>)
 8001526:	f001 fbeb 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800152a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800153c:	2306      	movs	r3, #6
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f001 fbd9 	bl	8002d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40012c00 	.word	0x40012c00
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <MX_USART2_UART_Init+0x94>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ac:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015ae:	f004 fcd3 	bl	8005f58 <HAL_UART_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015b8:	f7ff fc34 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	480d      	ldr	r0, [pc, #52]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015c0:	f006 fd4d 	bl	800805e <HAL_UARTEx_SetTxFifoThreshold>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ca:	f7ff fc2b 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015d2:	f006 fd82 	bl	80080da <HAL_UARTEx_SetRxFifoThreshold>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015dc:	f7ff fc22 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_USART2_UART_Init+0x90>)
 80015e2:	f006 fd03 	bl	8007fec <HAL_UARTEx_DisableFifoMode>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f7ff fc1a 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000029c 	.word	0x2000029c
 80015f8:	40004400 	.word	0x40004400

080015fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b09e      	sub	sp, #120	@ 0x78
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2254      	movs	r2, #84	@ 0x54
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f007 f869 	bl	80086f4 <memset>
  if(uartHandle->Instance==USART2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <HAL_UART_MspInit+0xb8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13e      	bne.n	80016aa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fb33 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f7ff fbee 	bl	8000e24 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_UART_MspInit+0xbc>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001678:	230c      	movs	r3, #12
 800167a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001688:	2307      	movs	r3, #7
 800168a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f001 fb33 	bl	8002d00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2026      	movs	r0, #38	@ 0x26
 80016a0:	f001 fa46 	bl	8002b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a4:	2026      	movs	r0, #38	@ 0x26
 80016a6:	f001 fa5d 	bl	8002b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3778      	adds	r7, #120	@ 0x78
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40021000 	.word	0x40021000

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff fd36 	bl	8001130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f007 f86b 	bl	80087c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff f995 	bl	8000a1c <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   r0, =_estack
 80016f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001700:	08008f38 	.word	0x08008f38
  ldr r2, =_sbss
 8001704:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001708:	20000480 	.word	0x20000480

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f001 f9fe 	bl	8002b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff fbaa 	bl	8000e78 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fb7e 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]

}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_IncTick+0x1c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_IncTick+0x20>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4413      	add	r3, r2
 800174e:	4a03      	ldr	r2, [pc, #12]	@ (800175c <HAL_IncTick+0x1c>)
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000330 	.word	0x20000330
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000330 	.word	0x20000330

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d004      	beq.n	80017a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_Delay+0x40>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a0:	bf00      	nop
 80017a2:	f7ff ffdf 	bl	8001764 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d8f7      	bhi.n	80017a2 <HAL_Delay+0x26>
  {
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000008 	.word	0x20000008

080017c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	609a      	str	r2, [r3, #8]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	609a      	str	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3360      	adds	r3, #96	@ 0x60
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <LL_ADC_SetOffset+0x44>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	4313      	orrs	r3, r2
 8001858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001860:	bf00      	nop
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	03fff000 	.word	0x03fff000

08001870 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3360      	adds	r3, #96	@ 0x60
 800187e:	461a      	mov	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3360      	adds	r3, #96	@ 0x60
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3360      	adds	r3, #96	@ 0x60
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3360      	adds	r3, #96	@ 0x60
 8001918:	461a      	mov	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	615a      	str	r2, [r3, #20]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3330      	adds	r3, #48	@ 0x30
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	4413      	add	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	211f      	movs	r1, #31
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 011f 	and.w	r1, r3, #31
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3314      	adds	r3, #20
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	0e5b      	lsrs	r3, r3, #25
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	0d1b      	lsrs	r3, r3, #20
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2107      	movs	r1, #7
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0d1b      	lsrs	r3, r3, #20
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0318 	and.w	r3, r3, #24
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a38:	40d9      	lsrs	r1, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	0007ffff 	.word	0x0007ffff

08001a5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6093      	str	r3, [r2, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001abc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_IsEnabled+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_IsEnabled+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	@ 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e1a9      	b.n	8001eda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fda7 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff67 	bl	8001a80 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff4d 	bl	8001a5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff82 	bl	8001ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff66 	bl	8001aa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e50 <HAL_ADC_Init+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a9c      	ldr	r2, [pc, #624]	@ (8001e54 <HAL_ADC_Init+0x2e8>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff64 	bl	8001ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff75 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8142 	bne.w	8001ec8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 813e 	bne.w	8001ec8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff49 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d141      	bne.n	8001cf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c74:	d004      	beq.n	8001c80 <HAL_ADC_Init+0x114>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_ADC_Init+0x134>
 8001c80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001c84:	f7ff ff38 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	4873      	ldr	r0, [pc, #460]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001c8c:	f7ff ff34 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4323      	orrs	r3, r4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_ADC_Init+0x15a>
 8001ca0:	486e      	ldr	r0, [pc, #440]	@ (8001e5c <HAL_ADC_Init+0x2f0>)
 8001ca2:	f7ff ff29 	bl	8001af8 <LL_ADC_IsEnabled>
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	486d      	ldr	r0, [pc, #436]	@ (8001e60 <HAL_ADC_Init+0x2f4>)
 8001caa:	f7ff ff25 	bl	8001af8 <LL_ADC_IsEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	431c      	orrs	r4, r3
 8001cb2:	486c      	ldr	r0, [pc, #432]	@ (8001e64 <HAL_ADC_Init+0x2f8>)
 8001cb4:	f7ff ff20 	bl	8001af8 <LL_ADC_IsEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_Init+0x172>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_ADC_Init+0x2ec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x176>
 8001cde:	4a62      	ldr	r2, [pc, #392]	@ (8001e68 <HAL_ADC_Init+0x2fc>)
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_Init+0x178>
 8001ce2:	4a62      	ldr	r2, [pc, #392]	@ (8001e6c <HAL_ADC_Init+0x300>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f7ff fd68 	bl	80017c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7f5b      	ldrb	r3, [r3, #29]
 8001cf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	045b      	lsls	r3, r3, #17
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b48      	ldr	r3, [pc, #288]	@ (8001e70 <HAL_ADC_Init+0x304>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fee4 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001d7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d17f      	bne.n	8001e84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d17c      	bne.n	8001e84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001dca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001dd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6911      	ldr	r1, [r2, #16]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001dea:	e013      	b.n	8001e14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12a      	bne.n	8001e74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e40:	430a      	orrs	r2, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	e019      	b.n	8001e84 <HAL_ADC_Init+0x318>
 8001e50:	20000000 	.word	0x20000000
 8001e54:	053e2d63 	.word	0x053e2d63
 8001e58:	50000100 	.word	0x50000100
 8001e5c:	50000400 	.word	0x50000400
 8001e60:	50000500 	.word	0x50000500
 8001e64:	50000600 	.word	0x50000600
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	50000700 	.word	0x50000700
 8001e70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f023 010f 	bic.w	r1, r3, #15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea4:	e007      	b.n	8001eb6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 020f 	bic.w	r2, r2, #15
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x24>
 8001f02:	2302      	movs	r3, #2
 8001f04:	f000 bc13 	b.w	800272e <HAL_ADC_ConfigChannel+0x84a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fe02 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 83f3 	bne.w	8002708 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f7ff fd18 	bl	8001964 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fdf0 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001f3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fdfc 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001f4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f040 81d9 	bne.w	800230c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 81d4 	bne.w	800230c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f6c:	d10f      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff fd1f 	bl	80019bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fcd9 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>
 8001f8c:	e00e      	b.n	8001fac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7ff fd0e 	bl	80019bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fcc9 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d022      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fde:	f7ff fc23 	bl	8001828 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f7ff fc6f 	bl	80018d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_ADC_ConfigChannel+0x126>
 8002004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x128>
 800200a:	2300      	movs	r3, #0
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff fc7b 	bl	8001908 <LL_ADC_SetOffsetSaturation>
 8002012:	e17b      	b.n	800230c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fc28 	bl	8001870 <LL_ADC_GetOffsetChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x15c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fc1d 	bl	8001870 <LL_ADC_GetOffsetChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	f003 021f 	and.w	r2, r3, #31
 800203e:	e01e      	b.n	800207e <HAL_ADC_ConfigChannel+0x19a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fc12 	bl	8001870 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800205e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002062:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e004      	b.n	800207c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x1b2>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	e018      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1e4>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80020b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80020be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fbe1 	bl	800189c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fbc5 	bl	8001870 <LL_ADC_GetOffsetChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x222>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fbba 	bl	8001870 <LL_ADC_GetOffsetChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	e01e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x260>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fbaf 	bl	8001870 <LL_ADC_GetOffsetChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800212c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConfigChannel+0x278>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	e018      	b.n	800218e <HAL_ADC_ConfigChannel+0x2aa>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002184:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fb7e 	bl	800189c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2102      	movs	r1, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fb62 	bl	8001870 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x2e8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2102      	movs	r1, #2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fb57 	bl	8001870 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x326>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2102      	movs	r1, #2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb4c 	bl	8001870 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80021fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x33e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e016      	b.n	8002250 <HAL_ADC_ConfigChannel+0x36c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800223a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e004      	b.n	8002250 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	2102      	movs	r1, #2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fb1d 	bl	800189c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2103      	movs	r1, #3
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fb01 	bl	8001870 <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_ADC_ConfigChannel+0x3aa>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff faf6 	bl	8001870 <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	e017      	b.n	80022be <HAL_ADC_ConfigChannel+0x3da>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2103      	movs	r1, #3
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff faeb 	bl	8001870 <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80022aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80022b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x3f2>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	e011      	b.n	80022fa <HAL_ADC_ConfigChannel+0x416>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80022f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d106      	bne.n	800230c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	2103      	movs	r1, #3
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fac8 	bl	800189c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fbf1 	bl	8001af8 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 813d 	bne.w	8002598 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f7ff fb72 	bl	8001a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4aa2      	ldr	r2, [pc, #648]	@ (80025c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f040 812e 	bne.w	8002598 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x480>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b09      	cmp	r3, #9
 800235a:	bf94      	ite	ls
 800235c:	2301      	movls	r3, #1
 800235e:	2300      	movhi	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e019      	b.n	8002398 <HAL_ADC_ConfigChannel+0x4b4>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002374:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800237c:	2320      	movs	r3, #32
 800237e:	e003      	b.n	8002388 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2b09      	cmp	r3, #9
 8002390:	bf94      	ite	ls
 8002392:	2301      	movls	r3, #1
 8002394:	2300      	movhi	r3, #0
 8002396:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002398:	2b00      	cmp	r3, #0
 800239a:	d079      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x4d4>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	3301      	adds	r3, #1
 80023b0:	069b      	lsls	r3, r3, #26
 80023b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b6:	e015      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x500>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e003      	b.n	80023dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80023d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	069b      	lsls	r3, r3, #26
 80023e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x520>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	e017      	b.n	8002434 <HAL_ADC_ConfigChannel+0x550>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002414:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	ea42 0103 	orr.w	r1, r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x576>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	e018      	b.n	800248c <HAL_ADC_ConfigChannel+0x5a8>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800246c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e003      	b.n	800247e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	430b      	orrs	r3, r1
 800248e:	e07e      	b.n	800258e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x5c8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024aa:	e015      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x5f4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80024ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x614>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	e017      	b.n	8002528 <HAL_ADC_ConfigChannel+0x644>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	61fb      	str	r3, [r7, #28]
  return result;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	ea42 0103 	orr.w	r1, r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10d      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x670>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	3b1e      	subs	r3, #30
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002552:	e01b      	b.n	800258c <HAL_ADC_ConfigChannel+0x6a8>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	613b      	str	r3, [r7, #16]
  return result;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	3b1e      	subs	r3, #30
 8002586:	051b      	lsls	r3, r3, #20
 8002588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800258c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002592:	4619      	mov	r1, r3
 8002594:	f7ff fa12 	bl	80019bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80be 	beq.w	8002722 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x6d6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10a      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x6ec>
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <HAL_ADC_ConfigChannel+0x6e8>)
 80025bc:	e009      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x6ee>
 80025be:	bf00      	nop
 80025c0:	407f0000 	.word	0x407f0000
 80025c4:	80080000 	.word	0x80080000
 80025c8:	50000100 	.word	0x50000100
 80025cc:	50000300 	.word	0x50000300
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f91a 	bl	800180c <LL_ADC_GetCommonPathInternalCh>
 80025d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a56      	ldr	r2, [pc, #344]	@ (800273c <HAL_ADC_ConfigChannel+0x858>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x70c>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a55      	ldr	r2, [pc, #340]	@ (8002740 <HAL_ADC_ConfigChannel+0x85c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d13a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d134      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002604:	d005      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x72e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4e      	ldr	r2, [pc, #312]	@ (8002744 <HAL_ADC_ConfigChannel+0x860>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f040 8085 	bne.w	800271c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x742>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a49      	ldr	r2, [pc, #292]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x746>
 8002626:	4a49      	ldr	r2, [pc, #292]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x748>
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7ff f8d5 	bl	80017e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263c:	4b44      	ldr	r3, [pc, #272]	@ (8002750 <HAL_ADC_ConfigChannel+0x86c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	4a44      	ldr	r2, [pc, #272]	@ (8002754 <HAL_ADC_ConfigChannel+0x870>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	e002      	b.n	800265e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002664:	e05a      	b.n	800271c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a3b      	ldr	r2, [pc, #236]	@ (8002758 <HAL_ADC_ConfigChannel+0x874>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11f      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d104      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x7ac>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_ADC_ConfigChannel+0x878>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d047      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002698:	d004      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x7c0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2a      	ldr	r2, [pc, #168]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x7c4>
 80026a4:	4a29      	ldr	r2, [pc, #164]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 80026a6:	e000      	b.n	80026aa <HAL_ADC_ConfigChannel+0x7c6>
 80026a8:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80026aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7ff f896 	bl	80017e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ba:	e031      	b.n	8002720 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <HAL_ADC_ConfigChannel+0x87c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12d      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d127      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x80c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_ADC_ConfigChannel+0x864>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x810>
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <HAL_ADC_ConfigChannel+0x868>)
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x812>
 80026f4:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_ADC_ConfigChannel+0x854>)
 80026f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7ff f870 	bl	80017e6 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e00c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800271a:	e002      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002720:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800272a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800272e:	4618      	mov	r0, r3
 8002730:	37d8      	adds	r7, #216	@ 0xd8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	50000700 	.word	0x50000700
 800273c:	c3210000 	.word	0xc3210000
 8002740:	90c00010 	.word	0x90c00010
 8002744:	50000600 	.word	0x50000600
 8002748:	50000100 	.word	0x50000100
 800274c:	50000300 	.word	0x50000300
 8002750:	20000000 	.word	0x20000000
 8002754:	053e2d63 	.word	0x053e2d63
 8002758:	c7520000 	.word	0xc7520000
 800275c:	50000500 	.word	0x50000500
 8002760:	cb840000 	.word	0xcb840000

08002764 <LL_ADC_IsEnabled>:
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <LL_ADC_IsEnabled+0x18>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <LL_ADC_IsEnabled+0x1a>
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_REG_IsConversionOngoing>:
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d101      	bne.n	80027a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b0a1      	sub	sp, #132	@ 0x84
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e7      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027d6:	2300      	movs	r3, #0
 80027d8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027da:	2300      	movs	r3, #0
 80027dc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e6:	d102      	bne.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027e8:	4b6f      	ldr	r3, [pc, #444]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e009      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d102      	bne.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80027f8:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e001      	b.n	8002802 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0be      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ffb1 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 8002828:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ffab 	bl	800278a <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 80a0 	bne.w	800297c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800283c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 809c 	bne.w	800297c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284c:	d004      	beq.n	8002858 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a55      	ldr	r2, [pc, #340]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002858:	4b56      	ldr	r3, [pc, #344]	@ (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800285a:	e000      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800285c:	4b56      	ldr	r3, [pc, #344]	@ (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800285e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d04b      	beq.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800287a:	035b      	lsls	r3, r3, #13
 800287c:	430b      	orrs	r3, r1
 800287e:	431a      	orrs	r2, r3
 8002880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002882:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800288c:	d004      	beq.n	8002898 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a45      	ldr	r2, [pc, #276]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10f      	bne.n	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002898:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800289c:	f7ff ff62 	bl	8002764 <LL_ADC_IsEnabled>
 80028a0:	4604      	mov	r4, r0
 80028a2:	4841      	ldr	r0, [pc, #260]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a4:	f7ff ff5e 	bl	8002764 <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4323      	orrs	r3, r4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e012      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80028b8:	483c      	ldr	r0, [pc, #240]	@ (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028ba:	f7ff ff53 	bl	8002764 <LL_ADC_IsEnabled>
 80028be:	4604      	mov	r4, r0
 80028c0:	483b      	ldr	r0, [pc, #236]	@ (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028c2:	f7ff ff4f 	bl	8002764 <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	431c      	orrs	r4, r3
 80028ca:	483c      	ldr	r0, [pc, #240]	@ (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028cc:	f7ff ff4a 	bl	8002764 <LL_ADC_IsEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4323      	orrs	r3, r4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d056      	beq.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028ea:	f023 030f 	bic.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	6811      	ldr	r1, [r2, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	6892      	ldr	r2, [r2, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028fe:	e047      	b.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800290a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002914:	d004      	beq.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a23      	ldr	r2, [pc, #140]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d10f      	bne.n	8002940 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002920:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002924:	f7ff ff1e 	bl	8002764 <LL_ADC_IsEnabled>
 8002928:	4604      	mov	r4, r0
 800292a:	481f      	ldr	r0, [pc, #124]	@ (80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800292c:	f7ff ff1a 	bl	8002764 <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e012      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002940:	481a      	ldr	r0, [pc, #104]	@ (80029ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002942:	f7ff ff0f 	bl	8002764 <LL_ADC_IsEnabled>
 8002946:	4604      	mov	r4, r0
 8002948:	4819      	ldr	r0, [pc, #100]	@ (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800294a:	f7ff ff0b 	bl	8002764 <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	431c      	orrs	r4, r3
 8002952:	481a      	ldr	r0, [pc, #104]	@ (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002954:	f7ff ff06 	bl	8002764 <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	4323      	orrs	r3, r4
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800296a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002972:	f023 030f 	bic.w	r3, r3, #15
 8002976:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002978:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800297a:	e009      	b.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800298e:	e000      	b.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002990:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800299a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3784      	adds	r7, #132	@ 0x84
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	50000100 	.word	0x50000100
 80029ac:	50000400 	.word	0x50000400
 80029b0:	50000500 	.word	0x50000500
 80029b4:	50000300 	.word	0x50000300
 80029b8:	50000700 	.word	0x50000700
 80029bc:	50000600 	.word	0x50000600

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	@ (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	@ (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff4c 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3e:	f7ff ff63 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	6978      	ldr	r0, [r7, #20]
 8002b4a:	f7ff ffb3 	bl	8002ab4 <NVIC_EncodePriority>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff82 	bl	8002a60 <__NVIC_SetPriority>
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff56 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d005      	beq.n	8002ba4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e037      	b.n	8002c14 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020e 	bic.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bc2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bf0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00c      	beq.n	8002c14 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c08:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c12:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d00d      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e047      	b.n	8002cf6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 020e 	bic.w	r2, r2, #14
 8002c74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
    }
  }
  return status;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d0e:	e15a      	b.n	8002fc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 814c 	beq.w	8002fc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d005      	beq.n	8002d40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d130      	bne.n	8002da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d76:	2201      	movs	r2, #1
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 0201 	and.w	r2, r3, #1
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d017      	beq.n	8002dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d123      	bne.n	8002e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	08da      	lsrs	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	08da      	lsrs	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3208      	adds	r2, #8
 8002e2c:	6939      	ldr	r1, [r7, #16]
 8002e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0203 	and.w	r2, r3, #3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80a6 	beq.w	8002fc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e74:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_GPIO_Init+0x2e4>)
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe4 <HAL_GPIO_Init+0x2e4>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e80:	4b58      	ldr	r3, [pc, #352]	@ (8002fe4 <HAL_GPIO_Init+0x2e4>)
 8002e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8c:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	3302      	adds	r3, #2
 8002e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002eb6:	d01f      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4c      	ldr	r2, [pc, #304]	@ (8002fec <HAL_GPIO_Init+0x2ec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d019      	beq.n	8002ef4 <HAL_GPIO_Init+0x1f4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_GPIO_Init+0x1f0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <HAL_GPIO_Init+0x2f4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00d      	beq.n	8002eec <HAL_GPIO_Init+0x1ec>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a49      	ldr	r2, [pc, #292]	@ (8002ff8 <HAL_GPIO_Init+0x2f8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <HAL_GPIO_Init+0x1e8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a48      	ldr	r2, [pc, #288]	@ (8002ffc <HAL_GPIO_Init+0x2fc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_GPIO_Init+0x1e4>
 8002ee0:	2305      	movs	r3, #5
 8002ee2:	e00a      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	e008      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e006      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002eec:	2303      	movs	r3, #3
 8002eee:	e004      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e002      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	f002 0203 	and.w	r2, r2, #3
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	4093      	lsls	r3, r2
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0a:	4937      	ldr	r1, [pc, #220]	@ (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f42:	4b2f      	ldr	r3, [pc, #188]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f66:	4a26      	ldr	r2, [pc, #152]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f90:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fba:	4a11      	ldr	r2, [pc, #68]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f ae9d 	bne.w	8002d10 <HAL_GPIO_Init+0x10>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	48000c00 	.word	0x48000c00
 8002ff8:	48001000 	.word	0x48001000
 8002ffc:	48001400 	.word	0x48001400
 8003000:	40010400 	.word	0x40010400

08003004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]
 8003010:	4613      	mov	r3, r2
 8003012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003014:	787b      	ldrb	r3, [r7, #1]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003020:	e002      	b.n	8003028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f806 	bl	8003064 <HAL_GPIO_EXTI_Callback>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40010400 	.word	0x40010400

08003064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d141      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800308a:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003096:	d131      	bne.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003098:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309e:	4a46      	ldr	r2, [pc, #280]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a8:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030b0:	4a41      	ldr	r2, [pc, #260]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030b8:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2232      	movs	r2, #50	@ 0x32
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a3f      	ldr	r2, [pc, #252]	@ (80031c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	0c9b      	lsrs	r3, r3, #18
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ce:	e002      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d6:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e2:	d102      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f2      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ea:	4b33      	ldr	r3, [pc, #204]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d158      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e057      	b.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030fc:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003102:	4a2d      	ldr	r2, [pc, #180]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800310c:	e04d      	b.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003114:	d141      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003122:	d131      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800312a:	4a23      	ldr	r2, [pc, #140]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003134:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2232      	movs	r2, #50	@ 0x32
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315a:	e002      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d102      	bne.n	8003176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f2      	bne.n	800315c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003182:	d112      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e011      	b.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003198:	e007      	b.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40007000 	.word	0x40007000
 80031bc:	20000000 	.word	0x20000000
 80031c0:	431bde83 	.word	0x431bde83

080031c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d2:	6093      	str	r3, [r2, #8]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e2fe      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d075      	beq.n	80032ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003202:	4b97      	ldr	r3, [pc, #604]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320c:	4b94      	ldr	r3, [pc, #592]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d102      	bne.n	8003222 <HAL_RCC_OscConfig+0x3e>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d002      	beq.n	8003228 <HAL_RCC_OscConfig+0x44>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b8d      	ldr	r3, [pc, #564]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05b      	beq.n	80032ec <HAL_RCC_OscConfig+0x108>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d157      	bne.n	80032ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e2d9      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x74>
 800324a:	4b85      	ldr	r3, [pc, #532]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a84      	ldr	r2, [pc, #528]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7e      	ldr	r2, [pc, #504]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b7c      	ldr	r3, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7b      	ldr	r2, [pc, #492]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xb0>
 800327c:	4b78      	ldr	r3, [pc, #480]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a77      	ldr	r2, [pc, #476]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b75      	ldr	r3, [pc, #468]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fa62 	bl	8001764 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fa5e 	bl	8001764 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e29e      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xc0>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fa4e 	bl	8001764 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fa4a 	bl	8001764 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e28a      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	4b60      	ldr	r3, [pc, #384]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0xe8>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d075      	beq.n	80033e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b59      	ldr	r3, [pc, #356]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b56      	ldr	r3, [pc, #344]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d102      	bne.n	800331a <HAL_RCC_OscConfig+0x136>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d002      	beq.n	8003320 <HAL_RCC_OscConfig+0x13c>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d11f      	bne.n	8003360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003320:	4b4f      	ldr	r3, [pc, #316]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x154>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e25d      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b49      	ldr	r3, [pc, #292]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	4946      	ldr	r1, [pc, #280]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800334c:	4b45      	ldr	r3, [pc, #276]	@ (8003464 <HAL_RCC_OscConfig+0x280>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fd91 	bl	8000e78 <HAL_InitTick>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e249      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003368:	4b3d      	ldr	r3, [pc, #244]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3c      	ldr	r2, [pc, #240]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f9f6 	bl	8001764 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe f9f2 	bl	8001764 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e232      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	492d      	ldr	r1, [pc, #180]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
 80033ae:	e01a      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f9d2 	bl	8001764 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe f9ce 	bl	8001764 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e20e      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1e0>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d041      	beq.n	8003476 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01c      	beq.n	8003434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003400:	4a17      	ldr	r2, [pc, #92]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fe f9ab 	bl	8001764 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003412:	f7fe f9a7 	bl	8001764 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1e7      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003424:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <HAL_RCC_OscConfig+0x22e>
 8003432:	e020      	b.n	8003476 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_OscConfig+0x27c>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe f98e 	bl	8001764 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344a:	e00d      	b.n	8003468 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe f98a 	bl	8001764 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d906      	bls.n	8003468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1ca      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003468:	4b8c      	ldr	r3, [pc, #560]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ea      	bne.n	800344c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80a6 	beq.w	80035d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003488:	4b84      	ldr	r3, [pc, #528]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x2b4>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x2b6>
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b7f      	ldr	r3, [pc, #508]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034aa:	4b7c      	ldr	r3, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	4b79      	ldr	r3, [pc, #484]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c6:	4b76      	ldr	r3, [pc, #472]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a75      	ldr	r2, [pc, #468]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe f947 	bl	8001764 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe f943 	bl	8001764 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e183      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	4b6c      	ldr	r3, [pc, #432]	@ (80036a0 <HAL_RCC_OscConfig+0x4bc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_RCC_OscConfig+0x32e>
 8003500:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003510:	e024      	b.n	800355c <HAL_RCC_OscConfig+0x378>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d110      	bne.n	800353c <HAL_RCC_OscConfig+0x358>
 800351a:	4b60      	ldr	r3, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	4a5e      	ldr	r2, [pc, #376]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800352a:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x378>
 800353c:	4b57      	ldr	r3, [pc, #348]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	4a56      	ldr	r2, [pc, #344]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe f8fe 	bl	8001764 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe f8fa 	bl	8001764 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e138      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	4b46      	ldr	r3, [pc, #280]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ed      	beq.n	800356c <HAL_RCC_OscConfig+0x388>
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe f8e7 	bl	8001764 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe f8e3 	bl	8001764 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e121      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	4b3a      	ldr	r3, [pc, #232]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ed      	bne.n	800359a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b35      	ldr	r3, [pc, #212]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	4a34      	ldr	r2, [pc, #208]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03c      	beq.n	8003656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01c      	beq.n	800361e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e4:	4b2d      	ldr	r3, [pc, #180]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ea:	4a2c      	ldr	r2, [pc, #176]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe f8b6 	bl	8001764 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fc:	f7fe f8b2 	bl	8001764 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0f2      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	4b23      	ldr	r3, [pc, #140]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <HAL_RCC_OscConfig+0x418>
 800361c:	e01b      	b.n	8003656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361e:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe f899 	bl	8001764 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003636:	f7fe f895 	bl	8001764 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0d5      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80c9 	beq.w	80037f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003660:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b0c      	cmp	r3, #12
 800366a:	f000 8083 	beq.w	8003774 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d15e      	bne.n	8003734 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe f86f 	bl	8001764 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	e00c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe f86b 	bl	8001764 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d905      	bls.n	80036a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0ab      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ec      	bne.n	800368a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b0:	4b52      	ldr	r3, [pc, #328]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b52      	ldr	r3, [pc, #328]	@ (8003800 <HAL_RCC_OscConfig+0x61c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6a11      	ldr	r1, [r2, #32]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036c0:	3a01      	subs	r2, #1
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	4311      	orrs	r1, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036ca:	0212      	lsls	r2, r2, #8
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036d2:	0852      	lsrs	r2, r2, #1
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0552      	lsls	r2, r2, #21
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0652      	lsls	r2, r2, #25
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ea:	06d2      	lsls	r2, r2, #27
 80036ec:	430a      	orrs	r2, r1
 80036ee:	4943      	ldr	r1, [pc, #268]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f4:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a40      	ldr	r2, [pc, #256]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003700:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a3d      	ldr	r2, [pc, #244]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f82a 	bl	8001764 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f826 	bl	8001764 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e066      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x530>
 8003732:	e05e      	b.n	80037f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a30      	ldr	r2, [pc, #192]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800373a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe f810 	bl	8001764 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe f80c 	bl	8001764 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04c      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375a:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003766:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4924      	ldr	r1, [pc, #144]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 800376c:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_RCC_OscConfig+0x620>)
 800376e:	4013      	ands	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
 8003772:	e03e      	b.n	80037f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e039      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCC_OscConfig+0x618>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	429a      	cmp	r2, r3
 8003792:	d12c      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	3b01      	subs	r3, #1
 80037a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d123      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11b      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d113      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	019f800c 	.word	0x019f800c
 8003804:	feeefffc 	.word	0xfeeefffc

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e11e      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b91      	ldr	r3, [pc, #580]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	498c      	ldr	r1, [pc, #560]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e106      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d073      	beq.n	8003944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d129      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003864:	4b81      	ldr	r3, [pc, #516]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0f4      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003874:	f000 f9d0 	bl	8003c18 <RCC_GetSysClockFreqFromPLLSource>
 8003878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a70 <HAL_RCC_ClockConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d93f      	bls.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003882:	4b7a      	ldr	r3, [pc, #488]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d033      	beq.n	8003902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12f      	bne.n	8003902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038a2:	4b72      	ldr	r3, [pc, #456]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038aa:	4a70      	ldr	r2, [pc, #448]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e024      	b.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0c6      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0be      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038e0:	f000 f8ce 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4a61      	ldr	r2, [pc, #388]	@ (8003a70 <HAL_RCC_ClockConfig+0x268>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d909      	bls.n	8003902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80038f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b5a      	ldr	r3, [pc, #360]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4957      	ldr	r1, [pc, #348]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fd ff26 	bl	8001764 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fd ff22 	bl	8001764 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e095      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b4e      	ldr	r3, [pc, #312]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b43      	ldr	r3, [pc, #268]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a42      	ldr	r2, [pc, #264]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003974:	4b3d      	ldr	r3, [pc, #244]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800397c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 800397e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b39      	ldr	r3, [pc, #228]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4936      	ldr	r1, [pc, #216]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
 8003996:	e008      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d105      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800399e:	4b33      	ldr	r3, [pc, #204]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 80039a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d21d      	bcs.n	80039f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 020f 	bic.w	r2, r3, #15
 80039c0:	4929      	ldr	r1, [pc, #164]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039c8:	f7fd fecc 	bl	8001764 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd fec8 	bl	8001764 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e03b      	b.n	8003a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1ed      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4917      	ldr	r1, [pc, #92]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	490f      	ldr	r1, [pc, #60]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a32:	f000 f825 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	490c      	ldr	r1, [pc, #48]	@ (8003a74 <HAL_RCC_ClockConfig+0x26c>)
 8003a44:	5ccb      	ldrb	r3, [r1, r3]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <HAL_RCC_ClockConfig+0x270>)
 8003a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a52:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fa0e 	bl	8000e78 <HAL_InitTick>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	04c4b400 	.word	0x04c4b400
 8003a74:	08008de4 	.word	0x08008de4
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a86:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a92:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	e047      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a98:	4b27      	ldr	r3, [pc, #156]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa4:	4b26      	ldr	r3, [pc, #152]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e03e      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003aaa:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d136      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ab6:	4b20      	ldr	r3, [pc, #128]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3301      	adds	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ade:	68d2      	ldr	r2, [r2, #12]
 8003ae0:	0a12      	lsrs	r2, r2, #8
 8003ae2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
      break;
 8003aec:	e00c      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aee:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	0a12      	lsrs	r2, r2, #8
 8003afc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b00:	fb02 f303 	mul.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
      break;
 8003b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0e5b      	lsrs	r3, r3, #25
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	e001      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b28:	693b      	ldr	r3, [r7, #16]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	016e3600 	.word	0x016e3600

08003b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000000 	.word	0x20000000

08003b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b60:	f7ff fff0 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08008df4 	.word	0x08008df4

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b8c:	f7ff ffda 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0adb      	lsrs	r3, r3, #11
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4904      	ldr	r1, [pc, #16]	@ (8003bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	08008df4 	.word	0x08008df4

08003bb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <HAL_RCC_GetClockConfig+0x5c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RCC_GetClockConfig+0x60>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40022000 	.word	0x40022000

08003c18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c28:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d10c      	bne.n	8003c56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	0a12      	lsrs	r2, r2, #8
 8003c4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
    break;
 8003c54:	e00c      	b.n	8003c70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c56:	4a12      	ldr	r2, [pc, #72]	@ (8003ca0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	0a12      	lsrs	r2, r2, #8
 8003c64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    break;
 8003c6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0e5b      	lsrs	r3, r3, #25
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c8a:	687b      	ldr	r3, [r7, #4]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	016e3600 	.word	0x016e3600
 8003ca0:	00f42400 	.word	0x00f42400

08003ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cac:	2300      	movs	r3, #0
 8003cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8098 	beq.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc6:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cde:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cee:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a39      	ldr	r2, [pc, #228]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fd33 	bl	8001764 <HAL_GetTick>
 8003cfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d00:	e009      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fd fd2f 	bl	8001764 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d902      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	74fb      	strb	r3, [r7, #19]
        break;
 8003d14:	e005      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d16:	4b30      	ldr	r3, [pc, #192]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ef      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d159      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d28:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01e      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d019      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d44:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d60:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d70:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fd fcef 	bl	8001764 <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d88:	e00b      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fd fceb 	bl	8001764 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d902      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ec      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	4903      	ldr	r1, [pc, #12]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	74bb      	strb	r3, [r7, #18]
 8003dd2:	e005      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de0:	7c7b      	ldrb	r3, [r7, #17]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de6:	4ba7      	ldr	r3, [pc, #668]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	4aa6      	ldr	r2, [pc, #664]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfe:	4ba1      	ldr	r3, [pc, #644]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f023 0203 	bic.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	499d      	ldr	r1, [pc, #628]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e20:	4b98      	ldr	r3, [pc, #608]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f023 020c 	bic.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4995      	ldr	r1, [pc, #596]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e42:	4b90      	ldr	r3, [pc, #576]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	498c      	ldr	r1, [pc, #560]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e64:	4b87      	ldr	r3, [pc, #540]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	4984      	ldr	r1, [pc, #528]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e86:	4b7f      	ldr	r3, [pc, #508]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	497b      	ldr	r1, [pc, #492]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea8:	4b76      	ldr	r3, [pc, #472]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	4973      	ldr	r1, [pc, #460]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eca:	4b6e      	ldr	r3, [pc, #440]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	496a      	ldr	r1, [pc, #424]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eec:	4b65      	ldr	r3, [pc, #404]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4962      	ldr	r1, [pc, #392]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	4959      	ldr	r1, [pc, #356]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f30:	4b54      	ldr	r3, [pc, #336]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	4951      	ldr	r1, [pc, #324]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f52:	4b4c      	ldr	r3, [pc, #304]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4948      	ldr	r1, [pc, #288]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f74:	4b43      	ldr	r3, [pc, #268]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	4940      	ldr	r1, [pc, #256]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b3b      	ldr	r3, [pc, #236]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a3a      	ldr	r2, [pc, #232]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fac:	4b35      	ldr	r3, [pc, #212]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fba:	4932      	ldr	r1, [pc, #200]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fe4:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	4924      	ldr	r1, [pc, #144]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004002:	d105      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b1f      	ldr	r3, [pc, #124]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401c:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402a:	4916      	ldr	r1, [pc, #88]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800403a:	d105      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403c:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a10      	ldr	r2, [pc, #64]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004046:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d019      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	4908      	ldr	r1, [pc, #32]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004072:	d109      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a02      	ldr	r2, [pc, #8]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407e:	60d3      	str	r3, [r2, #12]
 8004080:	e002      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004094:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	4926      	ldr	r1, [pc, #152]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040b4:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a20      	ldr	r2, [pc, #128]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80040cc:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040da:	4918      	ldr	r1, [pc, #96]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ea:	d105      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040ec:	4b13      	ldr	r3, [pc, #76]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a12      	ldr	r2, [pc, #72]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004104:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004112:	490a      	ldr	r1, [pc, #40]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a04      	ldr	r2, [pc, #16]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004130:	7cbb      	ldrb	r3, [r7, #18]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e049      	b.n	80041e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd f912 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 fe60 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e054      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004232:	d01d      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a21      	ldr	r2, [pc, #132]	@ (80042c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_TIM_Base_Start_IT+0xdc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x80>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d115      	bne.n	800429c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_TIM_Base_Start_IT+0xec>)
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d015      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0xbe>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004288:	d011      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	e008      	b.n	80042ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40013400 	.word	0x40013400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40015000 	.word	0x40015000
 80042dc:	00010007 	.word	0x00010007

080042e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e049      	b.n	8004386 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f841 	bl	800438e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fd90 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x24>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e03c      	b.n	8004442 <HAL_TIM_PWM_Start+0x9e>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x3e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e02f      	b.n	8004442 <HAL_TIM_PWM_Start+0x9e>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e022      	b.n	8004442 <HAL_TIM_PWM_Start+0x9e>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d109      	bne.n	8004416 <HAL_TIM_PWM_Start+0x72>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e015      	b.n	8004442 <HAL_TIM_PWM_Start+0x9e>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d109      	bne.n	8004430 <HAL_TIM_PWM_Start+0x8c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e008      	b.n	8004442 <HAL_TIM_PWM_Start+0x9e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0a6      	b.n	8004598 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0xb6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004458:	e023      	b.n	80044a2 <HAL_TIM_PWM_Start+0xfe>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xc6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_PWM_Start+0xfe>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0xd6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004478:	e013      	b.n	80044a2 <HAL_TIM_PWM_Start+0xfe>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xe6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_PWM_Start+0xfe>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0xf6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004498:	e003      	b.n	80044a2 <HAL_TIM_PWM_Start+0xfe>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f9b8 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3a      	ldr	r2, [pc, #232]	@ (80045a0 <HAL_TIM_PWM_Start+0x1fc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_PWM_Start+0x148>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a39      	ldr	r2, [pc, #228]	@ (80045a4 <HAL_TIM_PWM_Start+0x200>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_PWM_Start+0x148>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a37      	ldr	r2, [pc, #220]	@ (80045a8 <HAL_TIM_PWM_Start+0x204>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_PWM_Start+0x148>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a36      	ldr	r2, [pc, #216]	@ (80045ac <HAL_TIM_PWM_Start+0x208>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_PWM_Start+0x148>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a34      	ldr	r2, [pc, #208]	@ (80045b0 <HAL_TIM_PWM_Start+0x20c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_PWM_Start+0x148>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a33      	ldr	r2, [pc, #204]	@ (80045b4 <HAL_TIM_PWM_Start+0x210>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_PWM_Start+0x14c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_TIM_PWM_Start+0x14e>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a25      	ldr	r2, [pc, #148]	@ (80045a0 <HAL_TIM_PWM_Start+0x1fc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d022      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004518:	d01d      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a26      	ldr	r2, [pc, #152]	@ (80045b8 <HAL_TIM_PWM_Start+0x214>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d018      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <HAL_TIM_PWM_Start+0x218>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <HAL_TIM_PWM_Start+0x21c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00e      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_TIM_PWM_Start+0x200>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIM_PWM_Start+0x204>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIM_PWM_Start+0x1b2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <HAL_TIM_PWM_Start+0x210>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d115      	bne.n	8004582 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_TIM_PWM_Start+0x220>)
 800455e:	4013      	ands	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d015      	beq.n	8004594 <HAL_TIM_PWM_Start+0x1f0>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456e:	d011      	beq.n	8004594 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	e008      	b.n	8004594 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e000      	b.n	8004596 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	40015000 	.word	0x40015000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	00010007 	.word	0x00010007

080045c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f920 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a40      	ldr	r2, [pc, #256]	@ (80046e8 <HAL_TIM_PWM_Stop+0x120>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <HAL_TIM_PWM_Stop+0x54>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3f      	ldr	r2, [pc, #252]	@ (80046ec <HAL_TIM_PWM_Stop+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <HAL_TIM_PWM_Stop+0x54>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3d      	ldr	r2, [pc, #244]	@ (80046f0 <HAL_TIM_PWM_Stop+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_TIM_PWM_Stop+0x54>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a3c      	ldr	r2, [pc, #240]	@ (80046f4 <HAL_TIM_PWM_Stop+0x12c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIM_PWM_Stop+0x54>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3a      	ldr	r2, [pc, #232]	@ (80046f8 <HAL_TIM_PWM_Stop+0x130>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIM_PWM_Stop+0x54>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a39      	ldr	r2, [pc, #228]	@ (80046fc <HAL_TIM_PWM_Stop+0x134>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_TIM_PWM_Stop+0x58>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_TIM_PWM_Stop+0x5a>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_TIM_PWM_Stop+0x8e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_TIM_PWM_Stop+0x8e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_TIM_PWM_Stop+0xbe>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_TIM_PWM_Stop+0xbe>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Stop+0xce>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004694:	e023      	b.n	80046de <HAL_TIM_PWM_Stop+0x116>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Stop+0xde>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046a4:	e01b      	b.n	80046de <HAL_TIM_PWM_Stop+0x116>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Stop+0xee>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b4:	e013      	b.n	80046de <HAL_TIM_PWM_Stop+0x116>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Stop+0xfe>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046c4:	e00b      	b.n	80046de <HAL_TIM_PWM_Stop+0x116>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Stop+0x10e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	e003      	b.n	80046de <HAL_TIM_PWM_Stop+0x116>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40013400 	.word	0x40013400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40014400 	.word	0x40014400
 80046f8:	40014800 	.word	0x40014800
 80046fc:	40015000 	.word	0x40015000

08004700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0202 	mvn.w	r2, #2
 8004734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fb5c 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb4e 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fb5f 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0204 	mvn.w	r2, #4
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fb36 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb28 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb39 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fb10 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fb02 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fb13 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	d020      	beq.n	8004848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0210 	mvn.w	r2, #16
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2208      	movs	r2, #8
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 faea 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fadc 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 faed 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0201 	mvn.w	r2, #1
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc faca 	bl	8000e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f001 fafe 	bl	8005e96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f001 faf6 	bl	8005eaa <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 faa7 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0220 	mvn.w	r2, #32
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 fabe 	bl	8005e82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f001 faca 	bl	8005ebe <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 fac2 	bl	8005ed2 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00c      	beq.n	8004972 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 faba 	bl	8005ee6 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00c      	beq.n	8004996 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800498e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fab2 	bl	8005efa <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0ff      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b14      	cmp	r3, #20
 80049ca:	f200 80f0 	bhi.w	8004bae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	08004baf 	.word	0x08004baf
 80049dc:	08004baf 	.word	0x08004baf
 80049e0:	08004baf 	.word	0x08004baf
 80049e4:	08004a69 	.word	0x08004a69
 80049e8:	08004baf 	.word	0x08004baf
 80049ec:	08004baf 	.word	0x08004baf
 80049f0:	08004baf 	.word	0x08004baf
 80049f4:	08004aab 	.word	0x08004aab
 80049f8:	08004baf 	.word	0x08004baf
 80049fc:	08004baf 	.word	0x08004baf
 8004a00:	08004baf 	.word	0x08004baf
 8004a04:	08004aeb 	.word	0x08004aeb
 8004a08:	08004baf 	.word	0x08004baf
 8004a0c:	08004baf 	.word	0x08004baf
 8004a10:	08004baf 	.word	0x08004baf
 8004a14:	08004b2d 	.word	0x08004b2d
 8004a18:	08004baf 	.word	0x08004baf
 8004a1c:	08004baf 	.word	0x08004baf
 8004a20:	08004baf 	.word	0x08004baf
 8004a24:	08004b6d 	.word	0x08004b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fabc 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	619a      	str	r2, [r3, #24]
      break;
 8004a66:	e0a5      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fb36 	bl	80050e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e084      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fba9 	bl	8005208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0208 	orr.w	r2, r2, #8
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0204 	bic.w	r2, r2, #4
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	61da      	str	r2, [r3, #28]
      break;
 8004ae8:	e064      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fc1b 	bl	800532c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
      break;
 8004b2a:	e043      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fc8e 	bl	8005454 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004b6a:	e023      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fcd8 	bl	8005528 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004bac:	e002      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop

08004bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIM_ConfigClockSource+0x1c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e0f6      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x20a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6f      	ldr	r2, [pc, #444]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x214>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f000 80c1 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c24:	4a6d      	ldr	r2, [pc, #436]	@ (8004ddc <HAL_TIM_ConfigClockSource+0x214>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f200 80c6 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c2c:	4a6c      	ldr	r2, [pc, #432]	@ (8004de0 <HAL_TIM_ConfigClockSource+0x218>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f000 80b9 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c34:	4a6a      	ldr	r2, [pc, #424]	@ (8004de0 <HAL_TIM_ConfigClockSource+0x218>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f200 80be 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c3c:	4a69      	ldr	r2, [pc, #420]	@ (8004de4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f000 80b1 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c44:	4a67      	ldr	r2, [pc, #412]	@ (8004de4 <HAL_TIM_ConfigClockSource+0x21c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f200 80b6 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c4c:	4a66      	ldr	r2, [pc, #408]	@ (8004de8 <HAL_TIM_ConfigClockSource+0x220>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f000 80a9 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c54:	4a64      	ldr	r2, [pc, #400]	@ (8004de8 <HAL_TIM_ConfigClockSource+0x220>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f200 80ae 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c5c:	4a63      	ldr	r2, [pc, #396]	@ (8004dec <HAL_TIM_ConfigClockSource+0x224>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f000 80a1 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c64:	4a61      	ldr	r2, [pc, #388]	@ (8004dec <HAL_TIM_ConfigClockSource+0x224>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f200 80a6 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c6c:	4a60      	ldr	r2, [pc, #384]	@ (8004df0 <HAL_TIM_ConfigClockSource+0x228>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f000 8099 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c74:	4a5e      	ldr	r2, [pc, #376]	@ (8004df0 <HAL_TIM_ConfigClockSource+0x228>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f200 809e 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c80:	f000 8091 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c88:	f200 8096 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c90:	f000 8089 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c98:	f200 808e 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca0:	d03e      	beq.n	8004d20 <HAL_TIM_ConfigClockSource+0x158>
 8004ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca6:	f200 8087 	bhi.w	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cae:	f000 8086 	beq.w	8004dbe <HAL_TIM_ConfigClockSource+0x1f6>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d87f      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb8:	2b70      	cmp	r3, #112	@ 0x70
 8004cba:	d01a      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x12a>
 8004cbc:	2b70      	cmp	r3, #112	@ 0x70
 8004cbe:	d87b      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc0:	2b60      	cmp	r3, #96	@ 0x60
 8004cc2:	d050      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x19e>
 8004cc4:	2b60      	cmp	r3, #96	@ 0x60
 8004cc6:	d877      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc8:	2b50      	cmp	r3, #80	@ 0x50
 8004cca:	d03c      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x17e>
 8004ccc:	2b50      	cmp	r3, #80	@ 0x50
 8004cce:	d873      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	2b40      	cmp	r3, #64	@ 0x40
 8004cd2:	d058      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x1be>
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d86f      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd8:	2b30      	cmp	r3, #48	@ 0x30
 8004cda:	d064      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004cdc:	2b30      	cmp	r3, #48	@ 0x30
 8004cde:	d86b      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d060      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d867      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05c      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d05a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x1de>
 8004cf0:	e062      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d02:	f000 fd6d 	bl	80057e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
      break;
 8004d1e:	e04f      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d30:	f000 fd56 	bl	80057e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e03c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fcc8 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2150      	movs	r1, #80	@ 0x50
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd21 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e02c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fce7 	bl	8005746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2160      	movs	r1, #96	@ 0x60
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fd11 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e01c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fca8 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2140      	movs	r1, #64	@ 0x40
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fd01 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e00c      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f000 fcf8 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8004db6:	e003      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	00100070 	.word	0x00100070
 8004de0:	00100060 	.word	0x00100060
 8004de4:	00100050 	.word	0x00100050
 8004de8:	00100040 	.word	0x00100040
 8004dec:	00100030 	.word	0x00100030
 8004df0:	00100020 	.word	0x00100020

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a4c      	ldr	r2, [pc, #304]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d017      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d013      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a49      	ldr	r2, [pc, #292]	@ (8004f8c <TIM_Base_SetConfig+0x148>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a48      	ldr	r2, [pc, #288]	@ (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a47      	ldr	r2, [pc, #284]	@ (8004f94 <TIM_Base_SetConfig+0x150>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a46      	ldr	r2, [pc, #280]	@ (8004f98 <TIM_Base_SetConfig+0x154>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x48>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a45      	ldr	r2, [pc, #276]	@ (8004f9c <TIM_Base_SetConfig+0x158>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d108      	bne.n	8004e9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a39      	ldr	r2, [pc, #228]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d023      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eac:	d01f      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	@ (8004f8c <TIM_Base_SetConfig+0x148>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a35      	ldr	r2, [pc, #212]	@ (8004f90 <TIM_Base_SetConfig+0x14c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a34      	ldr	r2, [pc, #208]	@ (8004f94 <TIM_Base_SetConfig+0x150>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	@ (8004f98 <TIM_Base_SetConfig+0x154>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a33      	ldr	r2, [pc, #204]	@ (8004fa0 <TIM_Base_SetConfig+0x15c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a32      	ldr	r2, [pc, #200]	@ (8004fa4 <TIM_Base_SetConfig+0x160>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a31      	ldr	r2, [pc, #196]	@ (8004fa8 <TIM_Base_SetConfig+0x164>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0xaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8004f9c <TIM_Base_SetConfig+0x158>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f98 <TIM_Base_SetConfig+0x154>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <TIM_Base_SetConfig+0x15c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	@ (8004fa4 <TIM_Base_SetConfig+0x160>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <TIM_Base_SetConfig+0x164>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0x110>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <TIM_Base_SetConfig+0x158>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d105      	bne.n	8004f7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40015000 	.word	0x40015000
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f023 0201 	bic.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0302 	bic.w	r3, r3, #2
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a30      	ldr	r2, [pc, #192]	@ (80050c8 <TIM_OC1_SetConfig+0x11c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_OC1_SetConfig+0x88>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2f      	ldr	r2, [pc, #188]	@ (80050cc <TIM_OC1_SetConfig+0x120>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_OC1_SetConfig+0x88>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a2e      	ldr	r2, [pc, #184]	@ (80050d0 <TIM_OC1_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_OC1_SetConfig+0x88>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2d      	ldr	r2, [pc, #180]	@ (80050d4 <TIM_OC1_SetConfig+0x128>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_OC1_SetConfig+0x88>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2c      	ldr	r2, [pc, #176]	@ (80050d8 <TIM_OC1_SetConfig+0x12c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_OC1_SetConfig+0x88>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2b      	ldr	r2, [pc, #172]	@ (80050dc <TIM_OC1_SetConfig+0x130>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d10c      	bne.n	800504e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0308 	bic.w	r3, r3, #8
 800503a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f023 0304 	bic.w	r3, r3, #4
 800504c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1d      	ldr	r2, [pc, #116]	@ (80050c8 <TIM_OC1_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <TIM_OC1_SetConfig+0xd2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <TIM_OC1_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00f      	beq.n	800507e <TIM_OC1_SetConfig+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <TIM_OC1_SetConfig+0x124>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_OC1_SetConfig+0xd2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <TIM_OC1_SetConfig+0x128>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_OC1_SetConfig+0xd2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <TIM_OC1_SetConfig+0x12c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC1_SetConfig+0xd2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <TIM_OC1_SetConfig+0x130>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d111      	bne.n	80050a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40013400 	.word	0x40013400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800
 80050dc:	40015000 	.word	0x40015000

080050e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 0320 	bic.w	r3, r3, #32
 800512e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2c      	ldr	r2, [pc, #176]	@ (80051f0 <TIM_OC2_SetConfig+0x110>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d007      	beq.n	8005154 <TIM_OC2_SetConfig+0x74>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <TIM_OC2_SetConfig+0x114>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC2_SetConfig+0x74>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <TIM_OC2_SetConfig+0x118>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10d      	bne.n	8005170 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <TIM_OC2_SetConfig+0x110>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <TIM_OC2_SetConfig+0xc0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <TIM_OC2_SetConfig+0x114>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00f      	beq.n	80051a0 <TIM_OC2_SetConfig+0xc0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1e      	ldr	r2, [pc, #120]	@ (80051fc <TIM_OC2_SetConfig+0x11c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <TIM_OC2_SetConfig+0xc0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <TIM_OC2_SetConfig+0x120>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_OC2_SetConfig+0xc0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <TIM_OC2_SetConfig+0x124>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC2_SetConfig+0xc0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <TIM_OC2_SetConfig+0x118>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d113      	bne.n	80051c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40015000 	.word	0x40015000
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800

08005208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2b      	ldr	r2, [pc, #172]	@ (8005314 <TIM_OC3_SetConfig+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_OC3_SetConfig+0x72>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2a      	ldr	r2, [pc, #168]	@ (8005318 <TIM_OC3_SetConfig+0x110>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC3_SetConfig+0x72>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a29      	ldr	r2, [pc, #164]	@ (800531c <TIM_OC3_SetConfig+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10d      	bne.n	8005296 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <TIM_OC3_SetConfig+0x10c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <TIM_OC3_SetConfig+0xbe>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <TIM_OC3_SetConfig+0x110>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00f      	beq.n	80052c6 <TIM_OC3_SetConfig+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <TIM_OC3_SetConfig+0x118>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_OC3_SetConfig+0xbe>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <TIM_OC3_SetConfig+0x11c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <TIM_OC3_SetConfig+0xbe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <TIM_OC3_SetConfig+0x120>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC3_SetConfig+0xbe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a16      	ldr	r2, [pc, #88]	@ (800531c <TIM_OC3_SetConfig+0x114>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d113      	bne.n	80052ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40015000 	.word	0x40015000
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800537a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <TIM_OC4_SetConfig+0x110>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_OC4_SetConfig+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a2b      	ldr	r2, [pc, #172]	@ (8005440 <TIM_OC4_SetConfig+0x114>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x74>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a2a      	ldr	r2, [pc, #168]	@ (8005444 <TIM_OC4_SetConfig+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10d      	bne.n	80053bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <TIM_OC4_SetConfig+0x110>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <TIM_OC4_SetConfig+0xc0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005440 <TIM_OC4_SetConfig+0x114>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00f      	beq.n	80053ec <TIM_OC4_SetConfig+0xc0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <TIM_OC4_SetConfig+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_OC4_SetConfig+0xc0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <TIM_OC4_SetConfig+0x120>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC4_SetConfig+0xc0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1c      	ldr	r2, [pc, #112]	@ (8005450 <TIM_OC4_SetConfig+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC4_SetConfig+0xc0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <TIM_OC4_SetConfig+0x118>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d113      	bne.n	8005414 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40015000 	.word	0x40015000
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a19      	ldr	r2, [pc, #100]	@ (8005510 <TIM_OC5_SetConfig+0xbc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_OC5_SetConfig+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a18      	ldr	r2, [pc, #96]	@ (8005514 <TIM_OC5_SetConfig+0xc0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_OC5_SetConfig+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a17      	ldr	r2, [pc, #92]	@ (8005518 <TIM_OC5_SetConfig+0xc4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a16      	ldr	r2, [pc, #88]	@ (800551c <TIM_OC5_SetConfig+0xc8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_OC5_SetConfig+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a15      	ldr	r2, [pc, #84]	@ (8005520 <TIM_OC5_SetConfig+0xcc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC5_SetConfig+0x82>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <TIM_OC5_SetConfig+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d109      	bne.n	80054ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800
 8005524:	40015000 	.word	0x40015000

08005528 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800556e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	051b      	lsls	r3, r3, #20
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a1a      	ldr	r2, [pc, #104]	@ (80055e8 <TIM_OC6_SetConfig+0xc0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_OC6_SetConfig+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a19      	ldr	r2, [pc, #100]	@ (80055ec <TIM_OC6_SetConfig+0xc4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <TIM_OC6_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a18      	ldr	r2, [pc, #96]	@ (80055f0 <TIM_OC6_SetConfig+0xc8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a17      	ldr	r2, [pc, #92]	@ (80055f4 <TIM_OC6_SetConfig+0xcc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_OC6_SetConfig+0x84>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a16      	ldr	r2, [pc, #88]	@ (80055f8 <TIM_OC6_SetConfig+0xd0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_OC6_SetConfig+0x84>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <TIM_OC6_SetConfig+0xd4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d109      	bne.n	80055c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40013400 	.word	0x40013400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800
 80055fc:	40015000 	.word	0x40015000

08005600 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f023 0201 	bic.w	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4a28      	ldr	r2, [pc, #160]	@ (80056cc <TIM_TI1_SetConfig+0xcc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d01b      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005634:	d017      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a25      	ldr	r2, [pc, #148]	@ (80056d0 <TIM_TI1_SetConfig+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a24      	ldr	r2, [pc, #144]	@ (80056d4 <TIM_TI1_SetConfig+0xd4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a23      	ldr	r2, [pc, #140]	@ (80056d8 <TIM_TI1_SetConfig+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a22      	ldr	r2, [pc, #136]	@ (80056dc <TIM_TI1_SetConfig+0xdc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <TIM_TI1_SetConfig+0xe0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_TI1_SetConfig+0x66>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a20      	ldr	r2, [pc, #128]	@ (80056e4 <TIM_TI1_SetConfig+0xe4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <TIM_TI1_SetConfig+0x6a>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <TIM_TI1_SetConfig+0x6c>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0303 	bic.w	r3, r3, #3
 8005676:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e003      	b.n	800568a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	b2db      	uxtb	r3, r3
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f023 030a 	bic.w	r3, r3, #10
 80056a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f003 030a 	and.w	r3, r3, #10
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40013400 	.word	0x40013400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40015000 	.word	0x40015000

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0210 	bic.w	r2, r3, #16
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 0307 	orr.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2201      	movs	r2, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b08a      	sub	sp, #40	@ 0x28
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0a0      	b.n	80059c0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fb fd9c 	bl	80013d0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7ff faca 	bl	8004e44 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6819      	ldr	r1, [r3, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2203      	movs	r2, #3
 80058be:	f7ff fe9f 	bl	8005600 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 020c 	bic.w	r2, r2, #12
 80058d0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6999      	ldr	r1, [r3, #24]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058f2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005916:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0204 	orr.w	r2, r2, #4
 800593a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005944:	2370      	movs	r3, #112	@ 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f107 020c 	add.w	r2, r7, #12
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fbbb 	bl	80050e0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800598c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	@ 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_TIMEx_PWMN_Start+0x24>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e022      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d109      	bne.n	8005a06 <HAL_TIMEx_PWMN_Start+0x3e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e015      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d109      	bne.n	8005a20 <HAL_TIMEx_PWMN_Start+0x58>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e008      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e073      	b.n	8005b22 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIMEx_PWMN_Start+0x82>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a48:	e013      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIMEx_PWMN_Start+0x92>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a58:	e00b      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIMEx_PWMN_Start+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a68:	e003      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2204      	movs	r2, #4
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa47 	bl	8005f0e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a25      	ldr	r2, [pc, #148]	@ (8005b2c <HAL_TIMEx_PWMN_Start+0x164>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <HAL_TIMEx_PWMN_Start+0x168>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a20      	ldr	r2, [pc, #128]	@ (8005b34 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <HAL_TIMEx_PWMN_Start+0x170>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <HAL_TIMEx_PWMN_Start+0x174>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <HAL_TIMEx_PWMN_Start+0x178>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d115      	bne.n	8005b0c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <HAL_TIMEx_PWMN_Start+0x180>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d015      	beq.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af8:	d011      	beq.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e008      	b.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e000      	b.n	8005b20 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40015000 	.word	0x40015000
 8005b48:	00010007 	.word	0x00010007

08005b4c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f9d5 	bl	8005f0e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIMEx_PWMN_Stop+0x88>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd2:	e013      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d104      	bne.n	8005be4 <HAL_TIMEx_PWMN_Stop+0x98>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005be2:	e00b      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d104      	bne.n	8005bf4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bf2:	e003      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e074      	b.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a34      	ldr	r2, [pc, #208]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca0:	d01d      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a18      	ldr	r2, [pc, #96]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a11      	ldr	r2, [pc, #68]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40015000 	.word	0x40015000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40014000 	.word	0x40014000

08005d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e078      	b.n	8005e42 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	@ (8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d11c      	bne.n	8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e00:	051b      	lsls	r3, r3, #20
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40015000 	.word	0x40015000

08005e5c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005e72:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2204      	movs	r2, #4
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	401a      	ands	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	431a      	orrs	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e042      	b.n	8005ff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fb fb3d 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2224      	movs	r2, #36	@ 0x24
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 ff60 	bl	8006e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fc61 	bl	8006870 <UART_SetConfig>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e01b      	b.n	8005ff0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 ffdf 	bl	8006fac <UART_CheckIdleState>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	@ 0x28
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600e:	2b20      	cmp	r3, #32
 8006010:	d17b      	bne.n	800610a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Transmit+0x26>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e074      	b.n	800610c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2221      	movs	r2, #33	@ 0x21
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006032:	f7fb fb97 	bl	8001764 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006050:	d108      	bne.n	8006064 <HAL_UART_Transmit+0x6c>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e003      	b.n	800606c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800606c:	e030      	b.n	80060d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	2180      	movs	r1, #128	@ 0x80
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f001 f841 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e03d      	b.n	800610c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3302      	adds	r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e007      	b.n	80060be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1c8      	bne.n	800606e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	2140      	movs	r1, #64	@ 0x40
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 f80a 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e006      	b.n	800610c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	@ 0x28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006128:	2b20      	cmp	r3, #32
 800612a:	d137      	bne.n	800619c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_UART_Receive_IT+0x24>
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e030      	b.n	800619e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	@ (80061a8 <HAL_UART_Receive_IT+0x94>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d01f      	beq.n	800618c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	61bb      	str	r3, [r7, #24]
   return(result);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e6      	bne.n	800615a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	461a      	mov	r2, r3
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 f822 	bl	80071dc <UART_Start_Receive_IT>
 8006198:	4603      	mov	r3, r0
 800619a:	e000      	b.n	800619e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	@ 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40008000 	.word	0x40008000

080061ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b0ba      	sub	sp, #232	@ 0xe8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061da:	4013      	ands	r3, r2
 80061dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11b      	bne.n	8006220 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d015      	beq.n	8006220 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8300 	beq.w	8006816 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
      }
      return;
 800621e:	e2fa      	b.n	8006816 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8123 	beq.w	8006470 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800622a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800622e:	4b8d      	ldr	r3, [pc, #564]	@ (8006464 <HAL_UART_IRQHandler+0x2b8>)
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006236:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800623a:	4b8b      	ldr	r3, [pc, #556]	@ (8006468 <HAL_UART_IRQHandler+0x2bc>)
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8116 	beq.w	8006470 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d011      	beq.n	8006274 <HAL_UART_IRQHandler+0xc8>
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2201      	movs	r2, #1
 8006262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f043 0201 	orr.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d011      	beq.n	80062a4 <HAL_UART_IRQHandler+0xf8>
 8006280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2202      	movs	r2, #2
 8006292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629a:	f043 0204 	orr.w	r2, r3, #4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d011      	beq.n	80062d4 <HAL_UART_IRQHandler+0x128>
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2204      	movs	r2, #4
 80062c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	f043 0202 	orr.w	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d017      	beq.n	8006310 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006464 <HAL_UART_IRQHandler+0x2b8>)
 80062f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2208      	movs	r2, #8
 80062fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f043 0208 	orr.w	r2, r3, #8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006318:	2b00      	cmp	r3, #0
 800631a:	d012      	beq.n	8006342 <HAL_UART_IRQHandler+0x196>
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006320:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00c      	beq.n	8006342 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8266 	beq.w	800681a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006388:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d005      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d054      	beq.n	8006450 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f83a 	bl	8007420 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d146      	bne.n	8006448 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d9      	bne.n	80063ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006416:	4a15      	ldr	r2, [pc, #84]	@ (800646c <HAL_UART_IRQHandler+0x2c0>)
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006420:	4618      	mov	r0, r3
 8006422:	f7fc fc06 	bl	8002c32 <HAL_DMA_Abort_IT>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d019      	beq.n	8006460 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800643a:	4610      	mov	r0, r2
 800643c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643e:	e00f      	b.n	8006460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9ff 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006446:	e00b      	b.n	8006460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9fb 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644e:	e007      	b.n	8006460 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f9f7 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800645e:	e1dc      	b.n	800681a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	bf00      	nop
    return;
 8006462:	e1da      	b.n	800681a <HAL_UART_IRQHandler+0x66e>
 8006464:	10000001 	.word	0x10000001
 8006468:	04000120 	.word	0x04000120
 800646c:	080074ed 	.word	0x080074ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006474:	2b01      	cmp	r3, #1
 8006476:	f040 8170 	bne.w	800675a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8169 	beq.w	800675a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8162 	beq.w	800675a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2210      	movs	r2, #16
 800649c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	f040 80d8 	bne.w	800665e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80af 	beq.w	8006624 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064d0:	429a      	cmp	r2, r3
 80064d2:	f080 80a7 	bcs.w	8006624 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 8087 	bne.w	8006602 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800650c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800651e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006522:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800652a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1da      	bne.n	80064f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800654e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800656a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e1      	bne.n	800653e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800658a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800658c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800659e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e3      	bne.n	800657a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e4      	bne.n	80065c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fc fabf 	bl	8002b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f91b 	bl	8006858 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006622:	e0fc      	b.n	800681e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800662a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800662e:	429a      	cmp	r2, r3
 8006630:	f040 80f5 	bne.w	800681e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 80eb 	bne.w	800681e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8fe 	bl	8006858 <HAL_UARTEx_RxEventCallback>
      return;
 800665c:	e0df      	b.n	800681e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800666a:	b29b      	uxth	r3, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 80d1 	beq.w	8006822 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80cc 	beq.w	8006822 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e4      	bne.n	800668a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	623b      	str	r3, [r7, #32]
   return(result);
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80066ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e1      	bne.n	80066c0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60fb      	str	r3, [r7, #12]
   return(result);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	617b      	str	r3, [r7, #20]
   return(result);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e4      	bne.n	8006710 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800674c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f880 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006758:	e063      	b.n	8006822 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <HAL_UART_IRQHandler+0x5d8>
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800677a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fc17 	bl	8007fb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006782:	e051      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800679c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d03a      	beq.n	8006826 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
    }
    return;
 80067b8:	e035      	b.n	8006826 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_UART_IRQHandler+0x62e>
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fea0 	bl	8007518 <UART_EndTransmit_IT>
    return;
 80067d8:	e026      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_UART_IRQHandler+0x64e>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fbf0 	bl	8007fd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067f8:	e016      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <HAL_UART_IRQHandler+0x67c>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680a:	2b00      	cmp	r3, #0
 800680c:	da0c      	bge.n	8006828 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fbd8 	bl	8007fc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006814:	e008      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
      return;
 8006816:	bf00      	nop
 8006818:	e006      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
    return;
 800681a:	bf00      	nop
 800681c:	e004      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
      return;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
      return;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <HAL_UART_IRQHandler+0x67c>
    return;
 8006826:	bf00      	nop
  }
}
 8006828:	37e8      	adds	r7, #232	@ 0xe8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006874:	b08c      	sub	sp, #48	@ 0x30
 8006876:	af00      	add	r7, sp, #0
 8006878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	431a      	orrs	r2, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	431a      	orrs	r2, r3
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	4313      	orrs	r3, r2
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4baa      	ldr	r3, [pc, #680]	@ (8006b48 <UART_SetConfig+0x2d8>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a8:	430b      	orrs	r3, r1
 80068aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a9f      	ldr	r2, [pc, #636]	@ (8006b4c <UART_SetConfig+0x2dc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068d8:	4313      	orrs	r3, r2
 80068da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fa:	f023 010f 	bic.w	r1, r3, #15
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a90      	ldr	r2, [pc, #576]	@ (8006b50 <UART_SetConfig+0x2e0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d125      	bne.n	8006960 <UART_SetConfig+0xf0>
 8006914:	4b8f      	ldr	r3, [pc, #572]	@ (8006b54 <UART_SetConfig+0x2e4>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b03      	cmp	r3, #3
 8006920:	d81a      	bhi.n	8006958 <UART_SetConfig+0xe8>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <UART_SetConfig+0xb8>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006939 	.word	0x08006939
 800692c:	08006949 	.word	0x08006949
 8006930:	08006941 	.word	0x08006941
 8006934:	08006951 	.word	0x08006951
 8006938:	2301      	movs	r3, #1
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693e:	e116      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e112      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e10e      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e10a      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e106      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7c      	ldr	r2, [pc, #496]	@ (8006b58 <UART_SetConfig+0x2e8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d138      	bne.n	80069dc <UART_SetConfig+0x16c>
 800696a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b54 <UART_SetConfig+0x2e4>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b0c      	cmp	r3, #12
 8006976:	d82d      	bhi.n	80069d4 <UART_SetConfig+0x164>
 8006978:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <UART_SetConfig+0x110>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069b5 	.word	0x080069b5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069d5 	.word	0x080069d5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	080069d5 	.word	0x080069d5
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069cd 	.word	0x080069cd
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ba:	e0d8      	b.n	8006b6e <UART_SetConfig+0x2fe>
 80069bc:	2302      	movs	r3, #2
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c2:	e0d4      	b.n	8006b6e <UART_SetConfig+0x2fe>
 80069c4:	2304      	movs	r3, #4
 80069c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ca:	e0d0      	b.n	8006b6e <UART_SetConfig+0x2fe>
 80069cc:	2308      	movs	r3, #8
 80069ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d2:	e0cc      	b.n	8006b6e <UART_SetConfig+0x2fe>
 80069d4:	2310      	movs	r3, #16
 80069d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069da:	e0c8      	b.n	8006b6e <UART_SetConfig+0x2fe>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a5e      	ldr	r2, [pc, #376]	@ (8006b5c <UART_SetConfig+0x2ec>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d125      	bne.n	8006a32 <UART_SetConfig+0x1c2>
 80069e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b54 <UART_SetConfig+0x2e4>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069f0:	2b30      	cmp	r3, #48	@ 0x30
 80069f2:	d016      	beq.n	8006a22 <UART_SetConfig+0x1b2>
 80069f4:	2b30      	cmp	r3, #48	@ 0x30
 80069f6:	d818      	bhi.n	8006a2a <UART_SetConfig+0x1ba>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d00a      	beq.n	8006a12 <UART_SetConfig+0x1a2>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d814      	bhi.n	8006a2a <UART_SetConfig+0x1ba>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <UART_SetConfig+0x19a>
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d008      	beq.n	8006a1a <UART_SetConfig+0x1aa>
 8006a08:	e00f      	b.n	8006a2a <UART_SetConfig+0x1ba>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a10:	e0ad      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a12:	2302      	movs	r3, #2
 8006a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a18:	e0a9      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a20:	e0a5      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a22:	2308      	movs	r3, #8
 8006a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a28:	e0a1      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a30:	e09d      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4a      	ldr	r2, [pc, #296]	@ (8006b60 <UART_SetConfig+0x2f0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d125      	bne.n	8006a88 <UART_SetConfig+0x218>
 8006a3c:	4b45      	ldr	r3, [pc, #276]	@ (8006b54 <UART_SetConfig+0x2e4>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a48:	d016      	beq.n	8006a78 <UART_SetConfig+0x208>
 8006a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a4c:	d818      	bhi.n	8006a80 <UART_SetConfig+0x210>
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d00a      	beq.n	8006a68 <UART_SetConfig+0x1f8>
 8006a52:	2b80      	cmp	r3, #128	@ 0x80
 8006a54:	d814      	bhi.n	8006a80 <UART_SetConfig+0x210>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <UART_SetConfig+0x1f0>
 8006a5a:	2b40      	cmp	r3, #64	@ 0x40
 8006a5c:	d008      	beq.n	8006a70 <UART_SetConfig+0x200>
 8006a5e:	e00f      	b.n	8006a80 <UART_SetConfig+0x210>
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e082      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6e:	e07e      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e07a      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e076      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e072      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a35      	ldr	r2, [pc, #212]	@ (8006b64 <UART_SetConfig+0x2f4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d12a      	bne.n	8006ae8 <UART_SetConfig+0x278>
 8006a92:	4b30      	ldr	r3, [pc, #192]	@ (8006b54 <UART_SetConfig+0x2e4>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa0:	d01a      	beq.n	8006ad8 <UART_SetConfig+0x268>
 8006aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa6:	d81b      	bhi.n	8006ae0 <UART_SetConfig+0x270>
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d00c      	beq.n	8006ac8 <UART_SetConfig+0x258>
 8006aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab2:	d815      	bhi.n	8006ae0 <UART_SetConfig+0x270>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <UART_SetConfig+0x250>
 8006ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006abc:	d008      	beq.n	8006ad0 <UART_SetConfig+0x260>
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x270>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e052      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e04e      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad6:	e04a      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ade:	e046      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae6:	e042      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a17      	ldr	r2, [pc, #92]	@ (8006b4c <UART_SetConfig+0x2dc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d13a      	bne.n	8006b68 <UART_SetConfig+0x2f8>
 8006af2:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <UART_SetConfig+0x2e4>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b00:	d01a      	beq.n	8006b38 <UART_SetConfig+0x2c8>
 8006b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b06:	d81b      	bhi.n	8006b40 <UART_SetConfig+0x2d0>
 8006b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b0c:	d00c      	beq.n	8006b28 <UART_SetConfig+0x2b8>
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b12:	d815      	bhi.n	8006b40 <UART_SetConfig+0x2d0>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <UART_SetConfig+0x2b0>
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1c:	d008      	beq.n	8006b30 <UART_SetConfig+0x2c0>
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x2d0>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e022      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e01e      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006b30:	2304      	movs	r3, #4
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e01a      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e016      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006b40:	2310      	movs	r3, #16
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e012      	b.n	8006b6e <UART_SetConfig+0x2fe>
 8006b48:	cfff69f3 	.word	0xcfff69f3
 8006b4c:	40008000 	.word	0x40008000
 8006b50:	40013800 	.word	0x40013800
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40004400 	.word	0x40004400
 8006b5c:	40004800 	.word	0x40004800
 8006b60:	40004c00 	.word	0x40004c00
 8006b64:	40005000 	.word	0x40005000
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4aae      	ldr	r2, [pc, #696]	@ (8006e2c <UART_SetConfig+0x5bc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	f040 8097 	bne.w	8006ca8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d823      	bhi.n	8006bca <UART_SetConfig+0x35a>
 8006b82:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <UART_SetConfig+0x318>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006bcb 	.word	0x08006bcb
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006bbb 	.word	0x08006bbb
 8006b9c:	08006bcb 	.word	0x08006bcb
 8006ba0:	08006bcb 	.word	0x08006bcb
 8006ba4:	08006bcb 	.word	0x08006bcb
 8006ba8:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bac:	f7fc ffd6 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8006bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bb2:	e010      	b.n	8006bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e30 <UART_SetConfig+0x5c0>)
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bb8:	e00d      	b.n	8006bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fc ff61 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8006bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bc0:	e009      	b.n	8006bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bc8:	e005      	b.n	8006bd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8130 	beq.w	8006e3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	4a94      	ldr	r2, [pc, #592]	@ (8006e34 <UART_SetConfig+0x5c4>)
 8006be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006be8:	461a      	mov	r2, r3
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d305      	bcc.n	8006c0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d903      	bls.n	8006c16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c14:	e113      	b.n	8006e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c18:	2200      	movs	r2, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	60fa      	str	r2, [r7, #12]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	4a84      	ldr	r2, [pc, #528]	@ (8006e34 <UART_SetConfig+0x5c4>)
 8006c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c38:	f7f9 fb00 	bl	800023c <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4610      	mov	r0, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	020b      	lsls	r3, r1, #8
 8006c4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c52:	0202      	lsls	r2, r0, #8
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	6849      	ldr	r1, [r1, #4]
 8006c58:	0849      	lsrs	r1, r1, #1
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	4605      	mov	r5, r0
 8006c60:	eb12 0804 	adds.w	r8, r2, r4
 8006c64:	eb43 0905 	adc.w	r9, r3, r5
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	469a      	mov	sl, r3
 8006c70:	4693      	mov	fp, r2
 8006c72:	4652      	mov	r2, sl
 8006c74:	465b      	mov	r3, fp
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 fadf 	bl	800023c <__aeabi_uldivmod>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4613      	mov	r3, r2
 8006c84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c8c:	d308      	bcc.n	8006ca0 <UART_SetConfig+0x430>
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c94:	d204      	bcs.n	8006ca0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e0ce      	b.n	8006e3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ca6:	e0ca      	b.n	8006e3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb0:	d166      	bne.n	8006d80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d827      	bhi.n	8006d0a <UART_SetConfig+0x49a>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x450>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	08006d0b 	.word	0x08006d0b
 8006cd0:	08006cfb 	.word	0x08006cfb
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006d0b 	.word	0x08006d0b
 8006cdc:	08006d0b 	.word	0x08006d0b
 8006ce0:	08006d03 	.word	0x08006d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fc ff3a 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cea:	e014      	b.n	8006d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cec:	f7fc ff4c 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf2:	e010      	b.n	8006d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8006e30 <UART_SetConfig+0x5c0>)
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf8:	e00d      	b.n	8006d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fc fec1 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8006cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d00:	e009      	b.n	8006d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d08:	e005      	b.n	8006d16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8090 	beq.w	8006e3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	4a44      	ldr	r2, [pc, #272]	@ (8006e34 <UART_SetConfig+0x5c4>)
 8006d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d30:	005a      	lsls	r2, r3, #1
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	441a      	add	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d916      	bls.n	8006d78 <UART_SetConfig+0x508>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d50:	d212      	bcs.n	8006d78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f023 030f 	bic.w	r3, r3, #15
 8006d5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	8bfb      	ldrh	r3, [r7, #30]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	8bfa      	ldrh	r2, [r7, #30]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	e062      	b.n	8006e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d7e:	e05e      	b.n	8006e3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d828      	bhi.n	8006dda <UART_SetConfig+0x56a>
 8006d88:	a201      	add	r2, pc, #4	@ (adr r2, 8006d90 <UART_SetConfig+0x520>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006ddb 	.word	0x08006ddb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006ddb 	.word	0x08006ddb
 8006da8:	08006ddb 	.word	0x08006ddb
 8006dac:	08006ddb 	.word	0x08006ddb
 8006db0:	08006dd3 	.word	0x08006dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fc fed2 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8006db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dba:	e014      	b.n	8006de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dbc:	f7fc fee4 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8006dc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc2:	e010      	b.n	8006de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e30 <UART_SetConfig+0x5c0>)
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dc8:	e00d      	b.n	8006de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fc fe59 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8006dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd0:	e009      	b.n	8006de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd8:	e005      	b.n	8006de6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006de4:	bf00      	nop
    }

    if (pclk != 0U)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d028      	beq.n	8006e3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	4a10      	ldr	r2, [pc, #64]	@ (8006e34 <UART_SetConfig+0x5c4>)
 8006df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	441a      	add	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2b0f      	cmp	r3, #15
 8006e14:	d910      	bls.n	8006e38 <UART_SetConfig+0x5c8>
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e1c:	d20c      	bcs.n	8006e38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x5ce>
 8006e2a:	bf00      	nop
 8006e2c:	40008000 	.word	0x40008000
 8006e30:	00f42400 	.word	0x00f42400
 8006e34:	08008dfc 	.word	0x08008dfc
      }
      else
      {
        ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3730      	adds	r7, #48	@ 0x30
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01a      	beq.n	8006f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f66:	d10a      	bne.n	8006f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b098      	sub	sp, #96	@ 0x60
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fbc:	f7fa fbd2 	bl	8001764 <HAL_GetTick>
 8006fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d12f      	bne.n	8007030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f88e 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d022      	beq.n	8007030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007008:	647b      	str	r3, [r7, #68]	@ 0x44
 800700a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800700e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e6      	bne.n	8006fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e063      	b.n	80070f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b04      	cmp	r3, #4
 800703c:	d149      	bne.n	80070d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800703e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007046:	2200      	movs	r2, #0
 8007048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f857 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d03c      	beq.n	80070d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	623b      	str	r3, [r7, #32]
   return(result);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30
 8007078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800707c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e6      	bne.n	8007058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	60fb      	str	r3, [r7, #12]
   return(result);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070aa:	61fa      	str	r2, [r7, #28]
 80070ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	69b9      	ldr	r1, [r7, #24]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	617b      	str	r3, [r7, #20]
   return(result);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e012      	b.n	80070f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3758      	adds	r7, #88	@ 0x58
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007110:	e04f      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d04b      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711a:	f7fa fb23 	bl	8001764 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <UART_WaitOnFlagUntilTimeout+0x30>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e04e      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	d037      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b80      	cmp	r3, #128	@ 0x80
 8007146:	d034      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b40      	cmp	r3, #64	@ 0x40
 800714c:	d031      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b08      	cmp	r3, #8
 800715a:	d110      	bne.n	800717e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2208      	movs	r2, #8
 8007162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f95b 	bl	8007420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2208      	movs	r2, #8
 800716e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e029      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718c:	d111      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f941 	bl	8007420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e00f      	b.n	80071d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d0a0      	beq.n	8007112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071dc:	b480      	push	{r7}
 80071de:	b0a3      	sub	sp, #140	@ 0x8c
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	88fa      	ldrh	r2, [r7, #6]
 80071fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800720e:	d10e      	bne.n	800722e <UART_Start_Receive_IT+0x52>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <UART_Start_Receive_IT+0x48>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800721e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007222:	e02d      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22ff      	movs	r2, #255	@ 0xff
 8007228:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800722c:	e028      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10d      	bne.n	8007252 <UART_Start_Receive_IT+0x76>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <UART_Start_Receive_IT+0x6c>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	22ff      	movs	r2, #255	@ 0xff
 8007242:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007246:	e01b      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	227f      	movs	r2, #127	@ 0x7f
 800724c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007250:	e016      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800725a:	d10d      	bne.n	8007278 <UART_Start_Receive_IT+0x9c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <UART_Start_Receive_IT+0x92>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	227f      	movs	r2, #127	@ 0x7f
 8007268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800726c:	e008      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	223f      	movs	r2, #63	@ 0x3f
 8007272:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007276:	e003      	b.n	8007280 <UART_Start_Receive_IT+0xa4>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2222      	movs	r2, #34	@ 0x22
 800728c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80072b4:	673a      	str	r2, [r7, #112]	@ 0x70
 80072b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80072ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80072c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e3      	bne.n	8007290 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d0:	d14f      	bne.n	8007372 <UART_Start_Receive_IT+0x196>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072d8:	88fa      	ldrh	r2, [r7, #6]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d349      	bcc.n	8007372 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e6:	d107      	bne.n	80072f8 <UART_Start_Receive_IT+0x11c>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d103      	bne.n	80072f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a47      	ldr	r2, [pc, #284]	@ (8007410 <UART_Start_Receive_IT+0x234>)
 80072f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80072f6:	e002      	b.n	80072fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a46      	ldr	r2, [pc, #280]	@ (8007414 <UART_Start_Receive_IT+0x238>)
 80072fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01a      	beq.n	800733c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800732a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800732e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e4      	bne.n	8007306 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800735c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800735e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800736a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e5      	bne.n	800733c <UART_Start_Receive_IT+0x160>
 8007370:	e046      	b.n	8007400 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737a:	d107      	bne.n	800738c <UART_Start_Receive_IT+0x1b0>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4a24      	ldr	r2, [pc, #144]	@ (8007418 <UART_Start_Receive_IT+0x23c>)
 8007388:	675a      	str	r2, [r3, #116]	@ 0x74
 800738a:	e002      	b.n	8007392 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a23      	ldr	r2, [pc, #140]	@ (800741c <UART_Start_Receive_IT+0x240>)
 8007390:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d019      	beq.n	80073ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_Start_Receive_IT+0x1be>
 80073cc:	e018      	b.n	8007400 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	613b      	str	r3, [r7, #16]
   return(result);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f043 0320 	orr.w	r3, r3, #32
 80073e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073ec:	623b      	str	r3, [r7, #32]
 80073ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	6a3a      	ldr	r2, [r7, #32]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	378c      	adds	r7, #140	@ 0x8c
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	08007c45 	.word	0x08007c45
 8007414:	080078e1 	.word	0x080078e1
 8007418:	08007729 	.word	0x08007729
 800741c:	08007571 	.word	0x08007571

08007420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b095      	sub	sp, #84	@ 0x54
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800743c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007446:	643b      	str	r3, [r7, #64]	@ 0x40
 8007448:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800744c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	61fb      	str	r3, [r7, #28]
   return(result);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800747e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e3      	bne.n	800745a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d118      	bne.n	80074cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6979      	ldr	r1, [r7, #20]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	613b      	str	r3, [r7, #16]
   return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e6      	bne.n	800749a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074e0:	bf00      	nop
 80074e2:	3754      	adds	r7, #84	@ 0x54
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff f99a 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	60bb      	str	r3, [r7, #8]
   return(result);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	613b      	str	r3, [r7, #16]
   return(result);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e6      	bne.n	8007520 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff f965 	bl	8006830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007566:	bf00      	nop
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b09c      	sub	sp, #112	@ 0x70
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800757e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007588:	2b22      	cmp	r3, #34	@ 0x22
 800758a:	f040 80be 	bne.w	800770a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007594:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007598:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800759c:	b2d9      	uxtb	r1, r3
 800759e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a8:	400a      	ands	r2, r1
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 80a1 	bne.w	800771a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e6      	bne.n	80075d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800761a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	667b      	str	r3, [r7, #100]	@ 0x64
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800762a:	647a      	str	r2, [r7, #68]	@ 0x44
 800762c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a33      	ldr	r2, [pc, #204]	@ (8007724 <UART_RxISR_8BIT+0x1b4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d01f      	beq.n	800769c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d018      	beq.n	800769c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	623b      	str	r3, [r7, #32]
   return(result);
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800767e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007688:	633b      	str	r3, [r7, #48]	@ 0x30
 800768a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800768e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d12e      	bne.n	8007702 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0310 	bic.w	r3, r3, #16
 80076be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	617b      	str	r3, [r7, #20]
   return(result);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d103      	bne.n	80076f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2210      	movs	r2, #16
 80076f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff f8ac 	bl	8006858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007700:	e00b      	b.n	800771a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7f9 fb66 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 8007708:	e007      	b.n	800771a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0208 	orr.w	r2, r2, #8
 8007718:	619a      	str	r2, [r3, #24]
}
 800771a:	bf00      	nop
 800771c:	3770      	adds	r7, #112	@ 0x70
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40008000 	.word	0x40008000

08007728 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b09c      	sub	sp, #112	@ 0x70
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007736:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007740:	2b22      	cmp	r3, #34	@ 0x22
 8007742:	f040 80be 	bne.w	80078c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007754:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007756:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800775a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800775e:	4013      	ands	r3, r2
 8007760:	b29a      	uxth	r2, r3
 8007762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	1c9a      	adds	r2, r3, #2
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 80a1 	bne.w	80078d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800779e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80077b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e6      	bne.n	8007790 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3308      	adds	r3, #8
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e5      	bne.n	80077c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a33      	ldr	r2, [pc, #204]	@ (80078dc <UART_RxISR_16BIT+0x1b4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d01f      	beq.n	8007854 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d018      	beq.n	8007854 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007842:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d12e      	bne.n	80078ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	e853 3f00 	ldrex	r3, [r3]
 800786e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f023 0310 	bic.w	r3, r3, #16
 8007876:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6979      	ldr	r1, [r7, #20]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	613b      	str	r3, [r7, #16]
   return(result);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e6      	bne.n	8007862 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f003 0310 	and.w	r3, r3, #16
 800789e:	2b10      	cmp	r3, #16
 80078a0:	d103      	bne.n	80078aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2210      	movs	r2, #16
 80078a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe ffd0 	bl	8006858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b8:	e00b      	b.n	80078d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7f9 fa8a 	bl	8000dd4 <HAL_UART_RxCpltCallback>
}
 80078c0:	e007      	b.n	80078d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	699a      	ldr	r2, [r3, #24]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0208 	orr.w	r2, r2, #8
 80078d0:	619a      	str	r2, [r3, #24]
}
 80078d2:	bf00      	nop
 80078d4:	3770      	adds	r7, #112	@ 0x70
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40008000 	.word	0x40008000

080078e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b0ac      	sub	sp, #176	@ 0xb0
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007916:	2b22      	cmp	r3, #34	@ 0x22
 8007918:	f040 8183 	bne.w	8007c22 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007922:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007926:	e126      	b.n	8007b76 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007932:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007936:	b2d9      	uxtb	r1, r3
 8007938:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007942:	400a      	ands	r2, r1
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800796e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d053      	beq.n	8007a22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800797a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d011      	beq.n	80079aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8007986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800798a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00b      	beq.n	80079aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a0:	f043 0201 	orr.w	r2, r3, #1
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d011      	beq.n	80079da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2202      	movs	r2, #2
 80079c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d0:	f043 0204 	orr.w	r2, r3, #4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d011      	beq.n	8007a0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2204      	movs	r2, #4
 80079f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a00:	f043 0202 	orr.w	r2, r3, #2
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fe ff15 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 80a3 	bne.w	8007b76 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a54:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007a58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e4      	bne.n	8007a30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a8e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007a90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e1      	bne.n	8007a66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a60      	ldr	r2, [pc, #384]	@ (8007c3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d021      	beq.n	8007b04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01a      	beq.n	8007b04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007af0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007af2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007af6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e4      	bne.n	8007ace <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d130      	bne.n	8007b6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b22:	f023 0310 	bic.w	r3, r3, #16
 8007b26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e4      	bne.n	8007b12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d103      	bne.n	8007b5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe fe76 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007b6c:	e00e      	b.n	8007b8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7f9 f930 	bl	8000dd4 <HAL_UART_RxCpltCallback>
        break;
 8007b74:	e00a      	b.n	8007b8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b76:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d006      	beq.n	8007b8c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f47f aece 	bne.w	8007928 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d049      	beq.n	8007c32 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ba4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d242      	bcs.n	8007c32 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e3      	bne.n	8007bac <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a16      	ldr	r2, [pc, #88]	@ (8007c40 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007be8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f043 0320 	orr.w	r3, r3, #32
 8007bfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6979      	ldr	r1, [r7, #20]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e4      	bne.n	8007bea <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c20:	e007      	b.n	8007c32 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0208 	orr.w	r2, r2, #8
 8007c30:	619a      	str	r2, [r3, #24]
}
 8007c32:	bf00      	nop
 8007c34:	37b0      	adds	r7, #176	@ 0xb0
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40008000 	.word	0x40008000
 8007c40:	08007571 	.word	0x08007571

08007c44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b0ae      	sub	sp, #184	@ 0xb8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c52:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7a:	2b22      	cmp	r3, #34	@ 0x22
 8007c7c:	f040 8187 	bne.w	8007f8e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c86:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c8a:	e12a      	b.n	8007ee2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c92:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007ca2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb4:	1c9a      	adds	r2, r3, #2
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d053      	beq.n	8007d8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d011      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d38:	f043 0204 	orr.w	r2, r3, #4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d011      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d68:	f043 0202 	orr.w	r2, r3, #2
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe fd61 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 80a5 	bne.w	8007ee2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e2      	bne.n	8007d98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e1      	bne.n	8007dd2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a60      	ldr	r2, [pc, #384]	@ (8007fa8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d021      	beq.n	8007e70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01a      	beq.n	8007e70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e5e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e4      	bne.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d130      	bne.n	8007eda <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ea2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e4      	bne.n	8007e7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f003 0310 	and.w	r3, r3, #16
 8007ebe:	2b10      	cmp	r3, #16
 8007ec0:	d103      	bne.n	8007eca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fe fcc0 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007ed8:	e00e      	b.n	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7f8 ff7a 	bl	8000dd4 <HAL_UART_RxCpltCallback>
        break;
 8007ee0:	e00a      	b.n	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ee2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d006      	beq.n	8007ef8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f47f aeca 	bne.w	8007c8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007efe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d049      	beq.n	8007f9e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f10:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d242      	bcs.n	8007f9e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	623b      	str	r3, [r7, #32]
   return(result);
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3308      	adds	r3, #8
 8007f38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a16      	ldr	r2, [pc, #88]	@ (8007fac <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007f54:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f043 0320 	orr.w	r3, r3, #32
 8007f6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	617b      	str	r3, [r7, #20]
   return(result);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f8c:	e007      	b.n	8007f9e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f042 0208 	orr.w	r2, r2, #8
 8007f9c:	619a      	str	r2, [r3, #24]
}
 8007f9e:	bf00      	nop
 8007fa0:	37b8      	adds	r7, #184	@ 0xb8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40008000 	.word	0x40008000
 8007fac:	08007729 	.word	0x08007729

08007fb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e027      	b.n	8008052 <HAL_UARTEx_DisableFifoMode+0x66>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2224      	movs	r2, #36	@ 0x24
 800800e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0201 	bic.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008030:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008072:	2302      	movs	r3, #2
 8008074:	e02d      	b.n	80080d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2224      	movs	r2, #36	@ 0x24
 8008082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0201 	bic.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f850 	bl	8008158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e02d      	b.n	800814e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2224      	movs	r2, #36	@ 0x24
 80080fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f812 	bl	8008158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008164:	2b00      	cmp	r3, #0
 8008166:	d108      	bne.n	800817a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008178:	e031      	b.n	80081de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800817a:	2308      	movs	r3, #8
 800817c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800817e:	2308      	movs	r3, #8
 8008180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	0e5b      	lsrs	r3, r3, #25
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	0f5b      	lsrs	r3, r3, #29
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	7b3a      	ldrb	r2, [r7, #12]
 80081a6:	4911      	ldr	r1, [pc, #68]	@ (80081ec <UARTEx_SetNbDataToProcess+0x94>)
 80081a8:	5c8a      	ldrb	r2, [r1, r2]
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081ae:	7b3a      	ldrb	r2, [r7, #12]
 80081b0:	490f      	ldr	r1, [pc, #60]	@ (80081f0 <UARTEx_SetNbDataToProcess+0x98>)
 80081b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	7b7a      	ldrb	r2, [r7, #13]
 80081c4:	4909      	ldr	r1, [pc, #36]	@ (80081ec <UARTEx_SetNbDataToProcess+0x94>)
 80081c6:	5c8a      	ldrb	r2, [r1, r2]
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081cc:	7b7a      	ldrb	r2, [r7, #13]
 80081ce:	4908      	ldr	r1, [pc, #32]	@ (80081f0 <UARTEx_SetNbDataToProcess+0x98>)
 80081d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	08008e14 	.word	0x08008e14
 80081f0:	08008e1c 	.word	0x08008e1c

080081f4 <atoi>:
 80081f4:	220a      	movs	r2, #10
 80081f6:	2100      	movs	r1, #0
 80081f8:	f000 b87a 	b.w	80082f0 <strtol>

080081fc <_strtol_l.constprop.0>:
 80081fc:	2b24      	cmp	r3, #36	@ 0x24
 80081fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008202:	4686      	mov	lr, r0
 8008204:	4690      	mov	r8, r2
 8008206:	d801      	bhi.n	800820c <_strtol_l.constprop.0+0x10>
 8008208:	2b01      	cmp	r3, #1
 800820a:	d106      	bne.n	800821a <_strtol_l.constprop.0+0x1e>
 800820c:	f000 fad4 	bl	80087b8 <__errno>
 8008210:	2316      	movs	r3, #22
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	2000      	movs	r0, #0
 8008216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821a:	4834      	ldr	r0, [pc, #208]	@ (80082ec <_strtol_l.constprop.0+0xf0>)
 800821c:	460d      	mov	r5, r1
 800821e:	462a      	mov	r2, r5
 8008220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008224:	5d06      	ldrb	r6, [r0, r4]
 8008226:	f016 0608 	ands.w	r6, r6, #8
 800822a:	d1f8      	bne.n	800821e <_strtol_l.constprop.0+0x22>
 800822c:	2c2d      	cmp	r4, #45	@ 0x2d
 800822e:	d12d      	bne.n	800828c <_strtol_l.constprop.0+0x90>
 8008230:	782c      	ldrb	r4, [r5, #0]
 8008232:	2601      	movs	r6, #1
 8008234:	1c95      	adds	r5, r2, #2
 8008236:	f033 0210 	bics.w	r2, r3, #16
 800823a:	d109      	bne.n	8008250 <_strtol_l.constprop.0+0x54>
 800823c:	2c30      	cmp	r4, #48	@ 0x30
 800823e:	d12a      	bne.n	8008296 <_strtol_l.constprop.0+0x9a>
 8008240:	782a      	ldrb	r2, [r5, #0]
 8008242:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008246:	2a58      	cmp	r2, #88	@ 0x58
 8008248:	d125      	bne.n	8008296 <_strtol_l.constprop.0+0x9a>
 800824a:	786c      	ldrb	r4, [r5, #1]
 800824c:	2310      	movs	r3, #16
 800824e:	3502      	adds	r5, #2
 8008250:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008254:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008258:	2200      	movs	r2, #0
 800825a:	fbbc f9f3 	udiv	r9, ip, r3
 800825e:	4610      	mov	r0, r2
 8008260:	fb03 ca19 	mls	sl, r3, r9, ip
 8008264:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008268:	2f09      	cmp	r7, #9
 800826a:	d81b      	bhi.n	80082a4 <_strtol_l.constprop.0+0xa8>
 800826c:	463c      	mov	r4, r7
 800826e:	42a3      	cmp	r3, r4
 8008270:	dd27      	ble.n	80082c2 <_strtol_l.constprop.0+0xc6>
 8008272:	1c57      	adds	r7, r2, #1
 8008274:	d007      	beq.n	8008286 <_strtol_l.constprop.0+0x8a>
 8008276:	4581      	cmp	r9, r0
 8008278:	d320      	bcc.n	80082bc <_strtol_l.constprop.0+0xc0>
 800827a:	d101      	bne.n	8008280 <_strtol_l.constprop.0+0x84>
 800827c:	45a2      	cmp	sl, r4
 800827e:	db1d      	blt.n	80082bc <_strtol_l.constprop.0+0xc0>
 8008280:	fb00 4003 	mla	r0, r0, r3, r4
 8008284:	2201      	movs	r2, #1
 8008286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800828a:	e7eb      	b.n	8008264 <_strtol_l.constprop.0+0x68>
 800828c:	2c2b      	cmp	r4, #43	@ 0x2b
 800828e:	bf04      	itt	eq
 8008290:	782c      	ldrbeq	r4, [r5, #0]
 8008292:	1c95      	addeq	r5, r2, #2
 8008294:	e7cf      	b.n	8008236 <_strtol_l.constprop.0+0x3a>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1da      	bne.n	8008250 <_strtol_l.constprop.0+0x54>
 800829a:	2c30      	cmp	r4, #48	@ 0x30
 800829c:	bf0c      	ite	eq
 800829e:	2308      	moveq	r3, #8
 80082a0:	230a      	movne	r3, #10
 80082a2:	e7d5      	b.n	8008250 <_strtol_l.constprop.0+0x54>
 80082a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082a8:	2f19      	cmp	r7, #25
 80082aa:	d801      	bhi.n	80082b0 <_strtol_l.constprop.0+0xb4>
 80082ac:	3c37      	subs	r4, #55	@ 0x37
 80082ae:	e7de      	b.n	800826e <_strtol_l.constprop.0+0x72>
 80082b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082b4:	2f19      	cmp	r7, #25
 80082b6:	d804      	bhi.n	80082c2 <_strtol_l.constprop.0+0xc6>
 80082b8:	3c57      	subs	r4, #87	@ 0x57
 80082ba:	e7d8      	b.n	800826e <_strtol_l.constprop.0+0x72>
 80082bc:	f04f 32ff 	mov.w	r2, #4294967295
 80082c0:	e7e1      	b.n	8008286 <_strtol_l.constprop.0+0x8a>
 80082c2:	1c53      	adds	r3, r2, #1
 80082c4:	d108      	bne.n	80082d8 <_strtol_l.constprop.0+0xdc>
 80082c6:	2322      	movs	r3, #34	@ 0x22
 80082c8:	f8ce 3000 	str.w	r3, [lr]
 80082cc:	4660      	mov	r0, ip
 80082ce:	f1b8 0f00 	cmp.w	r8, #0
 80082d2:	d0a0      	beq.n	8008216 <_strtol_l.constprop.0+0x1a>
 80082d4:	1e69      	subs	r1, r5, #1
 80082d6:	e006      	b.n	80082e6 <_strtol_l.constprop.0+0xea>
 80082d8:	b106      	cbz	r6, 80082dc <_strtol_l.constprop.0+0xe0>
 80082da:	4240      	negs	r0, r0
 80082dc:	f1b8 0f00 	cmp.w	r8, #0
 80082e0:	d099      	beq.n	8008216 <_strtol_l.constprop.0+0x1a>
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	d1f6      	bne.n	80082d4 <_strtol_l.constprop.0+0xd8>
 80082e6:	f8c8 1000 	str.w	r1, [r8]
 80082ea:	e794      	b.n	8008216 <_strtol_l.constprop.0+0x1a>
 80082ec:	08008e25 	.word	0x08008e25

080082f0 <strtol>:
 80082f0:	4613      	mov	r3, r2
 80082f2:	460a      	mov	r2, r1
 80082f4:	4601      	mov	r1, r0
 80082f6:	4802      	ldr	r0, [pc, #8]	@ (8008300 <strtol+0x10>)
 80082f8:	6800      	ldr	r0, [r0, #0]
 80082fa:	f7ff bf7f 	b.w	80081fc <_strtol_l.constprop.0>
 80082fe:	bf00      	nop
 8008300:	20000018 	.word	0x20000018

08008304 <std>:
 8008304:	2300      	movs	r3, #0
 8008306:	b510      	push	{r4, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	e9c0 3300 	strd	r3, r3, [r0]
 800830e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008312:	6083      	str	r3, [r0, #8]
 8008314:	8181      	strh	r1, [r0, #12]
 8008316:	6643      	str	r3, [r0, #100]	@ 0x64
 8008318:	81c2      	strh	r2, [r0, #14]
 800831a:	6183      	str	r3, [r0, #24]
 800831c:	4619      	mov	r1, r3
 800831e:	2208      	movs	r2, #8
 8008320:	305c      	adds	r0, #92	@ 0x5c
 8008322:	f000 f9e7 	bl	80086f4 <memset>
 8008326:	4b0d      	ldr	r3, [pc, #52]	@ (800835c <std+0x58>)
 8008328:	6263      	str	r3, [r4, #36]	@ 0x24
 800832a:	4b0d      	ldr	r3, [pc, #52]	@ (8008360 <std+0x5c>)
 800832c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <std+0x60>)
 8008330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <std+0x64>)
 8008334:	6323      	str	r3, [r4, #48]	@ 0x30
 8008336:	4b0d      	ldr	r3, [pc, #52]	@ (800836c <std+0x68>)
 8008338:	6224      	str	r4, [r4, #32]
 800833a:	429c      	cmp	r4, r3
 800833c:	d006      	beq.n	800834c <std+0x48>
 800833e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008342:	4294      	cmp	r4, r2
 8008344:	d002      	beq.n	800834c <std+0x48>
 8008346:	33d0      	adds	r3, #208	@ 0xd0
 8008348:	429c      	cmp	r4, r3
 800834a:	d105      	bne.n	8008358 <std+0x54>
 800834c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008354:	f000 ba5a 	b.w	800880c <__retarget_lock_init_recursive>
 8008358:	bd10      	pop	{r4, pc}
 800835a:	bf00      	nop
 800835c:	08008545 	.word	0x08008545
 8008360:	08008567 	.word	0x08008567
 8008364:	0800859f 	.word	0x0800859f
 8008368:	080085c3 	.word	0x080085c3
 800836c:	20000334 	.word	0x20000334

08008370 <stdio_exit_handler>:
 8008370:	4a02      	ldr	r2, [pc, #8]	@ (800837c <stdio_exit_handler+0xc>)
 8008372:	4903      	ldr	r1, [pc, #12]	@ (8008380 <stdio_exit_handler+0x10>)
 8008374:	4803      	ldr	r0, [pc, #12]	@ (8008384 <stdio_exit_handler+0x14>)
 8008376:	f000 b869 	b.w	800844c <_fwalk_sglue>
 800837a:	bf00      	nop
 800837c:	2000000c 	.word	0x2000000c
 8008380:	08008b0d 	.word	0x08008b0d
 8008384:	2000001c 	.word	0x2000001c

08008388 <cleanup_stdio>:
 8008388:	6841      	ldr	r1, [r0, #4]
 800838a:	4b0c      	ldr	r3, [pc, #48]	@ (80083bc <cleanup_stdio+0x34>)
 800838c:	4299      	cmp	r1, r3
 800838e:	b510      	push	{r4, lr}
 8008390:	4604      	mov	r4, r0
 8008392:	d001      	beq.n	8008398 <cleanup_stdio+0x10>
 8008394:	f000 fbba 	bl	8008b0c <_fflush_r>
 8008398:	68a1      	ldr	r1, [r4, #8]
 800839a:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <cleanup_stdio+0x38>)
 800839c:	4299      	cmp	r1, r3
 800839e:	d002      	beq.n	80083a6 <cleanup_stdio+0x1e>
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fbb3 	bl	8008b0c <_fflush_r>
 80083a6:	68e1      	ldr	r1, [r4, #12]
 80083a8:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <cleanup_stdio+0x3c>)
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d004      	beq.n	80083b8 <cleanup_stdio+0x30>
 80083ae:	4620      	mov	r0, r4
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	f000 bbaa 	b.w	8008b0c <_fflush_r>
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	bf00      	nop
 80083bc:	20000334 	.word	0x20000334
 80083c0:	2000039c 	.word	0x2000039c
 80083c4:	20000404 	.word	0x20000404

080083c8 <global_stdio_init.part.0>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	4b0b      	ldr	r3, [pc, #44]	@ (80083f8 <global_stdio_init.part.0+0x30>)
 80083cc:	4c0b      	ldr	r4, [pc, #44]	@ (80083fc <global_stdio_init.part.0+0x34>)
 80083ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008400 <global_stdio_init.part.0+0x38>)
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	4620      	mov	r0, r4
 80083d4:	2200      	movs	r2, #0
 80083d6:	2104      	movs	r1, #4
 80083d8:	f7ff ff94 	bl	8008304 <std>
 80083dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083e0:	2201      	movs	r2, #1
 80083e2:	2109      	movs	r1, #9
 80083e4:	f7ff ff8e 	bl	8008304 <std>
 80083e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083ec:	2202      	movs	r2, #2
 80083ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f2:	2112      	movs	r1, #18
 80083f4:	f7ff bf86 	b.w	8008304 <std>
 80083f8:	2000046c 	.word	0x2000046c
 80083fc:	20000334 	.word	0x20000334
 8008400:	08008371 	.word	0x08008371

08008404 <__sfp_lock_acquire>:
 8008404:	4801      	ldr	r0, [pc, #4]	@ (800840c <__sfp_lock_acquire+0x8>)
 8008406:	f000 ba02 	b.w	800880e <__retarget_lock_acquire_recursive>
 800840a:	bf00      	nop
 800840c:	20000475 	.word	0x20000475

08008410 <__sfp_lock_release>:
 8008410:	4801      	ldr	r0, [pc, #4]	@ (8008418 <__sfp_lock_release+0x8>)
 8008412:	f000 b9fd 	b.w	8008810 <__retarget_lock_release_recursive>
 8008416:	bf00      	nop
 8008418:	20000475 	.word	0x20000475

0800841c <__sinit>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	f7ff fff0 	bl	8008404 <__sfp_lock_acquire>
 8008424:	6a23      	ldr	r3, [r4, #32]
 8008426:	b11b      	cbz	r3, 8008430 <__sinit+0x14>
 8008428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842c:	f7ff bff0 	b.w	8008410 <__sfp_lock_release>
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <__sinit+0x28>)
 8008432:	6223      	str	r3, [r4, #32]
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <__sinit+0x2c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f5      	bne.n	8008428 <__sinit+0xc>
 800843c:	f7ff ffc4 	bl	80083c8 <global_stdio_init.part.0>
 8008440:	e7f2      	b.n	8008428 <__sinit+0xc>
 8008442:	bf00      	nop
 8008444:	08008389 	.word	0x08008389
 8008448:	2000046c 	.word	0x2000046c

0800844c <_fwalk_sglue>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4607      	mov	r7, r0
 8008452:	4688      	mov	r8, r1
 8008454:	4614      	mov	r4, r2
 8008456:	2600      	movs	r6, #0
 8008458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800845c:	f1b9 0901 	subs.w	r9, r9, #1
 8008460:	d505      	bpl.n	800846e <_fwalk_sglue+0x22>
 8008462:	6824      	ldr	r4, [r4, #0]
 8008464:	2c00      	cmp	r4, #0
 8008466:	d1f7      	bne.n	8008458 <_fwalk_sglue+0xc>
 8008468:	4630      	mov	r0, r6
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	89ab      	ldrh	r3, [r5, #12]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d907      	bls.n	8008484 <_fwalk_sglue+0x38>
 8008474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008478:	3301      	adds	r3, #1
 800847a:	d003      	beq.n	8008484 <_fwalk_sglue+0x38>
 800847c:	4629      	mov	r1, r5
 800847e:	4638      	mov	r0, r7
 8008480:	47c0      	blx	r8
 8008482:	4306      	orrs	r6, r0
 8008484:	3568      	adds	r5, #104	@ 0x68
 8008486:	e7e9      	b.n	800845c <_fwalk_sglue+0x10>

08008488 <_puts_r>:
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	6884      	ldr	r4, [r0, #8]
 800848e:	4605      	mov	r5, r0
 8008490:	460e      	mov	r6, r1
 8008492:	b90b      	cbnz	r3, 8008498 <_puts_r+0x10>
 8008494:	f7ff ffc2 	bl	800841c <__sinit>
 8008498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800849a:	07db      	lsls	r3, r3, #31
 800849c:	d405      	bmi.n	80084aa <_puts_r+0x22>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	0598      	lsls	r0, r3, #22
 80084a2:	d402      	bmi.n	80084aa <_puts_r+0x22>
 80084a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084a6:	f000 f9b2 	bl	800880e <__retarget_lock_acquire_recursive>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	0719      	lsls	r1, r3, #28
 80084ae:	d502      	bpl.n	80084b6 <_puts_r+0x2e>
 80084b0:	6923      	ldr	r3, [r4, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d135      	bne.n	8008522 <_puts_r+0x9a>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 f8c5 	bl	8008648 <__swsetup_r>
 80084be:	b380      	cbz	r0, 8008522 <_puts_r+0x9a>
 80084c0:	f04f 35ff 	mov.w	r5, #4294967295
 80084c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d405      	bmi.n	80084d6 <_puts_r+0x4e>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	059b      	lsls	r3, r3, #22
 80084ce:	d402      	bmi.n	80084d6 <_puts_r+0x4e>
 80084d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084d2:	f000 f99d 	bl	8008810 <__retarget_lock_release_recursive>
 80084d6:	4628      	mov	r0, r5
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da04      	bge.n	80084e8 <_puts_r+0x60>
 80084de:	69a2      	ldr	r2, [r4, #24]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	dc17      	bgt.n	8008514 <_puts_r+0x8c>
 80084e4:	290a      	cmp	r1, #10
 80084e6:	d015      	beq.n	8008514 <_puts_r+0x8c>
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	6022      	str	r2, [r4, #0]
 80084ee:	7019      	strb	r1, [r3, #0]
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084f6:	3b01      	subs	r3, #1
 80084f8:	60a3      	str	r3, [r4, #8]
 80084fa:	2900      	cmp	r1, #0
 80084fc:	d1ed      	bne.n	80084da <_puts_r+0x52>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	da11      	bge.n	8008526 <_puts_r+0x9e>
 8008502:	4622      	mov	r2, r4
 8008504:	210a      	movs	r1, #10
 8008506:	4628      	mov	r0, r5
 8008508:	f000 f85f 	bl	80085ca <__swbuf_r>
 800850c:	3001      	adds	r0, #1
 800850e:	d0d7      	beq.n	80084c0 <_puts_r+0x38>
 8008510:	250a      	movs	r5, #10
 8008512:	e7d7      	b.n	80084c4 <_puts_r+0x3c>
 8008514:	4622      	mov	r2, r4
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f857 	bl	80085ca <__swbuf_r>
 800851c:	3001      	adds	r0, #1
 800851e:	d1e7      	bne.n	80084f0 <_puts_r+0x68>
 8008520:	e7ce      	b.n	80084c0 <_puts_r+0x38>
 8008522:	3e01      	subs	r6, #1
 8008524:	e7e4      	b.n	80084f0 <_puts_r+0x68>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	6022      	str	r2, [r4, #0]
 800852c:	220a      	movs	r2, #10
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	e7ee      	b.n	8008510 <_puts_r+0x88>
	...

08008534 <puts>:
 8008534:	4b02      	ldr	r3, [pc, #8]	@ (8008540 <puts+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f7ff bfa5 	b.w	8008488 <_puts_r>
 800853e:	bf00      	nop
 8008540:	20000018 	.word	0x20000018

08008544 <__sread>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854c:	f000 f910 	bl	8008770 <_read_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	bfab      	itete	ge
 8008554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008556:	89a3      	ldrhlt	r3, [r4, #12]
 8008558:	181b      	addge	r3, r3, r0
 800855a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800855e:	bfac      	ite	ge
 8008560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008562:	81a3      	strhlt	r3, [r4, #12]
 8008564:	bd10      	pop	{r4, pc}

08008566 <__swrite>:
 8008566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856a:	461f      	mov	r7, r3
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	05db      	lsls	r3, r3, #23
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	4616      	mov	r6, r2
 8008576:	d505      	bpl.n	8008584 <__swrite+0x1e>
 8008578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857c:	2302      	movs	r3, #2
 800857e:	2200      	movs	r2, #0
 8008580:	f000 f8e4 	bl	800874c <_lseek_r>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800858a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	f000 b8fb 	b.w	8008794 <_write_r>

0800859e <__sseek>:
 800859e:	b510      	push	{r4, lr}
 80085a0:	460c      	mov	r4, r1
 80085a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a6:	f000 f8d1 	bl	800874c <_lseek_r>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	bf15      	itete	ne
 80085b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085ba:	81a3      	strheq	r3, [r4, #12]
 80085bc:	bf18      	it	ne
 80085be:	81a3      	strhne	r3, [r4, #12]
 80085c0:	bd10      	pop	{r4, pc}

080085c2 <__sclose>:
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 b8b1 	b.w	800872c <_close_r>

080085ca <__swbuf_r>:
 80085ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085cc:	460e      	mov	r6, r1
 80085ce:	4614      	mov	r4, r2
 80085d0:	4605      	mov	r5, r0
 80085d2:	b118      	cbz	r0, 80085dc <__swbuf_r+0x12>
 80085d4:	6a03      	ldr	r3, [r0, #32]
 80085d6:	b90b      	cbnz	r3, 80085dc <__swbuf_r+0x12>
 80085d8:	f7ff ff20 	bl	800841c <__sinit>
 80085dc:	69a3      	ldr	r3, [r4, #24]
 80085de:	60a3      	str	r3, [r4, #8]
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	071a      	lsls	r2, r3, #28
 80085e4:	d501      	bpl.n	80085ea <__swbuf_r+0x20>
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	b943      	cbnz	r3, 80085fc <__swbuf_r+0x32>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 f82b 	bl	8008648 <__swsetup_r>
 80085f2:	b118      	cbz	r0, 80085fc <__swbuf_r+0x32>
 80085f4:	f04f 37ff 	mov.w	r7, #4294967295
 80085f8:	4638      	mov	r0, r7
 80085fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	6922      	ldr	r2, [r4, #16]
 8008600:	1a98      	subs	r0, r3, r2
 8008602:	6963      	ldr	r3, [r4, #20]
 8008604:	b2f6      	uxtb	r6, r6
 8008606:	4283      	cmp	r3, r0
 8008608:	4637      	mov	r7, r6
 800860a:	dc05      	bgt.n	8008618 <__swbuf_r+0x4e>
 800860c:	4621      	mov	r1, r4
 800860e:	4628      	mov	r0, r5
 8008610:	f000 fa7c 	bl	8008b0c <_fflush_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	d1ed      	bne.n	80085f4 <__swbuf_r+0x2a>
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	3b01      	subs	r3, #1
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	701e      	strb	r6, [r3, #0]
 8008626:	6962      	ldr	r2, [r4, #20]
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	429a      	cmp	r2, r3
 800862c:	d004      	beq.n	8008638 <__swbuf_r+0x6e>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	07db      	lsls	r3, r3, #31
 8008632:	d5e1      	bpl.n	80085f8 <__swbuf_r+0x2e>
 8008634:	2e0a      	cmp	r6, #10
 8008636:	d1df      	bne.n	80085f8 <__swbuf_r+0x2e>
 8008638:	4621      	mov	r1, r4
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fa66 	bl	8008b0c <_fflush_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	d0d9      	beq.n	80085f8 <__swbuf_r+0x2e>
 8008644:	e7d6      	b.n	80085f4 <__swbuf_r+0x2a>
	...

08008648 <__swsetup_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4b29      	ldr	r3, [pc, #164]	@ (80086f0 <__swsetup_r+0xa8>)
 800864c:	4605      	mov	r5, r0
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	460c      	mov	r4, r1
 8008652:	b118      	cbz	r0, 800865c <__swsetup_r+0x14>
 8008654:	6a03      	ldr	r3, [r0, #32]
 8008656:	b90b      	cbnz	r3, 800865c <__swsetup_r+0x14>
 8008658:	f7ff fee0 	bl	800841c <__sinit>
 800865c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008660:	0719      	lsls	r1, r3, #28
 8008662:	d422      	bmi.n	80086aa <__swsetup_r+0x62>
 8008664:	06da      	lsls	r2, r3, #27
 8008666:	d407      	bmi.n	8008678 <__swsetup_r+0x30>
 8008668:	2209      	movs	r2, #9
 800866a:	602a      	str	r2, [r5, #0]
 800866c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	f04f 30ff 	mov.w	r0, #4294967295
 8008676:	e033      	b.n	80086e0 <__swsetup_r+0x98>
 8008678:	0758      	lsls	r0, r3, #29
 800867a:	d512      	bpl.n	80086a2 <__swsetup_r+0x5a>
 800867c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800867e:	b141      	cbz	r1, 8008692 <__swsetup_r+0x4a>
 8008680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008684:	4299      	cmp	r1, r3
 8008686:	d002      	beq.n	800868e <__swsetup_r+0x46>
 8008688:	4628      	mov	r0, r5
 800868a:	f000 f8c3 	bl	8008814 <_free_r>
 800868e:	2300      	movs	r3, #0
 8008690:	6363      	str	r3, [r4, #52]	@ 0x34
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	2300      	movs	r3, #0
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f043 0308 	orr.w	r3, r3, #8
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	b94b      	cbnz	r3, 80086c2 <__swsetup_r+0x7a>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b8:	d003      	beq.n	80086c2 <__swsetup_r+0x7a>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 fa73 	bl	8008ba8 <__smakebuf_r>
 80086c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c6:	f013 0201 	ands.w	r2, r3, #1
 80086ca:	d00a      	beq.n	80086e2 <__swsetup_r+0x9a>
 80086cc:	2200      	movs	r2, #0
 80086ce:	60a2      	str	r2, [r4, #8]
 80086d0:	6962      	ldr	r2, [r4, #20]
 80086d2:	4252      	negs	r2, r2
 80086d4:	61a2      	str	r2, [r4, #24]
 80086d6:	6922      	ldr	r2, [r4, #16]
 80086d8:	b942      	cbnz	r2, 80086ec <__swsetup_r+0xa4>
 80086da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086de:	d1c5      	bne.n	800866c <__swsetup_r+0x24>
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	0799      	lsls	r1, r3, #30
 80086e4:	bf58      	it	pl
 80086e6:	6962      	ldrpl	r2, [r4, #20]
 80086e8:	60a2      	str	r2, [r4, #8]
 80086ea:	e7f4      	b.n	80086d6 <__swsetup_r+0x8e>
 80086ec:	2000      	movs	r0, #0
 80086ee:	e7f7      	b.n	80086e0 <__swsetup_r+0x98>
 80086f0:	20000018 	.word	0x20000018

080086f4 <memset>:
 80086f4:	4402      	add	r2, r0
 80086f6:	4603      	mov	r3, r0
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d100      	bne.n	80086fe <memset+0xa>
 80086fc:	4770      	bx	lr
 80086fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008702:	e7f9      	b.n	80086f8 <memset+0x4>

08008704 <strncpy>:
 8008704:	b510      	push	{r4, lr}
 8008706:	3901      	subs	r1, #1
 8008708:	4603      	mov	r3, r0
 800870a:	b132      	cbz	r2, 800871a <strncpy+0x16>
 800870c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008710:	f803 4b01 	strb.w	r4, [r3], #1
 8008714:	3a01      	subs	r2, #1
 8008716:	2c00      	cmp	r4, #0
 8008718:	d1f7      	bne.n	800870a <strncpy+0x6>
 800871a:	441a      	add	r2, r3
 800871c:	2100      	movs	r1, #0
 800871e:	4293      	cmp	r3, r2
 8008720:	d100      	bne.n	8008724 <strncpy+0x20>
 8008722:	bd10      	pop	{r4, pc}
 8008724:	f803 1b01 	strb.w	r1, [r3], #1
 8008728:	e7f9      	b.n	800871e <strncpy+0x1a>
	...

0800872c <_close_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d06      	ldr	r5, [pc, #24]	@ (8008748 <_close_r+0x1c>)
 8008730:	2300      	movs	r3, #0
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7f8 fc8f 	bl	800105a <_close>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_close_r+0x1a>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_close_r+0x1a>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000470 	.word	0x20000470

0800874c <_lseek_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	@ (800876c <_lseek_r+0x20>)
 8008750:	4604      	mov	r4, r0
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	f7f8 fca4 	bl	80010a8 <_lseek>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_lseek_r+0x1e>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_lseek_r+0x1e>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	20000470 	.word	0x20000470

08008770 <_read_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d07      	ldr	r5, [pc, #28]	@ (8008790 <_read_r+0x20>)
 8008774:	4604      	mov	r4, r0
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	2200      	movs	r2, #0
 800877c:	602a      	str	r2, [r5, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	f7f8 fc32 	bl	8000fe8 <_read>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_read_r+0x1e>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_read_r+0x1e>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20000470 	.word	0x20000470

08008794 <_write_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d07      	ldr	r5, [pc, #28]	@ (80087b4 <_write_r+0x20>)
 8008798:	4604      	mov	r4, r0
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	602a      	str	r2, [r5, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f8 fc3d 	bl	8001022 <_write>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_write_r+0x1e>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_write_r+0x1e>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000470 	.word	0x20000470

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	@ (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000018 	.word	0x20000018

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	@ (80087fc <__libc_init_array+0x38>)
 80087c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008800 <__libc_init_array+0x3c>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	2600      	movs	r6, #0
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008804 <__libc_init_array+0x40>)
 80087d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008808 <__libc_init_array+0x44>)
 80087d8:	f000 fa54 	bl	8008c84 <_init>
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	2600      	movs	r6, #0
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	4798      	blx	r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	4798      	blx	r3
 80087f8:	3601      	adds	r6, #1
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	08008f30 	.word	0x08008f30
 8008800:	08008f30 	.word	0x08008f30
 8008804:	08008f30 	.word	0x08008f30
 8008808:	08008f34 	.word	0x08008f34

0800880c <__retarget_lock_init_recursive>:
 800880c:	4770      	bx	lr

0800880e <__retarget_lock_acquire_recursive>:
 800880e:	4770      	bx	lr

08008810 <__retarget_lock_release_recursive>:
 8008810:	4770      	bx	lr
	...

08008814 <_free_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	2900      	cmp	r1, #0
 800881a:	d041      	beq.n	80088a0 <_free_r+0x8c>
 800881c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008820:	1f0c      	subs	r4, r1, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfb8      	it	lt
 8008826:	18e4      	addlt	r4, r4, r3
 8008828:	f000 f8e0 	bl	80089ec <__malloc_lock>
 800882c:	4a1d      	ldr	r2, [pc, #116]	@ (80088a4 <_free_r+0x90>)
 800882e:	6813      	ldr	r3, [r2, #0]
 8008830:	b933      	cbnz	r3, 8008840 <_free_r+0x2c>
 8008832:	6063      	str	r3, [r4, #4]
 8008834:	6014      	str	r4, [r2, #0]
 8008836:	4628      	mov	r0, r5
 8008838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883c:	f000 b8dc 	b.w	80089f8 <__malloc_unlock>
 8008840:	42a3      	cmp	r3, r4
 8008842:	d908      	bls.n	8008856 <_free_r+0x42>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	1821      	adds	r1, r4, r0
 8008848:	428b      	cmp	r3, r1
 800884a:	bf01      	itttt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	1809      	addeq	r1, r1, r0
 8008852:	6021      	streq	r1, [r4, #0]
 8008854:	e7ed      	b.n	8008832 <_free_r+0x1e>
 8008856:	461a      	mov	r2, r3
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b10b      	cbz	r3, 8008860 <_free_r+0x4c>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d9fa      	bls.n	8008856 <_free_r+0x42>
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	1850      	adds	r0, r2, r1
 8008864:	42a0      	cmp	r0, r4
 8008866:	d10b      	bne.n	8008880 <_free_r+0x6c>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	4401      	add	r1, r0
 800886c:	1850      	adds	r0, r2, r1
 800886e:	4283      	cmp	r3, r0
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	d1e0      	bne.n	8008836 <_free_r+0x22>
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	6053      	str	r3, [r2, #4]
 800887a:	4408      	add	r0, r1
 800887c:	6010      	str	r0, [r2, #0]
 800887e:	e7da      	b.n	8008836 <_free_r+0x22>
 8008880:	d902      	bls.n	8008888 <_free_r+0x74>
 8008882:	230c      	movs	r3, #12
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	e7d6      	b.n	8008836 <_free_r+0x22>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	1821      	adds	r1, r4, r0
 800888c:	428b      	cmp	r3, r1
 800888e:	bf04      	itt	eq
 8008890:	6819      	ldreq	r1, [r3, #0]
 8008892:	685b      	ldreq	r3, [r3, #4]
 8008894:	6063      	str	r3, [r4, #4]
 8008896:	bf04      	itt	eq
 8008898:	1809      	addeq	r1, r1, r0
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	6054      	str	r4, [r2, #4]
 800889e:	e7ca      	b.n	8008836 <_free_r+0x22>
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
 80088a2:	bf00      	nop
 80088a4:	2000047c 	.word	0x2000047c

080088a8 <sbrk_aligned>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0f      	ldr	r6, [pc, #60]	@ (80088e8 <sbrk_aligned+0x40>)
 80088ac:	460c      	mov	r4, r1
 80088ae:	6831      	ldr	r1, [r6, #0]
 80088b0:	4605      	mov	r5, r0
 80088b2:	b911      	cbnz	r1, 80088ba <sbrk_aligned+0x12>
 80088b4:	f000 f9d6 	bl	8008c64 <_sbrk_r>
 80088b8:	6030      	str	r0, [r6, #0]
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 f9d1 	bl	8008c64 <_sbrk_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d103      	bne.n	80088ce <sbrk_aligned+0x26>
 80088c6:	f04f 34ff 	mov.w	r4, #4294967295
 80088ca:	4620      	mov	r0, r4
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d0f8      	beq.n	80088ca <sbrk_aligned+0x22>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f9c2 	bl	8008c64 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d1f2      	bne.n	80088ca <sbrk_aligned+0x22>
 80088e4:	e7ef      	b.n	80088c6 <sbrk_aligned+0x1e>
 80088e6:	bf00      	nop
 80088e8:	20000478 	.word	0x20000478

080088ec <_malloc_r>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	1ccd      	adds	r5, r1, #3
 80088f2:	f025 0503 	bic.w	r5, r5, #3
 80088f6:	3508      	adds	r5, #8
 80088f8:	2d0c      	cmp	r5, #12
 80088fa:	bf38      	it	cc
 80088fc:	250c      	movcc	r5, #12
 80088fe:	2d00      	cmp	r5, #0
 8008900:	4606      	mov	r6, r0
 8008902:	db01      	blt.n	8008908 <_malloc_r+0x1c>
 8008904:	42a9      	cmp	r1, r5
 8008906:	d904      	bls.n	8008912 <_malloc_r+0x26>
 8008908:	230c      	movs	r3, #12
 800890a:	6033      	str	r3, [r6, #0]
 800890c:	2000      	movs	r0, #0
 800890e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089e8 <_malloc_r+0xfc>
 8008916:	f000 f869 	bl	80089ec <__malloc_lock>
 800891a:	f8d8 3000 	ldr.w	r3, [r8]
 800891e:	461c      	mov	r4, r3
 8008920:	bb44      	cbnz	r4, 8008974 <_malloc_r+0x88>
 8008922:	4629      	mov	r1, r5
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff ffbf 	bl	80088a8 <sbrk_aligned>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	4604      	mov	r4, r0
 800892e:	d158      	bne.n	80089e2 <_malloc_r+0xf6>
 8008930:	f8d8 4000 	ldr.w	r4, [r8]
 8008934:	4627      	mov	r7, r4
 8008936:	2f00      	cmp	r7, #0
 8008938:	d143      	bne.n	80089c2 <_malloc_r+0xd6>
 800893a:	2c00      	cmp	r4, #0
 800893c:	d04b      	beq.n	80089d6 <_malloc_r+0xea>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4639      	mov	r1, r7
 8008942:	4630      	mov	r0, r6
 8008944:	eb04 0903 	add.w	r9, r4, r3
 8008948:	f000 f98c 	bl	8008c64 <_sbrk_r>
 800894c:	4581      	cmp	r9, r0
 800894e:	d142      	bne.n	80089d6 <_malloc_r+0xea>
 8008950:	6821      	ldr	r1, [r4, #0]
 8008952:	1a6d      	subs	r5, r5, r1
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ffa6 	bl	80088a8 <sbrk_aligned>
 800895c:	3001      	adds	r0, #1
 800895e:	d03a      	beq.n	80089d6 <_malloc_r+0xea>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	442b      	add	r3, r5
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	f8d8 3000 	ldr.w	r3, [r8]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	bb62      	cbnz	r2, 80089c8 <_malloc_r+0xdc>
 800896e:	f8c8 7000 	str.w	r7, [r8]
 8008972:	e00f      	b.n	8008994 <_malloc_r+0xa8>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	1b52      	subs	r2, r2, r5
 8008978:	d420      	bmi.n	80089bc <_malloc_r+0xd0>
 800897a:	2a0b      	cmp	r2, #11
 800897c:	d917      	bls.n	80089ae <_malloc_r+0xc2>
 800897e:	1961      	adds	r1, r4, r5
 8008980:	42a3      	cmp	r3, r4
 8008982:	6025      	str	r5, [r4, #0]
 8008984:	bf18      	it	ne
 8008986:	6059      	strne	r1, [r3, #4]
 8008988:	6863      	ldr	r3, [r4, #4]
 800898a:	bf08      	it	eq
 800898c:	f8c8 1000 	streq.w	r1, [r8]
 8008990:	5162      	str	r2, [r4, r5]
 8008992:	604b      	str	r3, [r1, #4]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f82f 	bl	80089f8 <__malloc_unlock>
 800899a:	f104 000b 	add.w	r0, r4, #11
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	f020 0007 	bic.w	r0, r0, #7
 80089a4:	1ac2      	subs	r2, r0, r3
 80089a6:	bf1c      	itt	ne
 80089a8:	1a1b      	subne	r3, r3, r0
 80089aa:	50a3      	strne	r3, [r4, r2]
 80089ac:	e7af      	b.n	800890e <_malloc_r+0x22>
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	bf0c      	ite	eq
 80089b4:	f8c8 2000 	streq.w	r2, [r8]
 80089b8:	605a      	strne	r2, [r3, #4]
 80089ba:	e7eb      	b.n	8008994 <_malloc_r+0xa8>
 80089bc:	4623      	mov	r3, r4
 80089be:	6864      	ldr	r4, [r4, #4]
 80089c0:	e7ae      	b.n	8008920 <_malloc_r+0x34>
 80089c2:	463c      	mov	r4, r7
 80089c4:	687f      	ldr	r7, [r7, #4]
 80089c6:	e7b6      	b.n	8008936 <_malloc_r+0x4a>
 80089c8:	461a      	mov	r2, r3
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d1fb      	bne.n	80089c8 <_malloc_r+0xdc>
 80089d0:	2300      	movs	r3, #0
 80089d2:	6053      	str	r3, [r2, #4]
 80089d4:	e7de      	b.n	8008994 <_malloc_r+0xa8>
 80089d6:	230c      	movs	r3, #12
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 f80c 	bl	80089f8 <__malloc_unlock>
 80089e0:	e794      	b.n	800890c <_malloc_r+0x20>
 80089e2:	6005      	str	r5, [r0, #0]
 80089e4:	e7d6      	b.n	8008994 <_malloc_r+0xa8>
 80089e6:	bf00      	nop
 80089e8:	2000047c 	.word	0x2000047c

080089ec <__malloc_lock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	@ (80089f4 <__malloc_lock+0x8>)
 80089ee:	f7ff bf0e 	b.w	800880e <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000474 	.word	0x20000474

080089f8 <__malloc_unlock>:
 80089f8:	4801      	ldr	r0, [pc, #4]	@ (8008a00 <__malloc_unlock+0x8>)
 80089fa:	f7ff bf09 	b.w	8008810 <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000474 	.word	0x20000474

08008a04 <__sflush_r>:
 8008a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	0716      	lsls	r6, r2, #28
 8008a0e:	4605      	mov	r5, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	d454      	bmi.n	8008abe <__sflush_r+0xba>
 8008a14:	684b      	ldr	r3, [r1, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc02      	bgt.n	8008a20 <__sflush_r+0x1c>
 8008a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd48      	ble.n	8008ab2 <__sflush_r+0xae>
 8008a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d045      	beq.n	8008ab2 <__sflush_r+0xae>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a2c:	682f      	ldr	r7, [r5, #0]
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	d030      	beq.n	8008a96 <__sflush_r+0x92>
 8008a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	0759      	lsls	r1, r3, #29
 8008a3a:	d505      	bpl.n	8008a48 <__sflush_r+0x44>
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a42:	b10b      	cbz	r3, 8008a48 <__sflush_r+0x44>
 8008a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a4c:	6a21      	ldr	r1, [r4, #32]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b0      	blx	r6
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	d106      	bne.n	8008a66 <__sflush_r+0x62>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	291d      	cmp	r1, #29
 8008a5c:	d82b      	bhi.n	8008ab6 <__sflush_r+0xb2>
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b08 <__sflush_r+0x104>)
 8008a60:	410a      	asrs	r2, r1
 8008a62:	07d6      	lsls	r6, r2, #31
 8008a64:	d427      	bmi.n	8008ab6 <__sflush_r+0xb2>
 8008a66:	2200      	movs	r2, #0
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	04d9      	lsls	r1, r3, #19
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	d504      	bpl.n	8008a7c <__sflush_r+0x78>
 8008a72:	1c42      	adds	r2, r0, #1
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0x76>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b903      	cbnz	r3, 8008a7c <__sflush_r+0x78>
 8008a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	b1b9      	cbz	r1, 8008ab2 <__sflush_r+0xae>
 8008a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d002      	beq.n	8008a90 <__sflush_r+0x8c>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff fec2 	bl	8008814 <_free_r>
 8008a90:	2300      	movs	r3, #0
 8008a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a94:	e00d      	b.n	8008ab2 <__sflush_r+0xae>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b0      	blx	r6
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	1c50      	adds	r0, r2, #1
 8008aa0:	d1c9      	bne.n	8008a36 <__sflush_r+0x32>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0c6      	beq.n	8008a36 <__sflush_r+0x32>
 8008aa8:	2b1d      	cmp	r3, #29
 8008aaa:	d001      	beq.n	8008ab0 <__sflush_r+0xac>
 8008aac:	2b16      	cmp	r3, #22
 8008aae:	d11e      	bne.n	8008aee <__sflush_r+0xea>
 8008ab0:	602f      	str	r7, [r5, #0]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e022      	b.n	8008afc <__sflush_r+0xf8>
 8008ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aba:	b21b      	sxth	r3, r3
 8008abc:	e01b      	b.n	8008af6 <__sflush_r+0xf2>
 8008abe:	690f      	ldr	r7, [r1, #16]
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	d0f6      	beq.n	8008ab2 <__sflush_r+0xae>
 8008ac4:	0793      	lsls	r3, r2, #30
 8008ac6:	680e      	ldr	r6, [r1, #0]
 8008ac8:	bf08      	it	eq
 8008aca:	694b      	ldreq	r3, [r1, #20]
 8008acc:	600f      	str	r7, [r1, #0]
 8008ace:	bf18      	it	ne
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	eba6 0807 	sub.w	r8, r6, r7
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	dde9      	ble.n	8008ab2 <__sflush_r+0xae>
 8008ade:	6a21      	ldr	r1, [r4, #32]
 8008ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ae2:	4643      	mov	r3, r8
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	2800      	cmp	r0, #0
 8008aec:	dc08      	bgt.n	8008b00 <__sflush_r+0xfc>
 8008aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b00:	4407      	add	r7, r0
 8008b02:	eba8 0800 	sub.w	r8, r8, r0
 8008b06:	e7e7      	b.n	8008ad8 <__sflush_r+0xd4>
 8008b08:	dfbffffe 	.word	0xdfbffffe

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6a03      	ldr	r3, [r0, #32]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f7ff fc7b 	bl	800841c <__sinit>
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f3      	beq.n	8008b16 <_fflush_r+0xa>
 8008b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b30:	07d0      	lsls	r0, r2, #31
 8008b32:	d404      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b34:	0599      	lsls	r1, r3, #22
 8008b36:	d402      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b3a:	f7ff fe68 	bl	800880e <__retarget_lock_acquire_recursive>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7ff ff5f 	bl	8008a04 <__sflush_r>
 8008b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	d4e4      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	059b      	lsls	r3, r3, #22
 8008b52:	d4e1      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b56:	f7ff fe5b 	bl	8008810 <__retarget_lock_release_recursive>
 8008b5a:	e7dd      	b.n	8008b18 <_fflush_r+0xc>

08008b5c <__swhatbuf_r>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	460c      	mov	r4, r1
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	2900      	cmp	r1, #0
 8008b66:	b096      	sub	sp, #88	@ 0x58
 8008b68:	4615      	mov	r5, r2
 8008b6a:	461e      	mov	r6, r3
 8008b6c:	da0d      	bge.n	8008b8a <__swhatbuf_r+0x2e>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b74:	f04f 0100 	mov.w	r1, #0
 8008b78:	bf14      	ite	ne
 8008b7a:	2340      	movne	r3, #64	@ 0x40
 8008b7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b80:	2000      	movs	r0, #0
 8008b82:	6031      	str	r1, [r6, #0]
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	b016      	add	sp, #88	@ 0x58
 8008b88:	bd70      	pop	{r4, r5, r6, pc}
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f000 f848 	bl	8008c20 <_fstat_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	dbec      	blt.n	8008b6e <__swhatbuf_r+0x12>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b9e:	4259      	negs	r1, r3
 8008ba0:	4159      	adcs	r1, r3
 8008ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ba6:	e7eb      	b.n	8008b80 <__swhatbuf_r+0x24>

08008ba8 <__smakebuf_r>:
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bac:	079d      	lsls	r5, r3, #30
 8008bae:	4606      	mov	r6, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	d507      	bpl.n	8008bc4 <__smakebuf_r+0x1c>
 8008bb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	6163      	str	r3, [r4, #20]
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc4:	ab01      	add	r3, sp, #4
 8008bc6:	466a      	mov	r2, sp
 8008bc8:	f7ff ffc8 	bl	8008b5c <__swhatbuf_r>
 8008bcc:	9f00      	ldr	r7, [sp, #0]
 8008bce:	4605      	mov	r5, r0
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff fe8a 	bl	80088ec <_malloc_r>
 8008bd8:	b948      	cbnz	r0, 8008bee <__smakebuf_r+0x46>
 8008bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bde:	059a      	lsls	r2, r3, #22
 8008be0:	d4ee      	bmi.n	8008bc0 <__smakebuf_r+0x18>
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	f043 0302 	orr.w	r3, r3, #2
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	e7e2      	b.n	8008bb4 <__smakebuf_r+0xc>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	6020      	str	r0, [r4, #0]
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf6:	81a3      	strh	r3, [r4, #12]
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bfe:	b15b      	cbz	r3, 8008c18 <__smakebuf_r+0x70>
 8008c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f81d 	bl	8008c44 <_isatty_r>
 8008c0a:	b128      	cbz	r0, 8008c18 <__smakebuf_r+0x70>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	431d      	orrs	r5, r3
 8008c1c:	81a5      	strh	r5, [r4, #12]
 8008c1e:	e7cf      	b.n	8008bc0 <__smakebuf_r+0x18>

08008c20 <_fstat_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d07      	ldr	r5, [pc, #28]	@ (8008c40 <_fstat_r+0x20>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	f7f8 fa20 	bl	8001072 <_fstat>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d102      	bne.n	8008c3c <_fstat_r+0x1c>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	b103      	cbz	r3, 8008c3c <_fstat_r+0x1c>
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	bd38      	pop	{r3, r4, r5, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000470 	.word	0x20000470

08008c44 <_isatty_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d06      	ldr	r5, [pc, #24]	@ (8008c60 <_isatty_r+0x1c>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	f7f8 fa1f 	bl	8001092 <_isatty>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_isatty_r+0x1a>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_isatty_r+0x1a>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	20000470 	.word	0x20000470

08008c64 <_sbrk_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d06      	ldr	r5, [pc, #24]	@ (8008c80 <_sbrk_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f8 fa28 	bl	80010c4 <_sbrk>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_sbrk_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_sbrk_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20000470 	.word	0x20000470

08008c84 <_init>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr

08008c90 <_fini>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr
