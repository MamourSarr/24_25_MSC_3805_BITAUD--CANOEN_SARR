
NUCLEO-G474RET6-TP_CANOEN_SARR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800c788  0800c788  0000d788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc0  0800ccc0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc0  0800ccc0  0000dcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc8  0800ccc8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc8  0800ccc8  0000dcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cccc  0800cccc  0000dccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ccd0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001d4  0800cea4  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800cea4  0000e698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb91  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e9  00000000  00000000  00029d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0002d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115e  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a26a  00000000  00000000  0002fe26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcd5  00000000  00000000  0005a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147f1  00000000  00000000  00075d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007090  00000000  00000000  0018a59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0019162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c770 	.word	0x0800c770

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800c770 	.word	0x0800c770

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fbdd 	bl	800a6e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f70:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000f96:	f001 fc55 	bl	8002844 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fb42 	bl	8001628 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fb0:	f002 fc86 	bl	80038c0 <HAL_ADCEx_MultiModeConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fba:	f000 fb35 	bl	8001628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_ADC1_Init+0xf0>)
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fca:	237f      	movs	r3, #127	@ 0x7f
 8000fcc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	@ (8000ff4 <MX_ADC1_Init+0xec>)
 8000fdc:	f001 fee0 	bl	8002da0 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe6:	f000 fb1f 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	@ 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001f0 	.word	0x200001f0
 8000ff8:	21800100 	.word	0x21800100

08000ffc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f009 fb69 	bl	800a6e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <MX_ADC2_Init+0xc4>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001016:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800101a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800101c:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001036:	2204      	movs	r2, #4
 8001038:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001042:	2200      	movs	r2, #0
 8001044:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <MX_ADC2_Init+0xc0>)
 8001078:	f001 fbe4 	bl	8002844 <HAL_ADC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001082:	f000 fad1 	bl	8001628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_ADC2_Init+0xc8>)
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108a:	2306      	movs	r3, #6
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001092:	237f      	movs	r3, #127	@ 0x7f
 8001094:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001096:	2304      	movs	r3, #4
 8001098:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_ADC2_Init+0xc0>)
 80010a4:	f001 fe7c 	bl	8002da0 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010ae:	f000 fabb 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000025c 	.word	0x2000025c
 80010c0:	50000100 	.word	0x50000100
 80010c4:	19200040 	.word	0x19200040

080010c8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0a4      	sub	sp, #144	@ 0x90
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e4:	2254      	movs	r2, #84	@ 0x54
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f009 faf9 	bl	800a6e0 <memset>
  if(adcHandle->Instance==ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f6:	f040 80a0 	bne.w	800123a <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001100:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001104:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f8c4 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001116:	f000 fa87 	bl	8001628 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800111a:	4b79      	ldr	r3, [pc, #484]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a77      	ldr	r2, [pc, #476]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001124:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10b      	bne.n	8001144 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800112c:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a74      	ldr	r2, [pc, #464]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b72      	ldr	r3, [pc, #456]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b6f      	ldr	r3, [pc, #444]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a6e      	ldr	r2, [pc, #440]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b6c      	ldr	r3, [pc, #432]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b69      	ldr	r3, [pc, #420]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a62      	ldr	r2, [pc, #392]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b60      	ldr	r3, [pc, #384]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800118c:	2304      	movs	r3, #4
 800118e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4859      	ldr	r0, [pc, #356]	@ (8001308 <HAL_ADC_MspInit+0x240>)
 80011a4:	f003 f8a6 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011a8:	2302      	movs	r3, #2
 80011aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f003 f897 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c6:	2303      	movs	r3, #3
 80011c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011da:	4619      	mov	r1, r3
 80011dc:	484b      	ldr	r0, [pc, #300]	@ (800130c <HAL_ADC_MspInit+0x244>)
 80011de:	f003 f889 	bl	80042f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001314 <HAL_ADC_MspInit+0x24c>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011e8:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011ea:	2205      	movs	r2, #5
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b48      	ldr	r3, [pc, #288]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b46      	ldr	r3, [pc, #280]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001202:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 800120a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800120e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001210:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001212:	2220      	movs	r2, #32
 8001214:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800121c:	483c      	ldr	r0, [pc, #240]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 800121e:	f002 fd37 	bl	8003c90 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001228:	f000 f9fe 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a38      	ldr	r2, [pc, #224]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001230:	655a      	str	r2, [r3, #84]	@ 0x54
 8001232:	4a37      	ldr	r2, [pc, #220]	@ (8001310 <HAL_ADC_MspInit+0x248>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001238:	e05e      	b.n	80012f8 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a36      	ldr	r2, [pc, #216]	@ (8001318 <HAL_ADC_MspInit+0x250>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d159      	bne.n	80012f8 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001254:	4618      	mov	r0, r3
 8001256:	f004 f81f 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8001260:	f000 f9e2 	bl	8001628 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 800126c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <HAL_ADC_MspInit+0x238>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10b      	bne.n	800128e <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800127c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a1c      	ldr	r2, [pc, #112]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_ADC_MspInit+0x23c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012be:	230b      	movs	r3, #11
 80012c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HAL_ADC_MspInit+0x240>)
 80012d6:	f003 f80d 	bl	80042f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012da:	2301      	movs	r3, #1
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f4:	f002 fffe 	bl	80042f4 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3790      	adds	r7, #144	@ 0x90
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000328 	.word	0x20000328
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800
 800130c:	48000400 	.word	0x48000400
 8001310:	200002c8 	.word	0x200002c8
 8001314:	40020008 	.word	0x40020008
 8001318:	50000100 	.word	0x50000100

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_DMA_Init+0x50>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <MX_DMA_Init+0x50>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6493      	str	r3, [r2, #72]	@ 0x48
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_DMA_Init+0x50>)
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_DMA_Init+0x50>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800133e:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <MX_DMA_Init+0x50>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6493      	str	r3, [r2, #72]	@ 0x48
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_DMA_Init+0x50>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	200b      	movs	r0, #11
 8001358:	f002 fc72 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800135c:	200b      	movs	r0, #11
 800135e:	f002 fc89 	bl	8003c74 <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <MX_GPIO_Init+0x134>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <MX_GPIO_Init+0x134>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <MX_GPIO_Init+0x134>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a40      	ldr	r2, [pc, #256]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a3a      	ldr	r2, [pc, #232]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a34      	ldr	r2, [pc, #208]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0x134>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001406:	f003 f8f7 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2104      	movs	r1, #4
 800140e:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <MX_GPIO_Init+0x138>)
 8001410:	f003 f8f2 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4820      	ldr	r0, [pc, #128]	@ (80014ac <MX_GPIO_Init+0x13c>)
 800142c:	f002 ff62 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001430:	2320      	movs	r3, #32
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144a:	f002 ff53 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800144e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001460:	2307      	movs	r3, #7
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <MX_GPIO_Init+0x13c>)
 800146c:	f002 ff42 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001470:	2304      	movs	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_GPIO_Init+0x138>)
 8001488:	f002 ff34 	bl	80042f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2028      	movs	r0, #40	@ 0x28
 8001492:	f002 fbd5 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001496:	2028      	movs	r0, #40	@ 0x28
 8001498:	f002 fbec 	bl	8003c74 <HAL_NVIC_EnableIRQ>

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48000800 	.word	0x48000800

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	@ 0x70
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char cmdBuffer[CMD_BUFFER_SIZE];
	int idx_cmd;
	char* argv[MAX_ARGS];
	int argc = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int32_t ch_MCC = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f000 ff4a 	bl	8002356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f855 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f7ff ff53 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ca:	f7ff ff27 	bl	800131c <MX_DMA_Init>
  MX_ADC2_Init();
 80014ce:	f7ff fd95 	bl	8000ffc <MX_ADC2_Init>
  MX_ADC1_Init();
 80014d2:	f7ff fd19 	bl	8000f08 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014d6:	f000 fc65 	bl	8001da4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014da:	f000 fd31 	bl	8001f40 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014de:	f000 fe65 	bl	80021ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE);
 80014e2:	2208      	movs	r2, #8
 80014e4:	491a      	ldr	r1, [pc, #104]	@ (8001550 <main+0xa0>)
 80014e6:	481b      	ldr	r0, [pc, #108]	@ (8001554 <main+0xa4>)
 80014e8:	f001 fb68 	bl	8002bbc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim1);
 80014ec:	481a      	ldr	r0, [pc, #104]	@ (8001558 <main+0xa8>)
 80014ee:	f004 f979 	bl	80057e4 <HAL_TIM_Base_Start>
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2224      	movs	r2, #36	@ 0x24
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 f8f1 	bl	800a6e0 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	2240      	movs	r2, #64	@ 0x40
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f009 f8ea 	bl	800a6e0 <memset>
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <main+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001512:	2240      	movs	r2, #64	@ 0x40
 8001514:	2100      	movs	r1, #0
 8001516:	4812      	ldr	r0, [pc, #72]	@ (8001560 <main+0xb0>)
 8001518:	f009 f8e2 	bl	800a6e0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800151c:	2201      	movs	r2, #1
 800151e:	490f      	ldr	r1, [pc, #60]	@ (800155c <main+0xac>)
 8001520:	4810      	ldr	r0, [pc, #64]	@ (8001564 <main+0xb4>)
 8001522:	f006 f961 	bl	80077e8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 ff4c 	bl	80023c4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	225f      	movs	r2, #95	@ 0x5f
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <main+0xb8>)
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <main+0xb4>)
 8001536:	f006 f8c9 	bl	80076cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	2218      	movs	r2, #24
 8001540:	490a      	ldr	r1, [pc, #40]	@ (800156c <main+0xbc>)
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <main+0xb4>)
 8001544:	f006 f8c2 	bl	80076cc <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		shell();
 8001548:	f000 f88a 	bl	8001660 <shell>
	{
 800154c:	bf00      	nop
 800154e:	e7fb      	b.n	8001548 <main+0x98>
 8001550:	20000370 	.word	0x20000370
 8001554:	200001f0 	.word	0x200001f0
 8001558:	2000041c 	.word	0x2000041c
 800155c:	2000032c 	.word	0x2000032c
 8001560:	20000330 	.word	0x20000330
 8001564:	200004b4 	.word	0x200004b4
 8001568:	0800c80c 	.word	0x0800c80c
 800156c:	0800c7f4 	.word	0x0800c7f4

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	@ 0x50
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2238      	movs	r2, #56	@ 0x38
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f009 f8ae 	bl	800a6e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001592:	2000      	movs	r0, #0
 8001594:	f003 f86c 	bl	8004670 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	2303      	movs	r3, #3
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015aa:	2306      	movs	r3, #6
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ae:	2355      	movs	r3, #85	@ 0x55
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f908 	bl	80047d8 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ce:	f000 f82b 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2303      	movs	r3, #3
 80015d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2104      	movs	r1, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fc06 	bl	8004dfc <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015f6:	f000 f817 	bl	8001628 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001616:	f000 feb7 	bl	8002388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40001000 	.word	0x40001000

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_UART_RxCpltCallback>:
uint8_t former_speed = 0;




void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_UART_RxCpltCallback+0x20>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001642:	2201      	movs	r2, #1
 8001644:	4904      	ldr	r1, [pc, #16]	@ (8001658 <HAL_UART_RxCpltCallback+0x24>)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_UART_RxCpltCallback+0x28>)
 8001648:	f006 f8ce 	bl	80077e8 <HAL_UART_Receive_IT>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200003c4 	.word	0x200003c4
 8001658:	200003c8 	.word	0x200003c8
 800165c:	200004b4 	.word	0x200004b4

08001660 <shell>:
//  if (htim->Instance == TIM1) {
//    ADC();
//}
//}

void shell(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	if (uartRxReceived == 1)
 8001664:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <shell+0x88>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d13a      	bne.n	80016e2 <shell+0x82>
	{
		printf("OK \r\n");
 800166c:	481f      	ldr	r0, [pc, #124]	@ (80016ec <shell+0x8c>)
 800166e:	f008 ff23 	bl	800a4b8 <puts>
		// Si caractère reçu est ENTER
		if (uartRxBuffer[0] == ASCII_ENTER)
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <shell+0x90>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0d      	cmp	r3, #13
 8001678:	d11e      	bne.n	80016b8 <shell+0x58>
		{
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	2203      	movs	r2, #3
 8001680:	491c      	ldr	r1, [pc, #112]	@ (80016f4 <shell+0x94>)
 8001682:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <shell+0x98>)
 8001684:	f006 f822 	bl	80076cc <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';  // Fin de la commande
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <shell+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <shell+0xa0>)
 800168e:	2100      	movs	r1, #0
 8001690:	54d1      	strb	r1, [r2, r3]

			// Process the command
			processCommand(cmdBuffer);
 8001692:	481b      	ldr	r0, [pc, #108]	@ (8001700 <shell+0xa0>)
 8001694:	f000 f89c 	bl	80017d0 <processCommand>



			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2218      	movs	r2, #24
 800169e:	4919      	ldr	r1, [pc, #100]	@ (8001704 <shell+0xa4>)
 80016a0:	4815      	ldr	r0, [pc, #84]	@ (80016f8 <shell+0x98>)
 80016a2:	f006 f813 	bl	80076cc <HAL_UART_Transmit>
			idx_cmd = 0;
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <shell+0x9c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
 80016ac:	2240      	movs	r2, #64	@ 0x40
 80016ae:	2100      	movs	r1, #0
 80016b0:	4813      	ldr	r0, [pc, #76]	@ (8001700 <shell+0xa0>)
 80016b2:	f009 f815 	bl	800a6e0 <memset>
 80016b6:	e00c      	b.n	80016d2 <shell+0x72>
		}
		else
		{
			// Si ce n'est pas ENTER, stocker le caractère dans le buffer
			if (idx_cmd < CMD_BUFFER_SIZE - 1)
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <shell+0x9c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80016be:	dc08      	bgt.n	80016d2 <shell+0x72>
			{
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80016c0:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <shell+0x9c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <shell+0x9c>)
 80016c8:	600a      	str	r2, [r1, #0]
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <shell+0x90>)
 80016cc:	7811      	ldrb	r1, [r2, #0]
 80016ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <shell+0xa0>)
 80016d0:	54d1      	strb	r1, [r2, r3]
			}
		}
		HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80016d2:	2201      	movs	r2, #1
 80016d4:	4906      	ldr	r1, [pc, #24]	@ (80016f0 <shell+0x90>)
 80016d6:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <shell+0x98>)
 80016d8:	f006 f886 	bl	80077e8 <HAL_UART_Receive_IT>

		uartRxReceived = 0;
 80016dc:	4b02      	ldr	r3, [pc, #8]	@ (80016e8 <shell+0x88>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
	}

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003c4 	.word	0x200003c4
 80016ec:	0800c788 	.word	0x0800c788
 80016f0:	200003c8 	.word	0x200003c8
 80016f4:	0800c884 	.word	0x0800c884
 80016f8:	200004b4 	.word	0x200004b4
 80016fc:	200003c0 	.word	0x200003c0
 8001700:	20000380 	.word	0x20000380
 8001704:	0800c86c 	.word	0x0800c86c

08001708 <ADC>:


void ADC(){
 8001708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800170c:	b09a      	sub	sp, #104	@ 0x68
 800170e:	af06      	add	r7, sp, #24

	HAL_Delay(1000);
 8001710:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001714:	f000 fe56 	bl	80023c4 <HAL_Delay>
	//HAL_ADC_Start(&hadc1);


	// Lecture de la valeur ADC
	//uint32_t ADC_value = HAL_ADC_GetValue(&hadc1);
	float ADC_value = ADC_buffer[0];
 8001718:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <ADC+0xac>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001724:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f000 fe4b 	bl	80023c4 <HAL_Delay>

	float sensivity = 0.05;  // Sensibilité du capteur en V/A
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <ADC+0xb0>)
 8001730:	64bb      	str	r3, [r7, #72]	@ 0x48
	float V_offset = 1.65;
 8001732:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <ADC+0xb4>)
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
	float V_adc = (ADC_value * 3.3f / 4096.0f); // Tension mesurée
 8001736:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800173a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017c0 <ADC+0xb8>
 800173e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001742:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80017c4 <ADC+0xbc>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float I_current = (V_adc - V_offset) / sensivity; // Courant calculé
 800174e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001752:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001756:	ee77 6a67 	vsub.f32	s13, s14, s15
 800175a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800175e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001762:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	char buffer_adc[50];
	int taille = snprintf(buffer_adc, sizeof(buffer_adc),"ADC: %f, V: %.2f, I: %.2f\r\n", ADC_value, V_adc, I_current);
 8001766:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001768:	f7fe ff26 	bl	80005b8 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001772:	f7fe ff21 	bl	80005b8 <__aeabi_f2d>
 8001776:	4680      	mov	r8, r0
 8001778:	4689      	mov	r9, r1
 800177a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800177c:	f7fe ff1c 	bl	80005b8 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	1d38      	adds	r0, r7, #4
 8001786:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800178a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800178e:	e9cd 4500 	strd	r4, r5, [sp]
 8001792:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <ADC+0xc0>)
 8001794:	2132      	movs	r1, #50	@ 0x32
 8001796:	f008 fe97 	bl	800a4c8 <sniprintf>
 800179a:	63b8      	str	r0, [r7, #56]	@ 0x38

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer_adc, taille, 100);
 800179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800179e:	b29a      	uxth	r2, r3
 80017a0:	1d39      	adds	r1, r7, #4
 80017a2:	2364      	movs	r3, #100	@ 0x64
 80017a4:	4809      	ldr	r0, [pc, #36]	@ (80017cc <ADC+0xc4>)
 80017a6:	f005 ff91 	bl	80076cc <HAL_UART_Transmit>

}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	@ 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017b4:	20000370 	.word	0x20000370
 80017b8:	3d4ccccd 	.word	0x3d4ccccd
 80017bc:	3fd33333 	.word	0x3fd33333
 80017c0:	40533333 	.word	0x40533333
 80017c4:	45800000 	.word	0x45800000
 80017c8:	0800c790 	.word	0x0800c790
 80017cc:	200004b4 	.word	0x200004b4

080017d0 <processCommand>:

void processCommand(char *cmd){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b092      	sub	sp, #72	@ 0x48
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	if (strcmp(cmd, "help") == 0) {
 80017d8:	4982      	ldr	r1, [pc, #520]	@ (80019e4 <processCommand+0x214>)
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fd20 	bl	8000220 <strcmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <processCommand+0x26>
		HAL_UART_Transmit(&huart2, help, sizeof(help) - 1, HAL_MAX_DELAY);
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	223b      	movs	r2, #59	@ 0x3b
 80017ec:	497e      	ldr	r1, [pc, #504]	@ (80019e8 <processCommand+0x218>)
 80017ee:	487f      	ldr	r0, [pc, #508]	@ (80019ec <processCommand+0x21c>)
 80017f0:	f005 ff6c 	bl	80076cc <HAL_UART_Transmit>


	else {
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
	}
}
 80017f4:	e0f2      	b.n	80019dc <processCommand+0x20c>
	else if (strcmp(cmd, "pinout") == 0) {
 80017f6:	497e      	ldr	r1, [pc, #504]	@ (80019f0 <processCommand+0x220>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fd11 	bl	8000220 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <processCommand+0x44>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout) - 1, HAL_MAX_DELAY);
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	221a      	movs	r2, #26
 800180a:	497a      	ldr	r1, [pc, #488]	@ (80019f4 <processCommand+0x224>)
 800180c:	4877      	ldr	r0, [pc, #476]	@ (80019ec <processCommand+0x21c>)
 800180e:	f005 ff5d 	bl	80076cc <HAL_UART_Transmit>
}
 8001812:	e0e3      	b.n	80019dc <processCommand+0x20c>
	else if (strcmp(cmd, "start") == 0) {
 8001814:	4978      	ldr	r1, [pc, #480]	@ (80019f8 <processCommand+0x228>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fd02 	bl	8000220 <strcmp>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d124      	bne.n	800186c <processCommand+0x9c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
 8001822:	4b76      	ldr	r3, [pc, #472]	@ (80019fc <processCommand+0x22c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);
 800182c:	4b73      	ldr	r3, [pc, #460]	@ (80019fc <processCommand+0x22c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001834:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn) - 1, HAL_MAX_DELAY);
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	220a      	movs	r2, #10
 800183c:	4970      	ldr	r1, [pc, #448]	@ (8001a00 <processCommand+0x230>)
 800183e:	486b      	ldr	r0, [pc, #428]	@ (80019ec <processCommand+0x21c>)
 8001840:	f005 ff44 	bl	80076cc <HAL_UART_Transmit>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001844:	2100      	movs	r1, #0
 8001846:	486d      	ldr	r0, [pc, #436]	@ (80019fc <processCommand+0x22c>)
 8001848:	f004 f916 	bl	8005a78 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800184c:	2100      	movs	r1, #0
 800184e:	486b      	ldr	r0, [pc, #428]	@ (80019fc <processCommand+0x22c>)
 8001850:	f005 fc24 	bl	800709c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001854:	2104      	movs	r1, #4
 8001856:	4869      	ldr	r0, [pc, #420]	@ (80019fc <processCommand+0x22c>)
 8001858:	f004 f90e 	bl	8005a78 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800185c:	2104      	movs	r1, #4
 800185e:	4867      	ldr	r0, [pc, #412]	@ (80019fc <processCommand+0x22c>)
 8001860:	f005 fc1c 	bl	800709c <HAL_TIMEx_PWMN_Start>
		former_speed = 50;
 8001864:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <processCommand+0x234>)
 8001866:	2232      	movs	r2, #50	@ 0x32
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	e0b7      	b.n	80019dc <processCommand+0x20c>
	else if (strcmp(cmd, "stop") == 0) {
 800186c:	4966      	ldr	r1, [pc, #408]	@ (8001a08 <processCommand+0x238>)
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fcd6 	bl	8000220 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d11a      	bne.n	80018b0 <processCommand+0xe0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff) - 1, HAL_MAX_DELAY);
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	220b      	movs	r2, #11
 8001880:	4962      	ldr	r1, [pc, #392]	@ (8001a0c <processCommand+0x23c>)
 8001882:	485a      	ldr	r0, [pc, #360]	@ (80019ec <processCommand+0x21c>)
 8001884:	f005 ff22 	bl	80076cc <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001888:	2100      	movs	r1, #0
 800188a:	485c      	ldr	r0, [pc, #368]	@ (80019fc <processCommand+0x22c>)
 800188c:	f004 fa06 	bl	8005c9c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001890:	2100      	movs	r1, #0
 8001892:	485a      	ldr	r0, [pc, #360]	@ (80019fc <processCommand+0x22c>)
 8001894:	f005 fcc4 	bl	8007220 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001898:	2104      	movs	r1, #4
 800189a:	4858      	ldr	r0, [pc, #352]	@ (80019fc <processCommand+0x22c>)
 800189c:	f004 f9fe 	bl	8005c9c <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80018a0:	2104      	movs	r1, #4
 80018a2:	4856      	ldr	r0, [pc, #344]	@ (80019fc <processCommand+0x22c>)
 80018a4:	f005 fcbc 	bl	8007220 <HAL_TIMEx_PWMN_Stop>
		former_speed = 0;
 80018a8:	4b56      	ldr	r3, [pc, #344]	@ (8001a04 <processCommand+0x234>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	e095      	b.n	80019dc <processCommand+0x20c>
	else if (strncmp(cmd, "speed", 5) == 0) {
 80018b0:	2205      	movs	r2, #5
 80018b2:	4957      	ldr	r1, [pc, #348]	@ (8001a10 <processCommand+0x240>)
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f008 ff1b 	bl	800a6f0 <strncmp>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d17c      	bne.n	80019ba <processCommand+0x1ea>
		int speed_value = atoi(cmd + 6);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3306      	adds	r3, #6
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 ffff 	bl	80098c8 <atoi>
 80018ca:	6478      	str	r0, [r7, #68]	@ 0x44
		if (speed_value > MAX_SPEED) {
 80018cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018d2:	dd10      	ble.n	80018f6 <processCommand+0x126>
			speed_value = MAX_SPEED;
 80018d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
			char maxSpeedMsg[] = "Max Speed\r\n";
 80018da:	4a4e      	ldr	r2, [pc, #312]	@ (8001a14 <processCommand+0x244>)
 80018dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, (uint8_t *)maxSpeedMsg, sizeof(maxSpeedMsg) - 1, HAL_MAX_DELAY);
 80018e6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	220b      	movs	r2, #11
 80018f0:	483e      	ldr	r0, [pc, #248]	@ (80019ec <processCommand+0x21c>)
 80018f2:	f005 feeb 	bl	80076cc <HAL_UART_Transmit>
		int i = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	643b      	str	r3, [r7, #64]	@ 0x40
		uint32_t pwm_value = (speed_value * MAX_SPEED) / 100;
 80018fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4a46      	ldr	r2, [pc, #280]	@ (8001a18 <processCommand+0x248>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1152      	asrs	r2, r2, #5
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint32_t former_pwm_value = (former_speed * MAX_SPEED) / 100;
 800190c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <processCommand+0x234>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <processCommand+0x248>)
 8001914:	fb82 1203 	smull	r1, r2, r2, r3
 8001918:	1152      	asrs	r2, r2, #5
 800191a:	17db      	asrs	r3, r3, #31
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
		if(pwm_value >= former_pwm_value){
 8001920:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001924:	429a      	cmp	r2, r3
 8001926:	d317      	bcc.n	8001958 <processCommand+0x188>
			for(i = former_pwm_value; i < pwm_value; i++){
 8001928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40
 800192c:	e00f      	b.n	800194e <processCommand+0x17e>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 800192e:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <processCommand+0x22c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001934:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 8001936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001938:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 800193c:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <processCommand+0x22c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f000 fd3e 	bl	80023c4 <HAL_Delay>
			for(i = former_pwm_value; i < pwm_value; i++){
 8001948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800194a:	3301      	adds	r3, #1
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
 800194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001952:	429a      	cmp	r2, r3
 8001954:	d8eb      	bhi.n	800192e <processCommand+0x15e>
 8001956:	e016      	b.n	8001986 <processCommand+0x1b6>
			for(i = former_pwm_value; i > pwm_value; i--){
 8001958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
 800195c:	e00f      	b.n	800197e <processCommand+0x1ae>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 800195e:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <processCommand+0x22c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1024- i);
 8001966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001968:	f5c3 6280 	rsb	r2, r3, #1024	@ 0x400
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <processCommand+0x22c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_Delay(10);
 8001972:	200a      	movs	r0, #10
 8001974:	f000 fd26 	bl	80023c4 <HAL_Delay>
			for(i = former_pwm_value; i > pwm_value; i--){
 8001978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800197a:	3b01      	subs	r3, #1
 800197c:	643b      	str	r3, [r7, #64]	@ 0x40
 800197e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001982:	429a      	cmp	r2, r3
 8001984:	d3eb      	bcc.n	800195e <processCommand+0x18e>
		former_speed = speed_value;
 8001986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <processCommand+0x234>)
 800198c:	701a      	strb	r2, [r3, #0]
		snprintf(speedMsg, sizeof(speedMsg), "Speed : %d\r\n", speed_value);
 800198e:	f107 000c 	add.w	r0, r7, #12
 8001992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <processCommand+0x24c>)
 8001996:	2120      	movs	r1, #32
 8001998:	f008 fd96 	bl	800a4c8 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)speedMsg, strlen(speedMsg), HAL_MAX_DELAY);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc9d 	bl	80002e0 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 010c 	add.w	r1, r7, #12
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	480e      	ldr	r0, [pc, #56]	@ (80019ec <processCommand+0x21c>)
 80019b4:	f005 fe8a 	bl	80076cc <HAL_UART_Transmit>
}
 80019b8:	e010      	b.n	80019dc <processCommand+0x20c>
	else if (strcmp(cmd, "ADC") == 0) {
 80019ba:	4919      	ldr	r1, [pc, #100]	@ (8001a20 <processCommand+0x250>)
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7fe fc2f 	bl	8000220 <strcmp>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <processCommand+0x1fe>
		ADC();
 80019c8:	f7ff fe9e 	bl	8001708 <ADC>
}
 80019cc:	e006      	b.n	80019dc <processCommand+0x20c>
		HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound) - 1, HAL_MAX_DELAY);
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	2213      	movs	r2, #19
 80019d4:	4913      	ldr	r1, [pc, #76]	@ (8001a24 <processCommand+0x254>)
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <processCommand+0x21c>)
 80019d8:	f005 fe78 	bl	80076cc <HAL_UART_Transmit>
}
 80019dc:	bf00      	nop
 80019de:	3748      	adds	r7, #72	@ 0x48
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	0800c7ac 	.word	0x0800c7ac
 80019e8:	0800c89c 	.word	0x0800c89c
 80019ec:	200004b4 	.word	0x200004b4
 80019f0:	0800c7b4 	.word	0x0800c7b4
 80019f4:	0800c8d8 	.word	0x0800c8d8
 80019f8:	0800c7bc 	.word	0x0800c7bc
 80019fc:	2000041c 	.word	0x2000041c
 8001a00:	0800c8f4 	.word	0x0800c8f4
 8001a04:	200003c9 	.word	0x200003c9
 8001a08:	0800c7c4 	.word	0x0800c7c4
 8001a0c:	0800c900 	.word	0x0800c900
 8001a10:	0800c7cc 	.word	0x0800c7cc
 8001a14:	0800c7e8 	.word	0x0800c7e8
 8001a18:	51eb851f 	.word	0x51eb851f
 8001a1c:	0800c7d4 	.word	0x0800c7d4
 8001a20:	0800c7e4 	.word	0x0800c7e4
 8001a24:	0800c888 	.word	0x0800c888

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_MspInit+0x44>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a5e:	f002 feab 	bl	80047b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a80:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <HAL_InitTick+0xc4>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <HAL_InitTick+0xc4>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8c:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <HAL_InitTick+0xc4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fb80 	bl	80051a8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aa8:	f003 fb52 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8001aac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab0:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <HAL_InitTick+0xc8>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0c9b      	lsrs	r3, r3, #18
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001abe:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <HAL_InitTick+0xd0>)
 8001ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001ac4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ac8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aca:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001adc:	4817      	ldr	r0, [pc, #92]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001ade:	f003 fe29 	bl	8005734 <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11b      	bne.n	8001b28 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001af0:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <HAL_InitTick+0xcc>)
 8001af2:	f003 fee7 	bl	80058c4 <HAL_TIM_Base_Start_IT>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001afc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d111      	bne.n	8001b28 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b04:	2036      	movs	r0, #54	@ 0x36
 8001b06:	f002 f8b5 	bl	8003c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d808      	bhi.n	8001b22 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	2036      	movs	r0, #54	@ 0x36
 8001b16:	f002 f893 	bl	8003c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <HAL_InitTick+0xd4>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e002      	b.n	8001b28 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3730      	adds	r7, #48	@ 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	200003cc 	.word	0x200003cc
 8001b40:	40001000 	.word	0x40001000
 8001b44:	20000004 	.word	0x20000004

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <DMA1_Channel1_IRQHandler+0x10>)
 8001bae:	f002 fa52 	bl	8004056 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002c8 	.word	0x200002c8

08001bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <USART2_IRQHandler+0x10>)
 8001bc2:	f005 fe5d 	bl	8007880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200004b4 	.word	0x200004b4

08001bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001bd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bd8:	f002 fd26 	bl	8004628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <TIM6_DAC_IRQHandler+0x10>)
 8001be6:	f004 f8f5 	bl	8005dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200003cc 	.word	0x200003cc

08001bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_kill>:

int _kill(int pid, int sig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0e:	f008 fdcb 	bl	800a7a8 <__errno>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2216      	movs	r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_exit>:

void _exit (int status)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <_exit+0x12>

08001c3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e00a      	b.n	8001c62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4c:	f3af 8000 	nop.w
 8001c50:	4601      	mov	r1, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	b2ca      	uxtb	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbf0      	blt.n	8001c4c <_read+0x12>
  }

  return len;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e009      	b.n	8001c9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf1      	blt.n	8001c86 <_write+0x12>
  }
  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_close>:

int _close(int file)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_isatty>:

int _isatty(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f008 fd30 	bl	800a7a8 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000418 	.word	0x20000418
 8001d7c:	20000698 	.word	0x20000698

08001d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b09c      	sub	sp, #112	@ 0x70
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2234      	movs	r2, #52	@ 0x34
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f008 fc7e 	bl	800a6e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de4:	4b54      	ldr	r3, [pc, #336]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001de6:	4a55      	ldr	r2, [pc, #340]	@ (8001f3c <MX_TIM1_Init+0x198>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8001dea:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001df0:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001df2:	2220      	movs	r2, #32
 8001df4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001df6:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e04:	4b4c      	ldr	r3, [pc, #304]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e10:	4849      	ldr	r0, [pc, #292]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e12:	f003 fc8f 	bl	8005734 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e1c:	f7ff fc04 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4842      	ldr	r0, [pc, #264]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e2e:	f004 fa35 	bl	800629c <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e38:	f7ff fbf6 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e3c:	483e      	ldr	r0, [pc, #248]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e3e:	f003 fdb9 	bl	80059b4 <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e48:	f7ff fbee 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4836      	ldr	r0, [pc, #216]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e60:	f005 fa3c 	bl	80072dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e6a:	f7ff fbdd 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6e:	2360      	movs	r3, #96	@ 0x60
 8001e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 512;
 8001e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e90:	2200      	movs	r2, #0
 8001e92:	4619      	mov	r1, r3
 8001e94:	4828      	ldr	r0, [pc, #160]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001e96:	f004 f8ed 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ea0:	f7ff fbc2 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ea4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4822      	ldr	r0, [pc, #136]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001eae:	f004 f8e1 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001eb8:	f7ff fbb6 	bl	8001628 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ec0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481b      	ldr	r0, [pc, #108]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001eca:	f004 f8d3 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001ed4:	f7ff fba8 	bl	8001628 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001ed8:	4817      	ldr	r0, [pc, #92]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001eda:	f005 fb29 	bl	8007530 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 35;
 8001eea:	2323      	movs	r3, #35	@ 0x23
 8001eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001f1c:	f005 fa74 	bl	8007408 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8001f26:	f7ff fb7f 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f2a:	4803      	ldr	r0, [pc, #12]	@ (8001f38 <MX_TIM1_Init+0x194>)
 8001f2c:	f000 f8d6 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001f30:	bf00      	nop
 8001f32:	3770      	adds	r7, #112	@ 0x70
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000041c 	.word	0x2000041c
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f60:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <MX_TIM3_Init+0x94>)
 8001f62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001f9c:	f004 ffcf 	bl	8006f3e <HAL_TIMEx_HallSensor_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001fa6:	f7ff fb3f 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001faa:	2350      	movs	r3, #80	@ 0x50
 8001fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <MX_TIM3_Init+0x90>)
 8001fb8:	f005 f990 	bl	80072dc <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001fc2:	f7ff fb31 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000468 	.word	0x20000468
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <HAL_TIM_Base_MspInit+0x38>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10b      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_TIM_Base_MspInit+0x3c>)
 8001fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fee:	4a09      	ldr	r2, [pc, #36]	@ (8002014 <HAL_TIM_Base_MspInit+0x3c>)
 8001ff0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <HAL_TIM_Base_MspInit+0x3c>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d145      	bne.n	80020c6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6593      	str	r3, [r2, #88]	@ 0x58
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205e:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	4a19      	ldr	r2, [pc, #100]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002082:	2350      	movs	r3, #80	@ 0x50
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002092:	2302      	movs	r3, #2
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a0:	f002 f928 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020b6:	2302      	movs	r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80020c2:	f002 f917 	bl	80042f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	@ 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40021000 	.word	0x40021000
 80020d8:	48000800 	.word	0x48000800

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <HAL_TIM_MspPostInit+0xc4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d14b      	bne.n	8002196 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a28      	ldr	r2, [pc, #160]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <HAL_TIM_MspPostInit+0xc8>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800212e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002140:	2306      	movs	r3, #6
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4817      	ldr	r0, [pc, #92]	@ (80021a8 <HAL_TIM_MspPostInit+0xcc>)
 800214c:	f002 f8d2 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002162:	2304      	movs	r3, #4
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	480e      	ldr	r0, [pc, #56]	@ (80021a8 <HAL_TIM_MspPostInit+0xcc>)
 800216e:	f002 f8c1 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002172:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002184:	2306      	movs	r3, #6
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002192:	f002 f8af 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	@ 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	48000400 	.word	0x48000400

080021ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b22      	ldr	r3, [pc, #136]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021b2:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <MX_USART2_UART_Init+0x94>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f4:	4811      	ldr	r0, [pc, #68]	@ (800223c <MX_USART2_UART_Init+0x90>)
 80021f6:	f005 fa19 	bl	800762c <HAL_UART_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002200:	f7ff fa12 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002204:	2100      	movs	r1, #0
 8002206:	480d      	ldr	r0, [pc, #52]	@ (800223c <MX_USART2_UART_Init+0x90>)
 8002208:	f007 fa93 	bl	8009732 <HAL_UARTEx_SetTxFifoThreshold>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002212:	f7ff fa09 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002216:	2100      	movs	r1, #0
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <MX_USART2_UART_Init+0x90>)
 800221a:	f007 fac8 	bl	80097ae <HAL_UARTEx_SetRxFifoThreshold>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002224:	f7ff fa00 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_USART2_UART_Init+0x90>)
 800222a:	f007 fa49 	bl	80096c0 <HAL_UARTEx_DisableFifoMode>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002234:	f7ff f9f8 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200004b4 	.word	0x200004b4
 8002240:	40004400 	.word	0x40004400

08002244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b09e      	sub	sp, #120	@ 0x78
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	2254      	movs	r2, #84	@ 0x54
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f008 fa3b 	bl	800a6e0 <memset>
  if(uartHandle->Instance==USART2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <HAL_UART_MspInit+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13e      	bne.n	80022f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002274:	2302      	movs	r3, #2
 8002276:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f809 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800228c:	f7ff f9cc 	bl	8001628 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	4a1a      	ldr	r2, [pc, #104]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 8002296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229a:	6593      	str	r3, [r2, #88]	@ 0x58
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_UART_MspInit+0xbc>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022c0:	230c      	movs	r3, #12
 80022c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d0:	2307      	movs	r3, #7
 80022d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022d8:	4619      	mov	r1, r3
 80022da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022de:	f002 f809 	bl	80042f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2026      	movs	r0, #38	@ 0x26
 80022e8:	f001 fcaa 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ec:	2026      	movs	r0, #38	@ 0x26
 80022ee:	f001 fcc1 	bl	8003c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	3778      	adds	r7, #120	@ 0x78
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000

08002304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002304:	480d      	ldr	r0, [pc, #52]	@ (800233c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002306:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002308:	f7ff fd3a 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <LoopForever+0x6>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <LoopForever+0xe>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	@ (8002350 <LoopForever+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002332:	f008 fa3f 	bl	800a7b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002336:	f7ff f8bb 	bl	80014b0 <main>

0800233a <LoopForever>:

LoopForever:
    b LoopForever
 800233a:	e7fe      	b.n	800233a <LoopForever>
  ldr   r0, =_estack
 800233c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002348:	0800ccd0 	.word	0x0800ccd0
  ldr r2, =_sbss
 800234c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002350:	20000698 	.word	0x20000698

08002354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC1_2_IRQHandler>

08002356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f001 fc62 	bl	8003c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002366:	200f      	movs	r0, #15
 8002368:	f7ff fb82 	bl	8001a70 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	e001      	b.n	800237c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002378:	f7ff fb56 	bl	8001a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800237c:	79fb      	ldrb	r3, [r7, #7]

}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_IncTick+0x1c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x20>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4413      	add	r3, r2
 8002396:	4a03      	ldr	r2, [pc, #12]	@ (80023a4 <HAL_IncTick+0x1c>)
 8002398:	6013      	str	r3, [r2, #0]
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	20000548 	.word	0x20000548
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000548 	.word	0x20000548

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d004      	beq.n	80023e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_Delay+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e8:	bf00      	nop
 80023ea:	f7ff ffdf 	bl	80023ac <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d8f7      	bhi.n	80023ea <HAL_Delay+0x26>
  {
  }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000008 	.word	0x20000008

08002408 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3360      	adds	r3, #96	@ 0x60
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <LL_ADC_SetOffset+0x44>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	4313      	orrs	r3, r2
 80024a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	03fff000 	.word	0x03fff000

080024b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3360      	adds	r3, #96	@ 0x60
 80024c6:	461a      	mov	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3360      	adds	r3, #96	@ 0x60
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800251a:	b480      	push	{r7}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3360      	adds	r3, #96	@ 0x60
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3360      	adds	r3, #96	@ 0x60
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3330      	adds	r3, #48	@ 0x30
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	4413      	add	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	211f      	movs	r1, #31
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	401a      	ands	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 011f 	and.w	r1, r3, #31
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3314      	adds	r3, #20
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	0e5b      	lsrs	r3, r3, #25
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0d1b      	lsrs	r3, r3, #20
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2107      	movs	r1, #7
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0d1b      	lsrs	r3, r3, #20
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0318 	and.w	r3, r3, #24
 80026a2:	4908      	ldr	r1, [pc, #32]	@ (80026c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a4:	40d9      	lsrs	r1, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	400b      	ands	r3, r1
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	0007ffff 	.word	0x0007ffff

080026c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 031f 	and.w	r3, r3, #31
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6093      	str	r3, [r2, #8]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002744:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <LL_ADC_IsEnabled+0x18>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <LL_ADC_IsEnabled+0x1a>
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b04      	cmp	r3, #4
 8002808:	d101      	bne.n	800280e <LL_ADC_REG_IsConversionOngoing+0x18>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d101      	bne.n	8002834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1a9      	b.n	8002bb2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fe fc2b 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff3f 	bl	8002708 <LL_ADC_IsDeepPowerDownEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff25 	bl	80026e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff5a 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff3e 	bl	8002730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b28 <HAL_ADC_Init+0x2e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	4a9c      	ldr	r2, [pc, #624]	@ (8002b2c <HAL_ADC_Init+0x2e8>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	3301      	adds	r3, #1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff3c 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff75 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 800290c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8142 	bne.w	8002ba0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 813e 	bne.w	8002ba0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800292c:	f043 0202 	orr.w	r2, r3, #2
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff35 	bl	80027a8 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d141      	bne.n	80029c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800294c:	d004      	beq.n	8002958 <HAL_ADC_Init+0x114>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a77      	ldr	r2, [pc, #476]	@ (8002b30 <HAL_ADC_Init+0x2ec>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10f      	bne.n	8002978 <HAL_ADC_Init+0x134>
 8002958:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800295c:	f7ff ff24 	bl	80027a8 <LL_ADC_IsEnabled>
 8002960:	4604      	mov	r4, r0
 8002962:	4873      	ldr	r0, [pc, #460]	@ (8002b30 <HAL_ADC_Init+0x2ec>)
 8002964:	f7ff ff20 	bl	80027a8 <LL_ADC_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	4323      	orrs	r3, r4
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_ADC_Init+0x15a>
 8002978:	486e      	ldr	r0, [pc, #440]	@ (8002b34 <HAL_ADC_Init+0x2f0>)
 800297a:	f7ff ff15 	bl	80027a8 <LL_ADC_IsEnabled>
 800297e:	4604      	mov	r4, r0
 8002980:	486d      	ldr	r0, [pc, #436]	@ (8002b38 <HAL_ADC_Init+0x2f4>)
 8002982:	f7ff ff11 	bl	80027a8 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	431c      	orrs	r4, r3
 800298a:	486c      	ldr	r0, [pc, #432]	@ (8002b3c <HAL_ADC_Init+0x2f8>)
 800298c:	f7ff ff0c 	bl	80027a8 <LL_ADC_IsEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	4323      	orrs	r3, r4
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d012      	beq.n	80029c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029aa:	d004      	beq.n	80029b6 <HAL_ADC_Init+0x172>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002b30 <HAL_ADC_Init+0x2ec>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Init+0x176>
 80029b6:	4a62      	ldr	r2, [pc, #392]	@ (8002b40 <HAL_ADC_Init+0x2fc>)
 80029b8:	e000      	b.n	80029bc <HAL_ADC_Init+0x178>
 80029ba:	4a62      	ldr	r2, [pc, #392]	@ (8002b44 <HAL_ADC_Init+0x300>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7ff fd20 	bl	8002408 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7f5b      	ldrb	r3, [r3, #29]
 80029cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	045b      	lsls	r3, r3, #17
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b48      	ldr	r3, [pc, #288]	@ (8002b48 <HAL_ADC_Init+0x304>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fee4 	bl	800281c <LL_ADC_INJ_IsConversionOngoing>
 8002a54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d17f      	bne.n	8002b5c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d17c      	bne.n	8002b5c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a7e:	f023 0302 	bic.w	r3, r3, #2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d017      	beq.n	8002ac4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002aa2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002aac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6911      	ldr	r1, [r2, #16]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ac2:	e013      	b.n	8002aec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ad2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d12a      	bne.n	8002b4c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	e019      	b.n	8002b5c <HAL_ADC_Init+0x318>
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	053e2d63 	.word	0x053e2d63
 8002b30:	50000100 	.word	0x50000100
 8002b34:	50000400 	.word	0x50000400
 8002b38:	50000500 	.word	0x50000500
 8002b3c:	50000600 	.word	0x50000600
 8002b40:	50000300 	.word	0x50000300
 8002b44:	50000700 	.word	0x50000700
 8002b48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10c      	bne.n	8002b7e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f023 010f 	bic.w	r1, r3, #15
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b7c:	e007      	b.n	8002b8e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 020f 	bic.w	r2, r2, #15
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b9e:	e007      	b.n	8002bb0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	@ 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop

08002bbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd0:	d004      	beq.n	8002bdc <HAL_ADC_Start_DMA+0x20>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d40 <HAL_ADC_Start_DMA+0x184>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x24>
 8002bdc:	4b59      	ldr	r3, [pc, #356]	@ (8002d44 <HAL_ADC_Start_DMA+0x188>)
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_Start_DMA+0x26>
 8002be0:	4b59      	ldr	r3, [pc, #356]	@ (8002d48 <HAL_ADC_Start_DMA+0x18c>)
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd70 	bl	80026c8 <LL_ADC_GetMultimode>
 8002be8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fe01 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 809b 	bne.w	8002d32 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x4e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e096      	b.n	8002d38 <HAL_ADC_Start_DMA+0x17c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4d      	ldr	r2, [pc, #308]	@ (8002d4c <HAL_ADC_Start_DMA+0x190>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d008      	beq.n	8002c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d002      	beq.n	8002c2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b09      	cmp	r3, #9
 8002c2c:	d17a      	bne.n	8002d24 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fcf6 	bl	8003620 <ADC_Enable>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d16d      	bne.n	8002d1a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	@ (8002d40 <HAL_ADC_Start_DMA+0x184>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_ADC_Start_DMA+0xb4>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3b      	ldr	r2, [pc, #236]	@ (8002d50 <HAL_ADC_Start_DMA+0x194>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d002      	beq.n	8002c6c <HAL_ADC_Start_DMA+0xb0>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e003      	b.n	8002c74 <HAL_ADC_Start_DMA+0xb8>
 8002c6c:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <HAL_ADC_Start_DMA+0x198>)
 8002c6e:	e001      	b.n	8002c74 <HAL_ADC_Start_DMA+0xb8>
 8002c70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9e:	f023 0206 	bic.w	r2, r3, #6
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ca6:	e002      	b.n	8002cae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	4a29      	ldr	r2, [pc, #164]	@ (8002d58 <HAL_ADC_Start_DMA+0x19c>)
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_ADC_Start_DMA+0x1a0>)
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_ADC_Start_DMA+0x1a4>)
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	221c      	movs	r2, #28
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0210 	orr.w	r2, r2, #16
 8002ce4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3340      	adds	r3, #64	@ 0x40
 8002d00:	4619      	mov	r1, r3
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f001 f86b 	bl	8003de0 <HAL_DMA_Start_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd5b 	bl	80027ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d18:	e00d      	b.n	8002d36 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002d22:	e008      	b.n	8002d36 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002d30:	e001      	b.n	8002d36 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	50000100 	.word	0x50000100
 8002d44:	50000300 	.word	0x50000300
 8002d48:	50000700 	.word	0x50000700
 8002d4c:	50000600 	.word	0x50000600
 8002d50:	50000500 	.word	0x50000500
 8002d54:	50000400 	.word	0x50000400
 8002d58:	0800374d 	.word	0x0800374d
 8002d5c:	08003825 	.word	0x08003825
 8002d60:	08003841 	.word	0x08003841

08002d64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b0b6      	sub	sp, #216	@ 0xd8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x24>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f000 bc13 	b.w	80035ea <HAL_ADC_ConfigChannel+0x84a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fd10 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 83f3 	bne.w	80035c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f7ff fbf1 	bl	80025d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fcfe 	bl	80027f6 <LL_ADC_REG_IsConversionOngoing>
 8002dfa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fd0a 	bl	800281c <LL_ADC_INJ_IsConversionOngoing>
 8002e08:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 81d9 	bne.w	80031c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 81d4 	bne.w	80031c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e28:	d10f      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7ff fbf8 	bl	800262a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fb9f 	bl	8002586 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e48:	e00e      	b.n	8002e68 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7ff fbe7 	bl	800262a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fb8f 	bl	8002586 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	08db      	lsrs	r3, r3, #3
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d022      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6919      	ldr	r1, [r3, #16]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e9a:	f7ff fae9 	bl	8002470 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f7ff fb35 	bl	800251a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x126>
 8002ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x128>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f7ff fb41 	bl	8002550 <LL_ADC_SetOffsetSaturation>
 8002ece:	e17b      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff faee 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x15c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fae3 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	f003 021f 	and.w	r2, r3, #31
 8002efa:	e01e      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x19a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fad8 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e004      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1b2>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	0e9b      	lsrs	r3, r3, #26
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	e018      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x1e4>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e004      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d106      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff faa7 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fa8b 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x222>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fa80 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	e01e      	b.n	8003000 <HAL_ADC_ConfigChannel+0x260>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fa75 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e004      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x278>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	e018      	b.n	800304a <HAL_ADC_ConfigChannel+0x2aa>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800302c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003034:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fa44 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2102      	movs	r1, #2
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fa28 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x2e8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2102      	movs	r1, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fa1d 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	e01e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x326>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fa12 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80030a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80030ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e004      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80030ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_ADC_ConfigChannel+0x33e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	e016      	b.n	800310c <HAL_ADC_ConfigChannel+0x36c>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e004      	b.n	800310c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003102:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800310c:	429a      	cmp	r2, r3
 800310e:	d106      	bne.n	800311e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2200      	movs	r2, #0
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f9e3 	bl	80024e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2103      	movs	r1, #3
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff f9c7 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <HAL_ADC_ConfigChannel+0x3aa>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2103      	movs	r1, #3
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f9bc 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	0e9b      	lsrs	r3, r3, #26
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	e017      	b.n	800317a <HAL_ADC_ConfigChannel+0x3da>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2103      	movs	r1, #3
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f9b1 	bl	80024b8 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003164:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e003      	b.n	8003178 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x3f2>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	e011      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x416>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80031a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80031a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e003      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80031ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	2103      	movs	r1, #3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f98e 	bl	80024e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff faeb 	bl	80027a8 <LL_ADC_IsEnabled>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f040 813d 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f7ff fa4a 	bl	8002680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4aa2      	ldr	r2, [pc, #648]	@ (800347c <HAL_ADC_ConfigChannel+0x6dc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f040 812e 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x480>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	0e9b      	lsrs	r3, r3, #26
 800320e:	3301      	adds	r3, #1
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2b09      	cmp	r3, #9
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e019      	b.n	8003254 <HAL_ADC_ConfigChannel+0x4b4>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800322e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003230:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e003      	b.n	8003244 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800323c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2b09      	cmp	r3, #9
 800324c:	bf94      	ite	ls
 800324e:	2301      	movls	r3, #1
 8003250:	2300      	movhi	r3, #0
 8003252:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003254:	2b00      	cmp	r3, #0
 8003256:	d079      	beq.n	800334c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x4d4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	069b      	lsls	r3, r3, #26
 800326e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003272:	e015      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x500>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003284:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	e003      	b.n	8003298 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	069b      	lsls	r3, r3, #26
 800329c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x520>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	3301      	adds	r3, #1
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	e017      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x550>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	ea42 0103 	orr.w	r1, r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x576>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	3301      	adds	r3, #1
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	051b      	lsls	r3, r3, #20
 8003314:	e018      	b.n	8003348 <HAL_ADC_ConfigChannel+0x5a8>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003348:	430b      	orrs	r3, r1
 800334a:	e07e      	b.n	800344a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x5c8>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003366:	e015      	b.n	8003394 <HAL_ADC_ConfigChannel+0x5f4>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e003      	b.n	800338c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x614>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	3301      	adds	r3, #1
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	e017      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x644>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	61fb      	str	r3, [r7, #28]
  return result;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	ea42 0103 	orr.w	r1, r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x670>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	3301      	adds	r3, #1
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	3b1e      	subs	r3, #30
 8003408:	051b      	lsls	r3, r3, #20
 800340a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800340e:	e01b      	b.n	8003448 <HAL_ADC_ConfigChannel+0x6a8>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	613b      	str	r3, [r7, #16]
  return result;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e003      	b.n	8003434 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f003 021f 	and.w	r2, r3, #31
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	3b1e      	subs	r3, #30
 8003442:	051b      	lsls	r3, r3, #20
 8003444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003448:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344e:	4619      	mov	r1, r3
 8003450:	f7ff f8eb 	bl	800262a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_ADC_ConfigChannel+0x6e0>)
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80be 	beq.w	80035de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346a:	d004      	beq.n	8003476 <HAL_ADC_ConfigChannel+0x6d6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_ADC_ConfigChannel+0x6e4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10a      	bne.n	800348c <HAL_ADC_ConfigChannel+0x6ec>
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_ADC_ConfigChannel+0x6e8>)
 8003478:	e009      	b.n	800348e <HAL_ADC_ConfigChannel+0x6ee>
 800347a:	bf00      	nop
 800347c:	407f0000 	.word	0x407f0000
 8003480:	80080000 	.word	0x80080000
 8003484:	50000100 	.word	0x50000100
 8003488:	50000300 	.word	0x50000300
 800348c:	4b59      	ldr	r3, [pc, #356]	@ (80035f4 <HAL_ADC_ConfigChannel+0x854>)
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ffe0 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8003494:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a56      	ldr	r2, [pc, #344]	@ (80035f8 <HAL_ADC_ConfigChannel+0x858>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_ADC_ConfigChannel+0x70c>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a55      	ldr	r2, [pc, #340]	@ (80035fc <HAL_ADC_ConfigChannel+0x85c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d13a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d134      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c0:	d005      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x72e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4e      	ldr	r2, [pc, #312]	@ (8003600 <HAL_ADC_ConfigChannel+0x860>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	f040 8085 	bne.w	80035d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d6:	d004      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x742>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a49      	ldr	r2, [pc, #292]	@ (8003604 <HAL_ADC_ConfigChannel+0x864>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x746>
 80034e2:	4a49      	ldr	r2, [pc, #292]	@ (8003608 <HAL_ADC_ConfigChannel+0x868>)
 80034e4:	e000      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x748>
 80034e6:	4a43      	ldr	r2, [pc, #268]	@ (80035f4 <HAL_ADC_ConfigChannel+0x854>)
 80034e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7fe ff9b 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f8:	4b44      	ldr	r3, [pc, #272]	@ (800360c <HAL_ADC_ConfigChannel+0x86c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	4a44      	ldr	r2, [pc, #272]	@ (8003610 <HAL_ADC_ConfigChannel+0x870>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003512:	e002      	b.n	800351a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b01      	subs	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f9      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003520:	e05a      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3b      	ldr	r2, [pc, #236]	@ (8003614 <HAL_ADC_ConfigChannel+0x874>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d125      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800352c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11f      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a31      	ldr	r2, [pc, #196]	@ (8003604 <HAL_ADC_ConfigChannel+0x864>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d104      	bne.n	800354c <HAL_ADC_ConfigChannel+0x7ac>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a34      	ldr	r2, [pc, #208]	@ (8003618 <HAL_ADC_ConfigChannel+0x878>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d047      	beq.n	80035dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003554:	d004      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x7c0>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <HAL_ADC_ConfigChannel+0x864>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x7c4>
 8003560:	4a29      	ldr	r2, [pc, #164]	@ (8003608 <HAL_ADC_ConfigChannel+0x868>)
 8003562:	e000      	b.n	8003566 <HAL_ADC_ConfigChannel+0x7c6>
 8003564:	4a23      	ldr	r2, [pc, #140]	@ (80035f4 <HAL_ADC_ConfigChannel+0x854>)
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f7fe ff5c 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003576:	e031      	b.n	80035dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	@ (800361c <HAL_ADC_ConfigChannel+0x87c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d12d      	bne.n	80035de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d127      	bne.n	80035de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_ADC_ConfigChannel+0x864>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a0:	d004      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x80c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_ADC_ConfigChannel+0x864>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x810>
 80035ac:	4a16      	ldr	r2, [pc, #88]	@ (8003608 <HAL_ADC_ConfigChannel+0x868>)
 80035ae:	e000      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x812>
 80035b0:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <HAL_ADC_ConfigChannel+0x854>)
 80035b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7fe ff36 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
 80035c2:	e00c      	b.n	80035de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035d6:	e002      	b.n	80035de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	37d8      	adds	r7, #216	@ 0xd8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	50000700 	.word	0x50000700
 80035f8:	c3210000 	.word	0xc3210000
 80035fc:	90c00010 	.word	0x90c00010
 8003600:	50000600 	.word	0x50000600
 8003604:	50000100 	.word	0x50000100
 8003608:	50000300 	.word	0x50000300
 800360c:	20000000 	.word	0x20000000
 8003610:	053e2d63 	.word	0x053e2d63
 8003614:	c7520000 	.word	0xc7520000
 8003618:	50000500 	.word	0x50000500
 800361c:	cb840000 	.word	0xcb840000

08003620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f8b9 	bl	80027a8 <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d176      	bne.n	800372a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <ADC_Enable+0x114>)
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364e:	f043 0210 	orr.w	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e062      	b.n	800372c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f888 	bl	8002780 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003678:	d004      	beq.n	8003684 <ADC_Enable+0x64>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2e      	ldr	r2, [pc, #184]	@ (8003738 <ADC_Enable+0x118>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <ADC_Enable+0x68>
 8003684:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <ADC_Enable+0x11c>)
 8003686:	e000      	b.n	800368a <ADC_Enable+0x6a>
 8003688:	4b2d      	ldr	r3, [pc, #180]	@ (8003740 <ADC_Enable+0x120>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fee2 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8003690:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800369a:	4b2a      	ldr	r3, [pc, #168]	@ (8003744 <ADC_Enable+0x124>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	4a29      	ldr	r2, [pc, #164]	@ (8003748 <ADC_Enable+0x128>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036b4:	e002      	b.n	80036bc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f9      	bne.n	80036b6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036c2:	f7fe fe73 	bl	80023ac <HAL_GetTick>
 80036c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036c8:	e028      	b.n	800371c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f86a 	bl	80027a8 <LL_ADC_IsEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f84e 	bl	8002780 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036e4:	f7fe fe62 	bl	80023ac <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d914      	bls.n	800371c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d00d      	beq.n	800371c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e007      	b.n	800372c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d1cf      	bne.n	80036ca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	8000003f 	.word	0x8000003f
 8003738:	50000100 	.word	0x50000100
 800373c:	50000300 	.word	0x50000300
 8003740:	50000700 	.word	0x50000700
 8003744:	20000000 	.word	0x20000000
 8003748:	053e2d63 	.word	0x053e2d63

0800374c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d14b      	bne.n	80037fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d021      	beq.n	80037c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe ff11 	bl	80025ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d032      	beq.n	80037f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d12b      	bne.n	80037f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11f      	bne.n	80037f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037c2:	e018      	b.n	80037f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d111      	bne.n	80037f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f043 0201 	orr.w	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fab4 	bl	8002d64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037fc:	e00e      	b.n	800381c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fabe 	bl	8002d8c <HAL_ADC_ErrorCallback>
}
 8003810:	e004      	b.n	800381c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff faa0 	bl	8002d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	f043 0204 	orr.w	r2, r3, #4
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff fa90 	bl	8002d8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <LL_ADC_IsEnabled>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <LL_ADC_IsEnabled+0x18>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <LL_ADC_IsEnabled+0x1a>
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_ADC_REG_IsConversionOngoing>:
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d101      	bne.n	80038b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b0a1      	sub	sp, #132	@ 0x84
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0e7      	b.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038e6:	2300      	movs	r3, #0
 80038e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ea:	2300      	movs	r3, #0
 80038ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f6:	d102      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038f8:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	e009      	b.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6e      	ldr	r2, [pc, #440]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d102      	bne.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003908:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	e001      	b.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0be      	b.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffb1 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 8003938:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ffab 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 80a0 	bne.w	8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800394c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 809c 	bne.w	8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800395c:	d004      	beq.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a55      	ldr	r2, [pc, #340]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003968:	4b56      	ldr	r3, [pc, #344]	@ (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800396a:	e000      	b.n	800396e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800396c:	4b56      	ldr	r3, [pc, #344]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800396e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04b      	beq.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800398a:	035b      	lsls	r3, r3, #13
 800398c:	430b      	orrs	r3, r1
 800398e:	431a      	orrs	r2, r3
 8003990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003992:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399c:	d004      	beq.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a45      	ldr	r2, [pc, #276]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10f      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80039a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039ac:	f7ff ff62 	bl	8003874 <LL_ADC_IsEnabled>
 80039b0:	4604      	mov	r4, r0
 80039b2:	4841      	ldr	r0, [pc, #260]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b4:	f7ff ff5e 	bl	8003874 <LL_ADC_IsEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4323      	orrs	r3, r4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e012      	b.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80039c8:	483c      	ldr	r0, [pc, #240]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039ca:	f7ff ff53 	bl	8003874 <LL_ADC_IsEnabled>
 80039ce:	4604      	mov	r4, r0
 80039d0:	483b      	ldr	r0, [pc, #236]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039d2:	f7ff ff4f 	bl	8003874 <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	431c      	orrs	r4, r3
 80039da:	483c      	ldr	r0, [pc, #240]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039dc:	f7ff ff4a 	bl	8003874 <LL_ADC_IsEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4323      	orrs	r3, r4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d056      	beq.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039fa:	f023 030f 	bic.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	6811      	ldr	r1, [r2, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a0c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0e:	e047      	b.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a24:	d004      	beq.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10f      	bne.n	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a34:	f7ff ff1e 	bl	8003874 <LL_ADC_IsEnabled>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	481f      	ldr	r0, [pc, #124]	@ (8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a3c:	f7ff ff1a 	bl	8003874 <LL_ADC_IsEnabled>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4323      	orrs	r3, r4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a50:	481a      	ldr	r0, [pc, #104]	@ (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a52:	f7ff ff0f 	bl	8003874 <LL_ADC_IsEnabled>
 8003a56:	4604      	mov	r4, r0
 8003a58:	4819      	ldr	r0, [pc, #100]	@ (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a5a:	f7ff ff0b 	bl	8003874 <LL_ADC_IsEnabled>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	431c      	orrs	r4, r3
 8003a62:	481a      	ldr	r0, [pc, #104]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a64:	f7ff ff06 	bl	8003874 <LL_ADC_IsEnabled>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4323      	orrs	r3, r4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a82:	f023 030f 	bic.w	r3, r3, #15
 8003a86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8a:	e009      	b.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aaa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3784      	adds	r7, #132	@ 0x84
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	50000100 	.word	0x50000100
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000500 	.word	0x50000500
 8003ac4:	50000300 	.word	0x50000300
 8003ac8:	50000700 	.word	0x50000700
 8003acc:	50000600 	.word	0x50000600

08003ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	@ (8003b30 <__NVIC_GetPriorityGrouping+0x18>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0307 	and.w	r3, r3, #7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0b      	blt.n	8003b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <__NVIC_EnableIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db0a      	blt.n	8003b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	490c      	ldr	r1, [pc, #48]	@ (8003bbc <__NVIC_SetPriority+0x4c>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	440b      	add	r3, r1
 8003b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b98:	e00a      	b.n	8003bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4908      	ldr	r1, [pc, #32]	@ (8003bc0 <__NVIC_SetPriority+0x50>)
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	761a      	strb	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	@ 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf28      	it	cs
 8003be2:	2304      	movcs	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d902      	bls.n	8003bf4 <NVIC_EncodePriority+0x30>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3b03      	subs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <NVIC_EncodePriority+0x32>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	4313      	orrs	r3, r2
         );
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	@ 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ff4c 	bl	8003ad0 <__NVIC_SetPriorityGrouping>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4e:	f7ff ff63 	bl	8003b18 <__NVIC_GetPriorityGrouping>
 8003c52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f7ff ffb3 	bl	8003bc4 <NVIC_EncodePriority>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff82 	bl	8003b70 <__NVIC_SetPriority>
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff56 	bl	8003b34 <__NVIC_EnableIRQ>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e08d      	b.n	8003dbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_DMA_Init+0x138>)
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d80f      	bhi.n	8003cce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b45      	ldr	r3, [pc, #276]	@ (8003dcc <HAL_DMA_Init+0x13c>)
 8003cb6:	4413      	add	r3, r2
 8003cb8:	4a45      	ldr	r2, [pc, #276]	@ (8003dd0 <HAL_DMA_Init+0x140>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	009a      	lsls	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <HAL_DMA_Init+0x144>)
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ccc:	e00e      	b.n	8003cec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_DMA_Init+0x148>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8003dd0 <HAL_DMA_Init+0x140>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	009a      	lsls	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ddc <HAL_DMA_Init+0x14c>)
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa76 	bl	8004230 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d4c:	d102      	bne.n	8003d54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_DMA_Init+0x104>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d80c      	bhi.n	8003d94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa96 	bl	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	e008      	b.n	8003da6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020407 	.word	0x40020407
 8003dcc:	bffdfff8 	.word	0xbffdfff8
 8003dd0:	cccccccd 	.word	0xcccccccd
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	bffdfbf8 	.word	0xbffdfbf8
 8003ddc:	40020400 	.word	0x40020400

08003de0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_DMA_Start_IT+0x20>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e066      	b.n	8003ece <HAL_DMA_Start_IT+0xee>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d155      	bne.n	8003ec0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f9bb 	bl	80041b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 020e 	orr.w	r2, r2, #14
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e00f      	b.n	8003e78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 020a 	orr.w	r2, r2, #10
 8003e76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e005      	b.n	8003ecc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d005      	beq.n	8003efa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e037      	b.n	8003f6a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020e 	bic.w	r2, r2, #14
 8003f08:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f18:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f003 021f 	and.w	r2, r3, #31
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f46:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f68:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d00d      	beq.n	8003fbc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
 8003fba:	e047      	b.n	800404c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 020e 	bic.w	r2, r2, #14
 8003fca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004008:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004020:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800402a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
    }
  }
  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2204      	movs	r2, #4
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d026      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x7a>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d021      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f003 021f 	and.w	r2, r3, #31
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	2104      	movs	r1, #4
 80040b8:	fa01 f202 	lsl.w	r2, r1, r2
 80040bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d071      	beq.n	80041aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040ce:	e06c      	b.n	80041aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2202      	movs	r2, #2
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02e      	beq.n	8004142 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d029      	beq.n	8004142 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020a 	bic.w	r2, r2, #10
 800410a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	f003 021f 	and.w	r2, r3, #31
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	2102      	movs	r1, #2
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d038      	beq.n	80041aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004140:	e033      	b.n	80041aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2208      	movs	r2, #8
 800414c:	409a      	lsls	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02a      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d025      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020e 	bic.w	r2, r2, #14
 800416e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f202 	lsl.w	r2, r1, r2
 8004182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
}
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f003 021f 	and.w	r2, r3, #31
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d108      	bne.n	8004214 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004212:	e007      	b.n	8004224 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d802      	bhi.n	800424a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004244:	4b15      	ldr	r3, [pc, #84]	@ (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e001      	b.n	800424e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800424c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3b08      	subs	r3, #8
 800425a:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800427a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2201      	movs	r2, #1
 8004284:	409a      	lsls	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40020407 	.word	0x40020407
 800429c:	40020800 	.word	0x40020800
 80042a0:	40020820 	.word	0x40020820
 80042a4:	cccccccd 	.word	0xcccccccd
 80042a8:	40020880 	.word	0x40020880

080042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a08      	ldr	r2, [pc, #32]	@ (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	1000823f 	.word	0x1000823f
 80042f0:	40020940 	.word	0x40020940

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004302:	e15a      	b.n	80045ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	4013      	ands	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 814c 	beq.w	80045b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d005      	beq.n	8004334 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004330:	2b02      	cmp	r3, #2
 8004332:	d130      	bne.n	8004396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800436a:	2201      	movs	r2, #1
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 0201 	and.w	r2, r3, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d017      	beq.n	80043d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	2203      	movs	r2, #3
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d123      	bne.n	8004426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	08da      	lsrs	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3208      	adds	r2, #8
 80043e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	08da      	lsrs	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3208      	adds	r2, #8
 8004420:	6939      	ldr	r1, [r7, #16]
 8004422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	2203      	movs	r2, #3
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a6 	beq.w	80045b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004468:	4b5b      	ldr	r3, [pc, #364]	@ (80045d8 <HAL_GPIO_Init+0x2e4>)
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	4a5a      	ldr	r2, [pc, #360]	@ (80045d8 <HAL_GPIO_Init+0x2e4>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6613      	str	r3, [r2, #96]	@ 0x60
 8004474:	4b58      	ldr	r3, [pc, #352]	@ (80045d8 <HAL_GPIO_Init+0x2e4>)
 8004476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004480:	4a56      	ldr	r2, [pc, #344]	@ (80045dc <HAL_GPIO_Init+0x2e8>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220f      	movs	r2, #15
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044aa:	d01f      	beq.n	80044ec <HAL_GPIO_Init+0x1f8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a4c      	ldr	r2, [pc, #304]	@ (80045e0 <HAL_GPIO_Init+0x2ec>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d019      	beq.n	80044e8 <HAL_GPIO_Init+0x1f4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a4b      	ldr	r2, [pc, #300]	@ (80045e4 <HAL_GPIO_Init+0x2f0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_GPIO_Init+0x1f0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a4a      	ldr	r2, [pc, #296]	@ (80045e8 <HAL_GPIO_Init+0x2f4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00d      	beq.n	80044e0 <HAL_GPIO_Init+0x1ec>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a49      	ldr	r2, [pc, #292]	@ (80045ec <HAL_GPIO_Init+0x2f8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <HAL_GPIO_Init+0x1e8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a48      	ldr	r2, [pc, #288]	@ (80045f0 <HAL_GPIO_Init+0x2fc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044d4:	2305      	movs	r3, #5
 80044d6:	e00a      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044d8:	2306      	movs	r3, #6
 80044da:	e008      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044dc:	2304      	movs	r3, #4
 80044de:	e006      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044e0:	2303      	movs	r3, #3
 80044e2:	e004      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e002      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_GPIO_Init+0x1fa>
 80044ec:	2300      	movs	r3, #0
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	f002 0203 	and.w	r2, r2, #3
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	4093      	lsls	r3, r2
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044fe:	4937      	ldr	r1, [pc, #220]	@ (80045dc <HAL_GPIO_Init+0x2e8>)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	3302      	adds	r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004530:	4a30      	ldr	r2, [pc, #192]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004536:	4b2f      	ldr	r3, [pc, #188]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800455a:	4a26      	ldr	r2, [pc, #152]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004560:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	43db      	mvns	r3, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004584:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800458a:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43db      	mvns	r3, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ae:	4a11      	ldr	r2, [pc, #68]	@ (80045f4 <HAL_GPIO_Init+0x300>)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3301      	adds	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f ae9d 	bne.w	8004304 <HAL_GPIO_Init+0x10>
  }
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40010000 	.word	0x40010000
 80045e0:	48000400 	.word	0x48000400
 80045e4:	48000800 	.word	0x48000800
 80045e8:	48000c00 	.word	0x48000c00
 80045ec:	48001000 	.word	0x48001000
 80045f0:	48001400 	.word	0x48001400
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
 8004604:	4613      	mov	r3, r2
 8004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004614:	e002      	b.n	800461c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004616:	887a      	ldrh	r2, [r7, #2]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004632:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800463e:	4a05      	ldr	r2, [pc, #20]	@ (8004654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f806 	bl	8004658 <HAL_GPIO_EXTI_Callback>
  }
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40010400 	.word	0x40010400

08004658 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d141      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800467e:	4b4b      	ldr	r3, [pc, #300]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468a:	d131      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800468c:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004692:	4a46      	ldr	r2, [pc, #280]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004698:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800469c:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046a4:	4a41      	ldr	r2, [pc, #260]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046ac:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2232      	movs	r2, #50	@ 0x32
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	4a3f      	ldr	r2, [pc, #252]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	0c9b      	lsrs	r3, r3, #18
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c2:	e002      	b.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ca:	4b38      	ldr	r3, [pc, #224]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d6:	d102      	bne.n	80046de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f2      	bne.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ea:	d158      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e057      	b.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f0:	4b2e      	ldr	r3, [pc, #184]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f6:	4a2d      	ldr	r2, [pc, #180]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004700:	e04d      	b.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004708:	d141      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470a:	4b28      	ldr	r3, [pc, #160]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004716:	d131      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004718:	4b24      	ldr	r3, [pc, #144]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471e:	4a23      	ldr	r2, [pc, #140]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004724:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004728:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004730:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2232      	movs	r2, #50	@ 0x32
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	0c9b      	lsrs	r3, r3, #18
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	e002      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004762:	d102      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f2      	bne.n	8004750 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004776:	d112      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e011      	b.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004782:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004788:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800478c:	e007      	b.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800478e:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004796:	4a05      	ldr	r2, [pc, #20]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40007000 	.word	0x40007000
 80047b0:	20000000 	.word	0x20000000
 80047b4:	431bde83 	.word	0x431bde83

080047b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a04      	ldr	r2, [pc, #16]	@ (80047d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047c6:	6093      	str	r3, [r2, #8]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40007000 	.word	0x40007000

080047d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e2fe      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d075      	beq.n	80048e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f6:	4b97      	ldr	r3, [pc, #604]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004800:	4b94      	ldr	r3, [pc, #592]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d102      	bne.n	8004816 <HAL_RCC_OscConfig+0x3e>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d002      	beq.n	800481c <HAL_RCC_OscConfig+0x44>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b8d      	ldr	r3, [pc, #564]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x108>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d157      	bne.n	80048e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e2d9      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x74>
 800483e:	4b85      	ldr	r3, [pc, #532]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a84      	ldr	r2, [pc, #528]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x98>
 8004856:	4b7f      	ldr	r3, [pc, #508]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b7c      	ldr	r3, [pc, #496]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7b      	ldr	r2, [pc, #492]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 8004870:	4b78      	ldr	r3, [pc, #480]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a77      	ldr	r2, [pc, #476]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b75      	ldr	r3, [pc, #468]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a74      	ldr	r2, [pc, #464]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fd8c 	bl	80023ac <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd fd88 	bl	80023ac <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	@ 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e29e      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xc0>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd fd78 	bl	80023ac <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fd74 	bl	80023ac <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	@ 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e28a      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d2:	4b60      	ldr	r3, [pc, #384]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0xe8>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d075      	beq.n	80049da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4b56      	ldr	r3, [pc, #344]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d102      	bne.n	800490e <HAL_RCC_OscConfig+0x136>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d002      	beq.n	8004914 <HAL_RCC_OscConfig+0x13c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d11f      	bne.n	8004954 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	4b4f      	ldr	r3, [pc, #316]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_OscConfig+0x154>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e25d      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b49      	ldr	r3, [pc, #292]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	4946      	ldr	r1, [pc, #280]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004940:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <HAL_RCC_OscConfig+0x280>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7fd f893 	bl	8001a70 <HAL_InitTick>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d043      	beq.n	80049d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e249      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d023      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800495c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3c      	ldr	r2, [pc, #240]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fd20 	bl	80023ac <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fd fd1c 	bl	80023ac <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e232      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004982:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	492d      	ldr	r1, [pc, #180]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
 80049a2:	e01a      	b.n	80049da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd fcfc 	bl	80023ac <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b8:	f7fd fcf8 	bl	80023ac <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e20e      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ca:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x1e0>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d041      	beq.n	8004a6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ee:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f4:	4a17      	ldr	r2, [pc, #92]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd fcd5 	bl	80023ac <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fd fcd1 	bl	80023ac <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e1e7      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a18:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ef      	beq.n	8004a06 <HAL_RCC_OscConfig+0x22e>
 8004a26:	e020      	b.n	8004a6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2e:	4a09      	ldr	r2, [pc, #36]	@ (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd fcb8 	bl	80023ac <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a3e:	e00d      	b.n	8004a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fd fcb4 	bl	80023ac <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d906      	bls.n	8004a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1ca      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ea      	bne.n	8004a40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a6 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7c:	4b84      	ldr	r3, [pc, #528]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2b4>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x2b6>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	4b7f      	ldr	r3, [pc, #508]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a96:	4a7e      	ldr	r2, [pc, #504]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aae:	4b79      	ldr	r3, [pc, #484]	@ (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d118      	bne.n	8004aec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aba:	4b76      	ldr	r3, [pc, #472]	@ (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	@ (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fc71 	bl	80023ac <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ace:	f7fd fc6d 	bl	80023ac <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e183      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d108      	bne.n	8004b06 <HAL_RCC_OscConfig+0x32e>
 8004af4:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afa:	4a65      	ldr	r2, [pc, #404]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b04:	e024      	b.n	8004b50 <HAL_RCC_OscConfig+0x378>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d110      	bne.n	8004b30 <HAL_RCC_OscConfig+0x358>
 8004b0e:	4b60      	ldr	r3, [pc, #384]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	4a5e      	ldr	r2, [pc, #376]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	4a5a      	ldr	r2, [pc, #360]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b2e:	e00f      	b.n	8004b50 <HAL_RCC_OscConfig+0x378>
 8004b30:	4b57      	ldr	r3, [pc, #348]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	4a56      	ldr	r2, [pc, #344]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b40:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	4a52      	ldr	r2, [pc, #328]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d016      	beq.n	8004b86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fc28 	bl	80023ac <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd fc24 	bl	80023ac <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e138      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b76:	4b46      	ldr	r3, [pc, #280]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ed      	beq.n	8004b60 <HAL_RCC_OscConfig+0x388>
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fd fc11 	bl	80023ac <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd fc0d 	bl	80023ac <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e121      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1ed      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb8:	4b35      	ldr	r3, [pc, #212]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	4a34      	ldr	r2, [pc, #208]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d03c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bde:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd fbe0 	bl	80023ac <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf0:	f7fd fbdc 	bl	80023ac <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0f2      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c02:	4b23      	ldr	r3, [pc, #140]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x418>
 8004c10:	e01b      	b.n	8004c4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c12:	4b1f      	ldr	r3, [pc, #124]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c18:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fd fbc3 	bl	80023ac <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c2a:	f7fd fbbf 	bl	80023ac <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0d5      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c3c:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ef      	bne.n	8004c2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80c9 	beq.w	8004de6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f000 8083 	beq.w	8004d68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d15e      	bne.n	8004d28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd fb99 	bl	80023ac <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	e00c      	b.n	8004c98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fd fb95 	bl	80023ac <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d905      	bls.n	8004c98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0ab      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	4b55      	ldr	r3, [pc, #340]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ec      	bne.n	8004c7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca4:	4b52      	ldr	r3, [pc, #328]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b52      	ldr	r3, [pc, #328]	@ (8004df4 <HAL_RCC_OscConfig+0x61c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a11      	ldr	r1, [r2, #32]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004cbe:	0212      	lsls	r2, r2, #8
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0552      	lsls	r2, r2, #21
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cd2:	0852      	lsrs	r2, r2, #1
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0652      	lsls	r2, r2, #25
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cde:	06d2      	lsls	r2, r2, #27
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	4943      	ldr	r1, [pc, #268]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce8:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a40      	ldr	r2, [pc, #256]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a3d      	ldr	r2, [pc, #244]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fb54 	bl	80023ac <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fb50 	bl	80023ac <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e066      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1a:	4b35      	ldr	r3, [pc, #212]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x530>
 8004d26:	e05e      	b.n	8004de6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b31      	ldr	r3, [pc, #196]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fd fb3a 	bl	80023ac <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fd fb36 	bl	80023ac <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e04c      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4e:	4b28      	ldr	r3, [pc, #160]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d5a:	4b25      	ldr	r3, [pc, #148]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4924      	ldr	r1, [pc, #144]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d60:	4b25      	ldr	r3, [pc, #148]	@ (8004df8 <HAL_RCC_OscConfig+0x620>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	60cb      	str	r3, [r1, #12]
 8004d66:	e03e      	b.n	8004de6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e039      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d74:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <HAL_RCC_OscConfig+0x618>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0203 	and.w	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d12c      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	3b01      	subs	r3, #1
 8004d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d123      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d11b      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d113      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	019f800c 	.word	0x019f800c
 8004df8:	feeefffc 	.word	0xfeeefffc

08004dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e11e      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b91      	ldr	r3, [pc, #580]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b8e      	ldr	r3, [pc, #568]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 020f 	bic.w	r2, r3, #15
 8004e2a:	498c      	ldr	r1, [pc, #560]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b8a      	ldr	r3, [pc, #552]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e106      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d073      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d129      	bne.n	8004eac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e58:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0f4      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e68:	f000 f9d0 	bl	800520c <RCC_GetSysClockFreqFromPLLSource>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4a7c      	ldr	r2, [pc, #496]	@ (8005064 <HAL_RCC_ClockConfig+0x268>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d93f      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e76:	4b7a      	ldr	r3, [pc, #488]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d033      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d12f      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e96:	4b72      	ldr	r3, [pc, #456]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e9e:	4a70      	ldr	r2, [pc, #448]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e024      	b.n	8004ef6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0c6      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec4:	4b66      	ldr	r3, [pc, #408]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0be      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ed4:	f000 f8ce 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4a61      	ldr	r2, [pc, #388]	@ (8005064 <HAL_RCC_ClockConfig+0x268>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d909      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eea:	4a5d      	ldr	r2, [pc, #372]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4957      	ldr	r1, [pc, #348]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f08:	f7fd fa50 	bl	80023ac <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fd fa4c 	bl	80023ac <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e095      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b4e      	ldr	r3, [pc, #312]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d023      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b43      	ldr	r3, [pc, #268]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4a42      	ldr	r2, [pc, #264]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f68:	4b3d      	ldr	r3, [pc, #244]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f70:	4a3b      	ldr	r2, [pc, #236]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b39      	ldr	r3, [pc, #228]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4936      	ldr	r1, [pc, #216]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b80      	cmp	r3, #128	@ 0x80
 8004f90:	d105      	bne.n	8004f9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f92:	4b33      	ldr	r3, [pc, #204]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4a32      	ldr	r2, [pc, #200]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d21d      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fac:	4b2b      	ldr	r3, [pc, #172]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 020f 	bic.w	r2, r3, #15
 8004fb4:	4929      	ldr	r1, [pc, #164]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fbc:	f7fd f9f6 	bl	80023ac <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fd f9f2 	bl	80023ac <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e03b      	b.n	8005052 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	@ (800505c <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1ed      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4917      	ldr	r1, [pc, #92]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005012:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	490f      	ldr	r1, [pc, #60]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005026:	f000 f825 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 800502a:	4602      	mov	r2, r0
 800502c:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <HAL_RCC_ClockConfig+0x264>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	490c      	ldr	r1, [pc, #48]	@ (8005068 <HAL_RCC_ClockConfig+0x26c>)
 8005038:	5ccb      	ldrb	r3, [r1, r3]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <HAL_RCC_ClockConfig+0x270>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005046:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <HAL_RCC_ClockConfig+0x274>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fc fd10 	bl	8001a70 <HAL_InitTick>
 8005050:	4603      	mov	r3, r0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40022000 	.word	0x40022000
 8005060:	40021000 	.word	0x40021000
 8005064:	04c4b400 	.word	0x04c4b400
 8005068:	0800c90c 	.word	0x0800c90c
 800506c:	20000000 	.word	0x20000000
 8005070:	20000004 	.word	0x20000004

08005074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	2b04      	cmp	r3, #4
 8005084:	d102      	bne.n	800508c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005086:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e047      	b.n	800511c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800508c:	4b27      	ldr	r3, [pc, #156]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d102      	bne.n	800509e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005098:	4b26      	ldr	r3, [pc, #152]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xc0>)
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e03e      	b.n	800511c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d136      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050aa:	4b20      	ldr	r3, [pc, #128]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b4:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3301      	adds	r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d10c      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	4a16      	ldr	r2, [pc, #88]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d2:	68d2      	ldr	r2, [r2, #12]
 80050d4:	0a12      	lsrs	r2, r2, #8
 80050d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	617b      	str	r3, [r7, #20]
      break;
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e2:	4a13      	ldr	r2, [pc, #76]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	4a10      	ldr	r2, [pc, #64]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	0a12      	lsrs	r2, r2, #8
 80050f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
      break;
 80050fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0e5b      	lsrs	r3, r3, #25
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	3301      	adds	r3, #1
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e001      	b.n	800511c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800511c:	693b      	ldr	r3, [r7, #16]
}
 800511e:	4618      	mov	r0, r3
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	00f42400 	.word	0x00f42400
 8005134:	016e3600 	.word	0x016e3600

08005138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800513c:	4b03      	ldr	r3, [pc, #12]	@ (800514c <HAL_RCC_GetHCLKFreq+0x14>)
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000000 	.word	0x20000000

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005154:	f7ff fff0 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4904      	ldr	r1, [pc, #16]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	0800c91c 	.word	0x0800c91c

0800517c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005180:	f7ff ffda 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0adb      	lsrs	r3, r3, #11
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4904      	ldr	r1, [pc, #16]	@ (80051a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	0800c91c 	.word	0x0800c91c

080051a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	220f      	movs	r2, #15
 80051b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80051b8:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <HAL_RCC_GetClockConfig+0x5c>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80051c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <HAL_RCC_GetClockConfig+0x5c>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80051d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <HAL_RCC_GetClockConfig+0x5c>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80051dc:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <HAL_RCC_GetClockConfig+0x5c>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051ea:	4b07      	ldr	r3, [pc, #28]	@ (8005208 <HAL_RCC_GetClockConfig+0x60>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	40022000 	.word	0x40022000

0800520c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d10c      	bne.n	800524a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005230:	4a17      	ldr	r2, [pc, #92]	@ (8005290 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	4a14      	ldr	r2, [pc, #80]	@ (800528c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800523a:	68d2      	ldr	r2, [r2, #12]
 800523c:	0a12      	lsrs	r2, r2, #8
 800523e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	617b      	str	r3, [r7, #20]
    break;
 8005248:	e00c      	b.n	8005264 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	4a0e      	ldr	r2, [pc, #56]	@ (800528c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005254:	68d2      	ldr	r2, [r2, #12]
 8005256:	0a12      	lsrs	r2, r2, #8
 8005258:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    break;
 8005262:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005264:	4b09      	ldr	r3, [pc, #36]	@ (800528c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0e5b      	lsrs	r3, r3, #25
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	3301      	adds	r3, #1
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800527e:	687b      	ldr	r3, [r7, #4]
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40021000 	.word	0x40021000
 8005290:	016e3600 	.word	0x016e3600
 8005294:	00f42400 	.word	0x00f42400

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a0:	2300      	movs	r3, #0
 80052a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052a4:	2300      	movs	r3, #0
 80052a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8098 	beq.w	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b43      	ldr	r3, [pc, #268]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10d      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	4b40      	ldr	r3, [pc, #256]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ca:	4a3f      	ldr	r2, [pc, #252]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80052d2:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052de:	2301      	movs	r3, #1
 80052e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e2:	4b3a      	ldr	r3, [pc, #232]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a39      	ldr	r2, [pc, #228]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ee:	f7fd f85d 	bl	80023ac <HAL_GetTick>
 80052f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052f4:	e009      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f6:	f7fd f859 	bl	80023ac <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d902      	bls.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	74fb      	strb	r3, [r7, #19]
        break;
 8005308:	e005      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800530a:	4b30      	ldr	r3, [pc, #192]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0ef      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d159      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800531c:	4b2a      	ldr	r3, [pc, #168]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01e      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	429a      	cmp	r2, r3
 8005336:	d019      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005338:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005344:	4b20      	ldr	r3, [pc, #128]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005354:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005364:	4a18      	ldr	r2, [pc, #96]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fd f819 	bl	80023ac <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537c:	e00b      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fd f815 	bl	80023ac <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d902      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	74fb      	strb	r3, [r7, #19]
            break;
 8005394:	e006      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005396:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0ec      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053aa:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b8:	4903      	ldr	r1, [pc, #12]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	74bb      	strb	r3, [r7, #18]
 80053c6:	e005      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053c8:	40021000 	.word	0x40021000
 80053cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d4:	7c7b      	ldrb	r3, [r7, #17]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d105      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4ba7      	ldr	r3, [pc, #668]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	4aa6      	ldr	r2, [pc, #664]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053f2:	4ba1      	ldr	r3, [pc, #644]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f8:	f023 0203 	bic.w	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	499d      	ldr	r1, [pc, #628]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005414:	4b98      	ldr	r3, [pc, #608]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541a:	f023 020c 	bic.w	r2, r3, #12
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4995      	ldr	r1, [pc, #596]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005436:	4b90      	ldr	r3, [pc, #576]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	498c      	ldr	r1, [pc, #560]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005458:	4b87      	ldr	r3, [pc, #540]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	4984      	ldr	r1, [pc, #528]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800547a:	4b7f      	ldr	r3, [pc, #508]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	497b      	ldr	r1, [pc, #492]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800549c:	4b76      	ldr	r3, [pc, #472]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4973      	ldr	r1, [pc, #460]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054be:	4b6e      	ldr	r3, [pc, #440]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	496a      	ldr	r1, [pc, #424]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e0:	4b65      	ldr	r3, [pc, #404]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	4962      	ldr	r1, [pc, #392]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005502:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	4959      	ldr	r1, [pc, #356]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005524:	4b54      	ldr	r3, [pc, #336]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800552a:	f023 0203 	bic.w	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	4951      	ldr	r1, [pc, #324]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005546:	4b4c      	ldr	r3, [pc, #304]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4948      	ldr	r1, [pc, #288]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005568:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	4940      	ldr	r1, [pc, #256]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005586:	d105      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005588:	4b3b      	ldr	r3, [pc, #236]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4a3a      	ldr	r2, [pc, #232]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005592:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055a0:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ae:	4932      	ldr	r1, [pc, #200]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055be:	d105      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055d8:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e6:	4924      	ldr	r1, [pc, #144]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005602:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d015      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005610:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005616:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	4916      	ldr	r1, [pc, #88]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800562e:	d105      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005630:	4b11      	ldr	r3, [pc, #68]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a10      	ldr	r2, [pc, #64]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800563a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d019      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	4908      	ldr	r1, [pc, #32]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005666:	d109      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005672:	60d3      	str	r3, [r2, #12]
 8005674:	e002      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005688:	4b29      	ldr	r3, [pc, #164]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	4926      	ldr	r1, [pc, #152]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a6:	d105      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a8:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80056c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ce:	4918      	ldr	r1, [pc, #96]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056de:	d105      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056e0:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a12      	ldr	r2, [pc, #72]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005706:	490a      	ldr	r1, [pc, #40]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005716:	d105      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a04      	ldr	r2, [pc, #16]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005724:	7cbb      	ldrb	r3, [r7, #18]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000

08005734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e049      	b.n	80057da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fc3c 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f000 fed0 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e04c      	b.n	8005896 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a26      	ldr	r2, [pc, #152]	@ (80058a4 <HAL_TIM_Base_Start+0xc0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005816:	d01d      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a22      	ldr	r2, [pc, #136]	@ (80058a8 <HAL_TIM_Base_Start+0xc4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a21      	ldr	r2, [pc, #132]	@ (80058ac <HAL_TIM_Base_Start+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1f      	ldr	r2, [pc, #124]	@ (80058b0 <HAL_TIM_Base_Start+0xcc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <HAL_TIM_Base_Start+0xd0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <HAL_TIM_Base_Start+0xd4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_Base_Start+0x70>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_TIM_Base_Start+0xd8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d115      	bne.n	8005880 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <HAL_TIM_Base_Start+0xdc>)
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d015      	beq.n	8005892 <HAL_TIM_Base_Start+0xae>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d011      	beq.n	8005892 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	e008      	b.n	8005892 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e000      	b.n	8005894 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40015000 	.word	0x40015000
 80058c0:	00010007 	.word	0x00010007

080058c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d001      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e054      	b.n	8005986 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a26      	ldr	r2, [pc, #152]	@ (8005994 <HAL_TIM_Base_Start_IT+0xd0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d01d      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a22      	ldr	r2, [pc, #136]	@ (8005998 <HAL_TIM_Base_Start_IT+0xd4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_TIM_Base_Start_IT+0xd8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x80>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d115      	bne.n	8005970 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	4b19      	ldr	r3, [pc, #100]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xec>)
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d015      	beq.n	8005982 <HAL_TIM_Base_Start_IT+0xbe>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d011      	beq.n	8005982 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	e008      	b.n	8005982 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e000      	b.n	8005984 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40015000 	.word	0x40015000
 80059b0:	00010007 	.word	0x00010007

080059b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e049      	b.n	8005a5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f841 	bl	8005a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f000 fd90 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_TIM_PWM_Start+0x24>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e03c      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d109      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x3e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	bf14      	ite	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	2300      	moveq	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	e02f      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d109      	bne.n	8005ad0 <HAL_TIM_PWM_Start+0x58>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e022      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d109      	bne.n	8005aea <HAL_TIM_PWM_Start+0x72>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e015      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d109      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x8c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e008      	b.n	8005b16 <HAL_TIM_PWM_Start+0x9e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0a6      	b.n	8005c6c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_PWM_Start+0xb6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b2c:	e023      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start+0xc6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b3c:	e01b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xd6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b4c:	e013      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b0c      	cmp	r3, #12
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0xe6>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b5c:	e00b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start+0xf6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6c:	e003      	b.n	8005b76 <HAL_TIM_PWM_Start+0xfe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f9b8 	bl	8006ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3a      	ldr	r2, [pc, #232]	@ (8005c74 <HAL_TIM_PWM_Start+0x1fc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a39      	ldr	r2, [pc, #228]	@ (8005c78 <HAL_TIM_PWM_Start+0x200>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a37      	ldr	r2, [pc, #220]	@ (8005c7c <HAL_TIM_PWM_Start+0x204>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a36      	ldr	r2, [pc, #216]	@ (8005c80 <HAL_TIM_PWM_Start+0x208>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a34      	ldr	r2, [pc, #208]	@ (8005c84 <HAL_TIM_PWM_Start+0x20c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x148>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a33      	ldr	r2, [pc, #204]	@ (8005c88 <HAL_TIM_PWM_Start+0x210>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x14c>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_TIM_PWM_Start+0x14e>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a25      	ldr	r2, [pc, #148]	@ (8005c74 <HAL_TIM_PWM_Start+0x1fc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d022      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d01d      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <HAL_TIM_PWM_Start+0x214>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d018      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <HAL_TIM_PWM_Start+0x218>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_TIM_PWM_Start+0x21c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <HAL_TIM_PWM_Start+0x200>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <HAL_TIM_PWM_Start+0x204>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x1b2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <HAL_TIM_PWM_Start+0x210>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d115      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	4b19      	ldr	r3, [pc, #100]	@ (8005c98 <HAL_TIM_PWM_Start+0x220>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d015      	beq.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c42:	d011      	beq.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	e008      	b.n	8005c68 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40013400 	.word	0x40013400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800
 8005c88:	40015000 	.word	0x40015000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	00010007 	.word	0x00010007

08005c9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 f920 	bl	8006ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a40      	ldr	r2, [pc, #256]	@ (8005dbc <HAL_TIM_PWM_Stop+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d018      	beq.n	8005cf0 <HAL_TIM_PWM_Stop+0x54>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc0 <HAL_TIM_PWM_Stop+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_TIM_PWM_Stop+0x54>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc4 <HAL_TIM_PWM_Stop+0x128>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00e      	beq.n	8005cf0 <HAL_TIM_PWM_Stop+0x54>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc8 <HAL_TIM_PWM_Stop+0x12c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d009      	beq.n	8005cf0 <HAL_TIM_PWM_Stop+0x54>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8005dcc <HAL_TIM_PWM_Stop+0x130>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIM_PWM_Stop+0x54>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a39      	ldr	r2, [pc, #228]	@ (8005dd0 <HAL_TIM_PWM_Stop+0x134>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_TIM_PWM_Stop+0x58>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_TIM_PWM_Stop+0x5a>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d017      	beq.n	8005d2a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10f      	bne.n	8005d2a <HAL_TIM_PWM_Stop+0x8e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a1a      	ldr	r2, [r3, #32]
 8005d10:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_PWM_Stop+0x8e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <HAL_TIM_PWM_Stop+0xbe>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_PWM_Stop+0xbe>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_PWM_Stop+0xce>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d68:	e023      	b.n	8005db2 <HAL_TIM_PWM_Stop+0x116>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_PWM_Stop+0xde>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d78:	e01b      	b.n	8005db2 <HAL_TIM_PWM_Stop+0x116>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d104      	bne.n	8005d8a <HAL_TIM_PWM_Stop+0xee>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d88:	e013      	b.n	8005db2 <HAL_TIM_PWM_Stop+0x116>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d104      	bne.n	8005d9a <HAL_TIM_PWM_Stop+0xfe>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d98:	e00b      	b.n	8005db2 <HAL_TIM_PWM_Stop+0x116>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Stop+0x10e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da8:	e003      	b.n	8005db2 <HAL_TIM_PWM_Stop+0x116>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800
 8005dd0:	40015000 	.word	0x40015000

08005dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d020      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01b      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0202 	mvn.w	r2, #2
 8005e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb5c 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb4e 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb5f 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d020      	beq.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0204 	mvn.w	r2, #4
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb36 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fb28 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb39 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0208 	mvn.w	r2, #8
 8005ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fb10 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fb02 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fb13 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0210 	mvn.w	r2, #16
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 faea 	bl	80064dc <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fadc 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 faed 	bl	80064f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0201 	mvn.w	r2, #1
 8005f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fb62 	bl	8001604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fafe 	bl	800756a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 faf6 	bl	800757e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 faa7 	bl	8006504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0220 	mvn.w	r2, #32
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 fabe 	bl	8007556 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 faca 	bl	8007592 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fac2 	bl	80075a6 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 faba 	bl	80075ba <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 fab2 	bl	80075ce <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800608e:	2302      	movs	r3, #2
 8006090:	e0ff      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b14      	cmp	r3, #20
 800609e:	f200 80f0 	bhi.w	8006282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	08006283 	.word	0x08006283
 80060b0:	08006283 	.word	0x08006283
 80060b4:	08006283 	.word	0x08006283
 80060b8:	0800613d 	.word	0x0800613d
 80060bc:	08006283 	.word	0x08006283
 80060c0:	08006283 	.word	0x08006283
 80060c4:	08006283 	.word	0x08006283
 80060c8:	0800617f 	.word	0x0800617f
 80060cc:	08006283 	.word	0x08006283
 80060d0:	08006283 	.word	0x08006283
 80060d4:	08006283 	.word	0x08006283
 80060d8:	080061bf 	.word	0x080061bf
 80060dc:	08006283 	.word	0x08006283
 80060e0:	08006283 	.word	0x08006283
 80060e4:	08006283 	.word	0x08006283
 80060e8:	08006201 	.word	0x08006201
 80060ec:	08006283 	.word	0x08006283
 80060f0:	08006283 	.word	0x08006283
 80060f4:	08006283 	.word	0x08006283
 80060f8:	08006241 	.word	0x08006241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fabc 	bl	8006680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0208 	orr.w	r2, r2, #8
 8006116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	619a      	str	r2, [r3, #24]
      break;
 800613a:	e0a5      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fb36 	bl	80067b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6999      	ldr	r1, [r3, #24]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	619a      	str	r2, [r3, #24]
      break;
 800617c:	e084      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fba9 	bl	80068dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0208 	orr.w	r2, r2, #8
 8006198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0204 	bic.w	r2, r2, #4
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	61da      	str	r2, [r3, #28]
      break;
 80061bc:	e064      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fc1b 	bl	8006a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	021a      	lsls	r2, r3, #8
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	61da      	str	r2, [r3, #28]
      break;
 80061fe:	e043      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fc8e 	bl	8006b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0208 	orr.w	r2, r2, #8
 800621a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800623e:	e023      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fcd8 	bl	8006bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800625a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800626a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006280:	e002      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
      break;
 8006286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop

0800629c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_ConfigClockSource+0x1c>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0f6      	b.n	80064a6 <HAL_TIM_ConfigClockSource+0x20a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80062d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a6f      	ldr	r2, [pc, #444]	@ (80064b0 <HAL_TIM_ConfigClockSource+0x214>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f000 80c1 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 80062f8:	4a6d      	ldr	r2, [pc, #436]	@ (80064b0 <HAL_TIM_ConfigClockSource+0x214>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f200 80c6 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006300:	4a6c      	ldr	r2, [pc, #432]	@ (80064b4 <HAL_TIM_ConfigClockSource+0x218>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f000 80b9 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006308:	4a6a      	ldr	r2, [pc, #424]	@ (80064b4 <HAL_TIM_ConfigClockSource+0x218>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f200 80be 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006310:	4a69      	ldr	r2, [pc, #420]	@ (80064b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f000 80b1 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006318:	4a67      	ldr	r2, [pc, #412]	@ (80064b8 <HAL_TIM_ConfigClockSource+0x21c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f200 80b6 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006320:	4a66      	ldr	r2, [pc, #408]	@ (80064bc <HAL_TIM_ConfigClockSource+0x220>)
 8006322:	4293      	cmp	r3, r2
 8006324:	f000 80a9 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006328:	4a64      	ldr	r2, [pc, #400]	@ (80064bc <HAL_TIM_ConfigClockSource+0x220>)
 800632a:	4293      	cmp	r3, r2
 800632c:	f200 80ae 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006330:	4a63      	ldr	r2, [pc, #396]	@ (80064c0 <HAL_TIM_ConfigClockSource+0x224>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f000 80a1 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006338:	4a61      	ldr	r2, [pc, #388]	@ (80064c0 <HAL_TIM_ConfigClockSource+0x224>)
 800633a:	4293      	cmp	r3, r2
 800633c:	f200 80a6 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006340:	4a60      	ldr	r2, [pc, #384]	@ (80064c4 <HAL_TIM_ConfigClockSource+0x228>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f000 8099 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006348:	4a5e      	ldr	r2, [pc, #376]	@ (80064c4 <HAL_TIM_ConfigClockSource+0x228>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f200 809e 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006350:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006354:	f000 8091 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006358:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800635c:	f200 8096 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006364:	f000 8089 	beq.w	800647a <HAL_TIM_ConfigClockSource+0x1de>
 8006368:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636c:	f200 808e 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006374:	d03e      	beq.n	80063f4 <HAL_TIM_ConfigClockSource+0x158>
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800637a:	f200 8087 	bhi.w	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006382:	f000 8086 	beq.w	8006492 <HAL_TIM_ConfigClockSource+0x1f6>
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638a:	d87f      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 800638c:	2b70      	cmp	r3, #112	@ 0x70
 800638e:	d01a      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x12a>
 8006390:	2b70      	cmp	r3, #112	@ 0x70
 8006392:	d87b      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 8006394:	2b60      	cmp	r3, #96	@ 0x60
 8006396:	d050      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x19e>
 8006398:	2b60      	cmp	r3, #96	@ 0x60
 800639a:	d877      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 800639c:	2b50      	cmp	r3, #80	@ 0x50
 800639e:	d03c      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x17e>
 80063a0:	2b50      	cmp	r3, #80	@ 0x50
 80063a2:	d873      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	d058      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x1be>
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d86f      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 80063ac:	2b30      	cmp	r3, #48	@ 0x30
 80063ae:	d064      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x1de>
 80063b0:	2b30      	cmp	r3, #48	@ 0x30
 80063b2:	d86b      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d060      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x1de>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d867      	bhi.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05c      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x1de>
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d05a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x1de>
 80063c4:	e062      	b.n	800648c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d6:	f000 fd6d 	bl	8006eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	609a      	str	r2, [r3, #8]
      break;
 80063f2:	e04f      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	f000 fd56 	bl	8006eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006416:	609a      	str	r2, [r3, #8]
      break;
 8006418:	e03c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fcc8 	bl	8006dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2150      	movs	r1, #80	@ 0x50
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fd21 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006438:	e02c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006446:	461a      	mov	r2, r3
 8006448:	f000 fce7 	bl	8006e1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2160      	movs	r1, #96	@ 0x60
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd11 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006458:	e01c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	461a      	mov	r2, r3
 8006468:	f000 fca8 	bl	8006dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2140      	movs	r1, #64	@ 0x40
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fd01 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006478:	e00c      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f000 fcf8 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 800648a:	e003      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e000      	b.n	8006494 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	00100070 	.word	0x00100070
 80064b4:	00100060 	.word	0x00100060
 80064b8:	00100050 	.word	0x00100050
 80064bc:	00100040 	.word	0x00100040
 80064c0:	00100030 	.word	0x00100030
 80064c4:	00100020 	.word	0x00100020

080064c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a4c      	ldr	r2, [pc, #304]	@ (800665c <TIM_Base_SetConfig+0x144>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d017      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006536:	d013      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a49      	ldr	r2, [pc, #292]	@ (8006660 <TIM_Base_SetConfig+0x148>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a48      	ldr	r2, [pc, #288]	@ (8006664 <TIM_Base_SetConfig+0x14c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a47      	ldr	r2, [pc, #284]	@ (8006668 <TIM_Base_SetConfig+0x150>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a46      	ldr	r2, [pc, #280]	@ (800666c <TIM_Base_SetConfig+0x154>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a45      	ldr	r2, [pc, #276]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a39      	ldr	r2, [pc, #228]	@ (800665c <TIM_Base_SetConfig+0x144>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d023      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d01f      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a36      	ldr	r2, [pc, #216]	@ (8006660 <TIM_Base_SetConfig+0x148>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01b      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a35      	ldr	r2, [pc, #212]	@ (8006664 <TIM_Base_SetConfig+0x14c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a34      	ldr	r2, [pc, #208]	@ (8006668 <TIM_Base_SetConfig+0x150>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a33      	ldr	r2, [pc, #204]	@ (800666c <TIM_Base_SetConfig+0x154>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a33      	ldr	r2, [pc, #204]	@ (8006674 <TIM_Base_SetConfig+0x15c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a32      	ldr	r2, [pc, #200]	@ (8006678 <TIM_Base_SetConfig+0x160>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a31      	ldr	r2, [pc, #196]	@ (800667c <TIM_Base_SetConfig+0x164>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <TIM_Base_SetConfig+0x144>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <TIM_Base_SetConfig+0x154>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00f      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1a      	ldr	r2, [pc, #104]	@ (8006674 <TIM_Base_SetConfig+0x15c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <TIM_Base_SetConfig+0x160>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a18      	ldr	r2, [pc, #96]	@ (800667c <TIM_Base_SetConfig+0x164>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a13      	ldr	r2, [pc, #76]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d103      	bne.n	8006630 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d105      	bne.n	800664e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]
  }
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40015000 	.word	0x40015000
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800

08006680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0302 	bic.w	r3, r3, #2
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a30      	ldr	r2, [pc, #192]	@ (800679c <TIM_OC1_SetConfig+0x11c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <TIM_OC1_SetConfig+0x120>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a2e      	ldr	r2, [pc, #184]	@ (80067a4 <TIM_OC1_SetConfig+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a2d      	ldr	r2, [pc, #180]	@ (80067a8 <TIM_OC1_SetConfig+0x128>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <TIM_OC1_SetConfig+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a2b      	ldr	r2, [pc, #172]	@ (80067b0 <TIM_OC1_SetConfig+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d10c      	bne.n	8006722 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0308 	bic.w	r3, r3, #8
 800670e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f023 0304 	bic.w	r3, r3, #4
 8006720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <TIM_OC1_SetConfig+0x11c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <TIM_OC1_SetConfig+0x120>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <TIM_OC1_SetConfig+0x124>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1a      	ldr	r2, [pc, #104]	@ (80067a8 <TIM_OC1_SetConfig+0x128>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	@ (80067ac <TIM_OC1_SetConfig+0x12c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <TIM_OC1_SetConfig+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d111      	bne.n	8006776 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800
 80067b0:	40015000 	.word	0x40015000

080067b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f023 0210 	bic.w	r2, r3, #16
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0320 	bic.w	r3, r3, #32
 8006802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2c      	ldr	r2, [pc, #176]	@ (80068c4 <TIM_OC2_SetConfig+0x110>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC2_SetConfig+0x74>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a2b      	ldr	r2, [pc, #172]	@ (80068c8 <TIM_OC2_SetConfig+0x114>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC2_SetConfig+0x74>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a2a      	ldr	r2, [pc, #168]	@ (80068cc <TIM_OC2_SetConfig+0x118>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d10d      	bne.n	8006844 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1f      	ldr	r2, [pc, #124]	@ (80068c4 <TIM_OC2_SetConfig+0x110>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a1e      	ldr	r2, [pc, #120]	@ (80068c8 <TIM_OC2_SetConfig+0x114>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00f      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a1e      	ldr	r2, [pc, #120]	@ (80068d0 <TIM_OC2_SetConfig+0x11c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a1d      	ldr	r2, [pc, #116]	@ (80068d4 <TIM_OC2_SetConfig+0x120>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <TIM_OC2_SetConfig+0x124>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <TIM_OC2_SetConfig+0x118>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d113      	bne.n	800689c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800687a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40015000 	.word	0x40015000
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2b      	ldr	r2, [pc, #172]	@ (80069e8 <TIM_OC3_SetConfig+0x10c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_OC3_SetConfig+0x72>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <TIM_OC3_SetConfig+0x110>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x72>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a29      	ldr	r2, [pc, #164]	@ (80069f0 <TIM_OC3_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1e      	ldr	r2, [pc, #120]	@ (80069e8 <TIM_OC3_SetConfig+0x10c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1d      	ldr	r2, [pc, #116]	@ (80069ec <TIM_OC3_SetConfig+0x110>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <TIM_OC3_SetConfig+0x118>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <TIM_OC3_SetConfig+0x11c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <TIM_OC3_SetConfig+0x120>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <TIM_OC3_SetConfig+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40015000 	.word	0x40015000
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800

08006a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b10 <TIM_OC4_SetConfig+0x110>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_OC4_SetConfig+0x74>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <TIM_OC4_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC4_SetConfig+0x74>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <TIM_OC4_SetConfig+0x118>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10d      	bne.n	8006a90 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1f      	ldr	r2, [pc, #124]	@ (8006b10 <TIM_OC4_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <TIM_OC4_SetConfig+0x114>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00f      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b1c <TIM_OC4_SetConfig+0x11c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8006b20 <TIM_OC4_SetConfig+0x120>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b24 <TIM_OC4_SetConfig+0x124>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a17      	ldr	r2, [pc, #92]	@ (8006b18 <TIM_OC4_SetConfig+0x118>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ace:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40015000 	.word	0x40015000
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	@ (8006be4 <TIM_OC5_SetConfig+0xbc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <TIM_OC5_SetConfig+0xc0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a17      	ldr	r2, [pc, #92]	@ (8006bec <TIM_OC5_SetConfig+0xc4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a16      	ldr	r2, [pc, #88]	@ (8006bf0 <TIM_OC5_SetConfig+0xc8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	@ (8006bf4 <TIM_OC5_SetConfig+0xcc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a14      	ldr	r2, [pc, #80]	@ (8006bf8 <TIM_OC5_SetConfig+0xd0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d109      	bne.n	8006bbe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40012c00 	.word	0x40012c00
 8006be8:	40013400 	.word	0x40013400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800
 8006bf8:	40015000 	.word	0x40015000

08006bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	051b      	lsls	r3, r3, #20
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <TIM_OC6_SetConfig+0xc0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a19      	ldr	r2, [pc, #100]	@ (8006cc0 <TIM_OC6_SetConfig+0xc4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00f      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a18      	ldr	r2, [pc, #96]	@ (8006cc4 <TIM_OC6_SetConfig+0xc8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00b      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	@ (8006cc8 <TIM_OC6_SetConfig+0xcc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d007      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <TIM_OC6_SetConfig+0xd0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a15      	ldr	r2, [pc, #84]	@ (8006cd0 <TIM_OC6_SetConfig+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d109      	bne.n	8006c94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40015000 	.word	0x40015000

08006cd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f023 0201 	bic.w	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	@ (8006da0 <TIM_TI1_SetConfig+0xcc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01b      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d08:	d017      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a25      	ldr	r2, [pc, #148]	@ (8006da4 <TIM_TI1_SetConfig+0xd0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a24      	ldr	r2, [pc, #144]	@ (8006da8 <TIM_TI1_SetConfig+0xd4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a23      	ldr	r2, [pc, #140]	@ (8006dac <TIM_TI1_SetConfig+0xd8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a22      	ldr	r2, [pc, #136]	@ (8006db0 <TIM_TI1_SetConfig+0xdc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <TIM_TI1_SetConfig+0xe0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_TI1_SetConfig+0x66>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a20      	ldr	r2, [pc, #128]	@ (8006db8 <TIM_TI1_SetConfig+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <TIM_TI1_SetConfig+0x6a>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <TIM_TI1_SetConfig+0x6c>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e003      	b.n	8006d5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f023 030a 	bic.w	r3, r3, #10
 8006d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f003 030a 	and.w	r3, r3, #10
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40015000 	.word	0x40015000

08006dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 030a 	bic.w	r3, r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f023 0210 	bic.w	r2, r3, #16
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f043 0307 	orr.w	r3, r3, #7
 8006ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	021a      	lsls	r2, r3, #8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	371c      	adds	r7, #28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2201      	movs	r2, #1
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	43db      	mvns	r3, r3
 8006f16:	401a      	ands	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a1a      	ldr	r2, [r3, #32]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	621a      	str	r2, [r3, #32]
}
 8006f32:	bf00      	nop
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08a      	sub	sp, #40	@ 0x28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e0a0      	b.n	8007094 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fb f856 	bl	8002018 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7ff faca 	bl	8006518 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6819      	ldr	r1, [r3, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f7ff fe9f 	bl	8006cd4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 020c 	bic.w	r2, r2, #12
 8006fa4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6999      	ldr	r1, [r3, #24]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fc6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0204 	orr.w	r2, r2, #4
 800700e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007014:	2300      	movs	r3, #0
 8007016:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007018:	2370      	movs	r3, #112	@ 0x70
 800701a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f107 020c 	add.w	r2, r7, #12
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fbbb 	bl	80067b4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800704c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007050:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007060:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3728      	adds	r7, #40	@ 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <HAL_TIMEx_PWMN_Start+0x24>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	bf14      	ite	ne
 80070b8:	2301      	movne	r3, #1
 80070ba:	2300      	moveq	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	e022      	b.n	8007106 <HAL_TIMEx_PWMN_Start+0x6a>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d109      	bne.n	80070da <HAL_TIMEx_PWMN_Start+0x3e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	bf14      	ite	ne
 80070d2:	2301      	movne	r3, #1
 80070d4:	2300      	moveq	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	e015      	b.n	8007106 <HAL_TIMEx_PWMN_Start+0x6a>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d109      	bne.n	80070f4 <HAL_TIMEx_PWMN_Start+0x58>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	bf14      	ite	ne
 80070ec:	2301      	movne	r3, #1
 80070ee:	2300      	moveq	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	e008      	b.n	8007106 <HAL_TIMEx_PWMN_Start+0x6a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e073      	b.n	80071f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_TIMEx_PWMN_Start+0x82>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800711c:	e013      	b.n	8007146 <HAL_TIMEx_PWMN_Start+0xaa>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d104      	bne.n	800712e <HAL_TIMEx_PWMN_Start+0x92>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800712c:	e00b      	b.n	8007146 <HAL_TIMEx_PWMN_Start+0xaa>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d104      	bne.n	800713e <HAL_TIMEx_PWMN_Start+0xa2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800713c:	e003      	b.n	8007146 <HAL_TIMEx_PWMN_Start+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2202      	movs	r2, #2
 8007142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2204      	movs	r2, #4
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fa47 	bl	80075e2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007162:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a25      	ldr	r2, [pc, #148]	@ (8007200 <HAL_TIMEx_PWMN_Start+0x164>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d01d      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a21      	ldr	r2, [pc, #132]	@ (8007204 <HAL_TIMEx_PWMN_Start+0x168>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a20      	ldr	r2, [pc, #128]	@ (8007208 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1e      	ldr	r2, [pc, #120]	@ (800720c <HAL_TIMEx_PWMN_Start+0x170>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1d      	ldr	r2, [pc, #116]	@ (8007210 <HAL_TIMEx_PWMN_Start+0x174>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007214 <HAL_TIMEx_PWMN_Start+0x178>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_TIMEx_PWMN_Start+0x118>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <HAL_TIMEx_PWMN_Start+0x17c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d115      	bne.n	80071e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	4b18      	ldr	r3, [pc, #96]	@ (800721c <HAL_TIMEx_PWMN_Start+0x180>)
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b06      	cmp	r3, #6
 80071c4:	d015      	beq.n	80071f2 <HAL_TIMEx_PWMN_Start+0x156>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071cc:	d011      	beq.n	80071f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	e008      	b.n	80071f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e000      	b.n	80071f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40014000 	.word	0x40014000
 8007218:	40015000 	.word	0x40015000
 800721c:	00010007 	.word	0x00010007

08007220 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f9d5 	bl	80075e2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007242:	4013      	ands	r3, r2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10f      	bne.n	8007268 <HAL_TIMEx_PWMN_Stop+0x48>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d107      	bne.n	8007268 <HAL_TIMEx_PWMN_Stop+0x48>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007266:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <HAL_TIMEx_PWMN_Stop+0x78>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6a1a      	ldr	r2, [r3, #32]
 800727e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007282:	4013      	ands	r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d107      	bne.n	8007298 <HAL_TIMEx_PWMN_Stop+0x78>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <HAL_TIMEx_PWMN_Stop+0x88>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a6:	e013      	b.n	80072d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d104      	bne.n	80072b8 <HAL_TIMEx_PWMN_Stop+0x98>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072b6:	e00b      	b.n	80072d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d104      	bne.n	80072c8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072c6:	e003      	b.n	80072d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e074      	b.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a34      	ldr	r2, [pc, #208]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a33      	ldr	r2, [pc, #204]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a31      	ldr	r2, [pc, #196]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d108      	bne.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800734a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a21      	ldr	r2, [pc, #132]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d022      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007374:	d01d      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1f      	ldr	r2, [pc, #124]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d018      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1d      	ldr	r2, [pc, #116]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d013      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1c      	ldr	r2, [pc, #112]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a15      	ldr	r2, [pc, #84]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a11      	ldr	r2, [pc, #68]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d10c      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40013400 	.word	0x40013400
 80073f4:	40015000 	.word	0x40015000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40014000 	.word	0x40014000

08007408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007420:	2302      	movs	r3, #2
 8007422:	e078      	b.n	8007516 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d009      	beq.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007528 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d11c      	bne.n	8007504 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	051b      	lsls	r3, r3, #20
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40013400 	.word	0x40013400
 800752c:	40015000 	.word	0x40015000

08007530 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007546:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b087      	sub	sp, #28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	2204      	movs	r2, #4
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	43db      	mvns	r3, r3
 8007604:	401a      	ands	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	431a      	orrs	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e042      	b.n	80076c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fa fdf7 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2224      	movs	r2, #36	@ 0x24
 800765a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 ff60 	bl	800853c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc61 	bl	8007f44 <UART_SetConfig>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e01b      	b.n	80076c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800769a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ffdf 	bl	8008680 <UART_CheckIdleState>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	@ 0x28
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	4613      	mov	r3, r2
 80076da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d17b      	bne.n	80077de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_UART_Transmit+0x26>
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e074      	b.n	80077e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2221      	movs	r2, #33	@ 0x21
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007706:	f7fa fe51 	bl	80023ac <HAL_GetTick>
 800770a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	88fa      	ldrh	r2, [r7, #6]
 8007718:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007724:	d108      	bne.n	8007738 <HAL_UART_Transmit+0x6c>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	e003      	b.n	8007740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800773c:	2300      	movs	r3, #0
 800773e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007740:	e030      	b.n	80077a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	@ 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 f841 	bl	80087d4 <UART_WaitOnFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e03d      	b.n	80077e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007778:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	3302      	adds	r3, #2
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	e007      	b.n	8007792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1c8      	bne.n	8007742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	2140      	movs	r1, #64	@ 0x40
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f001 f80a 	bl	80087d4 <UART_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e006      	b.n	80077e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e000      	b.n	80077e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077de:	2302      	movs	r3, #2
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	@ 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d137      	bne.n	8007870 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Receive_IT+0x24>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e030      	b.n	8007872 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <HAL_UART_Receive_IT+0x94>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d01f      	beq.n	8007860 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d018      	beq.n	8007860 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	613b      	str	r3, [r7, #16]
   return(result);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	623b      	str	r3, [r7, #32]
 800784e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	69f9      	ldr	r1, [r7, #28]
 8007852:	6a3a      	ldr	r2, [r7, #32]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	61bb      	str	r3, [r7, #24]
   return(result);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	461a      	mov	r2, r3
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f001 f822 	bl	80088b0 <UART_Start_Receive_IT>
 800786c:	4603      	mov	r3, r0
 800786e:	e000      	b.n	8007872 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007870:	2302      	movs	r3, #2
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3728      	adds	r7, #40	@ 0x28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40008000 	.word	0x40008000

08007880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b0ba      	sub	sp, #232	@ 0xe8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80078aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80078ae:	4013      	ands	r3, r2
 80078b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80078b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d11b      	bne.n	80078f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d015      	beq.n	80078f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d105      	bne.n	80078e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8300 	beq.w	8007eea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
      }
      return;
 80078f2:	e2fa      	b.n	8007eea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8123 	beq.w	8007b44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007902:	4b8d      	ldr	r3, [pc, #564]	@ (8007b38 <HAL_UART_IRQHandler+0x2b8>)
 8007904:	4013      	ands	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800790a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800790e:	4b8b      	ldr	r3, [pc, #556]	@ (8007b3c <HAL_UART_IRQHandler+0x2bc>)
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 8116 	beq.w	8007b44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <HAL_UART_IRQHandler+0xc8>
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2201      	movs	r2, #1
 8007936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	f043 0201 	orr.w	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d011      	beq.n	8007978 <HAL_UART_IRQHandler+0xf8>
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2202      	movs	r2, #2
 8007966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796e:	f043 0204 	orr.w	r2, r3, #4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d011      	beq.n	80079a8 <HAL_UART_IRQHandler+0x128>
 8007984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2204      	movs	r2, #4
 8007996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799e:	f043 0202 	orr.w	r2, r3, #2
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079c4:	4b5c      	ldr	r3, [pc, #368]	@ (8007b38 <HAL_UART_IRQHandler+0x2b8>)
 80079c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2208      	movs	r2, #8
 80079d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079da:	f043 0208 	orr.w	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d012      	beq.n	8007a16 <HAL_UART_IRQHandler+0x196>
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00c      	beq.n	8007a16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0c:	f043 0220 	orr.w	r2, r3, #32
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8266 	beq.w	8007eee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d013      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6a:	2b40      	cmp	r3, #64	@ 0x40
 8007a6c:	d005      	beq.n	8007a7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d054      	beq.n	8007b24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 f83a 	bl	8008af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b40      	cmp	r3, #64	@ 0x40
 8007a8c:	d146      	bne.n	8007b1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007aba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1d9      	bne.n	8007a8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d017      	beq.n	8007b14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aea:	4a15      	ldr	r2, [pc, #84]	@ (8007b40 <HAL_UART_IRQHandler+0x2c0>)
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fc fa47 	bl	8003f88 <HAL_DMA_Abort_IT>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d019      	beq.n	8007b34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b12:	e00f      	b.n	8007b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9ff 	bl	8007f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1a:	e00b      	b.n	8007b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9fb 	bl	8007f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b22:	e007      	b.n	8007b34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9f7 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b32:	e1dc      	b.n	8007eee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	bf00      	nop
    return;
 8007b36:	e1da      	b.n	8007eee <HAL_UART_IRQHandler+0x66e>
 8007b38:	10000001 	.word	0x10000001
 8007b3c:	04000120 	.word	0x04000120
 8007b40:	08008bc1 	.word	0x08008bc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f040 8170 	bne.w	8007e2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 8169 	beq.w	8007e2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8162 	beq.w	8007e2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	f040 80d8 	bne.w	8007d32 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80af 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	f080 80a7 	bcs.w	8007cf8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 8087 	bne.w	8007cd6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1da      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3308      	adds	r3, #8
 8007c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e1      	bne.n	8007c12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e3      	bne.n	8007c4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e4      	bne.n	8007c94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fc f900 	bl	8003ed6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f91b 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cf6:	e0fc      	b.n	8007ef2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d02:	429a      	cmp	r2, r3
 8007d04:	f040 80f5 	bne.w	8007ef2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	f040 80eb 	bne.w	8007ef2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8fe 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
      return;
 8007d30:	e0df      	b.n	8007ef2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80d1 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80cc 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	623b      	str	r3, [r7, #32]
   return(result);
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e1      	bne.n	8007d94 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f023 0310 	bic.w	r3, r3, #16
 8007df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	69b9      	ldr	r1, [r7, #24]
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	617b      	str	r3, [r7, #20]
   return(result);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e4      	bne.n	8007de4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f880 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e2c:	e063      	b.n	8007ef6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <HAL_UART_IRQHandler+0x5d8>
 8007e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fc17 	bl	8009684 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e56:	e051      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d014      	beq.n	8007e8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d03a      	beq.n	8007efa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
    }
    return;
 8007e8c:	e035      	b.n	8007efa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_UART_IRQHandler+0x62e>
 8007e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fea0 	bl	8008bec <UART_EndTransmit_IT>
    return;
 8007eac:	e026      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_UART_IRQHandler+0x64e>
 8007eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ebe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 fbf0 	bl	80096ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ecc:	e016      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d010      	beq.n	8007efc <HAL_UART_IRQHandler+0x67c>
 8007eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da0c      	bge.n	8007efc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fbd8 	bl	8009698 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ee8:	e008      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
      return;
 8007eea:	bf00      	nop
 8007eec:	e006      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
    return;
 8007eee:	bf00      	nop
 8007ef0:	e004      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
      return;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
      return;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_UART_IRQHandler+0x67c>
    return;
 8007efa:	bf00      	nop
  }
}
 8007efc:	37e8      	adds	r7, #232	@ 0xe8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop

08007f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f48:	b08c      	sub	sp, #48	@ 0x30
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	431a      	orrs	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4baa      	ldr	r3, [pc, #680]	@ (800821c <UART_SetConfig+0x2d8>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a9f      	ldr	r2, [pc, #636]	@ (8008220 <UART_SetConfig+0x2dc>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fac:	4313      	orrs	r3, r2
 8007fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fce:	f023 010f 	bic.w	r1, r3, #15
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a90      	ldr	r2, [pc, #576]	@ (8008224 <UART_SetConfig+0x2e0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d125      	bne.n	8008034 <UART_SetConfig+0xf0>
 8007fe8:	4b8f      	ldr	r3, [pc, #572]	@ (8008228 <UART_SetConfig+0x2e4>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fee:	f003 0303 	and.w	r3, r3, #3
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d81a      	bhi.n	800802c <UART_SetConfig+0xe8>
 8007ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <UART_SetConfig+0xb8>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	0800801d 	.word	0x0800801d
 8008004:	08008015 	.word	0x08008015
 8008008:	08008025 	.word	0x08008025
 800800c:	2301      	movs	r3, #1
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e116      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e112      	b.n	8008242 <UART_SetConfig+0x2fe>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e10e      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e10a      	b.n	8008242 <UART_SetConfig+0x2fe>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e106      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a7c      	ldr	r2, [pc, #496]	@ (800822c <UART_SetConfig+0x2e8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d138      	bne.n	80080b0 <UART_SetConfig+0x16c>
 800803e:	4b7a      	ldr	r3, [pc, #488]	@ (8008228 <UART_SetConfig+0x2e4>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008044:	f003 030c 	and.w	r3, r3, #12
 8008048:	2b0c      	cmp	r3, #12
 800804a:	d82d      	bhi.n	80080a8 <UART_SetConfig+0x164>
 800804c:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x110>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008089 	.word	0x08008089
 8008058:	080080a9 	.word	0x080080a9
 800805c:	080080a9 	.word	0x080080a9
 8008060:	080080a9 	.word	0x080080a9
 8008064:	08008099 	.word	0x08008099
 8008068:	080080a9 	.word	0x080080a9
 800806c:	080080a9 	.word	0x080080a9
 8008070:	080080a9 	.word	0x080080a9
 8008074:	08008091 	.word	0x08008091
 8008078:	080080a9 	.word	0x080080a9
 800807c:	080080a9 	.word	0x080080a9
 8008080:	080080a9 	.word	0x080080a9
 8008084:	080080a1 	.word	0x080080a1
 8008088:	2300      	movs	r3, #0
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808e:	e0d8      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008090:	2302      	movs	r3, #2
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008096:	e0d4      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008098:	2304      	movs	r3, #4
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809e:	e0d0      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080a0:	2308      	movs	r3, #8
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a6:	e0cc      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080a8:	2310      	movs	r3, #16
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ae:	e0c8      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008230 <UART_SetConfig+0x2ec>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d125      	bne.n	8008106 <UART_SetConfig+0x1c2>
 80080ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008228 <UART_SetConfig+0x2e4>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d016      	beq.n	80080f6 <UART_SetConfig+0x1b2>
 80080c8:	2b30      	cmp	r3, #48	@ 0x30
 80080ca:	d818      	bhi.n	80080fe <UART_SetConfig+0x1ba>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d00a      	beq.n	80080e6 <UART_SetConfig+0x1a2>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d814      	bhi.n	80080fe <UART_SetConfig+0x1ba>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <UART_SetConfig+0x19a>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d008      	beq.n	80080ee <UART_SetConfig+0x1aa>
 80080dc:	e00f      	b.n	80080fe <UART_SetConfig+0x1ba>
 80080de:	2300      	movs	r3, #0
 80080e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e4:	e0ad      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080e6:	2302      	movs	r3, #2
 80080e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ec:	e0a9      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080ee:	2304      	movs	r3, #4
 80080f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f4:	e0a5      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080f6:	2308      	movs	r3, #8
 80080f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fc:	e0a1      	b.n	8008242 <UART_SetConfig+0x2fe>
 80080fe:	2310      	movs	r3, #16
 8008100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008104:	e09d      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a4a      	ldr	r2, [pc, #296]	@ (8008234 <UART_SetConfig+0x2f0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d125      	bne.n	800815c <UART_SetConfig+0x218>
 8008110:	4b45      	ldr	r3, [pc, #276]	@ (8008228 <UART_SetConfig+0x2e4>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008116:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800811a:	2bc0      	cmp	r3, #192	@ 0xc0
 800811c:	d016      	beq.n	800814c <UART_SetConfig+0x208>
 800811e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008120:	d818      	bhi.n	8008154 <UART_SetConfig+0x210>
 8008122:	2b80      	cmp	r3, #128	@ 0x80
 8008124:	d00a      	beq.n	800813c <UART_SetConfig+0x1f8>
 8008126:	2b80      	cmp	r3, #128	@ 0x80
 8008128:	d814      	bhi.n	8008154 <UART_SetConfig+0x210>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <UART_SetConfig+0x1f0>
 800812e:	2b40      	cmp	r3, #64	@ 0x40
 8008130:	d008      	beq.n	8008144 <UART_SetConfig+0x200>
 8008132:	e00f      	b.n	8008154 <UART_SetConfig+0x210>
 8008134:	2300      	movs	r3, #0
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e082      	b.n	8008242 <UART_SetConfig+0x2fe>
 800813c:	2302      	movs	r3, #2
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e07e      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008144:	2304      	movs	r3, #4
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800814a:	e07a      	b.n	8008242 <UART_SetConfig+0x2fe>
 800814c:	2308      	movs	r3, #8
 800814e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008152:	e076      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008154:	2310      	movs	r3, #16
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800815a:	e072      	b.n	8008242 <UART_SetConfig+0x2fe>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a35      	ldr	r2, [pc, #212]	@ (8008238 <UART_SetConfig+0x2f4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d12a      	bne.n	80081bc <UART_SetConfig+0x278>
 8008166:	4b30      	ldr	r3, [pc, #192]	@ (8008228 <UART_SetConfig+0x2e4>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800816c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008174:	d01a      	beq.n	80081ac <UART_SetConfig+0x268>
 8008176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800817a:	d81b      	bhi.n	80081b4 <UART_SetConfig+0x270>
 800817c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008180:	d00c      	beq.n	800819c <UART_SetConfig+0x258>
 8008182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008186:	d815      	bhi.n	80081b4 <UART_SetConfig+0x270>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <UART_SetConfig+0x250>
 800818c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008190:	d008      	beq.n	80081a4 <UART_SetConfig+0x260>
 8008192:	e00f      	b.n	80081b4 <UART_SetConfig+0x270>
 8008194:	2300      	movs	r3, #0
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819a:	e052      	b.n	8008242 <UART_SetConfig+0x2fe>
 800819c:	2302      	movs	r3, #2
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a2:	e04e      	b.n	8008242 <UART_SetConfig+0x2fe>
 80081a4:	2304      	movs	r3, #4
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081aa:	e04a      	b.n	8008242 <UART_SetConfig+0x2fe>
 80081ac:	2308      	movs	r3, #8
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b2:	e046      	b.n	8008242 <UART_SetConfig+0x2fe>
 80081b4:	2310      	movs	r3, #16
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ba:	e042      	b.n	8008242 <UART_SetConfig+0x2fe>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a17      	ldr	r2, [pc, #92]	@ (8008220 <UART_SetConfig+0x2dc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d13a      	bne.n	800823c <UART_SetConfig+0x2f8>
 80081c6:	4b18      	ldr	r3, [pc, #96]	@ (8008228 <UART_SetConfig+0x2e4>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081d4:	d01a      	beq.n	800820c <UART_SetConfig+0x2c8>
 80081d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081da:	d81b      	bhi.n	8008214 <UART_SetConfig+0x2d0>
 80081dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e0:	d00c      	beq.n	80081fc <UART_SetConfig+0x2b8>
 80081e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e6:	d815      	bhi.n	8008214 <UART_SetConfig+0x2d0>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <UART_SetConfig+0x2b0>
 80081ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081f0:	d008      	beq.n	8008204 <UART_SetConfig+0x2c0>
 80081f2:	e00f      	b.n	8008214 <UART_SetConfig+0x2d0>
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fa:	e022      	b.n	8008242 <UART_SetConfig+0x2fe>
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008202:	e01e      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820a:	e01a      	b.n	8008242 <UART_SetConfig+0x2fe>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008212:	e016      	b.n	8008242 <UART_SetConfig+0x2fe>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821a:	e012      	b.n	8008242 <UART_SetConfig+0x2fe>
 800821c:	cfff69f3 	.word	0xcfff69f3
 8008220:	40008000 	.word	0x40008000
 8008224:	40013800 	.word	0x40013800
 8008228:	40021000 	.word	0x40021000
 800822c:	40004400 	.word	0x40004400
 8008230:	40004800 	.word	0x40004800
 8008234:	40004c00 	.word	0x40004c00
 8008238:	40005000 	.word	0x40005000
 800823c:	2310      	movs	r3, #16
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4aae      	ldr	r2, [pc, #696]	@ (8008500 <UART_SetConfig+0x5bc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	f040 8097 	bne.w	800837c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800824e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008252:	2b08      	cmp	r3, #8
 8008254:	d823      	bhi.n	800829e <UART_SetConfig+0x35a>
 8008256:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <UART_SetConfig+0x318>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	08008281 	.word	0x08008281
 8008260:	0800829f 	.word	0x0800829f
 8008264:	08008289 	.word	0x08008289
 8008268:	0800829f 	.word	0x0800829f
 800826c:	0800828f 	.word	0x0800828f
 8008270:	0800829f 	.word	0x0800829f
 8008274:	0800829f 	.word	0x0800829f
 8008278:	0800829f 	.word	0x0800829f
 800827c:	08008297 	.word	0x08008297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fc ff66 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008286:	e010      	b.n	80082aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008288:	4b9e      	ldr	r3, [pc, #632]	@ (8008504 <UART_SetConfig+0x5c0>)
 800828a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800828c:	e00d      	b.n	80082aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828e:	f7fc fef1 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8008292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008294:	e009      	b.n	80082aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800829c:	e005      	b.n	80082aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8130 	beq.w	8008512 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b6:	4a94      	ldr	r2, [pc, #592]	@ (8008508 <UART_SetConfig+0x5c4>)
 80082b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082bc:	461a      	mov	r2, r3
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4413      	add	r3, r2
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d305      	bcc.n	80082e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d903      	bls.n	80082ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082e8:	e113      	b.n	8008512 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	2200      	movs	r2, #0
 80082ee:	60bb      	str	r3, [r7, #8]
 80082f0:	60fa      	str	r2, [r7, #12]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f6:	4a84      	ldr	r2, [pc, #528]	@ (8008508 <UART_SetConfig+0x5c4>)
 80082f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2200      	movs	r2, #0
 8008300:	603b      	str	r3, [r7, #0]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800830c:	f7f8 fc84 	bl	8000c18 <__aeabi_uldivmod>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	020b      	lsls	r3, r1, #8
 8008322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008326:	0202      	lsls	r2, r0, #8
 8008328:	6979      	ldr	r1, [r7, #20]
 800832a:	6849      	ldr	r1, [r1, #4]
 800832c:	0849      	lsrs	r1, r1, #1
 800832e:	2000      	movs	r0, #0
 8008330:	460c      	mov	r4, r1
 8008332:	4605      	mov	r5, r0
 8008334:	eb12 0804 	adds.w	r8, r2, r4
 8008338:	eb43 0905 	adc.w	r9, r3, r5
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	469a      	mov	sl, r3
 8008344:	4693      	mov	fp, r2
 8008346:	4652      	mov	r2, sl
 8008348:	465b      	mov	r3, fp
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f8 fc63 	bl	8000c18 <__aeabi_uldivmod>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4613      	mov	r3, r2
 8008358:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008360:	d308      	bcc.n	8008374 <UART_SetConfig+0x430>
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008368:	d204      	bcs.n	8008374 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	e0ce      	b.n	8008512 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800837a:	e0ca      	b.n	8008512 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008384:	d166      	bne.n	8008454 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800838a:	2b08      	cmp	r3, #8
 800838c:	d827      	bhi.n	80083de <UART_SetConfig+0x49a>
 800838e:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <UART_SetConfig+0x450>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083b9 	.word	0x080083b9
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	080083df 	.word	0x080083df
 80083a4:	080083cf 	.word	0x080083cf
 80083a8:	080083df 	.word	0x080083df
 80083ac:	080083df 	.word	0x080083df
 80083b0:	080083df 	.word	0x080083df
 80083b4:	080083d7 	.word	0x080083d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b8:	f7fc feca 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 80083bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083be:	e014      	b.n	80083ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083c0:	f7fc fedc 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 80083c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083c6:	e010      	b.n	80083ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008504 <UART_SetConfig+0x5c0>)
 80083ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083cc:	e00d      	b.n	80083ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ce:	f7fc fe51 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 80083d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083d4:	e009      	b.n	80083ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083dc:	e005      	b.n	80083ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8090 	beq.w	8008512 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	4a44      	ldr	r2, [pc, #272]	@ (8008508 <UART_SetConfig+0x5c4>)
 80083f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	fbb3 f3f2 	udiv	r3, r3, r2
 8008404:	005a      	lsls	r2, r3, #1
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	441a      	add	r2, r3
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	fbb2 f3f3 	udiv	r3, r2, r3
 8008416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	2b0f      	cmp	r3, #15
 800841c:	d916      	bls.n	800844c <UART_SetConfig+0x508>
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008424:	d212      	bcs.n	800844c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f023 030f 	bic.w	r3, r3, #15
 800842e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	b29b      	uxth	r3, r3
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	b29a      	uxth	r2, r3
 800843c:	8bfb      	ldrh	r3, [r7, #30]
 800843e:	4313      	orrs	r3, r2
 8008440:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	8bfa      	ldrh	r2, [r7, #30]
 8008448:	60da      	str	r2, [r3, #12]
 800844a:	e062      	b.n	8008512 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008452:	e05e      	b.n	8008512 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008454:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008458:	2b08      	cmp	r3, #8
 800845a:	d828      	bhi.n	80084ae <UART_SetConfig+0x56a>
 800845c:	a201      	add	r2, pc, #4	@ (adr r2, 8008464 <UART_SetConfig+0x520>)
 800845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008462:	bf00      	nop
 8008464:	08008489 	.word	0x08008489
 8008468:	08008491 	.word	0x08008491
 800846c:	08008499 	.word	0x08008499
 8008470:	080084af 	.word	0x080084af
 8008474:	0800849f 	.word	0x0800849f
 8008478:	080084af 	.word	0x080084af
 800847c:	080084af 	.word	0x080084af
 8008480:	080084af 	.word	0x080084af
 8008484:	080084a7 	.word	0x080084a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008488:	f7fc fe62 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 800848c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848e:	e014      	b.n	80084ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008490:	f7fc fe74 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008496:	e010      	b.n	80084ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008498:	4b1a      	ldr	r3, [pc, #104]	@ (8008504 <UART_SetConfig+0x5c0>)
 800849a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800849c:	e00d      	b.n	80084ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800849e:	f7fc fde9 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 80084a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a4:	e009      	b.n	80084ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084ac:	e005      	b.n	80084ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084b8:	bf00      	nop
    }

    if (pclk != 0U)
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d028      	beq.n	8008512 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <UART_SetConfig+0x5c4>)
 80084c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	441a      	add	r2, r3
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d910      	bls.n	800850c <UART_SetConfig+0x5c8>
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084f0:	d20c      	bcs.n	800850c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	e009      	b.n	8008512 <UART_SetConfig+0x5ce>
 80084fe:	bf00      	nop
 8008500:	40008000 	.word	0x40008000
 8008504:	00f42400 	.word	0x00f42400
 8008508:	0800c924 	.word	0x0800c924
      }
      else
      {
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2201      	movs	r2, #1
 8008516:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2201      	movs	r2, #1
 800851e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2200      	movs	r2, #0
 8008526:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800852e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008532:	4618      	mov	r0, r3
 8008534:	3730      	adds	r7, #48	@ 0x30
 8008536:	46bd      	mov	sp, r7
 8008538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800853c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01a      	beq.n	8008652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800863a:	d10a      	bne.n	8008652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]
  }
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b098      	sub	sp, #96	@ 0x60
 8008684:	af02      	add	r7, sp, #8
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008690:	f7f9 fe8c 	bl	80023ac <HAL_GetTick>
 8008694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d12f      	bne.n	8008704 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ac:	2200      	movs	r2, #0
 80086ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f88e 	bl	80087d4 <UART_WaitOnFlagUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d022      	beq.n	8008704 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80086de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e6      	bne.n	80086be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e063      	b.n	80087cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0304 	and.w	r3, r3, #4
 800870e:	2b04      	cmp	r3, #4
 8008710:	d149      	bne.n	80087a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800871a:	2200      	movs	r2, #0
 800871c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f857 	bl	80087d4 <UART_WaitOnFlagUntilTimeout>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d03c      	beq.n	80087a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	623b      	str	r3, [r7, #32]
   return(result);
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800874a:	633b      	str	r3, [r7, #48]	@ 0x30
 800874c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e6      	bne.n	800872c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	60fb      	str	r3, [r7, #12]
   return(result);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f023 0301 	bic.w	r3, r3, #1
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800877e:	61fa      	str	r2, [r7, #28]
 8008780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	69b9      	ldr	r1, [r7, #24]
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	617b      	str	r3, [r7, #20]
   return(result);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e5      	bne.n	800875e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2220      	movs	r2, #32
 8008796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e012      	b.n	80087cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3758      	adds	r7, #88	@ 0x58
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	4613      	mov	r3, r2
 80087e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e4:	e04f      	b.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d04b      	beq.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ee:	f7f9 fddd 	bl	80023ac <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <UART_WaitOnFlagUntilTimeout+0x30>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e04e      	b.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d037      	beq.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b80      	cmp	r3, #128	@ 0x80
 800881a:	d034      	beq.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b40      	cmp	r3, #64	@ 0x40
 8008820:	d031      	beq.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b08      	cmp	r3, #8
 800882e:	d110      	bne.n	8008852 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2208      	movs	r2, #8
 8008836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f95b 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2208      	movs	r2, #8
 8008842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e029      	b.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800885c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008860:	d111      	bne.n	8008886 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800886a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 f941 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2220      	movs	r2, #32
 8008876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e00f      	b.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69da      	ldr	r2, [r3, #28]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4013      	ands	r3, r2
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	429a      	cmp	r2, r3
 8008894:	bf0c      	ite	eq
 8008896:	2301      	moveq	r3, #1
 8008898:	2300      	movne	r3, #0
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d0a0      	beq.n	80087e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b0a3      	sub	sp, #140	@ 0x8c
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	88fa      	ldrh	r2, [r7, #6]
 80088d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088e2:	d10e      	bne.n	8008902 <UART_Start_Receive_IT+0x52>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d105      	bne.n	80088f8 <UART_Start_Receive_IT+0x48>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088f6:	e02d      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	22ff      	movs	r2, #255	@ 0xff
 80088fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008900:	e028      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <UART_Start_Receive_IT+0x76>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <UART_Start_Receive_IT+0x6c>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	@ 0xff
 8008916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800891a:	e01b      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	227f      	movs	r2, #127	@ 0x7f
 8008920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008924:	e016      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800892e:	d10d      	bne.n	800894c <UART_Start_Receive_IT+0x9c>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d104      	bne.n	8008942 <UART_Start_Receive_IT+0x92>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	227f      	movs	r2, #127	@ 0x7f
 800893c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008940:	e008      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	223f      	movs	r2, #63	@ 0x3f
 8008946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800894a:	e003      	b.n	8008954 <UART_Start_Receive_IT+0xa4>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2222      	movs	r2, #34	@ 0x22
 8008960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3308      	adds	r3, #8
 800896a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008988:	673a      	str	r2, [r7, #112]	@ 0x70
 800898a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800898e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e3      	bne.n	8008964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089a4:	d14f      	bne.n	8008a46 <UART_Start_Receive_IT+0x196>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089ac:	88fa      	ldrh	r2, [r7, #6]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d349      	bcc.n	8008a46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ba:	d107      	bne.n	80089cc <UART_Start_Receive_IT+0x11c>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d103      	bne.n	80089cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a47      	ldr	r2, [pc, #284]	@ (8008ae4 <UART_Start_Receive_IT+0x234>)
 80089c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ca:	e002      	b.n	80089d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4a46      	ldr	r2, [pc, #280]	@ (8008ae8 <UART_Start_Receive_IT+0x238>)
 80089d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01a      	beq.n	8008a10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e4      	bne.n	80089da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_Start_Receive_IT+0x160>
 8008a44:	e046      	b.n	8008ad4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4e:	d107      	bne.n	8008a60 <UART_Start_Receive_IT+0x1b0>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4a24      	ldr	r2, [pc, #144]	@ (8008aec <UART_Start_Receive_IT+0x23c>)
 8008a5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a5e:	e002      	b.n	8008a66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a23      	ldr	r2, [pc, #140]	@ (8008af0 <UART_Start_Receive_IT+0x240>)
 8008a64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d019      	beq.n	8008aa2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a82:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e6      	bne.n	8008a6e <UART_Start_Receive_IT+0x1be>
 8008aa0:	e018      	b.n	8008ad4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f043 0320 	orr.w	r3, r3, #32
 8008ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ac0:	623b      	str	r3, [r7, #32]
 8008ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69f9      	ldr	r1, [r7, #28]
 8008ac6:	6a3a      	ldr	r2, [r7, #32]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	378c      	adds	r7, #140	@ 0x8c
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	08009319 	.word	0x08009319
 8008ae8:	08008fb5 	.word	0x08008fb5
 8008aec:	08008dfd 	.word	0x08008dfd
 8008af0:	08008c45 	.word	0x08008c45

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b095      	sub	sp, #84	@ 0x54
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e6      	bne.n	8008afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3308      	adds	r3, #8
 8008b50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d118      	bne.n	8008ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f023 0310 	bic.w	r3, r3, #16
 8008b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6979      	ldr	r1, [r7, #20]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e6      	bne.n	8008b6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bb4:	bf00      	nop
 8008bb6:	3754      	adds	r7, #84	@ 0x54
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f7ff f99a 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c08:	61fb      	str	r3, [r7, #28]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	61bb      	str	r3, [r7, #24]
 8008c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	6979      	ldr	r1, [r7, #20]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e6      	bne.n	8008bf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff f965 	bl	8007f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c3a:	bf00      	nop
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b09c      	sub	sp, #112	@ 0x70
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c52:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c5c:	2b22      	cmp	r3, #34	@ 0x22
 8008c5e:	f040 80be 	bne.w	8008dde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c70:	b2d9      	uxtb	r1, r3
 8008c72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7c:	400a      	ands	r2, r1
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 80a1 	bne.w	8008dee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ccc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e6      	bne.n	8008cac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf0:	f023 0301 	bic.w	r3, r3, #1
 8008cf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e5      	bne.n	8008cde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a33      	ldr	r2, [pc, #204]	@ (8008df8 <UART_RxISR_8BIT+0x1b4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d01f      	beq.n	8008d70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d018      	beq.n	8008d70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d52:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d12e      	bne.n	8008dd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0310 	bic.w	r3, r3, #16
 8008d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	617b      	str	r3, [r7, #20]
   return(result);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d103      	bne.n	8008dc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff f8ac 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dd4:	e00b      	b.n	8008dee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f8 fc2c 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8008ddc:	e007      	b.n	8008dee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0208 	orr.w	r2, r2, #8
 8008dec:	619a      	str	r2, [r3, #24]
}
 8008dee:	bf00      	nop
 8008df0:	3770      	adds	r7, #112	@ 0x70
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40008000 	.word	0x40008000

08008dfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b09c      	sub	sp, #112	@ 0x70
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e14:	2b22      	cmp	r3, #34	@ 0x22
 8008e16:	f040 80be 	bne.w	8008f96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e32:	4013      	ands	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f040 80a1 	bne.w	8008fa6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e78:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e5      	bne.n	8008e96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a33      	ldr	r2, [pc, #204]	@ (8008fb0 <UART_RxISR_16BIT+0x1b4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d01f      	beq.n	8008f28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d018      	beq.n	8008f28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e6      	bne.n	8008ef6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d12e      	bne.n	8008f8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f023 0310 	bic.w	r3, r3, #16
 8008f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6979      	ldr	r1, [r7, #20]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	613b      	str	r3, [r7, #16]
   return(result);
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0310 	and.w	r3, r3, #16
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	d103      	bne.n	8008f7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2210      	movs	r2, #16
 8008f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe ffd0 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f8c:	e00b      	b.n	8008fa6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7f8 fb50 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 8008f94:	e007      	b.n	8008fa6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699a      	ldr	r2, [r3, #24]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0208 	orr.w	r2, r2, #8
 8008fa4:	619a      	str	r2, [r3, #24]
}
 8008fa6:	bf00      	nop
 8008fa8:	3770      	adds	r7, #112	@ 0x70
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	40008000 	.word	0x40008000

08008fb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b0ac      	sub	sp, #176	@ 0xb0
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fea:	2b22      	cmp	r3, #34	@ 0x22
 8008fec:	f040 8183 	bne.w	80092f6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ff6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ffa:	e126      	b.n	800924a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009002:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009006:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800900a:	b2d9      	uxtb	r1, r3
 800900c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009010:	b2da      	uxtb	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009016:	400a      	ands	r2, r1
 8009018:	b2d2      	uxtb	r2, r2
 800901a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	2b00      	cmp	r3, #0
 800904c:	d053      	beq.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800904e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d011      	beq.n	800907e <UART_RxISR_8BIT_FIFOEN+0xca>
 800905a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800905e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00b      	beq.n	800907e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2201      	movs	r2, #1
 800906c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009074:	f043 0201 	orr.w	r2, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800907e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d011      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800908a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2202      	movs	r2, #2
 800909c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a4:	f043 0204 	orr.w	r2, r3, #4
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b2:	f003 0304 	and.w	r3, r3, #4
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00b      	beq.n	80090de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2204      	movs	r2, #4
 80090cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d4:	f043 0202 	orr.w	r2, r3, #2
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7fe ff15 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 80a3 	bne.w	800924a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009126:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009128:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800912c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e4      	bne.n	8009104 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800914a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800914c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3308      	adds	r3, #8
 800915e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009162:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009164:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009168:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e1      	bne.n	800913a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a60      	ldr	r2, [pc, #384]	@ (8009310 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d021      	beq.n	80091d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01a      	beq.n	80091d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80091c6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e4      	bne.n	80091a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d130      	bne.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	f023 0310 	bic.w	r3, r3, #16
 80091fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009208:	643b      	str	r3, [r7, #64]	@ 0x40
 800920a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800920e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b10      	cmp	r3, #16
 8009228:	d103      	bne.n	8009232 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2210      	movs	r2, #16
 8009230:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7fe fe76 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009240:	e00e      	b.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7f8 f9f6 	bl	8001634 <HAL_UART_RxCpltCallback>
        break;
 8009248:	e00a      	b.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800924a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800924e:	2b00      	cmp	r3, #0
 8009250:	d006      	beq.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	f47f aece 	bne.w	8008ffc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009266:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800926a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800926e:	2b00      	cmp	r3, #0
 8009270:	d049      	beq.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009278:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800927c:	429a      	cmp	r2, r3
 800927e:	d242      	bcs.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e3      	bne.n	8009280 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a16      	ldr	r2, [pc, #88]	@ (8009314 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80092bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f043 0320 	orr.w	r3, r3, #32
 80092d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6979      	ldr	r1, [r7, #20]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	613b      	str	r3, [r7, #16]
   return(result);
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e4      	bne.n	80092be <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092f4:	e007      	b.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f042 0208 	orr.w	r2, r2, #8
 8009304:	619a      	str	r2, [r3, #24]
}
 8009306:	bf00      	nop
 8009308:	37b0      	adds	r7, #176	@ 0xb0
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40008000 	.word	0x40008000
 8009314:	08008c45 	.word	0x08008c45

08009318 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b0ae      	sub	sp, #184	@ 0xb8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009326:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934e:	2b22      	cmp	r3, #34	@ 0x22
 8009350:	f040 8187 	bne.w	8009662 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800935a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800935e:	e12a      	b.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009366:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800936e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009372:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009376:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800937a:	4013      	ands	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009382:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009388:	1c9a      	adds	r2, r3, #2
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d053      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d011      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80093c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2201      	movs	r2, #1
 80093d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	f043 0201 	orr.w	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2202      	movs	r2, #2
 8009404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940c:	f043 0204 	orr.w	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d011      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2204      	movs	r2, #4
 8009434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943c:	f043 0202 	orr.w	r2, r3, #2
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944c:	2b00      	cmp	r3, #0
 800944e:	d006      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fe fd61 	bl	8007f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 80a5 	bne.w	80095b6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800947a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800947c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800948e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009492:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e2      	bne.n	800946c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094bc:	f023 0301 	bic.w	r3, r3, #1
 80094c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80094ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e1      	bne.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a60      	ldr	r2, [pc, #384]	@ (800967c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d021      	beq.n	8009544 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d01a      	beq.n	8009544 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800951c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800951e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009530:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009532:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800953e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e4      	bne.n	800950e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d130      	bne.n	80095ae <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009562:	f023 0310 	bic.w	r3, r3, #16
 8009566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009574:	647b      	str	r3, [r7, #68]	@ 0x44
 8009576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800957a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e4      	bne.n	8009552 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f003 0310 	and.w	r3, r3, #16
 8009592:	2b10      	cmp	r3, #16
 8009594:	d103      	bne.n	800959e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2210      	movs	r2, #16
 800959c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe fcc0 	bl	8007f2c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80095ac:	e00e      	b.n	80095cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7f8 f840 	bl	8001634 <HAL_UART_RxCpltCallback>
        break;
 80095b4:	e00a      	b.n	80095cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d006      	beq.n	80095cc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80095be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f47f aeca 	bne.w	8009360 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d049      	beq.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d242      	bcs.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3308      	adds	r3, #8
 80095f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	623b      	str	r3, [r7, #32]
   return(result);
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009610:	633a      	str	r2, [r7, #48]	@ 0x30
 8009612:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800961e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e3      	bne.n	80095ec <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009628:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60fb      	str	r3, [r7, #12]
   return(result);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f043 0320 	orr.w	r3, r3, #32
 800963e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	69b9      	ldr	r1, [r7, #24]
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	617b      	str	r3, [r7, #20]
   return(result);
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e4      	bne.n	800962a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009660:	e007      	b.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0208 	orr.w	r2, r2, #8
 8009670:	619a      	str	r2, [r3, #24]
}
 8009672:	bf00      	nop
 8009674:	37b8      	adds	r7, #184	@ 0xb8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	40008000 	.word	0x40008000
 8009680:	08008dfd 	.word	0x08008dfd

08009684 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80096d2:	2302      	movs	r3, #2
 80096d4:	e027      	b.n	8009726 <HAL_UARTEx_DisableFifoMode+0x66>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2224      	movs	r2, #36	@ 0x24
 80096e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009704:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2220      	movs	r2, #32
 8009718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009746:	2302      	movs	r3, #2
 8009748:	e02d      	b.n	80097a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2224      	movs	r2, #36	@ 0x24
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f850 	bl	800982c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e02d      	b.n	8009822 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2224      	movs	r2, #36	@ 0x24
 80097d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0201 	bic.w	r2, r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f812 	bl	800982c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009838:	2b00      	cmp	r3, #0
 800983a:	d108      	bne.n	800984e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800984c:	e031      	b.n	80098b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800984e:	2308      	movs	r3, #8
 8009850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009852:	2308      	movs	r3, #8
 8009854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0e5b      	lsrs	r3, r3, #25
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f003 0307 	and.w	r3, r3, #7
 8009864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	0f5b      	lsrs	r3, r3, #29
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	7b3a      	ldrb	r2, [r7, #12]
 800987a:	4911      	ldr	r1, [pc, #68]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x94>)
 800987c:	5c8a      	ldrb	r2, [r1, r2]
 800987e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009882:	7b3a      	ldrb	r2, [r7, #12]
 8009884:	490f      	ldr	r1, [pc, #60]	@ (80098c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009888:	fb93 f3f2 	sdiv	r3, r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	7b7a      	ldrb	r2, [r7, #13]
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x94>)
 800989a:	5c8a      	ldrb	r2, [r1, r2]
 800989c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098a0:	7b7a      	ldrb	r2, [r7, #13]
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <UARTEx_SetNbDataToProcess+0x98>)
 80098a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	0800c93c 	.word	0x0800c93c
 80098c4:	0800c944 	.word	0x0800c944

080098c8 <atoi>:
 80098c8:	220a      	movs	r2, #10
 80098ca:	2100      	movs	r1, #0
 80098cc:	f000 b87a 	b.w	80099c4 <strtol>

080098d0 <_strtol_l.constprop.0>:
 80098d0:	2b24      	cmp	r3, #36	@ 0x24
 80098d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d6:	4686      	mov	lr, r0
 80098d8:	4690      	mov	r8, r2
 80098da:	d801      	bhi.n	80098e0 <_strtol_l.constprop.0+0x10>
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d106      	bne.n	80098ee <_strtol_l.constprop.0+0x1e>
 80098e0:	f000 ff62 	bl	800a7a8 <__errno>
 80098e4:	2316      	movs	r3, #22
 80098e6:	6003      	str	r3, [r0, #0]
 80098e8:	2000      	movs	r0, #0
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ee:	4834      	ldr	r0, [pc, #208]	@ (80099c0 <_strtol_l.constprop.0+0xf0>)
 80098f0:	460d      	mov	r5, r1
 80098f2:	462a      	mov	r2, r5
 80098f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098f8:	5d06      	ldrb	r6, [r0, r4]
 80098fa:	f016 0608 	ands.w	r6, r6, #8
 80098fe:	d1f8      	bne.n	80098f2 <_strtol_l.constprop.0+0x22>
 8009900:	2c2d      	cmp	r4, #45	@ 0x2d
 8009902:	d12d      	bne.n	8009960 <_strtol_l.constprop.0+0x90>
 8009904:	782c      	ldrb	r4, [r5, #0]
 8009906:	2601      	movs	r6, #1
 8009908:	1c95      	adds	r5, r2, #2
 800990a:	f033 0210 	bics.w	r2, r3, #16
 800990e:	d109      	bne.n	8009924 <_strtol_l.constprop.0+0x54>
 8009910:	2c30      	cmp	r4, #48	@ 0x30
 8009912:	d12a      	bne.n	800996a <_strtol_l.constprop.0+0x9a>
 8009914:	782a      	ldrb	r2, [r5, #0]
 8009916:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800991a:	2a58      	cmp	r2, #88	@ 0x58
 800991c:	d125      	bne.n	800996a <_strtol_l.constprop.0+0x9a>
 800991e:	786c      	ldrb	r4, [r5, #1]
 8009920:	2310      	movs	r3, #16
 8009922:	3502      	adds	r5, #2
 8009924:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009928:	f10c 3cff 	add.w	ip, ip, #4294967295
 800992c:	2200      	movs	r2, #0
 800992e:	fbbc f9f3 	udiv	r9, ip, r3
 8009932:	4610      	mov	r0, r2
 8009934:	fb03 ca19 	mls	sl, r3, r9, ip
 8009938:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800993c:	2f09      	cmp	r7, #9
 800993e:	d81b      	bhi.n	8009978 <_strtol_l.constprop.0+0xa8>
 8009940:	463c      	mov	r4, r7
 8009942:	42a3      	cmp	r3, r4
 8009944:	dd27      	ble.n	8009996 <_strtol_l.constprop.0+0xc6>
 8009946:	1c57      	adds	r7, r2, #1
 8009948:	d007      	beq.n	800995a <_strtol_l.constprop.0+0x8a>
 800994a:	4581      	cmp	r9, r0
 800994c:	d320      	bcc.n	8009990 <_strtol_l.constprop.0+0xc0>
 800994e:	d101      	bne.n	8009954 <_strtol_l.constprop.0+0x84>
 8009950:	45a2      	cmp	sl, r4
 8009952:	db1d      	blt.n	8009990 <_strtol_l.constprop.0+0xc0>
 8009954:	fb00 4003 	mla	r0, r0, r3, r4
 8009958:	2201      	movs	r2, #1
 800995a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800995e:	e7eb      	b.n	8009938 <_strtol_l.constprop.0+0x68>
 8009960:	2c2b      	cmp	r4, #43	@ 0x2b
 8009962:	bf04      	itt	eq
 8009964:	782c      	ldrbeq	r4, [r5, #0]
 8009966:	1c95      	addeq	r5, r2, #2
 8009968:	e7cf      	b.n	800990a <_strtol_l.constprop.0+0x3a>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1da      	bne.n	8009924 <_strtol_l.constprop.0+0x54>
 800996e:	2c30      	cmp	r4, #48	@ 0x30
 8009970:	bf0c      	ite	eq
 8009972:	2308      	moveq	r3, #8
 8009974:	230a      	movne	r3, #10
 8009976:	e7d5      	b.n	8009924 <_strtol_l.constprop.0+0x54>
 8009978:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800997c:	2f19      	cmp	r7, #25
 800997e:	d801      	bhi.n	8009984 <_strtol_l.constprop.0+0xb4>
 8009980:	3c37      	subs	r4, #55	@ 0x37
 8009982:	e7de      	b.n	8009942 <_strtol_l.constprop.0+0x72>
 8009984:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009988:	2f19      	cmp	r7, #25
 800998a:	d804      	bhi.n	8009996 <_strtol_l.constprop.0+0xc6>
 800998c:	3c57      	subs	r4, #87	@ 0x57
 800998e:	e7d8      	b.n	8009942 <_strtol_l.constprop.0+0x72>
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	e7e1      	b.n	800995a <_strtol_l.constprop.0+0x8a>
 8009996:	1c53      	adds	r3, r2, #1
 8009998:	d108      	bne.n	80099ac <_strtol_l.constprop.0+0xdc>
 800999a:	2322      	movs	r3, #34	@ 0x22
 800999c:	f8ce 3000 	str.w	r3, [lr]
 80099a0:	4660      	mov	r0, ip
 80099a2:	f1b8 0f00 	cmp.w	r8, #0
 80099a6:	d0a0      	beq.n	80098ea <_strtol_l.constprop.0+0x1a>
 80099a8:	1e69      	subs	r1, r5, #1
 80099aa:	e006      	b.n	80099ba <_strtol_l.constprop.0+0xea>
 80099ac:	b106      	cbz	r6, 80099b0 <_strtol_l.constprop.0+0xe0>
 80099ae:	4240      	negs	r0, r0
 80099b0:	f1b8 0f00 	cmp.w	r8, #0
 80099b4:	d099      	beq.n	80098ea <_strtol_l.constprop.0+0x1a>
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	d1f6      	bne.n	80099a8 <_strtol_l.constprop.0+0xd8>
 80099ba:	f8c8 1000 	str.w	r1, [r8]
 80099be:	e794      	b.n	80098ea <_strtol_l.constprop.0+0x1a>
 80099c0:	0800c94d 	.word	0x0800c94d

080099c4 <strtol>:
 80099c4:	4613      	mov	r3, r2
 80099c6:	460a      	mov	r2, r1
 80099c8:	4601      	mov	r1, r0
 80099ca:	4802      	ldr	r0, [pc, #8]	@ (80099d4 <strtol+0x10>)
 80099cc:	6800      	ldr	r0, [r0, #0]
 80099ce:	f7ff bf7f 	b.w	80098d0 <_strtol_l.constprop.0>
 80099d2:	bf00      	nop
 80099d4:	20000018 	.word	0x20000018

080099d8 <__cvt>:
 80099d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	ec57 6b10 	vmov	r6, r7, d0
 80099e0:	2f00      	cmp	r7, #0
 80099e2:	460c      	mov	r4, r1
 80099e4:	4619      	mov	r1, r3
 80099e6:	463b      	mov	r3, r7
 80099e8:	bfbb      	ittet	lt
 80099ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099ee:	461f      	movlt	r7, r3
 80099f0:	2300      	movge	r3, #0
 80099f2:	232d      	movlt	r3, #45	@ 0x2d
 80099f4:	700b      	strb	r3, [r1, #0]
 80099f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099fc:	4691      	mov	r9, r2
 80099fe:	f023 0820 	bic.w	r8, r3, #32
 8009a02:	bfbc      	itt	lt
 8009a04:	4632      	movlt	r2, r6
 8009a06:	4616      	movlt	r6, r2
 8009a08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a0c:	d005      	beq.n	8009a1a <__cvt+0x42>
 8009a0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a12:	d100      	bne.n	8009a16 <__cvt+0x3e>
 8009a14:	3401      	adds	r4, #1
 8009a16:	2102      	movs	r1, #2
 8009a18:	e000      	b.n	8009a1c <__cvt+0x44>
 8009a1a:	2103      	movs	r1, #3
 8009a1c:	ab03      	add	r3, sp, #12
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	ab02      	add	r3, sp, #8
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	ec47 6b10 	vmov	d0, r6, r7
 8009a28:	4653      	mov	r3, sl
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	f000 ff74 	bl	800a918 <_dtoa_r>
 8009a30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a34:	4605      	mov	r5, r0
 8009a36:	d119      	bne.n	8009a6c <__cvt+0x94>
 8009a38:	f019 0f01 	tst.w	r9, #1
 8009a3c:	d00e      	beq.n	8009a5c <__cvt+0x84>
 8009a3e:	eb00 0904 	add.w	r9, r0, r4
 8009a42:	2200      	movs	r2, #0
 8009a44:	2300      	movs	r3, #0
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f7 f875 	bl	8000b38 <__aeabi_dcmpeq>
 8009a4e:	b108      	cbz	r0, 8009a54 <__cvt+0x7c>
 8009a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a54:	2230      	movs	r2, #48	@ 0x30
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	454b      	cmp	r3, r9
 8009a5a:	d31e      	bcc.n	8009a9a <__cvt+0xc2>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a60:	1b5b      	subs	r3, r3, r5
 8009a62:	4628      	mov	r0, r5
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	b004      	add	sp, #16
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a70:	eb00 0904 	add.w	r9, r0, r4
 8009a74:	d1e5      	bne.n	8009a42 <__cvt+0x6a>
 8009a76:	7803      	ldrb	r3, [r0, #0]
 8009a78:	2b30      	cmp	r3, #48	@ 0x30
 8009a7a:	d10a      	bne.n	8009a92 <__cvt+0xba>
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f7 f858 	bl	8000b38 <__aeabi_dcmpeq>
 8009a88:	b918      	cbnz	r0, 8009a92 <__cvt+0xba>
 8009a8a:	f1c4 0401 	rsb	r4, r4, #1
 8009a8e:	f8ca 4000 	str.w	r4, [sl]
 8009a92:	f8da 3000 	ldr.w	r3, [sl]
 8009a96:	4499      	add	r9, r3
 8009a98:	e7d3      	b.n	8009a42 <__cvt+0x6a>
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	9103      	str	r1, [sp, #12]
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e7d9      	b.n	8009a56 <__cvt+0x7e>

08009aa2 <__exponent>:
 8009aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	bfba      	itte	lt
 8009aa8:	4249      	neglt	r1, r1
 8009aaa:	232d      	movlt	r3, #45	@ 0x2d
 8009aac:	232b      	movge	r3, #43	@ 0x2b
 8009aae:	2909      	cmp	r1, #9
 8009ab0:	7002      	strb	r2, [r0, #0]
 8009ab2:	7043      	strb	r3, [r0, #1]
 8009ab4:	dd29      	ble.n	8009b0a <__exponent+0x68>
 8009ab6:	f10d 0307 	add.w	r3, sp, #7
 8009aba:	461d      	mov	r5, r3
 8009abc:	270a      	movs	r7, #10
 8009abe:	461a      	mov	r2, r3
 8009ac0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ac4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ac8:	3430      	adds	r4, #48	@ 0x30
 8009aca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2c63      	cmp	r4, #99	@ 0x63
 8009ad2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	dcf1      	bgt.n	8009abe <__exponent+0x1c>
 8009ada:	3130      	adds	r1, #48	@ 0x30
 8009adc:	1e94      	subs	r4, r2, #2
 8009ade:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ae2:	1c41      	adds	r1, r0, #1
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	42ab      	cmp	r3, r5
 8009ae8:	d30a      	bcc.n	8009b00 <__exponent+0x5e>
 8009aea:	f10d 0309 	add.w	r3, sp, #9
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	42ac      	cmp	r4, r5
 8009af2:	bf88      	it	hi
 8009af4:	2300      	movhi	r3, #0
 8009af6:	3302      	adds	r3, #2
 8009af8:	4403      	add	r3, r0
 8009afa:	1a18      	subs	r0, r3, r0
 8009afc:	b003      	add	sp, #12
 8009afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b08:	e7ed      	b.n	8009ae6 <__exponent+0x44>
 8009b0a:	2330      	movs	r3, #48	@ 0x30
 8009b0c:	3130      	adds	r1, #48	@ 0x30
 8009b0e:	7083      	strb	r3, [r0, #2]
 8009b10:	70c1      	strb	r1, [r0, #3]
 8009b12:	1d03      	adds	r3, r0, #4
 8009b14:	e7f1      	b.n	8009afa <__exponent+0x58>
	...

08009b18 <_printf_float>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	b08d      	sub	sp, #52	@ 0x34
 8009b1e:	460c      	mov	r4, r1
 8009b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b24:	4616      	mov	r6, r2
 8009b26:	461f      	mov	r7, r3
 8009b28:	4605      	mov	r5, r0
 8009b2a:	f000 fdf3 	bl	800a714 <_localeconv_r>
 8009b2e:	6803      	ldr	r3, [r0, #0]
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f6 fbd4 	bl	80002e0 <strlen>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b40:	9005      	str	r0, [sp, #20]
 8009b42:	3307      	adds	r3, #7
 8009b44:	f023 0307 	bic.w	r3, r3, #7
 8009b48:	f103 0208 	add.w	r2, r3, #8
 8009b4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b50:	f8d4 b000 	ldr.w	fp, [r4]
 8009b54:	f8c8 2000 	str.w	r2, [r8]
 8009b58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b60:	9307      	str	r3, [sp, #28]
 8009b62:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b6e:	4b9c      	ldr	r3, [pc, #624]	@ (8009de0 <_printf_float+0x2c8>)
 8009b70:	f04f 32ff 	mov.w	r2, #4294967295
 8009b74:	f7f7 f812 	bl	8000b9c <__aeabi_dcmpun>
 8009b78:	bb70      	cbnz	r0, 8009bd8 <_printf_float+0xc0>
 8009b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b7e:	4b98      	ldr	r3, [pc, #608]	@ (8009de0 <_printf_float+0x2c8>)
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	f7f6 ffec 	bl	8000b60 <__aeabi_dcmple>
 8009b88:	bb30      	cbnz	r0, 8009bd8 <_printf_float+0xc0>
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	f7f6 ffdb 	bl	8000b4c <__aeabi_dcmplt>
 8009b96:	b110      	cbz	r0, 8009b9e <_printf_float+0x86>
 8009b98:	232d      	movs	r3, #45	@ 0x2d
 8009b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9e:	4a91      	ldr	r2, [pc, #580]	@ (8009de4 <_printf_float+0x2cc>)
 8009ba0:	4b91      	ldr	r3, [pc, #580]	@ (8009de8 <_printf_float+0x2d0>)
 8009ba2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ba6:	bf94      	ite	ls
 8009ba8:	4690      	movls	r8, r2
 8009baa:	4698      	movhi	r8, r3
 8009bac:	2303      	movs	r3, #3
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	f02b 0304 	bic.w	r3, fp, #4
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	f04f 0900 	mov.w	r9, #0
 8009bba:	9700      	str	r7, [sp, #0]
 8009bbc:	4633      	mov	r3, r6
 8009bbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 f9d2 	bl	8009f6c <_printf_common>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	f040 808d 	bne.w	8009ce8 <_printf_float+0x1d0>
 8009bce:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd2:	b00d      	add	sp, #52	@ 0x34
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7f6 ffdc 	bl	8000b9c <__aeabi_dcmpun>
 8009be4:	b140      	cbz	r0, 8009bf8 <_printf_float+0xe0>
 8009be6:	464b      	mov	r3, r9
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfbc      	itt	lt
 8009bec:	232d      	movlt	r3, #45	@ 0x2d
 8009bee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8009dec <_printf_float+0x2d4>)
 8009bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8009df0 <_printf_float+0x2d8>)
 8009bf6:	e7d4      	b.n	8009ba2 <_printf_float+0x8a>
 8009bf8:	6863      	ldr	r3, [r4, #4]
 8009bfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bfe:	9206      	str	r2, [sp, #24]
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	d13b      	bne.n	8009c7c <_printf_float+0x164>
 8009c04:	2306      	movs	r3, #6
 8009c06:	6063      	str	r3, [r4, #4]
 8009c08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	9303      	str	r3, [sp, #12]
 8009c12:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c18:	ab09      	add	r3, sp, #36	@ 0x24
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	ec49 8b10 	vmov	d0, r8, r9
 8009c22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7ff fed6 	bl	80099d8 <__cvt>
 8009c2c:	9b06      	ldr	r3, [sp, #24]
 8009c2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c30:	2b47      	cmp	r3, #71	@ 0x47
 8009c32:	4680      	mov	r8, r0
 8009c34:	d129      	bne.n	8009c8a <_printf_float+0x172>
 8009c36:	1cc8      	adds	r0, r1, #3
 8009c38:	db02      	blt.n	8009c40 <_printf_float+0x128>
 8009c3a:	6863      	ldr	r3, [r4, #4]
 8009c3c:	4299      	cmp	r1, r3
 8009c3e:	dd41      	ble.n	8009cc4 <_printf_float+0x1ac>
 8009c40:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c44:	fa5f fa8a 	uxtb.w	sl, sl
 8009c48:	3901      	subs	r1, #1
 8009c4a:	4652      	mov	r2, sl
 8009c4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c50:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c52:	f7ff ff26 	bl	8009aa2 <__exponent>
 8009c56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c58:	1813      	adds	r3, r2, r0
 8009c5a:	2a01      	cmp	r2, #1
 8009c5c:	4681      	mov	r9, r0
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	dc02      	bgt.n	8009c68 <_printf_float+0x150>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	07d2      	lsls	r2, r2, #31
 8009c66:	d501      	bpl.n	8009c6c <_printf_float+0x154>
 8009c68:	3301      	adds	r3, #1
 8009c6a:	6123      	str	r3, [r4, #16]
 8009c6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0a2      	beq.n	8009bba <_printf_float+0xa2>
 8009c74:	232d      	movs	r3, #45	@ 0x2d
 8009c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c7a:	e79e      	b.n	8009bba <_printf_float+0xa2>
 8009c7c:	9a06      	ldr	r2, [sp, #24]
 8009c7e:	2a47      	cmp	r2, #71	@ 0x47
 8009c80:	d1c2      	bne.n	8009c08 <_printf_float+0xf0>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1c0      	bne.n	8009c08 <_printf_float+0xf0>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e7bd      	b.n	8009c06 <_printf_float+0xee>
 8009c8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c8e:	d9db      	bls.n	8009c48 <_printf_float+0x130>
 8009c90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c94:	d118      	bne.n	8009cc8 <_printf_float+0x1b0>
 8009c96:	2900      	cmp	r1, #0
 8009c98:	6863      	ldr	r3, [r4, #4]
 8009c9a:	dd0b      	ble.n	8009cb4 <_printf_float+0x19c>
 8009c9c:	6121      	str	r1, [r4, #16]
 8009c9e:	b913      	cbnz	r3, 8009ca6 <_printf_float+0x18e>
 8009ca0:	6822      	ldr	r2, [r4, #0]
 8009ca2:	07d0      	lsls	r0, r2, #31
 8009ca4:	d502      	bpl.n	8009cac <_printf_float+0x194>
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	440b      	add	r3, r1
 8009caa:	6123      	str	r3, [r4, #16]
 8009cac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cae:	f04f 0900 	mov.w	r9, #0
 8009cb2:	e7db      	b.n	8009c6c <_printf_float+0x154>
 8009cb4:	b913      	cbnz	r3, 8009cbc <_printf_float+0x1a4>
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	07d2      	lsls	r2, r2, #31
 8009cba:	d501      	bpl.n	8009cc0 <_printf_float+0x1a8>
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	e7f4      	b.n	8009caa <_printf_float+0x192>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e7f2      	b.n	8009caa <_printf_float+0x192>
 8009cc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	db05      	blt.n	8009cda <_printf_float+0x1c2>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	6121      	str	r1, [r4, #16]
 8009cd2:	07d8      	lsls	r0, r3, #31
 8009cd4:	d5ea      	bpl.n	8009cac <_printf_float+0x194>
 8009cd6:	1c4b      	adds	r3, r1, #1
 8009cd8:	e7e7      	b.n	8009caa <_printf_float+0x192>
 8009cda:	2900      	cmp	r1, #0
 8009cdc:	bfd4      	ite	le
 8009cde:	f1c1 0202 	rsble	r2, r1, #2
 8009ce2:	2201      	movgt	r2, #1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	e7e0      	b.n	8009caa <_printf_float+0x192>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	055a      	lsls	r2, r3, #21
 8009cec:	d407      	bmi.n	8009cfe <_printf_float+0x1e6>
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d12b      	bne.n	8009d54 <_printf_float+0x23c>
 8009cfc:	e767      	b.n	8009bce <_printf_float+0xb6>
 8009cfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d02:	f240 80dd 	bls.w	8009ec0 <_printf_float+0x3a8>
 8009d06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f7f6 ff13 	bl	8000b38 <__aeabi_dcmpeq>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d033      	beq.n	8009d7e <_printf_float+0x266>
 8009d16:	4a37      	ldr	r2, [pc, #220]	@ (8009df4 <_printf_float+0x2dc>)
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b8      	blx	r7
 8009d20:	3001      	adds	r0, #1
 8009d22:	f43f af54 	beq.w	8009bce <_printf_float+0xb6>
 8009d26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d2a:	4543      	cmp	r3, r8
 8009d2c:	db02      	blt.n	8009d34 <_printf_float+0x21c>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	07d8      	lsls	r0, r3, #31
 8009d32:	d50f      	bpl.n	8009d54 <_printf_float+0x23c>
 8009d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f af45 	beq.w	8009bce <_printf_float+0xb6>
 8009d44:	f04f 0900 	mov.w	r9, #0
 8009d48:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d4c:	f104 0a1a 	add.w	sl, r4, #26
 8009d50:	45c8      	cmp	r8, r9
 8009d52:	dc09      	bgt.n	8009d68 <_printf_float+0x250>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	079b      	lsls	r3, r3, #30
 8009d58:	f100 8103 	bmi.w	8009f62 <_printf_float+0x44a>
 8009d5c:	68e0      	ldr	r0, [r4, #12]
 8009d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d60:	4298      	cmp	r0, r3
 8009d62:	bfb8      	it	lt
 8009d64:	4618      	movlt	r0, r3
 8009d66:	e734      	b.n	8009bd2 <_printf_float+0xba>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	f43f af2b 	beq.w	8009bce <_printf_float+0xb6>
 8009d78:	f109 0901 	add.w	r9, r9, #1
 8009d7c:	e7e8      	b.n	8009d50 <_printf_float+0x238>
 8009d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dc39      	bgt.n	8009df8 <_printf_float+0x2e0>
 8009d84:	4a1b      	ldr	r2, [pc, #108]	@ (8009df4 <_printf_float+0x2dc>)
 8009d86:	2301      	movs	r3, #1
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f43f af1d 	beq.w	8009bce <_printf_float+0xb6>
 8009d94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d98:	ea59 0303 	orrs.w	r3, r9, r3
 8009d9c:	d102      	bne.n	8009da4 <_printf_float+0x28c>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	07d9      	lsls	r1, r3, #31
 8009da2:	d5d7      	bpl.n	8009d54 <_printf_float+0x23c>
 8009da4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f af0d 	beq.w	8009bce <_printf_float+0xb6>
 8009db4:	f04f 0a00 	mov.w	sl, #0
 8009db8:	f104 0b1a 	add.w	fp, r4, #26
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	425b      	negs	r3, r3
 8009dc0:	4553      	cmp	r3, sl
 8009dc2:	dc01      	bgt.n	8009dc8 <_printf_float+0x2b0>
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	e793      	b.n	8009cf0 <_printf_float+0x1d8>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	465a      	mov	r2, fp
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f43f aefb 	beq.w	8009bce <_printf_float+0xb6>
 8009dd8:	f10a 0a01 	add.w	sl, sl, #1
 8009ddc:	e7ee      	b.n	8009dbc <_printf_float+0x2a4>
 8009dde:	bf00      	nop
 8009de0:	7fefffff 	.word	0x7fefffff
 8009de4:	0800ca4d 	.word	0x0800ca4d
 8009de8:	0800ca51 	.word	0x0800ca51
 8009dec:	0800ca55 	.word	0x0800ca55
 8009df0:	0800ca59 	.word	0x0800ca59
 8009df4:	0800ca5d 	.word	0x0800ca5d
 8009df8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dfe:	4553      	cmp	r3, sl
 8009e00:	bfa8      	it	ge
 8009e02:	4653      	movge	r3, sl
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	4699      	mov	r9, r3
 8009e08:	dc36      	bgt.n	8009e78 <_printf_float+0x360>
 8009e0a:	f04f 0b00 	mov.w	fp, #0
 8009e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e12:	f104 021a 	add.w	r2, r4, #26
 8009e16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e18:	9306      	str	r3, [sp, #24]
 8009e1a:	eba3 0309 	sub.w	r3, r3, r9
 8009e1e:	455b      	cmp	r3, fp
 8009e20:	dc31      	bgt.n	8009e86 <_printf_float+0x36e>
 8009e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e24:	459a      	cmp	sl, r3
 8009e26:	dc3a      	bgt.n	8009e9e <_printf_float+0x386>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07da      	lsls	r2, r3, #31
 8009e2c:	d437      	bmi.n	8009e9e <_printf_float+0x386>
 8009e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e30:	ebaa 0903 	sub.w	r9, sl, r3
 8009e34:	9b06      	ldr	r3, [sp, #24]
 8009e36:	ebaa 0303 	sub.w	r3, sl, r3
 8009e3a:	4599      	cmp	r9, r3
 8009e3c:	bfa8      	it	ge
 8009e3e:	4699      	movge	r9, r3
 8009e40:	f1b9 0f00 	cmp.w	r9, #0
 8009e44:	dc33      	bgt.n	8009eae <_printf_float+0x396>
 8009e46:	f04f 0800 	mov.w	r8, #0
 8009e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e4e:	f104 0b1a 	add.w	fp, r4, #26
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	ebaa 0303 	sub.w	r3, sl, r3
 8009e58:	eba3 0309 	sub.w	r3, r3, r9
 8009e5c:	4543      	cmp	r3, r8
 8009e5e:	f77f af79 	ble.w	8009d54 <_printf_float+0x23c>
 8009e62:	2301      	movs	r3, #1
 8009e64:	465a      	mov	r2, fp
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f aeae 	beq.w	8009bce <_printf_float+0xb6>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	e7ec      	b.n	8009e52 <_printf_float+0x33a>
 8009e78:	4642      	mov	r2, r8
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1c2      	bne.n	8009e0a <_printf_float+0x2f2>
 8009e84:	e6a3      	b.n	8009bce <_printf_float+0xb6>
 8009e86:	2301      	movs	r3, #1
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	9206      	str	r2, [sp, #24]
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	f43f ae9c 	beq.w	8009bce <_printf_float+0xb6>
 8009e96:	9a06      	ldr	r2, [sp, #24]
 8009e98:	f10b 0b01 	add.w	fp, fp, #1
 8009e9c:	e7bb      	b.n	8009e16 <_printf_float+0x2fe>
 8009e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d1c0      	bne.n	8009e2e <_printf_float+0x316>
 8009eac:	e68f      	b.n	8009bce <_printf_float+0xb6>
 8009eae:	9a06      	ldr	r2, [sp, #24]
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4442      	add	r2, r8
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	47b8      	blx	r7
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d1c3      	bne.n	8009e46 <_printf_float+0x32e>
 8009ebe:	e686      	b.n	8009bce <_printf_float+0xb6>
 8009ec0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ec4:	f1ba 0f01 	cmp.w	sl, #1
 8009ec8:	dc01      	bgt.n	8009ece <_printf_float+0x3b6>
 8009eca:	07db      	lsls	r3, r3, #31
 8009ecc:	d536      	bpl.n	8009f3c <_printf_float+0x424>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f ae78 	beq.w	8009bce <_printf_float+0xb6>
 8009ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f ae70 	beq.w	8009bce <_printf_float+0xb6>
 8009eee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009efa:	f7f6 fe1d 	bl	8000b38 <__aeabi_dcmpeq>
 8009efe:	b9c0      	cbnz	r0, 8009f32 <_printf_float+0x41a>
 8009f00:	4653      	mov	r3, sl
 8009f02:	f108 0201 	add.w	r2, r8, #1
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d10c      	bne.n	8009f2a <_printf_float+0x412>
 8009f10:	e65d      	b.n	8009bce <_printf_float+0xb6>
 8009f12:	2301      	movs	r3, #1
 8009f14:	465a      	mov	r2, fp
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	f43f ae56 	beq.w	8009bce <_printf_float+0xb6>
 8009f22:	f108 0801 	add.w	r8, r8, #1
 8009f26:	45d0      	cmp	r8, sl
 8009f28:	dbf3      	blt.n	8009f12 <_printf_float+0x3fa>
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f30:	e6df      	b.n	8009cf2 <_printf_float+0x1da>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 0b1a 	add.w	fp, r4, #26
 8009f3a:	e7f4      	b.n	8009f26 <_printf_float+0x40e>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4642      	mov	r2, r8
 8009f40:	e7e1      	b.n	8009f06 <_printf_float+0x3ee>
 8009f42:	2301      	movs	r3, #1
 8009f44:	464a      	mov	r2, r9
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae3e 	beq.w	8009bce <_printf_float+0xb6>
 8009f52:	f108 0801 	add.w	r8, r8, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcf0      	bgt.n	8009f42 <_printf_float+0x42a>
 8009f60:	e6fc      	b.n	8009d5c <_printf_float+0x244>
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	f104 0919 	add.w	r9, r4, #25
 8009f6a:	e7f4      	b.n	8009f56 <_printf_float+0x43e>

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4698      	mov	r8, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc26      	bgt.n	800a002 <_printf_common+0x96>
 8009fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	3b00      	subs	r3, #0
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42b      	bmi.n	800a01c <_printf_common+0xb0>
 8009fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fc8:	4641      	mov	r1, r8
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c8      	blx	r9
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d01e      	beq.n	800a010 <_printf_common+0xa4>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	f003 0306 	and.w	r3, r3, #6
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	bf02      	ittt	eq
 8009fde:	68e5      	ldreq	r5, [r4, #12]
 8009fe0:	6833      	ldreq	r3, [r6, #0]
 8009fe2:	1aed      	subeq	r5, r5, r3
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	341a      	adds	r4, #26
 8009ffa:	42b5      	cmp	r5, r6
 8009ffc:	d11a      	bne.n	800a034 <_printf_common+0xc8>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e008      	b.n	800a014 <_printf_common+0xa8>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4641      	mov	r1, r8
 800a008:	4638      	mov	r0, r7
 800a00a:	47c8      	blx	r9
 800a00c:	3001      	adds	r0, #1
 800a00e:	d103      	bne.n	800a018 <_printf_common+0xac>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	e7c6      	b.n	8009faa <_printf_common+0x3e>
 800a01c:	18e1      	adds	r1, r4, r3
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	2030      	movs	r0, #48	@ 0x30
 800a022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a026:	4422      	add	r2, r4
 800a028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a02c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a030:	3302      	adds	r3, #2
 800a032:	e7c7      	b.n	8009fc4 <_printf_common+0x58>
 800a034:	2301      	movs	r3, #1
 800a036:	4622      	mov	r2, r4
 800a038:	4641      	mov	r1, r8
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c8      	blx	r9
 800a03e:	3001      	adds	r0, #1
 800a040:	d0e6      	beq.n	800a010 <_printf_common+0xa4>
 800a042:	3601      	adds	r6, #1
 800a044:	e7d9      	b.n	8009ffa <_printf_common+0x8e>
	...

0800a048 <_printf_i>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	7e0f      	ldrb	r7, [r1, #24]
 800a04e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a050:	2f78      	cmp	r7, #120	@ 0x78
 800a052:	4691      	mov	r9, r2
 800a054:	4680      	mov	r8, r0
 800a056:	460c      	mov	r4, r1
 800a058:	469a      	mov	sl, r3
 800a05a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a05e:	d807      	bhi.n	800a070 <_printf_i+0x28>
 800a060:	2f62      	cmp	r7, #98	@ 0x62
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x32>
 800a064:	2f00      	cmp	r7, #0
 800a066:	f000 80d2 	beq.w	800a20e <_printf_i+0x1c6>
 800a06a:	2f58      	cmp	r7, #88	@ 0x58
 800a06c:	f000 80b9 	beq.w	800a1e2 <_printf_i+0x19a>
 800a070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a078:	e03a      	b.n	800a0f0 <_printf_i+0xa8>
 800a07a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a07e:	2b15      	cmp	r3, #21
 800a080:	d8f6      	bhi.n	800a070 <_printf_i+0x28>
 800a082:	a101      	add	r1, pc, #4	@ (adr r1, 800a088 <_printf_i+0x40>)
 800a084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a071 	.word	0x0800a071
 800a094:	0800a071 	.word	0x0800a071
 800a098:	0800a071 	.word	0x0800a071
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a071 	.word	0x0800a071
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a1f5 	.word	0x0800a1f5
 800a0b8:	0800a11f 	.word	0x0800a11f
 800a0bc:	0800a1af 	.word	0x0800a1af
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a071 	.word	0x0800a071
 800a0c8:	0800a217 	.word	0x0800a217
 800a0cc:	0800a071 	.word	0x0800a071
 800a0d0:	0800a11f 	.word	0x0800a11f
 800a0d4:	0800a071 	.word	0x0800a071
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a1b7 	.word	0x0800a1b7
 800a0e0:	6833      	ldr	r3, [r6, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6032      	str	r2, [r6, #0]
 800a0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e09d      	b.n	800a230 <_printf_i+0x1e8>
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	6820      	ldr	r0, [r4, #0]
 800a0f8:	1d19      	adds	r1, r3, #4
 800a0fa:	6031      	str	r1, [r6, #0]
 800a0fc:	0606      	lsls	r6, r0, #24
 800a0fe:	d501      	bpl.n	800a104 <_printf_i+0xbc>
 800a100:	681d      	ldr	r5, [r3, #0]
 800a102:	e003      	b.n	800a10c <_printf_i+0xc4>
 800a104:	0645      	lsls	r5, r0, #25
 800a106:	d5fb      	bpl.n	800a100 <_printf_i+0xb8>
 800a108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	da03      	bge.n	800a118 <_printf_i+0xd0>
 800a110:	232d      	movs	r3, #45	@ 0x2d
 800a112:	426d      	negs	r5, r5
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a118:	4859      	ldr	r0, [pc, #356]	@ (800a280 <_printf_i+0x238>)
 800a11a:	230a      	movs	r3, #10
 800a11c:	e011      	b.n	800a142 <_printf_i+0xfa>
 800a11e:	6821      	ldr	r1, [r4, #0]
 800a120:	6833      	ldr	r3, [r6, #0]
 800a122:	0608      	lsls	r0, r1, #24
 800a124:	f853 5b04 	ldr.w	r5, [r3], #4
 800a128:	d402      	bmi.n	800a130 <_printf_i+0xe8>
 800a12a:	0649      	lsls	r1, r1, #25
 800a12c:	bf48      	it	mi
 800a12e:	b2ad      	uxthmi	r5, r5
 800a130:	2f6f      	cmp	r7, #111	@ 0x6f
 800a132:	4853      	ldr	r0, [pc, #332]	@ (800a280 <_printf_i+0x238>)
 800a134:	6033      	str	r3, [r6, #0]
 800a136:	bf14      	ite	ne
 800a138:	230a      	movne	r3, #10
 800a13a:	2308      	moveq	r3, #8
 800a13c:	2100      	movs	r1, #0
 800a13e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a142:	6866      	ldr	r6, [r4, #4]
 800a144:	60a6      	str	r6, [r4, #8]
 800a146:	2e00      	cmp	r6, #0
 800a148:	bfa2      	ittt	ge
 800a14a:	6821      	ldrge	r1, [r4, #0]
 800a14c:	f021 0104 	bicge.w	r1, r1, #4
 800a150:	6021      	strge	r1, [r4, #0]
 800a152:	b90d      	cbnz	r5, 800a158 <_printf_i+0x110>
 800a154:	2e00      	cmp	r6, #0
 800a156:	d04b      	beq.n	800a1f0 <_printf_i+0x1a8>
 800a158:	4616      	mov	r6, r2
 800a15a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a15e:	fb03 5711 	mls	r7, r3, r1, r5
 800a162:	5dc7      	ldrb	r7, [r0, r7]
 800a164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a168:	462f      	mov	r7, r5
 800a16a:	42bb      	cmp	r3, r7
 800a16c:	460d      	mov	r5, r1
 800a16e:	d9f4      	bls.n	800a15a <_printf_i+0x112>
 800a170:	2b08      	cmp	r3, #8
 800a172:	d10b      	bne.n	800a18c <_printf_i+0x144>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	07df      	lsls	r7, r3, #31
 800a178:	d508      	bpl.n	800a18c <_printf_i+0x144>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4299      	cmp	r1, r3
 800a180:	bfde      	ittt	le
 800a182:	2330      	movle	r3, #48	@ 0x30
 800a184:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a18c:	1b92      	subs	r2, r2, r6
 800a18e:	6122      	str	r2, [r4, #16]
 800a190:	f8cd a000 	str.w	sl, [sp]
 800a194:	464b      	mov	r3, r9
 800a196:	aa03      	add	r2, sp, #12
 800a198:	4621      	mov	r1, r4
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff fee6 	bl	8009f6c <_printf_common>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d14a      	bne.n	800a23a <_printf_i+0x1f2>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	b004      	add	sp, #16
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	f043 0320 	orr.w	r3, r3, #32
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	4833      	ldr	r0, [pc, #204]	@ (800a284 <_printf_i+0x23c>)
 800a1b8:	2778      	movs	r7, #120	@ 0x78
 800a1ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6831      	ldr	r1, [r6, #0]
 800a1c2:	061f      	lsls	r7, r3, #24
 800a1c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1c8:	d402      	bmi.n	800a1d0 <_printf_i+0x188>
 800a1ca:	065f      	lsls	r7, r3, #25
 800a1cc:	bf48      	it	mi
 800a1ce:	b2ad      	uxthmi	r5, r5
 800a1d0:	6031      	str	r1, [r6, #0]
 800a1d2:	07d9      	lsls	r1, r3, #31
 800a1d4:	bf44      	itt	mi
 800a1d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1da:	6023      	strmi	r3, [r4, #0]
 800a1dc:	b11d      	cbz	r5, 800a1e6 <_printf_i+0x19e>
 800a1de:	2310      	movs	r3, #16
 800a1e0:	e7ac      	b.n	800a13c <_printf_i+0xf4>
 800a1e2:	4827      	ldr	r0, [pc, #156]	@ (800a280 <_printf_i+0x238>)
 800a1e4:	e7e9      	b.n	800a1ba <_printf_i+0x172>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	f023 0320 	bic.w	r3, r3, #32
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	e7f6      	b.n	800a1de <_printf_i+0x196>
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	e7bd      	b.n	800a170 <_printf_i+0x128>
 800a1f4:	6833      	ldr	r3, [r6, #0]
 800a1f6:	6825      	ldr	r5, [r4, #0]
 800a1f8:	6961      	ldr	r1, [r4, #20]
 800a1fa:	1d18      	adds	r0, r3, #4
 800a1fc:	6030      	str	r0, [r6, #0]
 800a1fe:	062e      	lsls	r6, r5, #24
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	d501      	bpl.n	800a208 <_printf_i+0x1c0>
 800a204:	6019      	str	r1, [r3, #0]
 800a206:	e002      	b.n	800a20e <_printf_i+0x1c6>
 800a208:	0668      	lsls	r0, r5, #25
 800a20a:	d5fb      	bpl.n	800a204 <_printf_i+0x1bc>
 800a20c:	8019      	strh	r1, [r3, #0]
 800a20e:	2300      	movs	r3, #0
 800a210:	6123      	str	r3, [r4, #16]
 800a212:	4616      	mov	r6, r2
 800a214:	e7bc      	b.n	800a190 <_printf_i+0x148>
 800a216:	6833      	ldr	r3, [r6, #0]
 800a218:	1d1a      	adds	r2, r3, #4
 800a21a:	6032      	str	r2, [r6, #0]
 800a21c:	681e      	ldr	r6, [r3, #0]
 800a21e:	6862      	ldr	r2, [r4, #4]
 800a220:	2100      	movs	r1, #0
 800a222:	4630      	mov	r0, r6
 800a224:	f7f6 f80c 	bl	8000240 <memchr>
 800a228:	b108      	cbz	r0, 800a22e <_printf_i+0x1e6>
 800a22a:	1b80      	subs	r0, r0, r6
 800a22c:	6060      	str	r0, [r4, #4]
 800a22e:	6863      	ldr	r3, [r4, #4]
 800a230:	6123      	str	r3, [r4, #16]
 800a232:	2300      	movs	r3, #0
 800a234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a238:	e7aa      	b.n	800a190 <_printf_i+0x148>
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	4632      	mov	r2, r6
 800a23e:	4649      	mov	r1, r9
 800a240:	4640      	mov	r0, r8
 800a242:	47d0      	blx	sl
 800a244:	3001      	adds	r0, #1
 800a246:	d0ad      	beq.n	800a1a4 <_printf_i+0x15c>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	079b      	lsls	r3, r3, #30
 800a24c:	d413      	bmi.n	800a276 <_printf_i+0x22e>
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	4298      	cmp	r0, r3
 800a254:	bfb8      	it	lt
 800a256:	4618      	movlt	r0, r3
 800a258:	e7a6      	b.n	800a1a8 <_printf_i+0x160>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4632      	mov	r2, r6
 800a25e:	4649      	mov	r1, r9
 800a260:	4640      	mov	r0, r8
 800a262:	47d0      	blx	sl
 800a264:	3001      	adds	r0, #1
 800a266:	d09d      	beq.n	800a1a4 <_printf_i+0x15c>
 800a268:	3501      	adds	r5, #1
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	9903      	ldr	r1, [sp, #12]
 800a26e:	1a5b      	subs	r3, r3, r1
 800a270:	42ab      	cmp	r3, r5
 800a272:	dcf2      	bgt.n	800a25a <_printf_i+0x212>
 800a274:	e7eb      	b.n	800a24e <_printf_i+0x206>
 800a276:	2500      	movs	r5, #0
 800a278:	f104 0619 	add.w	r6, r4, #25
 800a27c:	e7f5      	b.n	800a26a <_printf_i+0x222>
 800a27e:	bf00      	nop
 800a280:	0800ca5f 	.word	0x0800ca5f
 800a284:	0800ca70 	.word	0x0800ca70

0800a288 <std>:
 800a288:	2300      	movs	r3, #0
 800a28a:	b510      	push	{r4, lr}
 800a28c:	4604      	mov	r4, r0
 800a28e:	e9c0 3300 	strd	r3, r3, [r0]
 800a292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a296:	6083      	str	r3, [r0, #8]
 800a298:	8181      	strh	r1, [r0, #12]
 800a29a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a29c:	81c2      	strh	r2, [r0, #14]
 800a29e:	6183      	str	r3, [r0, #24]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	2208      	movs	r2, #8
 800a2a4:	305c      	adds	r0, #92	@ 0x5c
 800a2a6:	f000 fa1b 	bl	800a6e0 <memset>
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <std+0x58>)
 800a2ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <std+0x5c>)
 800a2b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e8 <std+0x60>)
 800a2b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2ec <std+0x64>)
 800a2b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <std+0x68>)
 800a2bc:	6224      	str	r4, [r4, #32]
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	d006      	beq.n	800a2d0 <std+0x48>
 800a2c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2c6:	4294      	cmp	r4, r2
 800a2c8:	d002      	beq.n	800a2d0 <std+0x48>
 800a2ca:	33d0      	adds	r3, #208	@ 0xd0
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	d105      	bne.n	800a2dc <std+0x54>
 800a2d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d8:	f000 ba90 	b.w	800a7fc <__retarget_lock_init_recursive>
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	bf00      	nop
 800a2e0:	0800a531 	.word	0x0800a531
 800a2e4:	0800a553 	.word	0x0800a553
 800a2e8:	0800a58b 	.word	0x0800a58b
 800a2ec:	0800a5af 	.word	0x0800a5af
 800a2f0:	2000054c 	.word	0x2000054c

0800a2f4 <stdio_exit_handler>:
 800a2f4:	4a02      	ldr	r2, [pc, #8]	@ (800a300 <stdio_exit_handler+0xc>)
 800a2f6:	4903      	ldr	r1, [pc, #12]	@ (800a304 <stdio_exit_handler+0x10>)
 800a2f8:	4803      	ldr	r0, [pc, #12]	@ (800a308 <stdio_exit_handler+0x14>)
 800a2fa:	f000 b869 	b.w	800a3d0 <_fwalk_sglue>
 800a2fe:	bf00      	nop
 800a300:	2000000c 	.word	0x2000000c
 800a304:	0800c15d 	.word	0x0800c15d
 800a308:	2000001c 	.word	0x2000001c

0800a30c <cleanup_stdio>:
 800a30c:	6841      	ldr	r1, [r0, #4]
 800a30e:	4b0c      	ldr	r3, [pc, #48]	@ (800a340 <cleanup_stdio+0x34>)
 800a310:	4299      	cmp	r1, r3
 800a312:	b510      	push	{r4, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	d001      	beq.n	800a31c <cleanup_stdio+0x10>
 800a318:	f001 ff20 	bl	800c15c <_fflush_r>
 800a31c:	68a1      	ldr	r1, [r4, #8]
 800a31e:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <cleanup_stdio+0x38>)
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <cleanup_stdio+0x1e>
 800a324:	4620      	mov	r0, r4
 800a326:	f001 ff19 	bl	800c15c <_fflush_r>
 800a32a:	68e1      	ldr	r1, [r4, #12]
 800a32c:	4b06      	ldr	r3, [pc, #24]	@ (800a348 <cleanup_stdio+0x3c>)
 800a32e:	4299      	cmp	r1, r3
 800a330:	d004      	beq.n	800a33c <cleanup_stdio+0x30>
 800a332:	4620      	mov	r0, r4
 800a334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a338:	f001 bf10 	b.w	800c15c <_fflush_r>
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	bf00      	nop
 800a340:	2000054c 	.word	0x2000054c
 800a344:	200005b4 	.word	0x200005b4
 800a348:	2000061c 	.word	0x2000061c

0800a34c <global_stdio_init.part.0>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	4b0b      	ldr	r3, [pc, #44]	@ (800a37c <global_stdio_init.part.0+0x30>)
 800a350:	4c0b      	ldr	r4, [pc, #44]	@ (800a380 <global_stdio_init.part.0+0x34>)
 800a352:	4a0c      	ldr	r2, [pc, #48]	@ (800a384 <global_stdio_init.part.0+0x38>)
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	4620      	mov	r0, r4
 800a358:	2200      	movs	r2, #0
 800a35a:	2104      	movs	r1, #4
 800a35c:	f7ff ff94 	bl	800a288 <std>
 800a360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a364:	2201      	movs	r2, #1
 800a366:	2109      	movs	r1, #9
 800a368:	f7ff ff8e 	bl	800a288 <std>
 800a36c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a370:	2202      	movs	r2, #2
 800a372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a376:	2112      	movs	r1, #18
 800a378:	f7ff bf86 	b.w	800a288 <std>
 800a37c:	20000684 	.word	0x20000684
 800a380:	2000054c 	.word	0x2000054c
 800a384:	0800a2f5 	.word	0x0800a2f5

0800a388 <__sfp_lock_acquire>:
 800a388:	4801      	ldr	r0, [pc, #4]	@ (800a390 <__sfp_lock_acquire+0x8>)
 800a38a:	f000 ba38 	b.w	800a7fe <__retarget_lock_acquire_recursive>
 800a38e:	bf00      	nop
 800a390:	2000068d 	.word	0x2000068d

0800a394 <__sfp_lock_release>:
 800a394:	4801      	ldr	r0, [pc, #4]	@ (800a39c <__sfp_lock_release+0x8>)
 800a396:	f000 ba33 	b.w	800a800 <__retarget_lock_release_recursive>
 800a39a:	bf00      	nop
 800a39c:	2000068d 	.word	0x2000068d

0800a3a0 <__sinit>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	f7ff fff0 	bl	800a388 <__sfp_lock_acquire>
 800a3a8:	6a23      	ldr	r3, [r4, #32]
 800a3aa:	b11b      	cbz	r3, 800a3b4 <__sinit+0x14>
 800a3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b0:	f7ff bff0 	b.w	800a394 <__sfp_lock_release>
 800a3b4:	4b04      	ldr	r3, [pc, #16]	@ (800a3c8 <__sinit+0x28>)
 800a3b6:	6223      	str	r3, [r4, #32]
 800a3b8:	4b04      	ldr	r3, [pc, #16]	@ (800a3cc <__sinit+0x2c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1f5      	bne.n	800a3ac <__sinit+0xc>
 800a3c0:	f7ff ffc4 	bl	800a34c <global_stdio_init.part.0>
 800a3c4:	e7f2      	b.n	800a3ac <__sinit+0xc>
 800a3c6:	bf00      	nop
 800a3c8:	0800a30d 	.word	0x0800a30d
 800a3cc:	20000684 	.word	0x20000684

0800a3d0 <_fwalk_sglue>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4688      	mov	r8, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	2600      	movs	r6, #0
 800a3dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3e4:	d505      	bpl.n	800a3f2 <_fwalk_sglue+0x22>
 800a3e6:	6824      	ldr	r4, [r4, #0]
 800a3e8:	2c00      	cmp	r4, #0
 800a3ea:	d1f7      	bne.n	800a3dc <_fwalk_sglue+0xc>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d907      	bls.n	800a408 <_fwalk_sglue+0x38>
 800a3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	d003      	beq.n	800a408 <_fwalk_sglue+0x38>
 800a400:	4629      	mov	r1, r5
 800a402:	4638      	mov	r0, r7
 800a404:	47c0      	blx	r8
 800a406:	4306      	orrs	r6, r0
 800a408:	3568      	adds	r5, #104	@ 0x68
 800a40a:	e7e9      	b.n	800a3e0 <_fwalk_sglue+0x10>

0800a40c <_puts_r>:
 800a40c:	6a03      	ldr	r3, [r0, #32]
 800a40e:	b570      	push	{r4, r5, r6, lr}
 800a410:	6884      	ldr	r4, [r0, #8]
 800a412:	4605      	mov	r5, r0
 800a414:	460e      	mov	r6, r1
 800a416:	b90b      	cbnz	r3, 800a41c <_puts_r+0x10>
 800a418:	f7ff ffc2 	bl	800a3a0 <__sinit>
 800a41c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a41e:	07db      	lsls	r3, r3, #31
 800a420:	d405      	bmi.n	800a42e <_puts_r+0x22>
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	0598      	lsls	r0, r3, #22
 800a426:	d402      	bmi.n	800a42e <_puts_r+0x22>
 800a428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a42a:	f000 f9e8 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	0719      	lsls	r1, r3, #28
 800a432:	d502      	bpl.n	800a43a <_puts_r+0x2e>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d135      	bne.n	800a4a6 <_puts_r+0x9a>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 f8f9 	bl	800a634 <__swsetup_r>
 800a442:	b380      	cbz	r0, 800a4a6 <_puts_r+0x9a>
 800a444:	f04f 35ff 	mov.w	r5, #4294967295
 800a448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a44a:	07da      	lsls	r2, r3, #31
 800a44c:	d405      	bmi.n	800a45a <_puts_r+0x4e>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	059b      	lsls	r3, r3, #22
 800a452:	d402      	bmi.n	800a45a <_puts_r+0x4e>
 800a454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a456:	f000 f9d3 	bl	800a800 <__retarget_lock_release_recursive>
 800a45a:	4628      	mov	r0, r5
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	2b00      	cmp	r3, #0
 800a460:	da04      	bge.n	800a46c <_puts_r+0x60>
 800a462:	69a2      	ldr	r2, [r4, #24]
 800a464:	429a      	cmp	r2, r3
 800a466:	dc17      	bgt.n	800a498 <_puts_r+0x8c>
 800a468:	290a      	cmp	r1, #10
 800a46a:	d015      	beq.n	800a498 <_puts_r+0x8c>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	6022      	str	r2, [r4, #0]
 800a472:	7019      	strb	r1, [r3, #0]
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a47a:	3b01      	subs	r3, #1
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	2900      	cmp	r1, #0
 800a480:	d1ed      	bne.n	800a45e <_puts_r+0x52>
 800a482:	2b00      	cmp	r3, #0
 800a484:	da11      	bge.n	800a4aa <_puts_r+0x9e>
 800a486:	4622      	mov	r2, r4
 800a488:	210a      	movs	r1, #10
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 f893 	bl	800a5b6 <__swbuf_r>
 800a490:	3001      	adds	r0, #1
 800a492:	d0d7      	beq.n	800a444 <_puts_r+0x38>
 800a494:	250a      	movs	r5, #10
 800a496:	e7d7      	b.n	800a448 <_puts_r+0x3c>
 800a498:	4622      	mov	r2, r4
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 f88b 	bl	800a5b6 <__swbuf_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d1e7      	bne.n	800a474 <_puts_r+0x68>
 800a4a4:	e7ce      	b.n	800a444 <_puts_r+0x38>
 800a4a6:	3e01      	subs	r6, #1
 800a4a8:	e7e4      	b.n	800a474 <_puts_r+0x68>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e7ee      	b.n	800a494 <_puts_r+0x88>
	...

0800a4b8 <puts>:
 800a4b8:	4b02      	ldr	r3, [pc, #8]	@ (800a4c4 <puts+0xc>)
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	f7ff bfa5 	b.w	800a40c <_puts_r>
 800a4c2:	bf00      	nop
 800a4c4:	20000018 	.word	0x20000018

0800a4c8 <sniprintf>:
 800a4c8:	b40c      	push	{r2, r3}
 800a4ca:	b530      	push	{r4, r5, lr}
 800a4cc:	4b17      	ldr	r3, [pc, #92]	@ (800a52c <sniprintf+0x64>)
 800a4ce:	1e0c      	subs	r4, r1, #0
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	b09d      	sub	sp, #116	@ 0x74
 800a4d4:	da08      	bge.n	800a4e8 <sniprintf+0x20>
 800a4d6:	238b      	movs	r3, #139	@ 0x8b
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	b01d      	add	sp, #116	@ 0x74
 800a4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e4:	b002      	add	sp, #8
 800a4e6:	4770      	bx	lr
 800a4e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a4ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4f0:	bf14      	ite	ne
 800a4f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4f6:	4623      	moveq	r3, r4
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9307      	str	r3, [sp, #28]
 800a4fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	9006      	str	r0, [sp, #24]
 800a504:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a508:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a50a:	ab21      	add	r3, sp, #132	@ 0x84
 800a50c:	a902      	add	r1, sp, #8
 800a50e:	4628      	mov	r0, r5
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	f001 fca3 	bl	800be5c <_svfiprintf_r>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	bfbc      	itt	lt
 800a51a:	238b      	movlt	r3, #139	@ 0x8b
 800a51c:	602b      	strlt	r3, [r5, #0]
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d0dd      	beq.n	800a4de <sniprintf+0x16>
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
 800a528:	e7d9      	b.n	800a4de <sniprintf+0x16>
 800a52a:	bf00      	nop
 800a52c:	20000018 	.word	0x20000018

0800a530 <__sread>:
 800a530:	b510      	push	{r4, lr}
 800a532:	460c      	mov	r4, r1
 800a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a538:	f000 f912 	bl	800a760 <_read_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	bfab      	itete	ge
 800a540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a542:	89a3      	ldrhlt	r3, [r4, #12]
 800a544:	181b      	addge	r3, r3, r0
 800a546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a54a:	bfac      	ite	ge
 800a54c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a54e:	81a3      	strhlt	r3, [r4, #12]
 800a550:	bd10      	pop	{r4, pc}

0800a552 <__swrite>:
 800a552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	461f      	mov	r7, r3
 800a558:	898b      	ldrh	r3, [r1, #12]
 800a55a:	05db      	lsls	r3, r3, #23
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	4616      	mov	r6, r2
 800a562:	d505      	bpl.n	800a570 <__swrite+0x1e>
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	2302      	movs	r3, #2
 800a56a:	2200      	movs	r2, #0
 800a56c:	f000 f8e6 	bl	800a73c <_lseek_r>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	4632      	mov	r2, r6
 800a57e:	463b      	mov	r3, r7
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a586:	f000 b8fd 	b.w	800a784 <_write_r>

0800a58a <__sseek>:
 800a58a:	b510      	push	{r4, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a592:	f000 f8d3 	bl	800a73c <_lseek_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	bf15      	itete	ne
 800a59c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5a6:	81a3      	strheq	r3, [r4, #12]
 800a5a8:	bf18      	it	ne
 800a5aa:	81a3      	strhne	r3, [r4, #12]
 800a5ac:	bd10      	pop	{r4, pc}

0800a5ae <__sclose>:
 800a5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b2:	f000 b8b3 	b.w	800a71c <_close_r>

0800a5b6 <__swbuf_r>:
 800a5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	4614      	mov	r4, r2
 800a5bc:	4605      	mov	r5, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <__swbuf_r+0x12>
 800a5c0:	6a03      	ldr	r3, [r0, #32]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <__swbuf_r+0x12>
 800a5c4:	f7ff feec 	bl	800a3a0 <__sinit>
 800a5c8:	69a3      	ldr	r3, [r4, #24]
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	071a      	lsls	r2, r3, #28
 800a5d0:	d501      	bpl.n	800a5d6 <__swbuf_r+0x20>
 800a5d2:	6923      	ldr	r3, [r4, #16]
 800a5d4:	b943      	cbnz	r3, 800a5e8 <__swbuf_r+0x32>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f000 f82b 	bl	800a634 <__swsetup_r>
 800a5de:	b118      	cbz	r0, 800a5e8 <__swbuf_r+0x32>
 800a5e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	1a98      	subs	r0, r3, r2
 800a5ee:	6963      	ldr	r3, [r4, #20]
 800a5f0:	b2f6      	uxtb	r6, r6
 800a5f2:	4283      	cmp	r3, r0
 800a5f4:	4637      	mov	r7, r6
 800a5f6:	dc05      	bgt.n	800a604 <__swbuf_r+0x4e>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f001 fdae 	bl	800c15c <_fflush_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	d1ed      	bne.n	800a5e0 <__swbuf_r+0x2a>
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	3b01      	subs	r3, #1
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	701e      	strb	r6, [r3, #0]
 800a612:	6962      	ldr	r2, [r4, #20]
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	429a      	cmp	r2, r3
 800a618:	d004      	beq.n	800a624 <__swbuf_r+0x6e>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	07db      	lsls	r3, r3, #31
 800a61e:	d5e1      	bpl.n	800a5e4 <__swbuf_r+0x2e>
 800a620:	2e0a      	cmp	r6, #10
 800a622:	d1df      	bne.n	800a5e4 <__swbuf_r+0x2e>
 800a624:	4621      	mov	r1, r4
 800a626:	4628      	mov	r0, r5
 800a628:	f001 fd98 	bl	800c15c <_fflush_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0d9      	beq.n	800a5e4 <__swbuf_r+0x2e>
 800a630:	e7d6      	b.n	800a5e0 <__swbuf_r+0x2a>
	...

0800a634 <__swsetup_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4b29      	ldr	r3, [pc, #164]	@ (800a6dc <__swsetup_r+0xa8>)
 800a638:	4605      	mov	r5, r0
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	460c      	mov	r4, r1
 800a63e:	b118      	cbz	r0, 800a648 <__swsetup_r+0x14>
 800a640:	6a03      	ldr	r3, [r0, #32]
 800a642:	b90b      	cbnz	r3, 800a648 <__swsetup_r+0x14>
 800a644:	f7ff feac 	bl	800a3a0 <__sinit>
 800a648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64c:	0719      	lsls	r1, r3, #28
 800a64e:	d422      	bmi.n	800a696 <__swsetup_r+0x62>
 800a650:	06da      	lsls	r2, r3, #27
 800a652:	d407      	bmi.n	800a664 <__swsetup_r+0x30>
 800a654:	2209      	movs	r2, #9
 800a656:	602a      	str	r2, [r5, #0]
 800a658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	e033      	b.n	800a6cc <__swsetup_r+0x98>
 800a664:	0758      	lsls	r0, r3, #29
 800a666:	d512      	bpl.n	800a68e <__swsetup_r+0x5a>
 800a668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a66a:	b141      	cbz	r1, 800a67e <__swsetup_r+0x4a>
 800a66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a670:	4299      	cmp	r1, r3
 800a672:	d002      	beq.n	800a67a <__swsetup_r+0x46>
 800a674:	4628      	mov	r0, r5
 800a676:	f000 ff13 	bl	800b4a0 <_free_r>
 800a67a:	2300      	movs	r3, #0
 800a67c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	2300      	movs	r3, #0
 800a688:	6063      	str	r3, [r4, #4]
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f043 0308 	orr.w	r3, r3, #8
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	b94b      	cbnz	r3, 800a6ae <__swsetup_r+0x7a>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6a4:	d003      	beq.n	800a6ae <__swsetup_r+0x7a>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f001 fda5 	bl	800c1f8 <__smakebuf_r>
 800a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b2:	f013 0201 	ands.w	r2, r3, #1
 800a6b6:	d00a      	beq.n	800a6ce <__swsetup_r+0x9a>
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	60a2      	str	r2, [r4, #8]
 800a6bc:	6962      	ldr	r2, [r4, #20]
 800a6be:	4252      	negs	r2, r2
 800a6c0:	61a2      	str	r2, [r4, #24]
 800a6c2:	6922      	ldr	r2, [r4, #16]
 800a6c4:	b942      	cbnz	r2, 800a6d8 <__swsetup_r+0xa4>
 800a6c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6ca:	d1c5      	bne.n	800a658 <__swsetup_r+0x24>
 800a6cc:	bd38      	pop	{r3, r4, r5, pc}
 800a6ce:	0799      	lsls	r1, r3, #30
 800a6d0:	bf58      	it	pl
 800a6d2:	6962      	ldrpl	r2, [r4, #20]
 800a6d4:	60a2      	str	r2, [r4, #8]
 800a6d6:	e7f4      	b.n	800a6c2 <__swsetup_r+0x8e>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e7f7      	b.n	800a6cc <__swsetup_r+0x98>
 800a6dc:	20000018 	.word	0x20000018

0800a6e0 <memset>:
 800a6e0:	4402      	add	r2, r0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d100      	bne.n	800a6ea <memset+0xa>
 800a6e8:	4770      	bx	lr
 800a6ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ee:	e7f9      	b.n	800a6e4 <memset+0x4>

0800a6f0 <strncmp>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	b16a      	cbz	r2, 800a710 <strncmp+0x20>
 800a6f4:	3901      	subs	r1, #1
 800a6f6:	1884      	adds	r4, r0, r2
 800a6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a700:	429a      	cmp	r2, r3
 800a702:	d103      	bne.n	800a70c <strncmp+0x1c>
 800a704:	42a0      	cmp	r0, r4
 800a706:	d001      	beq.n	800a70c <strncmp+0x1c>
 800a708:	2a00      	cmp	r2, #0
 800a70a:	d1f5      	bne.n	800a6f8 <strncmp+0x8>
 800a70c:	1ad0      	subs	r0, r2, r3
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	4610      	mov	r0, r2
 800a712:	e7fc      	b.n	800a70e <strncmp+0x1e>

0800a714 <_localeconv_r>:
 800a714:	4800      	ldr	r0, [pc, #0]	@ (800a718 <_localeconv_r+0x4>)
 800a716:	4770      	bx	lr
 800a718:	20000158 	.word	0x20000158

0800a71c <_close_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d06      	ldr	r5, [pc, #24]	@ (800a738 <_close_r+0x1c>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	f7f7 fac0 	bl	8001cac <_close>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_close_r+0x1a>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_close_r+0x1a>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	20000688 	.word	0x20000688

0800a73c <_lseek_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	@ (800a75c <_lseek_r+0x20>)
 800a740:	4604      	mov	r4, r0
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	2200      	movs	r2, #0
 800a748:	602a      	str	r2, [r5, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	f7f7 fad5 	bl	8001cfa <_lseek>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_lseek_r+0x1e>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_lseek_r+0x1e>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20000688 	.word	0x20000688

0800a760 <_read_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d07      	ldr	r5, [pc, #28]	@ (800a780 <_read_r+0x20>)
 800a764:	4604      	mov	r4, r0
 800a766:	4608      	mov	r0, r1
 800a768:	4611      	mov	r1, r2
 800a76a:	2200      	movs	r2, #0
 800a76c:	602a      	str	r2, [r5, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f7f7 fa63 	bl	8001c3a <_read>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_read_r+0x1e>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_read_r+0x1e>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20000688 	.word	0x20000688

0800a784 <_write_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d07      	ldr	r5, [pc, #28]	@ (800a7a4 <_write_r+0x20>)
 800a788:	4604      	mov	r4, r0
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f7 fa6e 	bl	8001c74 <_write>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_write_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_write_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000688 	.word	0x20000688

0800a7a8 <__errno>:
 800a7a8:	4b01      	ldr	r3, [pc, #4]	@ (800a7b0 <__errno+0x8>)
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20000018 	.word	0x20000018

0800a7b4 <__libc_init_array>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a7ec <__libc_init_array+0x38>)
 800a7b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a7f0 <__libc_init_array+0x3c>)
 800a7ba:	1b64      	subs	r4, r4, r5
 800a7bc:	10a4      	asrs	r4, r4, #2
 800a7be:	2600      	movs	r6, #0
 800a7c0:	42a6      	cmp	r6, r4
 800a7c2:	d109      	bne.n	800a7d8 <__libc_init_array+0x24>
 800a7c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a7f4 <__libc_init_array+0x40>)
 800a7c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a7f8 <__libc_init_array+0x44>)
 800a7c8:	f001 ffd2 	bl	800c770 <_init>
 800a7cc:	1b64      	subs	r4, r4, r5
 800a7ce:	10a4      	asrs	r4, r4, #2
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	42a6      	cmp	r6, r4
 800a7d4:	d105      	bne.n	800a7e2 <__libc_init_array+0x2e>
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7dc:	4798      	blx	r3
 800a7de:	3601      	adds	r6, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__libc_init_array+0xc>
 800a7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e6:	4798      	blx	r3
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	e7f2      	b.n	800a7d2 <__libc_init_array+0x1e>
 800a7ec:	0800ccc8 	.word	0x0800ccc8
 800a7f0:	0800ccc8 	.word	0x0800ccc8
 800a7f4:	0800ccc8 	.word	0x0800ccc8
 800a7f8:	0800cccc 	.word	0x0800cccc

0800a7fc <__retarget_lock_init_recursive>:
 800a7fc:	4770      	bx	lr

0800a7fe <__retarget_lock_acquire_recursive>:
 800a7fe:	4770      	bx	lr

0800a800 <__retarget_lock_release_recursive>:
 800a800:	4770      	bx	lr

0800a802 <quorem>:
 800a802:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a806:	6903      	ldr	r3, [r0, #16]
 800a808:	690c      	ldr	r4, [r1, #16]
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	4607      	mov	r7, r0
 800a80e:	db7e      	blt.n	800a90e <quorem+0x10c>
 800a810:	3c01      	subs	r4, #1
 800a812:	f101 0814 	add.w	r8, r1, #20
 800a816:	00a3      	lsls	r3, r4, #2
 800a818:	f100 0514 	add.w	r5, r0, #20
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a82c:	3301      	adds	r3, #1
 800a82e:	429a      	cmp	r2, r3
 800a830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a834:	fbb2 f6f3 	udiv	r6, r2, r3
 800a838:	d32e      	bcc.n	800a898 <quorem+0x96>
 800a83a:	f04f 0a00 	mov.w	sl, #0
 800a83e:	46c4      	mov	ip, r8
 800a840:	46ae      	mov	lr, r5
 800a842:	46d3      	mov	fp, sl
 800a844:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a848:	b298      	uxth	r0, r3
 800a84a:	fb06 a000 	mla	r0, r6, r0, sl
 800a84e:	0c02      	lsrs	r2, r0, #16
 800a850:	0c1b      	lsrs	r3, r3, #16
 800a852:	fb06 2303 	mla	r3, r6, r3, r2
 800a856:	f8de 2000 	ldr.w	r2, [lr]
 800a85a:	b280      	uxth	r0, r0
 800a85c:	b292      	uxth	r2, r2
 800a85e:	1a12      	subs	r2, r2, r0
 800a860:	445a      	add	r2, fp
 800a862:	f8de 0000 	ldr.w	r0, [lr]
 800a866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a870:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a874:	b292      	uxth	r2, r2
 800a876:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a87a:	45e1      	cmp	r9, ip
 800a87c:	f84e 2b04 	str.w	r2, [lr], #4
 800a880:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a884:	d2de      	bcs.n	800a844 <quorem+0x42>
 800a886:	9b00      	ldr	r3, [sp, #0]
 800a888:	58eb      	ldr	r3, [r5, r3]
 800a88a:	b92b      	cbnz	r3, 800a898 <quorem+0x96>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	3b04      	subs	r3, #4
 800a890:	429d      	cmp	r5, r3
 800a892:	461a      	mov	r2, r3
 800a894:	d32f      	bcc.n	800a8f6 <quorem+0xf4>
 800a896:	613c      	str	r4, [r7, #16]
 800a898:	4638      	mov	r0, r7
 800a89a:	f001 f97b 	bl	800bb94 <__mcmp>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	db25      	blt.n	800a8ee <quorem+0xec>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8aa:	f8d1 c000 	ldr.w	ip, [r1]
 800a8ae:	fa1f fe82 	uxth.w	lr, r2
 800a8b2:	fa1f f38c 	uxth.w	r3, ip
 800a8b6:	eba3 030e 	sub.w	r3, r3, lr
 800a8ba:	4403      	add	r3, r0
 800a8bc:	0c12      	lsrs	r2, r2, #16
 800a8be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8cc:	45c1      	cmp	r9, r8
 800a8ce:	f841 3b04 	str.w	r3, [r1], #4
 800a8d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8d6:	d2e6      	bcs.n	800a8a6 <quorem+0xa4>
 800a8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8e0:	b922      	cbnz	r2, 800a8ec <quorem+0xea>
 800a8e2:	3b04      	subs	r3, #4
 800a8e4:	429d      	cmp	r5, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	d30b      	bcc.n	800a902 <quorem+0x100>
 800a8ea:	613c      	str	r4, [r7, #16]
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	b003      	add	sp, #12
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	6812      	ldr	r2, [r2, #0]
 800a8f8:	3b04      	subs	r3, #4
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	d1cb      	bne.n	800a896 <quorem+0x94>
 800a8fe:	3c01      	subs	r4, #1
 800a900:	e7c6      	b.n	800a890 <quorem+0x8e>
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	3b04      	subs	r3, #4
 800a906:	2a00      	cmp	r2, #0
 800a908:	d1ef      	bne.n	800a8ea <quorem+0xe8>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	e7ea      	b.n	800a8e4 <quorem+0xe2>
 800a90e:	2000      	movs	r0, #0
 800a910:	e7ee      	b.n	800a8f0 <quorem+0xee>
 800a912:	0000      	movs	r0, r0
 800a914:	0000      	movs	r0, r0
	...

0800a918 <_dtoa_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	69c7      	ldr	r7, [r0, #28]
 800a91e:	b099      	sub	sp, #100	@ 0x64
 800a920:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a924:	ec55 4b10 	vmov	r4, r5, d0
 800a928:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a92a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a92c:	4683      	mov	fp, r0
 800a92e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a930:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a932:	b97f      	cbnz	r7, 800a954 <_dtoa_r+0x3c>
 800a934:	2010      	movs	r0, #16
 800a936:	f000 fdfd 	bl	800b534 <malloc>
 800a93a:	4602      	mov	r2, r0
 800a93c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a940:	b920      	cbnz	r0, 800a94c <_dtoa_r+0x34>
 800a942:	4ba7      	ldr	r3, [pc, #668]	@ (800abe0 <_dtoa_r+0x2c8>)
 800a944:	21ef      	movs	r1, #239	@ 0xef
 800a946:	48a7      	ldr	r0, [pc, #668]	@ (800abe4 <_dtoa_r+0x2cc>)
 800a948:	f001 fcec 	bl	800c324 <__assert_func>
 800a94c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a950:	6007      	str	r7, [r0, #0]
 800a952:	60c7      	str	r7, [r0, #12]
 800a954:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a958:	6819      	ldr	r1, [r3, #0]
 800a95a:	b159      	cbz	r1, 800a974 <_dtoa_r+0x5c>
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	604a      	str	r2, [r1, #4]
 800a960:	2301      	movs	r3, #1
 800a962:	4093      	lsls	r3, r2
 800a964:	608b      	str	r3, [r1, #8]
 800a966:	4658      	mov	r0, fp
 800a968:	f000 feda 	bl	800b720 <_Bfree>
 800a96c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	1e2b      	subs	r3, r5, #0
 800a976:	bfb9      	ittee	lt
 800a978:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a97c:	9303      	strlt	r3, [sp, #12]
 800a97e:	2300      	movge	r3, #0
 800a980:	6033      	strge	r3, [r6, #0]
 800a982:	9f03      	ldr	r7, [sp, #12]
 800a984:	4b98      	ldr	r3, [pc, #608]	@ (800abe8 <_dtoa_r+0x2d0>)
 800a986:	bfbc      	itt	lt
 800a988:	2201      	movlt	r2, #1
 800a98a:	6032      	strlt	r2, [r6, #0]
 800a98c:	43bb      	bics	r3, r7
 800a98e:	d112      	bne.n	800a9b6 <_dtoa_r+0x9e>
 800a990:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a992:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a99c:	4323      	orrs	r3, r4
 800a99e:	f000 854d 	beq.w	800b43c <_dtoa_r+0xb24>
 800a9a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800abfc <_dtoa_r+0x2e4>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 854f 	beq.w	800b44c <_dtoa_r+0xb34>
 800a9ae:	f10a 0303 	add.w	r3, sl, #3
 800a9b2:	f000 bd49 	b.w	800b448 <_dtoa_r+0xb30>
 800a9b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	ec51 0b17 	vmov	r0, r1, d7
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9c6:	f7f6 f8b7 	bl	8000b38 <__aeabi_dcmpeq>
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	b158      	cbz	r0, 800a9e6 <_dtoa_r+0xce>
 800a9ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9d6:	b113      	cbz	r3, 800a9de <_dtoa_r+0xc6>
 800a9d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9da:	4b84      	ldr	r3, [pc, #528]	@ (800abec <_dtoa_r+0x2d4>)
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac00 <_dtoa_r+0x2e8>
 800a9e2:	f000 bd33 	b.w	800b44c <_dtoa_r+0xb34>
 800a9e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9ea:	aa16      	add	r2, sp, #88	@ 0x58
 800a9ec:	a917      	add	r1, sp, #92	@ 0x5c
 800a9ee:	4658      	mov	r0, fp
 800a9f0:	f001 f980 	bl	800bcf4 <__d2b>
 800a9f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d077      	beq.n	800aaee <_dtoa_r+0x1d6>
 800a9fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4b74      	ldr	r3, [pc, #464]	@ (800abf0 <_dtoa_r+0x2d8>)
 800aa1e:	f7f5 fc6b 	bl	80002f8 <__aeabi_dsub>
 800aa22:	a369      	add	r3, pc, #420	@ (adr r3, 800abc8 <_dtoa_r+0x2b0>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fe1e 	bl	8000668 <__aeabi_dmul>
 800aa2c:	a368      	add	r3, pc, #416	@ (adr r3, 800abd0 <_dtoa_r+0x2b8>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 fc63 	bl	80002fc <__adddf3>
 800aa36:	4604      	mov	r4, r0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	460d      	mov	r5, r1
 800aa3c:	f7f5 fdaa 	bl	8000594 <__aeabi_i2d>
 800aa40:	a365      	add	r3, pc, #404	@ (adr r3, 800abd8 <_dtoa_r+0x2c0>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fe0f 	bl	8000668 <__aeabi_dmul>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f5 fc53 	bl	80002fc <__adddf3>
 800aa56:	4604      	mov	r4, r0
 800aa58:	460d      	mov	r5, r1
 800aa5a:	f7f6 f8b5 	bl	8000bc8 <__aeabi_d2iz>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	4607      	mov	r7, r0
 800aa62:	2300      	movs	r3, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f6 f870 	bl	8000b4c <__aeabi_dcmplt>
 800aa6c:	b140      	cbz	r0, 800aa80 <_dtoa_r+0x168>
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f7f5 fd90 	bl	8000594 <__aeabi_i2d>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f6 f85e 	bl	8000b38 <__aeabi_dcmpeq>
 800aa7c:	b900      	cbnz	r0, 800aa80 <_dtoa_r+0x168>
 800aa7e:	3f01      	subs	r7, #1
 800aa80:	2f16      	cmp	r7, #22
 800aa82:	d851      	bhi.n	800ab28 <_dtoa_r+0x210>
 800aa84:	4b5b      	ldr	r3, [pc, #364]	@ (800abf4 <_dtoa_r+0x2dc>)
 800aa86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa92:	f7f6 f85b 	bl	8000b4c <__aeabi_dcmplt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d048      	beq.n	800ab2c <_dtoa_r+0x214>
 800aa9a:	3f01      	subs	r7, #1
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aaa2:	1b9b      	subs	r3, r3, r6
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	bf44      	itt	mi
 800aaa8:	f1c3 0801 	rsbmi	r8, r3, #1
 800aaac:	2300      	movmi	r3, #0
 800aaae:	9208      	str	r2, [sp, #32]
 800aab0:	bf54      	ite	pl
 800aab2:	f04f 0800 	movpl.w	r8, #0
 800aab6:	9308      	strmi	r3, [sp, #32]
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	db39      	blt.n	800ab30 <_dtoa_r+0x218>
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aac0:	443b      	add	r3, r7
 800aac2:	9308      	str	r3, [sp, #32]
 800aac4:	2300      	movs	r3, #0
 800aac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaca:	2b09      	cmp	r3, #9
 800aacc:	d864      	bhi.n	800ab98 <_dtoa_r+0x280>
 800aace:	2b05      	cmp	r3, #5
 800aad0:	bfc4      	itt	gt
 800aad2:	3b04      	subgt	r3, #4
 800aad4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	f1a3 0302 	sub.w	r3, r3, #2
 800aadc:	bfcc      	ite	gt
 800aade:	2400      	movgt	r4, #0
 800aae0:	2401      	movle	r4, #1
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d863      	bhi.n	800abae <_dtoa_r+0x296>
 800aae6:	e8df f003 	tbb	[pc, r3]
 800aaea:	372a      	.short	0x372a
 800aaec:	5535      	.short	0x5535
 800aaee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aaf2:	441e      	add	r6, r3
 800aaf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	bfc1      	itttt	gt
 800aafc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab00:	409f      	lslgt	r7, r3
 800ab02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab06:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab0a:	bfd6      	itet	le
 800ab0c:	f1c3 0320 	rsble	r3, r3, #32
 800ab10:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab14:	fa04 f003 	lslle.w	r0, r4, r3
 800ab18:	f7f5 fd2c 	bl	8000574 <__aeabi_ui2d>
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab22:	3e01      	subs	r6, #1
 800ab24:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab26:	e777      	b.n	800aa18 <_dtoa_r+0x100>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e7b8      	b.n	800aa9e <_dtoa_r+0x186>
 800ab2c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab2e:	e7b7      	b.n	800aaa0 <_dtoa_r+0x188>
 800ab30:	427b      	negs	r3, r7
 800ab32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab34:	2300      	movs	r3, #0
 800ab36:	eba8 0807 	sub.w	r8, r8, r7
 800ab3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab3c:	e7c4      	b.n	800aac8 <_dtoa_r+0x1b0>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc35      	bgt.n	800abb4 <_dtoa_r+0x29c>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	9307      	str	r3, [sp, #28]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab52:	e00b      	b.n	800ab6c <_dtoa_r+0x254>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e7f3      	b.n	800ab40 <_dtoa_r+0x228>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5e:	18fb      	adds	r3, r7, r3
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	9307      	str	r3, [sp, #28]
 800ab68:	bfb8      	it	lt
 800ab6a:	2301      	movlt	r3, #1
 800ab6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab70:	2100      	movs	r1, #0
 800ab72:	2204      	movs	r2, #4
 800ab74:	f102 0514 	add.w	r5, r2, #20
 800ab78:	429d      	cmp	r5, r3
 800ab7a:	d91f      	bls.n	800abbc <_dtoa_r+0x2a4>
 800ab7c:	6041      	str	r1, [r0, #4]
 800ab7e:	4658      	mov	r0, fp
 800ab80:	f000 fd8e 	bl	800b6a0 <_Balloc>
 800ab84:	4682      	mov	sl, r0
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d13c      	bne.n	800ac04 <_dtoa_r+0x2ec>
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	@ (800abf8 <_dtoa_r+0x2e0>)
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab92:	e6d8      	b.n	800a946 <_dtoa_r+0x2e>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e7e0      	b.n	800ab5a <_dtoa_r+0x242>
 800ab98:	2401      	movs	r4, #1
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aba0:	f04f 33ff 	mov.w	r3, #4294967295
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	9307      	str	r3, [sp, #28]
 800aba8:	2200      	movs	r2, #0
 800abaa:	2312      	movs	r3, #18
 800abac:	e7d0      	b.n	800ab50 <_dtoa_r+0x238>
 800abae:	2301      	movs	r3, #1
 800abb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abb2:	e7f5      	b.n	800aba0 <_dtoa_r+0x288>
 800abb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	9307      	str	r3, [sp, #28]
 800abba:	e7d7      	b.n	800ab6c <_dtoa_r+0x254>
 800abbc:	3101      	adds	r1, #1
 800abbe:	0052      	lsls	r2, r2, #1
 800abc0:	e7d8      	b.n	800ab74 <_dtoa_r+0x25c>
 800abc2:	bf00      	nop
 800abc4:	f3af 8000 	nop.w
 800abc8:	636f4361 	.word	0x636f4361
 800abcc:	3fd287a7 	.word	0x3fd287a7
 800abd0:	8b60c8b3 	.word	0x8b60c8b3
 800abd4:	3fc68a28 	.word	0x3fc68a28
 800abd8:	509f79fb 	.word	0x509f79fb
 800abdc:	3fd34413 	.word	0x3fd34413
 800abe0:	0800ca8e 	.word	0x0800ca8e
 800abe4:	0800caa5 	.word	0x0800caa5
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	0800ca5e 	.word	0x0800ca5e
 800abf0:	3ff80000 	.word	0x3ff80000
 800abf4:	0800cba0 	.word	0x0800cba0
 800abf8:	0800cafd 	.word	0x0800cafd
 800abfc:	0800ca8a 	.word	0x0800ca8a
 800ac00:	0800ca5d 	.word	0x0800ca5d
 800ac04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac08:	6018      	str	r0, [r3, #0]
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	2b0e      	cmp	r3, #14
 800ac0e:	f200 80a4 	bhi.w	800ad5a <_dtoa_r+0x442>
 800ac12:	2c00      	cmp	r4, #0
 800ac14:	f000 80a1 	beq.w	800ad5a <_dtoa_r+0x442>
 800ac18:	2f00      	cmp	r7, #0
 800ac1a:	dd33      	ble.n	800ac84 <_dtoa_r+0x36c>
 800ac1c:	4bad      	ldr	r3, [pc, #692]	@ (800aed4 <_dtoa_r+0x5bc>)
 800ac1e:	f007 020f 	and.w	r2, r7, #15
 800ac22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac26:	ed93 7b00 	vldr	d7, [r3]
 800ac2a:	05f8      	lsls	r0, r7, #23
 800ac2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac34:	d516      	bpl.n	800ac64 <_dtoa_r+0x34c>
 800ac36:	4ba8      	ldr	r3, [pc, #672]	@ (800aed8 <_dtoa_r+0x5c0>)
 800ac38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac40:	f7f5 fe3c 	bl	80008bc <__aeabi_ddiv>
 800ac44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac48:	f004 040f 	and.w	r4, r4, #15
 800ac4c:	2603      	movs	r6, #3
 800ac4e:	4da2      	ldr	r5, [pc, #648]	@ (800aed8 <_dtoa_r+0x5c0>)
 800ac50:	b954      	cbnz	r4, 800ac68 <_dtoa_r+0x350>
 800ac52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5a:	f7f5 fe2f 	bl	80008bc <__aeabi_ddiv>
 800ac5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac62:	e028      	b.n	800acb6 <_dtoa_r+0x39e>
 800ac64:	2602      	movs	r6, #2
 800ac66:	e7f2      	b.n	800ac4e <_dtoa_r+0x336>
 800ac68:	07e1      	lsls	r1, r4, #31
 800ac6a:	d508      	bpl.n	800ac7e <_dtoa_r+0x366>
 800ac6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac74:	f7f5 fcf8 	bl	8000668 <__aeabi_dmul>
 800ac78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	1064      	asrs	r4, r4, #1
 800ac80:	3508      	adds	r5, #8
 800ac82:	e7e5      	b.n	800ac50 <_dtoa_r+0x338>
 800ac84:	f000 80d2 	beq.w	800ae2c <_dtoa_r+0x514>
 800ac88:	427c      	negs	r4, r7
 800ac8a:	4b92      	ldr	r3, [pc, #584]	@ (800aed4 <_dtoa_r+0x5bc>)
 800ac8c:	4d92      	ldr	r5, [pc, #584]	@ (800aed8 <_dtoa_r+0x5c0>)
 800ac8e:	f004 020f 	and.w	r2, r4, #15
 800ac92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac9e:	f7f5 fce3 	bl	8000668 <__aeabi_dmul>
 800aca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca6:	1124      	asrs	r4, r4, #4
 800aca8:	2300      	movs	r3, #0
 800acaa:	2602      	movs	r6, #2
 800acac:	2c00      	cmp	r4, #0
 800acae:	f040 80b2 	bne.w	800ae16 <_dtoa_r+0x4fe>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1d3      	bne.n	800ac5e <_dtoa_r+0x346>
 800acb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 80b7 	beq.w	800ae30 <_dtoa_r+0x518>
 800acc2:	4b86      	ldr	r3, [pc, #536]	@ (800aedc <_dtoa_r+0x5c4>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 ff3f 	bl	8000b4c <__aeabi_dcmplt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	f000 80ae 	beq.w	800ae30 <_dtoa_r+0x518>
 800acd4:	9b07      	ldr	r3, [sp, #28]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80aa 	beq.w	800ae30 <_dtoa_r+0x518>
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dd37      	ble.n	800ad52 <_dtoa_r+0x43a>
 800ace2:	1e7b      	subs	r3, r7, #1
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	4620      	mov	r0, r4
 800ace8:	4b7d      	ldr	r3, [pc, #500]	@ (800aee0 <_dtoa_r+0x5c8>)
 800acea:	2200      	movs	r2, #0
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fcbb 	bl	8000668 <__aeabi_dmul>
 800acf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf6:	9c00      	ldr	r4, [sp, #0]
 800acf8:	3601      	adds	r6, #1
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7f5 fc4a 	bl	8000594 <__aeabi_i2d>
 800ad00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad04:	f7f5 fcb0 	bl	8000668 <__aeabi_dmul>
 800ad08:	4b76      	ldr	r3, [pc, #472]	@ (800aee4 <_dtoa_r+0x5cc>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f7f5 faf6 	bl	80002fc <__adddf3>
 800ad10:	4605      	mov	r5, r0
 800ad12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad16:	2c00      	cmp	r4, #0
 800ad18:	f040 808d 	bne.w	800ae36 <_dtoa_r+0x51e>
 800ad1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad20:	4b71      	ldr	r3, [pc, #452]	@ (800aee8 <_dtoa_r+0x5d0>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	f7f5 fae8 	bl	80002f8 <__aeabi_dsub>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4633      	mov	r3, r6
 800ad34:	f7f5 ff28 	bl	8000b88 <__aeabi_dcmpgt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f040 828b 	bne.w	800b254 <_dtoa_r+0x93c>
 800ad3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad42:	462a      	mov	r2, r5
 800ad44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad48:	f7f5 ff00 	bl	8000b4c <__aeabi_dcmplt>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f040 8128 	bne.w	800afa2 <_dtoa_r+0x68a>
 800ad52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f2c0 815a 	blt.w	800b016 <_dtoa_r+0x6fe>
 800ad62:	2f0e      	cmp	r7, #14
 800ad64:	f300 8157 	bgt.w	800b016 <_dtoa_r+0x6fe>
 800ad68:	4b5a      	ldr	r3, [pc, #360]	@ (800aed4 <_dtoa_r+0x5bc>)
 800ad6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad6e:	ed93 7b00 	vldr	d7, [r3]
 800ad72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	ed8d 7b00 	vstr	d7, [sp]
 800ad7a:	da03      	bge.n	800ad84 <_dtoa_r+0x46c>
 800ad7c:	9b07      	ldr	r3, [sp, #28]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f340 8101 	ble.w	800af86 <_dtoa_r+0x66e>
 800ad84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad88:	4656      	mov	r6, sl
 800ad8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fd93 	bl	80008bc <__aeabi_ddiv>
 800ad96:	f7f5 ff17 	bl	8000bc8 <__aeabi_d2iz>
 800ad9a:	4680      	mov	r8, r0
 800ad9c:	f7f5 fbfa 	bl	8000594 <__aeabi_i2d>
 800ada0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada4:	f7f5 fc60 	bl	8000668 <__aeabi_dmul>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adb4:	f7f5 faa0 	bl	80002f8 <__aeabi_dsub>
 800adb8:	f806 4b01 	strb.w	r4, [r6], #1
 800adbc:	9d07      	ldr	r5, [sp, #28]
 800adbe:	eba6 040a 	sub.w	r4, r6, sl
 800adc2:	42a5      	cmp	r5, r4
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	f040 8117 	bne.w	800affa <_dtoa_r+0x6e2>
 800adcc:	f7f5 fa96 	bl	80002fc <__adddf3>
 800add0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	f7f5 fed6 	bl	8000b88 <__aeabi_dcmpgt>
 800addc:	2800      	cmp	r0, #0
 800adde:	f040 80f9 	bne.w	800afd4 <_dtoa_r+0x6bc>
 800ade2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fea5 	bl	8000b38 <__aeabi_dcmpeq>
 800adee:	b118      	cbz	r0, 800adf8 <_dtoa_r+0x4e0>
 800adf0:	f018 0f01 	tst.w	r8, #1
 800adf4:	f040 80ee 	bne.w	800afd4 <_dtoa_r+0x6bc>
 800adf8:	4649      	mov	r1, r9
 800adfa:	4658      	mov	r0, fp
 800adfc:	f000 fc90 	bl	800b720 <_Bfree>
 800ae00:	2300      	movs	r3, #0
 800ae02:	7033      	strb	r3, [r6, #0]
 800ae04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae06:	3701      	adds	r7, #1
 800ae08:	601f      	str	r7, [r3, #0]
 800ae0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 831d 	beq.w	800b44c <_dtoa_r+0xb34>
 800ae12:	601e      	str	r6, [r3, #0]
 800ae14:	e31a      	b.n	800b44c <_dtoa_r+0xb34>
 800ae16:	07e2      	lsls	r2, r4, #31
 800ae18:	d505      	bpl.n	800ae26 <_dtoa_r+0x50e>
 800ae1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae1e:	f7f5 fc23 	bl	8000668 <__aeabi_dmul>
 800ae22:	3601      	adds	r6, #1
 800ae24:	2301      	movs	r3, #1
 800ae26:	1064      	asrs	r4, r4, #1
 800ae28:	3508      	adds	r5, #8
 800ae2a:	e73f      	b.n	800acac <_dtoa_r+0x394>
 800ae2c:	2602      	movs	r6, #2
 800ae2e:	e742      	b.n	800acb6 <_dtoa_r+0x39e>
 800ae30:	9c07      	ldr	r4, [sp, #28]
 800ae32:	9704      	str	r7, [sp, #16]
 800ae34:	e761      	b.n	800acfa <_dtoa_r+0x3e2>
 800ae36:	4b27      	ldr	r3, [pc, #156]	@ (800aed4 <_dtoa_r+0x5bc>)
 800ae38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae42:	4454      	add	r4, sl
 800ae44:	2900      	cmp	r1, #0
 800ae46:	d053      	beq.n	800aef0 <_dtoa_r+0x5d8>
 800ae48:	4928      	ldr	r1, [pc, #160]	@ (800aeec <_dtoa_r+0x5d4>)
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f7f5 fd36 	bl	80008bc <__aeabi_ddiv>
 800ae50:	4633      	mov	r3, r6
 800ae52:	462a      	mov	r2, r5
 800ae54:	f7f5 fa50 	bl	80002f8 <__aeabi_dsub>
 800ae58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae5c:	4656      	mov	r6, sl
 800ae5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae62:	f7f5 feb1 	bl	8000bc8 <__aeabi_d2iz>
 800ae66:	4605      	mov	r5, r0
 800ae68:	f7f5 fb94 	bl	8000594 <__aeabi_i2d>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae74:	f7f5 fa40 	bl	80002f8 <__aeabi_dsub>
 800ae78:	3530      	adds	r5, #48	@ 0x30
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae82:	f806 5b01 	strb.w	r5, [r6], #1
 800ae86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae8a:	f7f5 fe5f 	bl	8000b4c <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d171      	bne.n	800af76 <_dtoa_r+0x65e>
 800ae92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae96:	4911      	ldr	r1, [pc, #68]	@ (800aedc <_dtoa_r+0x5c4>)
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f7f5 fa2d 	bl	80002f8 <__aeabi_dsub>
 800ae9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aea2:	f7f5 fe53 	bl	8000b4c <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f040 8095 	bne.w	800afd6 <_dtoa_r+0x6be>
 800aeac:	42a6      	cmp	r6, r4
 800aeae:	f43f af50 	beq.w	800ad52 <_dtoa_r+0x43a>
 800aeb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aeb6:	4b0a      	ldr	r3, [pc, #40]	@ (800aee0 <_dtoa_r+0x5c8>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7f5 fbd5 	bl	8000668 <__aeabi_dmul>
 800aebe:	4b08      	ldr	r3, [pc, #32]	@ (800aee0 <_dtoa_r+0x5c8>)
 800aec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aec4:	2200      	movs	r2, #0
 800aec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeca:	f7f5 fbcd 	bl	8000668 <__aeabi_dmul>
 800aece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed2:	e7c4      	b.n	800ae5e <_dtoa_r+0x546>
 800aed4:	0800cba0 	.word	0x0800cba0
 800aed8:	0800cb78 	.word	0x0800cb78
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	40240000 	.word	0x40240000
 800aee4:	401c0000 	.word	0x401c0000
 800aee8:	40140000 	.word	0x40140000
 800aeec:	3fe00000 	.word	0x3fe00000
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	f7f5 fbb8 	bl	8000668 <__aeabi_dmul>
 800aef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aefc:	9415      	str	r4, [sp, #84]	@ 0x54
 800aefe:	4656      	mov	r6, sl
 800af00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af04:	f7f5 fe60 	bl	8000bc8 <__aeabi_d2iz>
 800af08:	4605      	mov	r5, r0
 800af0a:	f7f5 fb43 	bl	8000594 <__aeabi_i2d>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af16:	f7f5 f9ef 	bl	80002f8 <__aeabi_dsub>
 800af1a:	3530      	adds	r5, #48	@ 0x30
 800af1c:	f806 5b01 	strb.w	r5, [r6], #1
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	42a6      	cmp	r6, r4
 800af26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af2a:	f04f 0200 	mov.w	r2, #0
 800af2e:	d124      	bne.n	800af7a <_dtoa_r+0x662>
 800af30:	4bac      	ldr	r3, [pc, #688]	@ (800b1e4 <_dtoa_r+0x8cc>)
 800af32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af36:	f7f5 f9e1 	bl	80002fc <__adddf3>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af42:	f7f5 fe21 	bl	8000b88 <__aeabi_dcmpgt>
 800af46:	2800      	cmp	r0, #0
 800af48:	d145      	bne.n	800afd6 <_dtoa_r+0x6be>
 800af4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af4e:	49a5      	ldr	r1, [pc, #660]	@ (800b1e4 <_dtoa_r+0x8cc>)
 800af50:	2000      	movs	r0, #0
 800af52:	f7f5 f9d1 	bl	80002f8 <__aeabi_dsub>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5e:	f7f5 fdf5 	bl	8000b4c <__aeabi_dcmplt>
 800af62:	2800      	cmp	r0, #0
 800af64:	f43f aef5 	beq.w	800ad52 <_dtoa_r+0x43a>
 800af68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af6a:	1e73      	subs	r3, r6, #1
 800af6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800af6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af72:	2b30      	cmp	r3, #48	@ 0x30
 800af74:	d0f8      	beq.n	800af68 <_dtoa_r+0x650>
 800af76:	9f04      	ldr	r7, [sp, #16]
 800af78:	e73e      	b.n	800adf8 <_dtoa_r+0x4e0>
 800af7a:	4b9b      	ldr	r3, [pc, #620]	@ (800b1e8 <_dtoa_r+0x8d0>)
 800af7c:	f7f5 fb74 	bl	8000668 <__aeabi_dmul>
 800af80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af84:	e7bc      	b.n	800af00 <_dtoa_r+0x5e8>
 800af86:	d10c      	bne.n	800afa2 <_dtoa_r+0x68a>
 800af88:	4b98      	ldr	r3, [pc, #608]	@ (800b1ec <_dtoa_r+0x8d4>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af90:	f7f5 fb6a 	bl	8000668 <__aeabi_dmul>
 800af94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af98:	f7f5 fdec 	bl	8000b74 <__aeabi_dcmpge>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f000 8157 	beq.w	800b250 <_dtoa_r+0x938>
 800afa2:	2400      	movs	r4, #0
 800afa4:	4625      	mov	r5, r4
 800afa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afa8:	43db      	mvns	r3, r3
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	4656      	mov	r6, sl
 800afae:	2700      	movs	r7, #0
 800afb0:	4621      	mov	r1, r4
 800afb2:	4658      	mov	r0, fp
 800afb4:	f000 fbb4 	bl	800b720 <_Bfree>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	d0dc      	beq.n	800af76 <_dtoa_r+0x65e>
 800afbc:	b12f      	cbz	r7, 800afca <_dtoa_r+0x6b2>
 800afbe:	42af      	cmp	r7, r5
 800afc0:	d003      	beq.n	800afca <_dtoa_r+0x6b2>
 800afc2:	4639      	mov	r1, r7
 800afc4:	4658      	mov	r0, fp
 800afc6:	f000 fbab 	bl	800b720 <_Bfree>
 800afca:	4629      	mov	r1, r5
 800afcc:	4658      	mov	r0, fp
 800afce:	f000 fba7 	bl	800b720 <_Bfree>
 800afd2:	e7d0      	b.n	800af76 <_dtoa_r+0x65e>
 800afd4:	9704      	str	r7, [sp, #16]
 800afd6:	4633      	mov	r3, r6
 800afd8:	461e      	mov	r6, r3
 800afda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afde:	2a39      	cmp	r2, #57	@ 0x39
 800afe0:	d107      	bne.n	800aff2 <_dtoa_r+0x6da>
 800afe2:	459a      	cmp	sl, r3
 800afe4:	d1f8      	bne.n	800afd8 <_dtoa_r+0x6c0>
 800afe6:	9a04      	ldr	r2, [sp, #16]
 800afe8:	3201      	adds	r2, #1
 800afea:	9204      	str	r2, [sp, #16]
 800afec:	2230      	movs	r2, #48	@ 0x30
 800afee:	f88a 2000 	strb.w	r2, [sl]
 800aff2:	781a      	ldrb	r2, [r3, #0]
 800aff4:	3201      	adds	r2, #1
 800aff6:	701a      	strb	r2, [r3, #0]
 800aff8:	e7bd      	b.n	800af76 <_dtoa_r+0x65e>
 800affa:	4b7b      	ldr	r3, [pc, #492]	@ (800b1e8 <_dtoa_r+0x8d0>)
 800affc:	2200      	movs	r2, #0
 800affe:	f7f5 fb33 	bl	8000668 <__aeabi_dmul>
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	f7f5 fd95 	bl	8000b38 <__aeabi_dcmpeq>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f43f aebb 	beq.w	800ad8a <_dtoa_r+0x472>
 800b014:	e6f0      	b.n	800adf8 <_dtoa_r+0x4e0>
 800b016:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b018:	2a00      	cmp	r2, #0
 800b01a:	f000 80db 	beq.w	800b1d4 <_dtoa_r+0x8bc>
 800b01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b020:	2a01      	cmp	r2, #1
 800b022:	f300 80bf 	bgt.w	800b1a4 <_dtoa_r+0x88c>
 800b026:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b028:	2a00      	cmp	r2, #0
 800b02a:	f000 80b7 	beq.w	800b19c <_dtoa_r+0x884>
 800b02e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b032:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b034:	4646      	mov	r6, r8
 800b036:	9a08      	ldr	r2, [sp, #32]
 800b038:	2101      	movs	r1, #1
 800b03a:	441a      	add	r2, r3
 800b03c:	4658      	mov	r0, fp
 800b03e:	4498      	add	r8, r3
 800b040:	9208      	str	r2, [sp, #32]
 800b042:	f000 fc21 	bl	800b888 <__i2b>
 800b046:	4605      	mov	r5, r0
 800b048:	b15e      	cbz	r6, 800b062 <_dtoa_r+0x74a>
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd08      	ble.n	800b062 <_dtoa_r+0x74a>
 800b050:	42b3      	cmp	r3, r6
 800b052:	9a08      	ldr	r2, [sp, #32]
 800b054:	bfa8      	it	ge
 800b056:	4633      	movge	r3, r6
 800b058:	eba8 0803 	sub.w	r8, r8, r3
 800b05c:	1af6      	subs	r6, r6, r3
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	9308      	str	r3, [sp, #32]
 800b062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b064:	b1f3      	cbz	r3, 800b0a4 <_dtoa_r+0x78c>
 800b066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 80b7 	beq.w	800b1dc <_dtoa_r+0x8c4>
 800b06e:	b18c      	cbz	r4, 800b094 <_dtoa_r+0x77c>
 800b070:	4629      	mov	r1, r5
 800b072:	4622      	mov	r2, r4
 800b074:	4658      	mov	r0, fp
 800b076:	f000 fcc7 	bl	800ba08 <__pow5mult>
 800b07a:	464a      	mov	r2, r9
 800b07c:	4601      	mov	r1, r0
 800b07e:	4605      	mov	r5, r0
 800b080:	4658      	mov	r0, fp
 800b082:	f000 fc17 	bl	800b8b4 <__multiply>
 800b086:	4649      	mov	r1, r9
 800b088:	9004      	str	r0, [sp, #16]
 800b08a:	4658      	mov	r0, fp
 800b08c:	f000 fb48 	bl	800b720 <_Bfree>
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	4699      	mov	r9, r3
 800b094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b096:	1b1a      	subs	r2, r3, r4
 800b098:	d004      	beq.n	800b0a4 <_dtoa_r+0x78c>
 800b09a:	4649      	mov	r1, r9
 800b09c:	4658      	mov	r0, fp
 800b09e:	f000 fcb3 	bl	800ba08 <__pow5mult>
 800b0a2:	4681      	mov	r9, r0
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	4658      	mov	r0, fp
 800b0a8:	f000 fbee 	bl	800b888 <__i2b>
 800b0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 81cf 	beq.w	800b454 <_dtoa_r+0xb3c>
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4658      	mov	r0, fp
 800b0bc:	f000 fca4 	bl	800ba08 <__pow5mult>
 800b0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	f300 8095 	bgt.w	800b1f4 <_dtoa_r+0x8dc>
 800b0ca:	9b02      	ldr	r3, [sp, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f040 8087 	bne.w	800b1e0 <_dtoa_r+0x8c8>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f040 8089 	bne.w	800b1f0 <_dtoa_r+0x8d8>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0e4:	0d1b      	lsrs	r3, r3, #20
 800b0e6:	051b      	lsls	r3, r3, #20
 800b0e8:	b12b      	cbz	r3, 800b0f6 <_dtoa_r+0x7de>
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	9308      	str	r3, [sp, #32]
 800b0f0:	f108 0801 	add.w	r8, r8, #1
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 81b0 	beq.w	800b460 <_dtoa_r+0xb48>
 800b100:	6923      	ldr	r3, [r4, #16]
 800b102:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b106:	6918      	ldr	r0, [r3, #16]
 800b108:	f000 fb72 	bl	800b7f0 <__hi0bits>
 800b10c:	f1c0 0020 	rsb	r0, r0, #32
 800b110:	9b08      	ldr	r3, [sp, #32]
 800b112:	4418      	add	r0, r3
 800b114:	f010 001f 	ands.w	r0, r0, #31
 800b118:	d077      	beq.n	800b20a <_dtoa_r+0x8f2>
 800b11a:	f1c0 0320 	rsb	r3, r0, #32
 800b11e:	2b04      	cmp	r3, #4
 800b120:	dd6b      	ble.n	800b1fa <_dtoa_r+0x8e2>
 800b122:	9b08      	ldr	r3, [sp, #32]
 800b124:	f1c0 001c 	rsb	r0, r0, #28
 800b128:	4403      	add	r3, r0
 800b12a:	4480      	add	r8, r0
 800b12c:	4406      	add	r6, r0
 800b12e:	9308      	str	r3, [sp, #32]
 800b130:	f1b8 0f00 	cmp.w	r8, #0
 800b134:	dd05      	ble.n	800b142 <_dtoa_r+0x82a>
 800b136:	4649      	mov	r1, r9
 800b138:	4642      	mov	r2, r8
 800b13a:	4658      	mov	r0, fp
 800b13c:	f000 fcbe 	bl	800babc <__lshift>
 800b140:	4681      	mov	r9, r0
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd05      	ble.n	800b154 <_dtoa_r+0x83c>
 800b148:	4621      	mov	r1, r4
 800b14a:	461a      	mov	r2, r3
 800b14c:	4658      	mov	r0, fp
 800b14e:	f000 fcb5 	bl	800babc <__lshift>
 800b152:	4604      	mov	r4, r0
 800b154:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b156:	2b00      	cmp	r3, #0
 800b158:	d059      	beq.n	800b20e <_dtoa_r+0x8f6>
 800b15a:	4621      	mov	r1, r4
 800b15c:	4648      	mov	r0, r9
 800b15e:	f000 fd19 	bl	800bb94 <__mcmp>
 800b162:	2800      	cmp	r0, #0
 800b164:	da53      	bge.n	800b20e <_dtoa_r+0x8f6>
 800b166:	1e7b      	subs	r3, r7, #1
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	4649      	mov	r1, r9
 800b16c:	2300      	movs	r3, #0
 800b16e:	220a      	movs	r2, #10
 800b170:	4658      	mov	r0, fp
 800b172:	f000 faf7 	bl	800b764 <__multadd>
 800b176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b178:	4681      	mov	r9, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8172 	beq.w	800b464 <_dtoa_r+0xb4c>
 800b180:	2300      	movs	r3, #0
 800b182:	4629      	mov	r1, r5
 800b184:	220a      	movs	r2, #10
 800b186:	4658      	mov	r0, fp
 800b188:	f000 faec 	bl	800b764 <__multadd>
 800b18c:	9b00      	ldr	r3, [sp, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	4605      	mov	r5, r0
 800b192:	dc67      	bgt.n	800b264 <_dtoa_r+0x94c>
 800b194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b196:	2b02      	cmp	r3, #2
 800b198:	dc41      	bgt.n	800b21e <_dtoa_r+0x906>
 800b19a:	e063      	b.n	800b264 <_dtoa_r+0x94c>
 800b19c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b19e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1a2:	e746      	b.n	800b032 <_dtoa_r+0x71a>
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	1e5c      	subs	r4, r3, #1
 800b1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	bfbf      	itttt	lt
 800b1ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1b4:	1ae3      	sublt	r3, r4, r3
 800b1b6:	bfb4      	ite	lt
 800b1b8:	18d2      	addlt	r2, r2, r3
 800b1ba:	1b1c      	subge	r4, r3, r4
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	bfbc      	itt	lt
 800b1c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1c2:	2400      	movlt	r4, #0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	bfb5      	itete	lt
 800b1c8:	eba8 0603 	sublt.w	r6, r8, r3
 800b1cc:	9b07      	ldrge	r3, [sp, #28]
 800b1ce:	2300      	movlt	r3, #0
 800b1d0:	4646      	movge	r6, r8
 800b1d2:	e730      	b.n	800b036 <_dtoa_r+0x71e>
 800b1d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1d8:	4646      	mov	r6, r8
 800b1da:	e735      	b.n	800b048 <_dtoa_r+0x730>
 800b1dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1de:	e75c      	b.n	800b09a <_dtoa_r+0x782>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e788      	b.n	800b0f6 <_dtoa_r+0x7de>
 800b1e4:	3fe00000 	.word	0x3fe00000
 800b1e8:	40240000 	.word	0x40240000
 800b1ec:	40140000 	.word	0x40140000
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	e780      	b.n	800b0f6 <_dtoa_r+0x7de>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1f8:	e782      	b.n	800b100 <_dtoa_r+0x7e8>
 800b1fa:	d099      	beq.n	800b130 <_dtoa_r+0x818>
 800b1fc:	9a08      	ldr	r2, [sp, #32]
 800b1fe:	331c      	adds	r3, #28
 800b200:	441a      	add	r2, r3
 800b202:	4498      	add	r8, r3
 800b204:	441e      	add	r6, r3
 800b206:	9208      	str	r2, [sp, #32]
 800b208:	e792      	b.n	800b130 <_dtoa_r+0x818>
 800b20a:	4603      	mov	r3, r0
 800b20c:	e7f6      	b.n	800b1fc <_dtoa_r+0x8e4>
 800b20e:	9b07      	ldr	r3, [sp, #28]
 800b210:	9704      	str	r7, [sp, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dc20      	bgt.n	800b258 <_dtoa_r+0x940>
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	dd1e      	ble.n	800b25c <_dtoa_r+0x944>
 800b21e:	9b00      	ldr	r3, [sp, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	f47f aec0 	bne.w	800afa6 <_dtoa_r+0x68e>
 800b226:	4621      	mov	r1, r4
 800b228:	2205      	movs	r2, #5
 800b22a:	4658      	mov	r0, fp
 800b22c:	f000 fa9a 	bl	800b764 <__multadd>
 800b230:	4601      	mov	r1, r0
 800b232:	4604      	mov	r4, r0
 800b234:	4648      	mov	r0, r9
 800b236:	f000 fcad 	bl	800bb94 <__mcmp>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	f77f aeb3 	ble.w	800afa6 <_dtoa_r+0x68e>
 800b240:	4656      	mov	r6, sl
 800b242:	2331      	movs	r3, #49	@ 0x31
 800b244:	f806 3b01 	strb.w	r3, [r6], #1
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	3301      	adds	r3, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	e6ae      	b.n	800afae <_dtoa_r+0x696>
 800b250:	9c07      	ldr	r4, [sp, #28]
 800b252:	9704      	str	r7, [sp, #16]
 800b254:	4625      	mov	r5, r4
 800b256:	e7f3      	b.n	800b240 <_dtoa_r+0x928>
 800b258:	9b07      	ldr	r3, [sp, #28]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 8104 	beq.w	800b46c <_dtoa_r+0xb54>
 800b264:	2e00      	cmp	r6, #0
 800b266:	dd05      	ble.n	800b274 <_dtoa_r+0x95c>
 800b268:	4629      	mov	r1, r5
 800b26a:	4632      	mov	r2, r6
 800b26c:	4658      	mov	r0, fp
 800b26e:	f000 fc25 	bl	800babc <__lshift>
 800b272:	4605      	mov	r5, r0
 800b274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d05a      	beq.n	800b330 <_dtoa_r+0xa18>
 800b27a:	6869      	ldr	r1, [r5, #4]
 800b27c:	4658      	mov	r0, fp
 800b27e:	f000 fa0f 	bl	800b6a0 <_Balloc>
 800b282:	4606      	mov	r6, r0
 800b284:	b928      	cbnz	r0, 800b292 <_dtoa_r+0x97a>
 800b286:	4b84      	ldr	r3, [pc, #528]	@ (800b498 <_dtoa_r+0xb80>)
 800b288:	4602      	mov	r2, r0
 800b28a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b28e:	f7ff bb5a 	b.w	800a946 <_dtoa_r+0x2e>
 800b292:	692a      	ldr	r2, [r5, #16]
 800b294:	3202      	adds	r2, #2
 800b296:	0092      	lsls	r2, r2, #2
 800b298:	f105 010c 	add.w	r1, r5, #12
 800b29c:	300c      	adds	r0, #12
 800b29e:	f001 f833 	bl	800c308 <memcpy>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f000 fc08 	bl	800babc <__lshift>
 800b2ac:	f10a 0301 	add.w	r3, sl, #1
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	9b00      	ldr	r3, [sp, #0]
 800b2b4:	4453      	add	r3, sl
 800b2b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2b8:	9b02      	ldr	r3, [sp, #8]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	462f      	mov	r7, r5
 800b2c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	4648      	mov	r0, r9
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	f7ff fa98 	bl	800a802 <quorem>
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	9002      	str	r0, [sp, #8]
 800b2d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2da:	4648      	mov	r0, r9
 800b2dc:	f000 fc5a 	bl	800bb94 <__mcmp>
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	9008      	str	r0, [sp, #32]
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	f000 fc70 	bl	800bbcc <__mdiff>
 800b2ec:	68c2      	ldr	r2, [r0, #12]
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	bb02      	cbnz	r2, 800b334 <_dtoa_r+0xa1c>
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	4648      	mov	r0, r9
 800b2f6:	f000 fc4d 	bl	800bb94 <__mcmp>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4658      	mov	r0, fp
 800b300:	920e      	str	r2, [sp, #56]	@ 0x38
 800b302:	f000 fa0d 	bl	800b720 <_Bfree>
 800b306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b30a:	9e07      	ldr	r6, [sp, #28]
 800b30c:	ea43 0102 	orr.w	r1, r3, r2
 800b310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b312:	4319      	orrs	r1, r3
 800b314:	d110      	bne.n	800b338 <_dtoa_r+0xa20>
 800b316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b31a:	d029      	beq.n	800b370 <_dtoa_r+0xa58>
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd02      	ble.n	800b328 <_dtoa_r+0xa10>
 800b322:	9b02      	ldr	r3, [sp, #8]
 800b324:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	f883 8000 	strb.w	r8, [r3]
 800b32e:	e63f      	b.n	800afb0 <_dtoa_r+0x698>
 800b330:	4628      	mov	r0, r5
 800b332:	e7bb      	b.n	800b2ac <_dtoa_r+0x994>
 800b334:	2201      	movs	r2, #1
 800b336:	e7e1      	b.n	800b2fc <_dtoa_r+0x9e4>
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	db04      	blt.n	800b348 <_dtoa_r+0xa30>
 800b33e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b340:	430b      	orrs	r3, r1
 800b342:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b344:	430b      	orrs	r3, r1
 800b346:	d120      	bne.n	800b38a <_dtoa_r+0xa72>
 800b348:	2a00      	cmp	r2, #0
 800b34a:	dded      	ble.n	800b328 <_dtoa_r+0xa10>
 800b34c:	4649      	mov	r1, r9
 800b34e:	2201      	movs	r2, #1
 800b350:	4658      	mov	r0, fp
 800b352:	f000 fbb3 	bl	800babc <__lshift>
 800b356:	4621      	mov	r1, r4
 800b358:	4681      	mov	r9, r0
 800b35a:	f000 fc1b 	bl	800bb94 <__mcmp>
 800b35e:	2800      	cmp	r0, #0
 800b360:	dc03      	bgt.n	800b36a <_dtoa_r+0xa52>
 800b362:	d1e1      	bne.n	800b328 <_dtoa_r+0xa10>
 800b364:	f018 0f01 	tst.w	r8, #1
 800b368:	d0de      	beq.n	800b328 <_dtoa_r+0xa10>
 800b36a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b36e:	d1d8      	bne.n	800b322 <_dtoa_r+0xa0a>
 800b370:	9a00      	ldr	r2, [sp, #0]
 800b372:	2339      	movs	r3, #57	@ 0x39
 800b374:	7013      	strb	r3, [r2, #0]
 800b376:	4633      	mov	r3, r6
 800b378:	461e      	mov	r6, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b380:	2a39      	cmp	r2, #57	@ 0x39
 800b382:	d052      	beq.n	800b42a <_dtoa_r+0xb12>
 800b384:	3201      	adds	r2, #1
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	e612      	b.n	800afb0 <_dtoa_r+0x698>
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	dd07      	ble.n	800b39e <_dtoa_r+0xa86>
 800b38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b392:	d0ed      	beq.n	800b370 <_dtoa_r+0xa58>
 800b394:	9a00      	ldr	r2, [sp, #0]
 800b396:	f108 0301 	add.w	r3, r8, #1
 800b39a:	7013      	strb	r3, [r2, #0]
 800b39c:	e608      	b.n	800afb0 <_dtoa_r+0x698>
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	9a07      	ldr	r2, [sp, #28]
 800b3a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d028      	beq.n	800b3fe <_dtoa_r+0xae6>
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	220a      	movs	r2, #10
 800b3b2:	4658      	mov	r0, fp
 800b3b4:	f000 f9d6 	bl	800b764 <__multadd>
 800b3b8:	42af      	cmp	r7, r5
 800b3ba:	4681      	mov	r9, r0
 800b3bc:	f04f 0300 	mov.w	r3, #0
 800b3c0:	f04f 020a 	mov.w	r2, #10
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	d107      	bne.n	800b3da <_dtoa_r+0xac2>
 800b3ca:	f000 f9cb 	bl	800b764 <__multadd>
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	9b07      	ldr	r3, [sp, #28]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	e774      	b.n	800b2c4 <_dtoa_r+0x9ac>
 800b3da:	f000 f9c3 	bl	800b764 <__multadd>
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	220a      	movs	r2, #10
 800b3e6:	4658      	mov	r0, fp
 800b3e8:	f000 f9bc 	bl	800b764 <__multadd>
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	e7f0      	b.n	800b3d2 <_dtoa_r+0xaba>
 800b3f0:	9b00      	ldr	r3, [sp, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bfcc      	ite	gt
 800b3f6:	461e      	movgt	r6, r3
 800b3f8:	2601      	movle	r6, #1
 800b3fa:	4456      	add	r6, sl
 800b3fc:	2700      	movs	r7, #0
 800b3fe:	4649      	mov	r1, r9
 800b400:	2201      	movs	r2, #1
 800b402:	4658      	mov	r0, fp
 800b404:	f000 fb5a 	bl	800babc <__lshift>
 800b408:	4621      	mov	r1, r4
 800b40a:	4681      	mov	r9, r0
 800b40c:	f000 fbc2 	bl	800bb94 <__mcmp>
 800b410:	2800      	cmp	r0, #0
 800b412:	dcb0      	bgt.n	800b376 <_dtoa_r+0xa5e>
 800b414:	d102      	bne.n	800b41c <_dtoa_r+0xb04>
 800b416:	f018 0f01 	tst.w	r8, #1
 800b41a:	d1ac      	bne.n	800b376 <_dtoa_r+0xa5e>
 800b41c:	4633      	mov	r3, r6
 800b41e:	461e      	mov	r6, r3
 800b420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b424:	2a30      	cmp	r2, #48	@ 0x30
 800b426:	d0fa      	beq.n	800b41e <_dtoa_r+0xb06>
 800b428:	e5c2      	b.n	800afb0 <_dtoa_r+0x698>
 800b42a:	459a      	cmp	sl, r3
 800b42c:	d1a4      	bne.n	800b378 <_dtoa_r+0xa60>
 800b42e:	9b04      	ldr	r3, [sp, #16]
 800b430:	3301      	adds	r3, #1
 800b432:	9304      	str	r3, [sp, #16]
 800b434:	2331      	movs	r3, #49	@ 0x31
 800b436:	f88a 3000 	strb.w	r3, [sl]
 800b43a:	e5b9      	b.n	800afb0 <_dtoa_r+0x698>
 800b43c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b43e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b49c <_dtoa_r+0xb84>
 800b442:	b11b      	cbz	r3, 800b44c <_dtoa_r+0xb34>
 800b444:	f10a 0308 	add.w	r3, sl, #8
 800b448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	4650      	mov	r0, sl
 800b44e:	b019      	add	sp, #100	@ 0x64
 800b450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b456:	2b01      	cmp	r3, #1
 800b458:	f77f ae37 	ble.w	800b0ca <_dtoa_r+0x7b2>
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b460:	2001      	movs	r0, #1
 800b462:	e655      	b.n	800b110 <_dtoa_r+0x7f8>
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f77f aed6 	ble.w	800b218 <_dtoa_r+0x900>
 800b46c:	4656      	mov	r6, sl
 800b46e:	4621      	mov	r1, r4
 800b470:	4648      	mov	r0, r9
 800b472:	f7ff f9c6 	bl	800a802 <quorem>
 800b476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b47a:	f806 8b01 	strb.w	r8, [r6], #1
 800b47e:	9b00      	ldr	r3, [sp, #0]
 800b480:	eba6 020a 	sub.w	r2, r6, sl
 800b484:	4293      	cmp	r3, r2
 800b486:	ddb3      	ble.n	800b3f0 <_dtoa_r+0xad8>
 800b488:	4649      	mov	r1, r9
 800b48a:	2300      	movs	r3, #0
 800b48c:	220a      	movs	r2, #10
 800b48e:	4658      	mov	r0, fp
 800b490:	f000 f968 	bl	800b764 <__multadd>
 800b494:	4681      	mov	r9, r0
 800b496:	e7ea      	b.n	800b46e <_dtoa_r+0xb56>
 800b498:	0800cafd 	.word	0x0800cafd
 800b49c:	0800ca81 	.word	0x0800ca81

0800b4a0 <_free_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d041      	beq.n	800b52c <_free_r+0x8c>
 800b4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ac:	1f0c      	subs	r4, r1, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bfb8      	it	lt
 800b4b2:	18e4      	addlt	r4, r4, r3
 800b4b4:	f000 f8e8 	bl	800b688 <__malloc_lock>
 800b4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b530 <_free_r+0x90>)
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x2c>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c8:	f000 b8e4 	b.w	800b694 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x42>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	1821      	adds	r1, r4, r0
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1809      	addeq	r1, r1, r0
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x1e>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x4c>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x42>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1850      	adds	r0, r2, r1
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x6c>
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	4401      	add	r1, r0
 800b4f8:	1850      	adds	r0, r2, r1
 800b4fa:	4283      	cmp	r3, r0
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x22>
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	6053      	str	r3, [r2, #4]
 800b506:	4408      	add	r0, r1
 800b508:	6010      	str	r0, [r2, #0]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x22>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x74>
 800b50e:	230c      	movs	r3, #12
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x22>
 800b514:	6820      	ldr	r0, [r4, #0]
 800b516:	1821      	adds	r1, r4, r0
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf04      	itt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	bf04      	itt	eq
 800b524:	1809      	addeq	r1, r1, r0
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6054      	str	r4, [r2, #4]
 800b52a:	e7ca      	b.n	800b4c2 <_free_r+0x22>
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	bf00      	nop
 800b530:	20000694 	.word	0x20000694

0800b534 <malloc>:
 800b534:	4b02      	ldr	r3, [pc, #8]	@ (800b540 <malloc+0xc>)
 800b536:	4601      	mov	r1, r0
 800b538:	6818      	ldr	r0, [r3, #0]
 800b53a:	f000 b825 	b.w	800b588 <_malloc_r>
 800b53e:	bf00      	nop
 800b540:	20000018 	.word	0x20000018

0800b544 <sbrk_aligned>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4e0f      	ldr	r6, [pc, #60]	@ (800b584 <sbrk_aligned+0x40>)
 800b548:	460c      	mov	r4, r1
 800b54a:	6831      	ldr	r1, [r6, #0]
 800b54c:	4605      	mov	r5, r0
 800b54e:	b911      	cbnz	r1, 800b556 <sbrk_aligned+0x12>
 800b550:	f000 feca 	bl	800c2e8 <_sbrk_r>
 800b554:	6030      	str	r0, [r6, #0]
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 fec5 	bl	800c2e8 <_sbrk_r>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d103      	bne.n	800b56a <sbrk_aligned+0x26>
 800b562:	f04f 34ff 	mov.w	r4, #4294967295
 800b566:	4620      	mov	r0, r4
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	1cc4      	adds	r4, r0, #3
 800b56c:	f024 0403 	bic.w	r4, r4, #3
 800b570:	42a0      	cmp	r0, r4
 800b572:	d0f8      	beq.n	800b566 <sbrk_aligned+0x22>
 800b574:	1a21      	subs	r1, r4, r0
 800b576:	4628      	mov	r0, r5
 800b578:	f000 feb6 	bl	800c2e8 <_sbrk_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1f2      	bne.n	800b566 <sbrk_aligned+0x22>
 800b580:	e7ef      	b.n	800b562 <sbrk_aligned+0x1e>
 800b582:	bf00      	nop
 800b584:	20000690 	.word	0x20000690

0800b588 <_malloc_r>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	1ccd      	adds	r5, r1, #3
 800b58e:	f025 0503 	bic.w	r5, r5, #3
 800b592:	3508      	adds	r5, #8
 800b594:	2d0c      	cmp	r5, #12
 800b596:	bf38      	it	cc
 800b598:	250c      	movcc	r5, #12
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	4606      	mov	r6, r0
 800b59e:	db01      	blt.n	800b5a4 <_malloc_r+0x1c>
 800b5a0:	42a9      	cmp	r1, r5
 800b5a2:	d904      	bls.n	800b5ae <_malloc_r+0x26>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	6033      	str	r3, [r6, #0]
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b684 <_malloc_r+0xfc>
 800b5b2:	f000 f869 	bl	800b688 <__malloc_lock>
 800b5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ba:	461c      	mov	r4, r3
 800b5bc:	bb44      	cbnz	r4, 800b610 <_malloc_r+0x88>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ffbf 	bl	800b544 <sbrk_aligned>
 800b5c6:	1c43      	adds	r3, r0, #1
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	d158      	bne.n	800b67e <_malloc_r+0xf6>
 800b5cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b5d0:	4627      	mov	r7, r4
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	d143      	bne.n	800b65e <_malloc_r+0xd6>
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	d04b      	beq.n	800b672 <_malloc_r+0xea>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4630      	mov	r0, r6
 800b5e0:	eb04 0903 	add.w	r9, r4, r3
 800b5e4:	f000 fe80 	bl	800c2e8 <_sbrk_r>
 800b5e8:	4581      	cmp	r9, r0
 800b5ea:	d142      	bne.n	800b672 <_malloc_r+0xea>
 800b5ec:	6821      	ldr	r1, [r4, #0]
 800b5ee:	1a6d      	subs	r5, r5, r1
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7ff ffa6 	bl	800b544 <sbrk_aligned>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d03a      	beq.n	800b672 <_malloc_r+0xea>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	442b      	add	r3, r5
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	f8d8 3000 	ldr.w	r3, [r8]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	bb62      	cbnz	r2, 800b664 <_malloc_r+0xdc>
 800b60a:	f8c8 7000 	str.w	r7, [r8]
 800b60e:	e00f      	b.n	800b630 <_malloc_r+0xa8>
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	1b52      	subs	r2, r2, r5
 800b614:	d420      	bmi.n	800b658 <_malloc_r+0xd0>
 800b616:	2a0b      	cmp	r2, #11
 800b618:	d917      	bls.n	800b64a <_malloc_r+0xc2>
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	bf18      	it	ne
 800b622:	6059      	strne	r1, [r3, #4]
 800b624:	6863      	ldr	r3, [r4, #4]
 800b626:	bf08      	it	eq
 800b628:	f8c8 1000 	streq.w	r1, [r8]
 800b62c:	5162      	str	r2, [r4, r5]
 800b62e:	604b      	str	r3, [r1, #4]
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f82f 	bl	800b694 <__malloc_unlock>
 800b636:	f104 000b 	add.w	r0, r4, #11
 800b63a:	1d23      	adds	r3, r4, #4
 800b63c:	f020 0007 	bic.w	r0, r0, #7
 800b640:	1ac2      	subs	r2, r0, r3
 800b642:	bf1c      	itt	ne
 800b644:	1a1b      	subne	r3, r3, r0
 800b646:	50a3      	strne	r3, [r4, r2]
 800b648:	e7af      	b.n	800b5aa <_malloc_r+0x22>
 800b64a:	6862      	ldr	r2, [r4, #4]
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	bf0c      	ite	eq
 800b650:	f8c8 2000 	streq.w	r2, [r8]
 800b654:	605a      	strne	r2, [r3, #4]
 800b656:	e7eb      	b.n	800b630 <_malloc_r+0xa8>
 800b658:	4623      	mov	r3, r4
 800b65a:	6864      	ldr	r4, [r4, #4]
 800b65c:	e7ae      	b.n	800b5bc <_malloc_r+0x34>
 800b65e:	463c      	mov	r4, r7
 800b660:	687f      	ldr	r7, [r7, #4]
 800b662:	e7b6      	b.n	800b5d2 <_malloc_r+0x4a>
 800b664:	461a      	mov	r2, r3
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d1fb      	bne.n	800b664 <_malloc_r+0xdc>
 800b66c:	2300      	movs	r3, #0
 800b66e:	6053      	str	r3, [r2, #4]
 800b670:	e7de      	b.n	800b630 <_malloc_r+0xa8>
 800b672:	230c      	movs	r3, #12
 800b674:	6033      	str	r3, [r6, #0]
 800b676:	4630      	mov	r0, r6
 800b678:	f000 f80c 	bl	800b694 <__malloc_unlock>
 800b67c:	e794      	b.n	800b5a8 <_malloc_r+0x20>
 800b67e:	6005      	str	r5, [r0, #0]
 800b680:	e7d6      	b.n	800b630 <_malloc_r+0xa8>
 800b682:	bf00      	nop
 800b684:	20000694 	.word	0x20000694

0800b688 <__malloc_lock>:
 800b688:	4801      	ldr	r0, [pc, #4]	@ (800b690 <__malloc_lock+0x8>)
 800b68a:	f7ff b8b8 	b.w	800a7fe <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	2000068c 	.word	0x2000068c

0800b694 <__malloc_unlock>:
 800b694:	4801      	ldr	r0, [pc, #4]	@ (800b69c <__malloc_unlock+0x8>)
 800b696:	f7ff b8b3 	b.w	800a800 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	2000068c 	.word	0x2000068c

0800b6a0 <_Balloc>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	69c6      	ldr	r6, [r0, #28]
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	b976      	cbnz	r6, 800b6c8 <_Balloc+0x28>
 800b6aa:	2010      	movs	r0, #16
 800b6ac:	f7ff ff42 	bl	800b534 <malloc>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	61e0      	str	r0, [r4, #28]
 800b6b4:	b920      	cbnz	r0, 800b6c0 <_Balloc+0x20>
 800b6b6:	4b18      	ldr	r3, [pc, #96]	@ (800b718 <_Balloc+0x78>)
 800b6b8:	4818      	ldr	r0, [pc, #96]	@ (800b71c <_Balloc+0x7c>)
 800b6ba:	216b      	movs	r1, #107	@ 0x6b
 800b6bc:	f000 fe32 	bl	800c324 <__assert_func>
 800b6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6c4:	6006      	str	r6, [r0, #0]
 800b6c6:	60c6      	str	r6, [r0, #12]
 800b6c8:	69e6      	ldr	r6, [r4, #28]
 800b6ca:	68f3      	ldr	r3, [r6, #12]
 800b6cc:	b183      	cbz	r3, 800b6f0 <_Balloc+0x50>
 800b6ce:	69e3      	ldr	r3, [r4, #28]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6d6:	b9b8      	cbnz	r0, 800b708 <_Balloc+0x68>
 800b6d8:	2101      	movs	r1, #1
 800b6da:	fa01 f605 	lsl.w	r6, r1, r5
 800b6de:	1d72      	adds	r2, r6, #5
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 fe3c 	bl	800c360 <_calloc_r>
 800b6e8:	b160      	cbz	r0, 800b704 <_Balloc+0x64>
 800b6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6ee:	e00e      	b.n	800b70e <_Balloc+0x6e>
 800b6f0:	2221      	movs	r2, #33	@ 0x21
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f000 fe33 	bl	800c360 <_calloc_r>
 800b6fa:	69e3      	ldr	r3, [r4, #28]
 800b6fc:	60f0      	str	r0, [r6, #12]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e4      	bne.n	800b6ce <_Balloc+0x2e>
 800b704:	2000      	movs	r0, #0
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	6802      	ldr	r2, [r0, #0]
 800b70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b70e:	2300      	movs	r3, #0
 800b710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b714:	e7f7      	b.n	800b706 <_Balloc+0x66>
 800b716:	bf00      	nop
 800b718:	0800ca8e 	.word	0x0800ca8e
 800b71c:	0800cb0e 	.word	0x0800cb0e

0800b720 <_Bfree>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	69c6      	ldr	r6, [r0, #28]
 800b724:	4605      	mov	r5, r0
 800b726:	460c      	mov	r4, r1
 800b728:	b976      	cbnz	r6, 800b748 <_Bfree+0x28>
 800b72a:	2010      	movs	r0, #16
 800b72c:	f7ff ff02 	bl	800b534 <malloc>
 800b730:	4602      	mov	r2, r0
 800b732:	61e8      	str	r0, [r5, #28]
 800b734:	b920      	cbnz	r0, 800b740 <_Bfree+0x20>
 800b736:	4b09      	ldr	r3, [pc, #36]	@ (800b75c <_Bfree+0x3c>)
 800b738:	4809      	ldr	r0, [pc, #36]	@ (800b760 <_Bfree+0x40>)
 800b73a:	218f      	movs	r1, #143	@ 0x8f
 800b73c:	f000 fdf2 	bl	800c324 <__assert_func>
 800b740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b744:	6006      	str	r6, [r0, #0]
 800b746:	60c6      	str	r6, [r0, #12]
 800b748:	b13c      	cbz	r4, 800b75a <_Bfree+0x3a>
 800b74a:	69eb      	ldr	r3, [r5, #28]
 800b74c:	6862      	ldr	r2, [r4, #4]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b754:	6021      	str	r1, [r4, #0]
 800b756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	0800ca8e 	.word	0x0800ca8e
 800b760:	0800cb0e 	.word	0x0800cb0e

0800b764 <__multadd>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	690d      	ldr	r5, [r1, #16]
 800b76a:	4607      	mov	r7, r0
 800b76c:	460c      	mov	r4, r1
 800b76e:	461e      	mov	r6, r3
 800b770:	f101 0c14 	add.w	ip, r1, #20
 800b774:	2000      	movs	r0, #0
 800b776:	f8dc 3000 	ldr.w	r3, [ip]
 800b77a:	b299      	uxth	r1, r3
 800b77c:	fb02 6101 	mla	r1, r2, r1, r6
 800b780:	0c1e      	lsrs	r6, r3, #16
 800b782:	0c0b      	lsrs	r3, r1, #16
 800b784:	fb02 3306 	mla	r3, r2, r6, r3
 800b788:	b289      	uxth	r1, r1
 800b78a:	3001      	adds	r0, #1
 800b78c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b790:	4285      	cmp	r5, r0
 800b792:	f84c 1b04 	str.w	r1, [ip], #4
 800b796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b79a:	dcec      	bgt.n	800b776 <__multadd+0x12>
 800b79c:	b30e      	cbz	r6, 800b7e2 <__multadd+0x7e>
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	dc19      	bgt.n	800b7d8 <__multadd+0x74>
 800b7a4:	6861      	ldr	r1, [r4, #4]
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	3101      	adds	r1, #1
 800b7aa:	f7ff ff79 	bl	800b6a0 <_Balloc>
 800b7ae:	4680      	mov	r8, r0
 800b7b0:	b928      	cbnz	r0, 800b7be <__multadd+0x5a>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e8 <__multadd+0x84>)
 800b7b6:	480d      	ldr	r0, [pc, #52]	@ (800b7ec <__multadd+0x88>)
 800b7b8:	21ba      	movs	r1, #186	@ 0xba
 800b7ba:	f000 fdb3 	bl	800c324 <__assert_func>
 800b7be:	6922      	ldr	r2, [r4, #16]
 800b7c0:	3202      	adds	r2, #2
 800b7c2:	f104 010c 	add.w	r1, r4, #12
 800b7c6:	0092      	lsls	r2, r2, #2
 800b7c8:	300c      	adds	r0, #12
 800b7ca:	f000 fd9d 	bl	800c308 <memcpy>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	f7ff ffa5 	bl	800b720 <_Bfree>
 800b7d6:	4644      	mov	r4, r8
 800b7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7dc:	3501      	adds	r5, #1
 800b7de:	615e      	str	r6, [r3, #20]
 800b7e0:	6125      	str	r5, [r4, #16]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e8:	0800cafd 	.word	0x0800cafd
 800b7ec:	0800cb0e 	.word	0x0800cb0e

0800b7f0 <__hi0bits>:
 800b7f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	bf36      	itet	cc
 800b7f8:	0403      	lslcc	r3, r0, #16
 800b7fa:	2000      	movcs	r0, #0
 800b7fc:	2010      	movcc	r0, #16
 800b7fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b802:	bf3c      	itt	cc
 800b804:	021b      	lslcc	r3, r3, #8
 800b806:	3008      	addcc	r0, #8
 800b808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b80c:	bf3c      	itt	cc
 800b80e:	011b      	lslcc	r3, r3, #4
 800b810:	3004      	addcc	r0, #4
 800b812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b816:	bf3c      	itt	cc
 800b818:	009b      	lslcc	r3, r3, #2
 800b81a:	3002      	addcc	r0, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db05      	blt.n	800b82c <__hi0bits+0x3c>
 800b820:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b824:	f100 0001 	add.w	r0, r0, #1
 800b828:	bf08      	it	eq
 800b82a:	2020      	moveq	r0, #32
 800b82c:	4770      	bx	lr

0800b82e <__lo0bits>:
 800b82e:	6803      	ldr	r3, [r0, #0]
 800b830:	4602      	mov	r2, r0
 800b832:	f013 0007 	ands.w	r0, r3, #7
 800b836:	d00b      	beq.n	800b850 <__lo0bits+0x22>
 800b838:	07d9      	lsls	r1, r3, #31
 800b83a:	d421      	bmi.n	800b880 <__lo0bits+0x52>
 800b83c:	0798      	lsls	r0, r3, #30
 800b83e:	bf49      	itett	mi
 800b840:	085b      	lsrmi	r3, r3, #1
 800b842:	089b      	lsrpl	r3, r3, #2
 800b844:	2001      	movmi	r0, #1
 800b846:	6013      	strmi	r3, [r2, #0]
 800b848:	bf5c      	itt	pl
 800b84a:	6013      	strpl	r3, [r2, #0]
 800b84c:	2002      	movpl	r0, #2
 800b84e:	4770      	bx	lr
 800b850:	b299      	uxth	r1, r3
 800b852:	b909      	cbnz	r1, 800b858 <__lo0bits+0x2a>
 800b854:	0c1b      	lsrs	r3, r3, #16
 800b856:	2010      	movs	r0, #16
 800b858:	b2d9      	uxtb	r1, r3
 800b85a:	b909      	cbnz	r1, 800b860 <__lo0bits+0x32>
 800b85c:	3008      	adds	r0, #8
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	0719      	lsls	r1, r3, #28
 800b862:	bf04      	itt	eq
 800b864:	091b      	lsreq	r3, r3, #4
 800b866:	3004      	addeq	r0, #4
 800b868:	0799      	lsls	r1, r3, #30
 800b86a:	bf04      	itt	eq
 800b86c:	089b      	lsreq	r3, r3, #2
 800b86e:	3002      	addeq	r0, #2
 800b870:	07d9      	lsls	r1, r3, #31
 800b872:	d403      	bmi.n	800b87c <__lo0bits+0x4e>
 800b874:	085b      	lsrs	r3, r3, #1
 800b876:	f100 0001 	add.w	r0, r0, #1
 800b87a:	d003      	beq.n	800b884 <__lo0bits+0x56>
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	4770      	bx	lr
 800b880:	2000      	movs	r0, #0
 800b882:	4770      	bx	lr
 800b884:	2020      	movs	r0, #32
 800b886:	4770      	bx	lr

0800b888 <__i2b>:
 800b888:	b510      	push	{r4, lr}
 800b88a:	460c      	mov	r4, r1
 800b88c:	2101      	movs	r1, #1
 800b88e:	f7ff ff07 	bl	800b6a0 <_Balloc>
 800b892:	4602      	mov	r2, r0
 800b894:	b928      	cbnz	r0, 800b8a2 <__i2b+0x1a>
 800b896:	4b05      	ldr	r3, [pc, #20]	@ (800b8ac <__i2b+0x24>)
 800b898:	4805      	ldr	r0, [pc, #20]	@ (800b8b0 <__i2b+0x28>)
 800b89a:	f240 1145 	movw	r1, #325	@ 0x145
 800b89e:	f000 fd41 	bl	800c324 <__assert_func>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	6144      	str	r4, [r0, #20]
 800b8a6:	6103      	str	r3, [r0, #16]
 800b8a8:	bd10      	pop	{r4, pc}
 800b8aa:	bf00      	nop
 800b8ac:	0800cafd 	.word	0x0800cafd
 800b8b0:	0800cb0e 	.word	0x0800cb0e

0800b8b4 <__multiply>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	690a      	ldr	r2, [r1, #16]
 800b8bc:	6923      	ldr	r3, [r4, #16]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	bfa8      	it	ge
 800b8c2:	4623      	movge	r3, r4
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	bfa4      	itt	ge
 800b8c8:	460c      	movge	r4, r1
 800b8ca:	461f      	movge	r7, r3
 800b8cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b8d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b8d4:	68a3      	ldr	r3, [r4, #8]
 800b8d6:	6861      	ldr	r1, [r4, #4]
 800b8d8:	eb0a 0609 	add.w	r6, sl, r9
 800b8dc:	42b3      	cmp	r3, r6
 800b8de:	b085      	sub	sp, #20
 800b8e0:	bfb8      	it	lt
 800b8e2:	3101      	addlt	r1, #1
 800b8e4:	f7ff fedc 	bl	800b6a0 <_Balloc>
 800b8e8:	b930      	cbnz	r0, 800b8f8 <__multiply+0x44>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b44      	ldr	r3, [pc, #272]	@ (800ba00 <__multiply+0x14c>)
 800b8ee:	4845      	ldr	r0, [pc, #276]	@ (800ba04 <__multiply+0x150>)
 800b8f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b8f4:	f000 fd16 	bl	800c324 <__assert_func>
 800b8f8:	f100 0514 	add.w	r5, r0, #20
 800b8fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b900:	462b      	mov	r3, r5
 800b902:	2200      	movs	r2, #0
 800b904:	4543      	cmp	r3, r8
 800b906:	d321      	bcc.n	800b94c <__multiply+0x98>
 800b908:	f107 0114 	add.w	r1, r7, #20
 800b90c:	f104 0214 	add.w	r2, r4, #20
 800b910:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b914:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b918:	9302      	str	r3, [sp, #8]
 800b91a:	1b13      	subs	r3, r2, r4
 800b91c:	3b15      	subs	r3, #21
 800b91e:	f023 0303 	bic.w	r3, r3, #3
 800b922:	3304      	adds	r3, #4
 800b924:	f104 0715 	add.w	r7, r4, #21
 800b928:	42ba      	cmp	r2, r7
 800b92a:	bf38      	it	cc
 800b92c:	2304      	movcc	r3, #4
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	9b02      	ldr	r3, [sp, #8]
 800b932:	9103      	str	r1, [sp, #12]
 800b934:	428b      	cmp	r3, r1
 800b936:	d80c      	bhi.n	800b952 <__multiply+0x9e>
 800b938:	2e00      	cmp	r6, #0
 800b93a:	dd03      	ble.n	800b944 <__multiply+0x90>
 800b93c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b940:	2b00      	cmp	r3, #0
 800b942:	d05b      	beq.n	800b9fc <__multiply+0x148>
 800b944:	6106      	str	r6, [r0, #16]
 800b946:	b005      	add	sp, #20
 800b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94c:	f843 2b04 	str.w	r2, [r3], #4
 800b950:	e7d8      	b.n	800b904 <__multiply+0x50>
 800b952:	f8b1 a000 	ldrh.w	sl, [r1]
 800b956:	f1ba 0f00 	cmp.w	sl, #0
 800b95a:	d024      	beq.n	800b9a6 <__multiply+0xf2>
 800b95c:	f104 0e14 	add.w	lr, r4, #20
 800b960:	46a9      	mov	r9, r5
 800b962:	f04f 0c00 	mov.w	ip, #0
 800b966:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b96a:	f8d9 3000 	ldr.w	r3, [r9]
 800b96e:	fa1f fb87 	uxth.w	fp, r7
 800b972:	b29b      	uxth	r3, r3
 800b974:	fb0a 330b 	mla	r3, sl, fp, r3
 800b978:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b97c:	f8d9 7000 	ldr.w	r7, [r9]
 800b980:	4463      	add	r3, ip
 800b982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b986:	fb0a c70b 	mla	r7, sl, fp, ip
 800b98a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b98e:	b29b      	uxth	r3, r3
 800b990:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b994:	4572      	cmp	r2, lr
 800b996:	f849 3b04 	str.w	r3, [r9], #4
 800b99a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b99e:	d8e2      	bhi.n	800b966 <__multiply+0xb2>
 800b9a0:	9b01      	ldr	r3, [sp, #4]
 800b9a2:	f845 c003 	str.w	ip, [r5, r3]
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9ac:	3104      	adds	r1, #4
 800b9ae:	f1b9 0f00 	cmp.w	r9, #0
 800b9b2:	d021      	beq.n	800b9f8 <__multiply+0x144>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	f104 0c14 	add.w	ip, r4, #20
 800b9ba:	46ae      	mov	lr, r5
 800b9bc:	f04f 0a00 	mov.w	sl, #0
 800b9c0:	f8bc b000 	ldrh.w	fp, [ip]
 800b9c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b9c8:	fb09 770b 	mla	r7, r9, fp, r7
 800b9cc:	4457      	add	r7, sl
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9d4:	f84e 3b04 	str.w	r3, [lr], #4
 800b9d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9e0:	f8be 3000 	ldrh.w	r3, [lr]
 800b9e4:	fb09 330a 	mla	r3, r9, sl, r3
 800b9e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b9ec:	4562      	cmp	r2, ip
 800b9ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9f2:	d8e5      	bhi.n	800b9c0 <__multiply+0x10c>
 800b9f4:	9f01      	ldr	r7, [sp, #4]
 800b9f6:	51eb      	str	r3, [r5, r7]
 800b9f8:	3504      	adds	r5, #4
 800b9fa:	e799      	b.n	800b930 <__multiply+0x7c>
 800b9fc:	3e01      	subs	r6, #1
 800b9fe:	e79b      	b.n	800b938 <__multiply+0x84>
 800ba00:	0800cafd 	.word	0x0800cafd
 800ba04:	0800cb0e 	.word	0x0800cb0e

0800ba08 <__pow5mult>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	4615      	mov	r5, r2
 800ba0e:	f012 0203 	ands.w	r2, r2, #3
 800ba12:	4607      	mov	r7, r0
 800ba14:	460e      	mov	r6, r1
 800ba16:	d007      	beq.n	800ba28 <__pow5mult+0x20>
 800ba18:	4c25      	ldr	r4, [pc, #148]	@ (800bab0 <__pow5mult+0xa8>)
 800ba1a:	3a01      	subs	r2, #1
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba22:	f7ff fe9f 	bl	800b764 <__multadd>
 800ba26:	4606      	mov	r6, r0
 800ba28:	10ad      	asrs	r5, r5, #2
 800ba2a:	d03d      	beq.n	800baa8 <__pow5mult+0xa0>
 800ba2c:	69fc      	ldr	r4, [r7, #28]
 800ba2e:	b97c      	cbnz	r4, 800ba50 <__pow5mult+0x48>
 800ba30:	2010      	movs	r0, #16
 800ba32:	f7ff fd7f 	bl	800b534 <malloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	61f8      	str	r0, [r7, #28]
 800ba3a:	b928      	cbnz	r0, 800ba48 <__pow5mult+0x40>
 800ba3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bab4 <__pow5mult+0xac>)
 800ba3e:	481e      	ldr	r0, [pc, #120]	@ (800bab8 <__pow5mult+0xb0>)
 800ba40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba44:	f000 fc6e 	bl	800c324 <__assert_func>
 800ba48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba4c:	6004      	str	r4, [r0, #0]
 800ba4e:	60c4      	str	r4, [r0, #12]
 800ba50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba58:	b94c      	cbnz	r4, 800ba6e <__pow5mult+0x66>
 800ba5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ba5e:	4638      	mov	r0, r7
 800ba60:	f7ff ff12 	bl	800b888 <__i2b>
 800ba64:	2300      	movs	r3, #0
 800ba66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	f04f 0900 	mov.w	r9, #0
 800ba72:	07eb      	lsls	r3, r5, #31
 800ba74:	d50a      	bpl.n	800ba8c <__pow5mult+0x84>
 800ba76:	4631      	mov	r1, r6
 800ba78:	4622      	mov	r2, r4
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f7ff ff1a 	bl	800b8b4 <__multiply>
 800ba80:	4631      	mov	r1, r6
 800ba82:	4680      	mov	r8, r0
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff fe4b 	bl	800b720 <_Bfree>
 800ba8a:	4646      	mov	r6, r8
 800ba8c:	106d      	asrs	r5, r5, #1
 800ba8e:	d00b      	beq.n	800baa8 <__pow5mult+0xa0>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	b938      	cbnz	r0, 800baa4 <__pow5mult+0x9c>
 800ba94:	4622      	mov	r2, r4
 800ba96:	4621      	mov	r1, r4
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f7ff ff0b 	bl	800b8b4 <__multiply>
 800ba9e:	6020      	str	r0, [r4, #0]
 800baa0:	f8c0 9000 	str.w	r9, [r0]
 800baa4:	4604      	mov	r4, r0
 800baa6:	e7e4      	b.n	800ba72 <__pow5mult+0x6a>
 800baa8:	4630      	mov	r0, r6
 800baaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baae:	bf00      	nop
 800bab0:	0800cb68 	.word	0x0800cb68
 800bab4:	0800ca8e 	.word	0x0800ca8e
 800bab8:	0800cb0e 	.word	0x0800cb0e

0800babc <__lshift>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	460c      	mov	r4, r1
 800bac2:	6849      	ldr	r1, [r1, #4]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	4607      	mov	r7, r0
 800bace:	4691      	mov	r9, r2
 800bad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bad4:	f108 0601 	add.w	r6, r8, #1
 800bad8:	42b3      	cmp	r3, r6
 800bada:	db0b      	blt.n	800baf4 <__lshift+0x38>
 800badc:	4638      	mov	r0, r7
 800bade:	f7ff fddf 	bl	800b6a0 <_Balloc>
 800bae2:	4605      	mov	r5, r0
 800bae4:	b948      	cbnz	r0, 800bafa <__lshift+0x3e>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b28      	ldr	r3, [pc, #160]	@ (800bb8c <__lshift+0xd0>)
 800baea:	4829      	ldr	r0, [pc, #164]	@ (800bb90 <__lshift+0xd4>)
 800baec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800baf0:	f000 fc18 	bl	800c324 <__assert_func>
 800baf4:	3101      	adds	r1, #1
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	e7ee      	b.n	800bad8 <__lshift+0x1c>
 800bafa:	2300      	movs	r3, #0
 800bafc:	f100 0114 	add.w	r1, r0, #20
 800bb00:	f100 0210 	add.w	r2, r0, #16
 800bb04:	4618      	mov	r0, r3
 800bb06:	4553      	cmp	r3, sl
 800bb08:	db33      	blt.n	800bb72 <__lshift+0xb6>
 800bb0a:	6920      	ldr	r0, [r4, #16]
 800bb0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb10:	f104 0314 	add.w	r3, r4, #20
 800bb14:	f019 091f 	ands.w	r9, r9, #31
 800bb18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb20:	d02b      	beq.n	800bb7a <__lshift+0xbe>
 800bb22:	f1c9 0e20 	rsb	lr, r9, #32
 800bb26:	468a      	mov	sl, r1
 800bb28:	2200      	movs	r2, #0
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb30:	4310      	orrs	r0, r2
 800bb32:	f84a 0b04 	str.w	r0, [sl], #4
 800bb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb3a:	459c      	cmp	ip, r3
 800bb3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb40:	d8f3      	bhi.n	800bb2a <__lshift+0x6e>
 800bb42:	ebac 0304 	sub.w	r3, ip, r4
 800bb46:	3b15      	subs	r3, #21
 800bb48:	f023 0303 	bic.w	r3, r3, #3
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	f104 0015 	add.w	r0, r4, #21
 800bb52:	4584      	cmp	ip, r0
 800bb54:	bf38      	it	cc
 800bb56:	2304      	movcc	r3, #4
 800bb58:	50ca      	str	r2, [r1, r3]
 800bb5a:	b10a      	cbz	r2, 800bb60 <__lshift+0xa4>
 800bb5c:	f108 0602 	add.w	r6, r8, #2
 800bb60:	3e01      	subs	r6, #1
 800bb62:	4638      	mov	r0, r7
 800bb64:	612e      	str	r6, [r5, #16]
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7ff fdda 	bl	800b720 <_Bfree>
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb76:	3301      	adds	r3, #1
 800bb78:	e7c5      	b.n	800bb06 <__lshift+0x4a>
 800bb7a:	3904      	subs	r1, #4
 800bb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb84:	459c      	cmp	ip, r3
 800bb86:	d8f9      	bhi.n	800bb7c <__lshift+0xc0>
 800bb88:	e7ea      	b.n	800bb60 <__lshift+0xa4>
 800bb8a:	bf00      	nop
 800bb8c:	0800cafd 	.word	0x0800cafd
 800bb90:	0800cb0e 	.word	0x0800cb0e

0800bb94 <__mcmp>:
 800bb94:	690a      	ldr	r2, [r1, #16]
 800bb96:	4603      	mov	r3, r0
 800bb98:	6900      	ldr	r0, [r0, #16]
 800bb9a:	1a80      	subs	r0, r0, r2
 800bb9c:	b530      	push	{r4, r5, lr}
 800bb9e:	d10e      	bne.n	800bbbe <__mcmp+0x2a>
 800bba0:	3314      	adds	r3, #20
 800bba2:	3114      	adds	r1, #20
 800bba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbb4:	4295      	cmp	r5, r2
 800bbb6:	d003      	beq.n	800bbc0 <__mcmp+0x2c>
 800bbb8:	d205      	bcs.n	800bbc6 <__mcmp+0x32>
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	bd30      	pop	{r4, r5, pc}
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d3f3      	bcc.n	800bbac <__mcmp+0x18>
 800bbc4:	e7fb      	b.n	800bbbe <__mcmp+0x2a>
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	e7f9      	b.n	800bbbe <__mcmp+0x2a>
	...

0800bbcc <__mdiff>:
 800bbcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	4689      	mov	r9, r1
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4648      	mov	r0, r9
 800bbd8:	4614      	mov	r4, r2
 800bbda:	f7ff ffdb 	bl	800bb94 <__mcmp>
 800bbde:	1e05      	subs	r5, r0, #0
 800bbe0:	d112      	bne.n	800bc08 <__mdiff+0x3c>
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff fd5b 	bl	800b6a0 <_Balloc>
 800bbea:	4602      	mov	r2, r0
 800bbec:	b928      	cbnz	r0, 800bbfa <__mdiff+0x2e>
 800bbee:	4b3f      	ldr	r3, [pc, #252]	@ (800bcec <__mdiff+0x120>)
 800bbf0:	f240 2137 	movw	r1, #567	@ 0x237
 800bbf4:	483e      	ldr	r0, [pc, #248]	@ (800bcf0 <__mdiff+0x124>)
 800bbf6:	f000 fb95 	bl	800c324 <__assert_func>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc00:	4610      	mov	r0, r2
 800bc02:	b003      	add	sp, #12
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc08:	bfbc      	itt	lt
 800bc0a:	464b      	movlt	r3, r9
 800bc0c:	46a1      	movlt	r9, r4
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc14:	bfba      	itte	lt
 800bc16:	461c      	movlt	r4, r3
 800bc18:	2501      	movlt	r5, #1
 800bc1a:	2500      	movge	r5, #0
 800bc1c:	f7ff fd40 	bl	800b6a0 <_Balloc>
 800bc20:	4602      	mov	r2, r0
 800bc22:	b918      	cbnz	r0, 800bc2c <__mdiff+0x60>
 800bc24:	4b31      	ldr	r3, [pc, #196]	@ (800bcec <__mdiff+0x120>)
 800bc26:	f240 2145 	movw	r1, #581	@ 0x245
 800bc2a:	e7e3      	b.n	800bbf4 <__mdiff+0x28>
 800bc2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc30:	6926      	ldr	r6, [r4, #16]
 800bc32:	60c5      	str	r5, [r0, #12]
 800bc34:	f109 0310 	add.w	r3, r9, #16
 800bc38:	f109 0514 	add.w	r5, r9, #20
 800bc3c:	f104 0e14 	add.w	lr, r4, #20
 800bc40:	f100 0b14 	add.w	fp, r0, #20
 800bc44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	46d9      	mov	r9, fp
 800bc50:	f04f 0c00 	mov.w	ip, #0
 800bc54:	9b01      	ldr	r3, [sp, #4]
 800bc56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	fa1f f38a 	uxth.w	r3, sl
 800bc64:	4619      	mov	r1, r3
 800bc66:	b283      	uxth	r3, r0
 800bc68:	1acb      	subs	r3, r1, r3
 800bc6a:	0c00      	lsrs	r0, r0, #16
 800bc6c:	4463      	add	r3, ip
 800bc6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc7c:	4576      	cmp	r6, lr
 800bc7e:	f849 3b04 	str.w	r3, [r9], #4
 800bc82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc86:	d8e5      	bhi.n	800bc54 <__mdiff+0x88>
 800bc88:	1b33      	subs	r3, r6, r4
 800bc8a:	3b15      	subs	r3, #21
 800bc8c:	f023 0303 	bic.w	r3, r3, #3
 800bc90:	3415      	adds	r4, #21
 800bc92:	3304      	adds	r3, #4
 800bc94:	42a6      	cmp	r6, r4
 800bc96:	bf38      	it	cc
 800bc98:	2304      	movcc	r3, #4
 800bc9a:	441d      	add	r5, r3
 800bc9c:	445b      	add	r3, fp
 800bc9e:	461e      	mov	r6, r3
 800bca0:	462c      	mov	r4, r5
 800bca2:	4544      	cmp	r4, r8
 800bca4:	d30e      	bcc.n	800bcc4 <__mdiff+0xf8>
 800bca6:	f108 0103 	add.w	r1, r8, #3
 800bcaa:	1b49      	subs	r1, r1, r5
 800bcac:	f021 0103 	bic.w	r1, r1, #3
 800bcb0:	3d03      	subs	r5, #3
 800bcb2:	45a8      	cmp	r8, r5
 800bcb4:	bf38      	it	cc
 800bcb6:	2100      	movcc	r1, #0
 800bcb8:	440b      	add	r3, r1
 800bcba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcbe:	b191      	cbz	r1, 800bce6 <__mdiff+0x11a>
 800bcc0:	6117      	str	r7, [r2, #16]
 800bcc2:	e79d      	b.n	800bc00 <__mdiff+0x34>
 800bcc4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bcc8:	46e6      	mov	lr, ip
 800bcca:	0c08      	lsrs	r0, r1, #16
 800bccc:	fa1c fc81 	uxtah	ip, ip, r1
 800bcd0:	4471      	add	r1, lr
 800bcd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bcd6:	b289      	uxth	r1, r1
 800bcd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bcdc:	f846 1b04 	str.w	r1, [r6], #4
 800bce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bce4:	e7dd      	b.n	800bca2 <__mdiff+0xd6>
 800bce6:	3f01      	subs	r7, #1
 800bce8:	e7e7      	b.n	800bcba <__mdiff+0xee>
 800bcea:	bf00      	nop
 800bcec:	0800cafd 	.word	0x0800cafd
 800bcf0:	0800cb0e 	.word	0x0800cb0e

0800bcf4 <__d2b>:
 800bcf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	ec59 8b10 	vmov	r8, r9, d0
 800bd00:	4616      	mov	r6, r2
 800bd02:	f7ff fccd 	bl	800b6a0 <_Balloc>
 800bd06:	4604      	mov	r4, r0
 800bd08:	b930      	cbnz	r0, 800bd18 <__d2b+0x24>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	4b23      	ldr	r3, [pc, #140]	@ (800bd9c <__d2b+0xa8>)
 800bd0e:	4824      	ldr	r0, [pc, #144]	@ (800bda0 <__d2b+0xac>)
 800bd10:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd14:	f000 fb06 	bl	800c324 <__assert_func>
 800bd18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd20:	b10d      	cbz	r5, 800bd26 <__d2b+0x32>
 800bd22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	f1b8 0300 	subs.w	r3, r8, #0
 800bd2c:	d023      	beq.n	800bd76 <__d2b+0x82>
 800bd2e:	4668      	mov	r0, sp
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	f7ff fd7c 	bl	800b82e <__lo0bits>
 800bd36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd3a:	b1d0      	cbz	r0, 800bd72 <__d2b+0x7e>
 800bd3c:	f1c0 0320 	rsb	r3, r0, #32
 800bd40:	fa02 f303 	lsl.w	r3, r2, r3
 800bd44:	430b      	orrs	r3, r1
 800bd46:	40c2      	lsrs	r2, r0
 800bd48:	6163      	str	r3, [r4, #20]
 800bd4a:	9201      	str	r2, [sp, #4]
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	61a3      	str	r3, [r4, #24]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bf0c      	ite	eq
 800bd54:	2201      	moveq	r2, #1
 800bd56:	2202      	movne	r2, #2
 800bd58:	6122      	str	r2, [r4, #16]
 800bd5a:	b1a5      	cbz	r5, 800bd86 <__d2b+0x92>
 800bd5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd60:	4405      	add	r5, r0
 800bd62:	603d      	str	r5, [r7, #0]
 800bd64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd68:	6030      	str	r0, [r6, #0]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	b003      	add	sp, #12
 800bd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd72:	6161      	str	r1, [r4, #20]
 800bd74:	e7ea      	b.n	800bd4c <__d2b+0x58>
 800bd76:	a801      	add	r0, sp, #4
 800bd78:	f7ff fd59 	bl	800b82e <__lo0bits>
 800bd7c:	9b01      	ldr	r3, [sp, #4]
 800bd7e:	6163      	str	r3, [r4, #20]
 800bd80:	3020      	adds	r0, #32
 800bd82:	2201      	movs	r2, #1
 800bd84:	e7e8      	b.n	800bd58 <__d2b+0x64>
 800bd86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd8e:	6038      	str	r0, [r7, #0]
 800bd90:	6918      	ldr	r0, [r3, #16]
 800bd92:	f7ff fd2d 	bl	800b7f0 <__hi0bits>
 800bd96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd9a:	e7e5      	b.n	800bd68 <__d2b+0x74>
 800bd9c:	0800cafd 	.word	0x0800cafd
 800bda0:	0800cb0e 	.word	0x0800cb0e

0800bda4 <__ssputs_r>:
 800bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	688e      	ldr	r6, [r1, #8]
 800bdaa:	461f      	mov	r7, r3
 800bdac:	42be      	cmp	r6, r7
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	4690      	mov	r8, r2
 800bdb6:	d82d      	bhi.n	800be14 <__ssputs_r+0x70>
 800bdb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdc0:	d026      	beq.n	800be10 <__ssputs_r+0x6c>
 800bdc2:	6965      	ldr	r5, [r4, #20]
 800bdc4:	6909      	ldr	r1, [r1, #16]
 800bdc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdca:	eba3 0901 	sub.w	r9, r3, r1
 800bdce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdd2:	1c7b      	adds	r3, r7, #1
 800bdd4:	444b      	add	r3, r9
 800bdd6:	106d      	asrs	r5, r5, #1
 800bdd8:	429d      	cmp	r5, r3
 800bdda:	bf38      	it	cc
 800bddc:	461d      	movcc	r5, r3
 800bdde:	0553      	lsls	r3, r2, #21
 800bde0:	d527      	bpl.n	800be32 <__ssputs_r+0x8e>
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7ff fbd0 	bl	800b588 <_malloc_r>
 800bde8:	4606      	mov	r6, r0
 800bdea:	b360      	cbz	r0, 800be46 <__ssputs_r+0xa2>
 800bdec:	6921      	ldr	r1, [r4, #16]
 800bdee:	464a      	mov	r2, r9
 800bdf0:	f000 fa8a 	bl	800c308 <memcpy>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	6126      	str	r6, [r4, #16]
 800be02:	6165      	str	r5, [r4, #20]
 800be04:	444e      	add	r6, r9
 800be06:	eba5 0509 	sub.w	r5, r5, r9
 800be0a:	6026      	str	r6, [r4, #0]
 800be0c:	60a5      	str	r5, [r4, #8]
 800be0e:	463e      	mov	r6, r7
 800be10:	42be      	cmp	r6, r7
 800be12:	d900      	bls.n	800be16 <__ssputs_r+0x72>
 800be14:	463e      	mov	r6, r7
 800be16:	6820      	ldr	r0, [r4, #0]
 800be18:	4632      	mov	r2, r6
 800be1a:	4641      	mov	r1, r8
 800be1c:	f000 fa28 	bl	800c270 <memmove>
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	1b9b      	subs	r3, r3, r6
 800be24:	60a3      	str	r3, [r4, #8]
 800be26:	6823      	ldr	r3, [r4, #0]
 800be28:	4433      	add	r3, r6
 800be2a:	6023      	str	r3, [r4, #0]
 800be2c:	2000      	movs	r0, #0
 800be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be32:	462a      	mov	r2, r5
 800be34:	f000 faba 	bl	800c3ac <_realloc_r>
 800be38:	4606      	mov	r6, r0
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d1e0      	bne.n	800be00 <__ssputs_r+0x5c>
 800be3e:	6921      	ldr	r1, [r4, #16]
 800be40:	4650      	mov	r0, sl
 800be42:	f7ff fb2d 	bl	800b4a0 <_free_r>
 800be46:	230c      	movs	r3, #12
 800be48:	f8ca 3000 	str.w	r3, [sl]
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e7e9      	b.n	800be2e <__ssputs_r+0x8a>
	...

0800be5c <_svfiprintf_r>:
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	4698      	mov	r8, r3
 800be62:	898b      	ldrh	r3, [r1, #12]
 800be64:	061b      	lsls	r3, r3, #24
 800be66:	b09d      	sub	sp, #116	@ 0x74
 800be68:	4607      	mov	r7, r0
 800be6a:	460d      	mov	r5, r1
 800be6c:	4614      	mov	r4, r2
 800be6e:	d510      	bpl.n	800be92 <_svfiprintf_r+0x36>
 800be70:	690b      	ldr	r3, [r1, #16]
 800be72:	b973      	cbnz	r3, 800be92 <_svfiprintf_r+0x36>
 800be74:	2140      	movs	r1, #64	@ 0x40
 800be76:	f7ff fb87 	bl	800b588 <_malloc_r>
 800be7a:	6028      	str	r0, [r5, #0]
 800be7c:	6128      	str	r0, [r5, #16]
 800be7e:	b930      	cbnz	r0, 800be8e <_svfiprintf_r+0x32>
 800be80:	230c      	movs	r3, #12
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	b01d      	add	sp, #116	@ 0x74
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8e:	2340      	movs	r3, #64	@ 0x40
 800be90:	616b      	str	r3, [r5, #20]
 800be92:	2300      	movs	r3, #0
 800be94:	9309      	str	r3, [sp, #36]	@ 0x24
 800be96:	2320      	movs	r3, #32
 800be98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea0:	2330      	movs	r3, #48	@ 0x30
 800bea2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c040 <_svfiprintf_r+0x1e4>
 800bea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beaa:	f04f 0901 	mov.w	r9, #1
 800beae:	4623      	mov	r3, r4
 800beb0:	469a      	mov	sl, r3
 800beb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb6:	b10a      	cbz	r2, 800bebc <_svfiprintf_r+0x60>
 800beb8:	2a25      	cmp	r2, #37	@ 0x25
 800beba:	d1f9      	bne.n	800beb0 <_svfiprintf_r+0x54>
 800bebc:	ebba 0b04 	subs.w	fp, sl, r4
 800bec0:	d00b      	beq.n	800beda <_svfiprintf_r+0x7e>
 800bec2:	465b      	mov	r3, fp
 800bec4:	4622      	mov	r2, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff ff6b 	bl	800bda4 <__ssputs_r>
 800bece:	3001      	adds	r0, #1
 800bed0:	f000 80a7 	beq.w	800c022 <_svfiprintf_r+0x1c6>
 800bed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed6:	445a      	add	r2, fp
 800bed8:	9209      	str	r2, [sp, #36]	@ 0x24
 800beda:	f89a 3000 	ldrb.w	r3, [sl]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 809f 	beq.w	800c022 <_svfiprintf_r+0x1c6>
 800bee4:	2300      	movs	r3, #0
 800bee6:	f04f 32ff 	mov.w	r2, #4294967295
 800beea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beee:	f10a 0a01 	add.w	sl, sl, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	9307      	str	r3, [sp, #28]
 800bef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800befa:	931a      	str	r3, [sp, #104]	@ 0x68
 800befc:	4654      	mov	r4, sl
 800befe:	2205      	movs	r2, #5
 800bf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf04:	484e      	ldr	r0, [pc, #312]	@ (800c040 <_svfiprintf_r+0x1e4>)
 800bf06:	f7f4 f99b 	bl	8000240 <memchr>
 800bf0a:	9a04      	ldr	r2, [sp, #16]
 800bf0c:	b9d8      	cbnz	r0, 800bf46 <_svfiprintf_r+0xea>
 800bf0e:	06d0      	lsls	r0, r2, #27
 800bf10:	bf44      	itt	mi
 800bf12:	2320      	movmi	r3, #32
 800bf14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf18:	0711      	lsls	r1, r2, #28
 800bf1a:	bf44      	itt	mi
 800bf1c:	232b      	movmi	r3, #43	@ 0x2b
 800bf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf22:	f89a 3000 	ldrb.w	r3, [sl]
 800bf26:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf28:	d015      	beq.n	800bf56 <_svfiprintf_r+0xfa>
 800bf2a:	9a07      	ldr	r2, [sp, #28]
 800bf2c:	4654      	mov	r4, sl
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f04f 0c0a 	mov.w	ip, #10
 800bf34:	4621      	mov	r1, r4
 800bf36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf3a:	3b30      	subs	r3, #48	@ 0x30
 800bf3c:	2b09      	cmp	r3, #9
 800bf3e:	d94b      	bls.n	800bfd8 <_svfiprintf_r+0x17c>
 800bf40:	b1b0      	cbz	r0, 800bf70 <_svfiprintf_r+0x114>
 800bf42:	9207      	str	r2, [sp, #28]
 800bf44:	e014      	b.n	800bf70 <_svfiprintf_r+0x114>
 800bf46:	eba0 0308 	sub.w	r3, r0, r8
 800bf4a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	46a2      	mov	sl, r4
 800bf54:	e7d2      	b.n	800befc <_svfiprintf_r+0xa0>
 800bf56:	9b03      	ldr	r3, [sp, #12]
 800bf58:	1d19      	adds	r1, r3, #4
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	9103      	str	r1, [sp, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bfbb      	ittet	lt
 800bf62:	425b      	neglt	r3, r3
 800bf64:	f042 0202 	orrlt.w	r2, r2, #2
 800bf68:	9307      	strge	r3, [sp, #28]
 800bf6a:	9307      	strlt	r3, [sp, #28]
 800bf6c:	bfb8      	it	lt
 800bf6e:	9204      	strlt	r2, [sp, #16]
 800bf70:	7823      	ldrb	r3, [r4, #0]
 800bf72:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf74:	d10a      	bne.n	800bf8c <_svfiprintf_r+0x130>
 800bf76:	7863      	ldrb	r3, [r4, #1]
 800bf78:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf7a:	d132      	bne.n	800bfe2 <_svfiprintf_r+0x186>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	1d1a      	adds	r2, r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	9203      	str	r2, [sp, #12]
 800bf84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf88:	3402      	adds	r4, #2
 800bf8a:	9305      	str	r3, [sp, #20]
 800bf8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c050 <_svfiprintf_r+0x1f4>
 800bf90:	7821      	ldrb	r1, [r4, #0]
 800bf92:	2203      	movs	r2, #3
 800bf94:	4650      	mov	r0, sl
 800bf96:	f7f4 f953 	bl	8000240 <memchr>
 800bf9a:	b138      	cbz	r0, 800bfac <_svfiprintf_r+0x150>
 800bf9c:	9b04      	ldr	r3, [sp, #16]
 800bf9e:	eba0 000a 	sub.w	r0, r0, sl
 800bfa2:	2240      	movs	r2, #64	@ 0x40
 800bfa4:	4082      	lsls	r2, r0
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	3401      	adds	r4, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb0:	4824      	ldr	r0, [pc, #144]	@ (800c044 <_svfiprintf_r+0x1e8>)
 800bfb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfb6:	2206      	movs	r2, #6
 800bfb8:	f7f4 f942 	bl	8000240 <memchr>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d036      	beq.n	800c02e <_svfiprintf_r+0x1d2>
 800bfc0:	4b21      	ldr	r3, [pc, #132]	@ (800c048 <_svfiprintf_r+0x1ec>)
 800bfc2:	bb1b      	cbnz	r3, 800c00c <_svfiprintf_r+0x1b0>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	3307      	adds	r3, #7
 800bfc8:	f023 0307 	bic.w	r3, r3, #7
 800bfcc:	3308      	adds	r3, #8
 800bfce:	9303      	str	r3, [sp, #12]
 800bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd2:	4433      	add	r3, r6
 800bfd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd6:	e76a      	b.n	800beae <_svfiprintf_r+0x52>
 800bfd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfdc:	460c      	mov	r4, r1
 800bfde:	2001      	movs	r0, #1
 800bfe0:	e7a8      	b.n	800bf34 <_svfiprintf_r+0xd8>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	3401      	adds	r4, #1
 800bfe6:	9305      	str	r3, [sp, #20]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	f04f 0c0a 	mov.w	ip, #10
 800bfee:	4620      	mov	r0, r4
 800bff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff4:	3a30      	subs	r2, #48	@ 0x30
 800bff6:	2a09      	cmp	r2, #9
 800bff8:	d903      	bls.n	800c002 <_svfiprintf_r+0x1a6>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0c6      	beq.n	800bf8c <_svfiprintf_r+0x130>
 800bffe:	9105      	str	r1, [sp, #20]
 800c000:	e7c4      	b.n	800bf8c <_svfiprintf_r+0x130>
 800c002:	fb0c 2101 	mla	r1, ip, r1, r2
 800c006:	4604      	mov	r4, r0
 800c008:	2301      	movs	r3, #1
 800c00a:	e7f0      	b.n	800bfee <_svfiprintf_r+0x192>
 800c00c:	ab03      	add	r3, sp, #12
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	462a      	mov	r2, r5
 800c012:	4b0e      	ldr	r3, [pc, #56]	@ (800c04c <_svfiprintf_r+0x1f0>)
 800c014:	a904      	add	r1, sp, #16
 800c016:	4638      	mov	r0, r7
 800c018:	f7fd fd7e 	bl	8009b18 <_printf_float>
 800c01c:	1c42      	adds	r2, r0, #1
 800c01e:	4606      	mov	r6, r0
 800c020:	d1d6      	bne.n	800bfd0 <_svfiprintf_r+0x174>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	065b      	lsls	r3, r3, #25
 800c026:	f53f af2d 	bmi.w	800be84 <_svfiprintf_r+0x28>
 800c02a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c02c:	e72c      	b.n	800be88 <_svfiprintf_r+0x2c>
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	4b05      	ldr	r3, [pc, #20]	@ (800c04c <_svfiprintf_r+0x1f0>)
 800c036:	a904      	add	r1, sp, #16
 800c038:	4638      	mov	r0, r7
 800c03a:	f7fe f805 	bl	800a048 <_printf_i>
 800c03e:	e7ed      	b.n	800c01c <_svfiprintf_r+0x1c0>
 800c040:	0800cc68 	.word	0x0800cc68
 800c044:	0800cc72 	.word	0x0800cc72
 800c048:	08009b19 	.word	0x08009b19
 800c04c:	0800bda5 	.word	0x0800bda5
 800c050:	0800cc6e 	.word	0x0800cc6e

0800c054 <__sflush_r>:
 800c054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05c:	0716      	lsls	r6, r2, #28
 800c05e:	4605      	mov	r5, r0
 800c060:	460c      	mov	r4, r1
 800c062:	d454      	bmi.n	800c10e <__sflush_r+0xba>
 800c064:	684b      	ldr	r3, [r1, #4]
 800c066:	2b00      	cmp	r3, #0
 800c068:	dc02      	bgt.n	800c070 <__sflush_r+0x1c>
 800c06a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	dd48      	ble.n	800c102 <__sflush_r+0xae>
 800c070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c072:	2e00      	cmp	r6, #0
 800c074:	d045      	beq.n	800c102 <__sflush_r+0xae>
 800c076:	2300      	movs	r3, #0
 800c078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c07c:	682f      	ldr	r7, [r5, #0]
 800c07e:	6a21      	ldr	r1, [r4, #32]
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	d030      	beq.n	800c0e6 <__sflush_r+0x92>
 800c084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	0759      	lsls	r1, r3, #29
 800c08a:	d505      	bpl.n	800c098 <__sflush_r+0x44>
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c092:	b10b      	cbz	r3, 800c098 <__sflush_r+0x44>
 800c094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c096:	1ad2      	subs	r2, r2, r3
 800c098:	2300      	movs	r3, #0
 800c09a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c09c:	6a21      	ldr	r1, [r4, #32]
 800c09e:	4628      	mov	r0, r5
 800c0a0:	47b0      	blx	r6
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	d106      	bne.n	800c0b6 <__sflush_r+0x62>
 800c0a8:	6829      	ldr	r1, [r5, #0]
 800c0aa:	291d      	cmp	r1, #29
 800c0ac:	d82b      	bhi.n	800c106 <__sflush_r+0xb2>
 800c0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c158 <__sflush_r+0x104>)
 800c0b0:	410a      	asrs	r2, r1
 800c0b2:	07d6      	lsls	r6, r2, #31
 800c0b4:	d427      	bmi.n	800c106 <__sflush_r+0xb2>
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	6062      	str	r2, [r4, #4]
 800c0ba:	04d9      	lsls	r1, r3, #19
 800c0bc:	6922      	ldr	r2, [r4, #16]
 800c0be:	6022      	str	r2, [r4, #0]
 800c0c0:	d504      	bpl.n	800c0cc <__sflush_r+0x78>
 800c0c2:	1c42      	adds	r2, r0, #1
 800c0c4:	d101      	bne.n	800c0ca <__sflush_r+0x76>
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	b903      	cbnz	r3, 800c0cc <__sflush_r+0x78>
 800c0ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0ce:	602f      	str	r7, [r5, #0]
 800c0d0:	b1b9      	cbz	r1, 800c102 <__sflush_r+0xae>
 800c0d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	d002      	beq.n	800c0e0 <__sflush_r+0x8c>
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f7ff f9e0 	bl	800b4a0 <_free_r>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0e4:	e00d      	b.n	800c102 <__sflush_r+0xae>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	47b0      	blx	r6
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	1c50      	adds	r0, r2, #1
 800c0f0:	d1c9      	bne.n	800c086 <__sflush_r+0x32>
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d0c6      	beq.n	800c086 <__sflush_r+0x32>
 800c0f8:	2b1d      	cmp	r3, #29
 800c0fa:	d001      	beq.n	800c100 <__sflush_r+0xac>
 800c0fc:	2b16      	cmp	r3, #22
 800c0fe:	d11e      	bne.n	800c13e <__sflush_r+0xea>
 800c100:	602f      	str	r7, [r5, #0]
 800c102:	2000      	movs	r0, #0
 800c104:	e022      	b.n	800c14c <__sflush_r+0xf8>
 800c106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c10a:	b21b      	sxth	r3, r3
 800c10c:	e01b      	b.n	800c146 <__sflush_r+0xf2>
 800c10e:	690f      	ldr	r7, [r1, #16]
 800c110:	2f00      	cmp	r7, #0
 800c112:	d0f6      	beq.n	800c102 <__sflush_r+0xae>
 800c114:	0793      	lsls	r3, r2, #30
 800c116:	680e      	ldr	r6, [r1, #0]
 800c118:	bf08      	it	eq
 800c11a:	694b      	ldreq	r3, [r1, #20]
 800c11c:	600f      	str	r7, [r1, #0]
 800c11e:	bf18      	it	ne
 800c120:	2300      	movne	r3, #0
 800c122:	eba6 0807 	sub.w	r8, r6, r7
 800c126:	608b      	str	r3, [r1, #8]
 800c128:	f1b8 0f00 	cmp.w	r8, #0
 800c12c:	dde9      	ble.n	800c102 <__sflush_r+0xae>
 800c12e:	6a21      	ldr	r1, [r4, #32]
 800c130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c132:	4643      	mov	r3, r8
 800c134:	463a      	mov	r2, r7
 800c136:	4628      	mov	r0, r5
 800c138:	47b0      	blx	r6
 800c13a:	2800      	cmp	r0, #0
 800c13c:	dc08      	bgt.n	800c150 <__sflush_r+0xfc>
 800c13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	f04f 30ff 	mov.w	r0, #4294967295
 800c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c150:	4407      	add	r7, r0
 800c152:	eba8 0800 	sub.w	r8, r8, r0
 800c156:	e7e7      	b.n	800c128 <__sflush_r+0xd4>
 800c158:	dfbffffe 	.word	0xdfbffffe

0800c15c <_fflush_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	690b      	ldr	r3, [r1, #16]
 800c160:	4605      	mov	r5, r0
 800c162:	460c      	mov	r4, r1
 800c164:	b913      	cbnz	r3, 800c16c <_fflush_r+0x10>
 800c166:	2500      	movs	r5, #0
 800c168:	4628      	mov	r0, r5
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	b118      	cbz	r0, 800c176 <_fflush_r+0x1a>
 800c16e:	6a03      	ldr	r3, [r0, #32]
 800c170:	b90b      	cbnz	r3, 800c176 <_fflush_r+0x1a>
 800c172:	f7fe f915 	bl	800a3a0 <__sinit>
 800c176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0f3      	beq.n	800c166 <_fflush_r+0xa>
 800c17e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c180:	07d0      	lsls	r0, r2, #31
 800c182:	d404      	bmi.n	800c18e <_fflush_r+0x32>
 800c184:	0599      	lsls	r1, r3, #22
 800c186:	d402      	bmi.n	800c18e <_fflush_r+0x32>
 800c188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c18a:	f7fe fb38 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800c18e:	4628      	mov	r0, r5
 800c190:	4621      	mov	r1, r4
 800c192:	f7ff ff5f 	bl	800c054 <__sflush_r>
 800c196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c198:	07da      	lsls	r2, r3, #31
 800c19a:	4605      	mov	r5, r0
 800c19c:	d4e4      	bmi.n	800c168 <_fflush_r+0xc>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	059b      	lsls	r3, r3, #22
 800c1a2:	d4e1      	bmi.n	800c168 <_fflush_r+0xc>
 800c1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1a6:	f7fe fb2b 	bl	800a800 <__retarget_lock_release_recursive>
 800c1aa:	e7dd      	b.n	800c168 <_fflush_r+0xc>

0800c1ac <__swhatbuf_r>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	b096      	sub	sp, #88	@ 0x58
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	461e      	mov	r6, r3
 800c1bc:	da0d      	bge.n	800c1da <__swhatbuf_r+0x2e>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1c4:	f04f 0100 	mov.w	r1, #0
 800c1c8:	bf14      	ite	ne
 800c1ca:	2340      	movne	r3, #64	@ 0x40
 800c1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	6031      	str	r1, [r6, #0]
 800c1d4:	602b      	str	r3, [r5, #0]
 800c1d6:	b016      	add	sp, #88	@ 0x58
 800c1d8:	bd70      	pop	{r4, r5, r6, pc}
 800c1da:	466a      	mov	r2, sp
 800c1dc:	f000 f862 	bl	800c2a4 <_fstat_r>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	dbec      	blt.n	800c1be <__swhatbuf_r+0x12>
 800c1e4:	9901      	ldr	r1, [sp, #4]
 800c1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1ee:	4259      	negs	r1, r3
 800c1f0:	4159      	adcs	r1, r3
 800c1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1f6:	e7eb      	b.n	800c1d0 <__swhatbuf_r+0x24>

0800c1f8 <__smakebuf_r>:
 800c1f8:	898b      	ldrh	r3, [r1, #12]
 800c1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1fc:	079d      	lsls	r5, r3, #30
 800c1fe:	4606      	mov	r6, r0
 800c200:	460c      	mov	r4, r1
 800c202:	d507      	bpl.n	800c214 <__smakebuf_r+0x1c>
 800c204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	6123      	str	r3, [r4, #16]
 800c20c:	2301      	movs	r3, #1
 800c20e:	6163      	str	r3, [r4, #20]
 800c210:	b003      	add	sp, #12
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c214:	ab01      	add	r3, sp, #4
 800c216:	466a      	mov	r2, sp
 800c218:	f7ff ffc8 	bl	800c1ac <__swhatbuf_r>
 800c21c:	9f00      	ldr	r7, [sp, #0]
 800c21e:	4605      	mov	r5, r0
 800c220:	4639      	mov	r1, r7
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff f9b0 	bl	800b588 <_malloc_r>
 800c228:	b948      	cbnz	r0, 800c23e <__smakebuf_r+0x46>
 800c22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22e:	059a      	lsls	r2, r3, #22
 800c230:	d4ee      	bmi.n	800c210 <__smakebuf_r+0x18>
 800c232:	f023 0303 	bic.w	r3, r3, #3
 800c236:	f043 0302 	orr.w	r3, r3, #2
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	e7e2      	b.n	800c204 <__smakebuf_r+0xc>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	6020      	str	r0, [r4, #0]
 800c242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	9b01      	ldr	r3, [sp, #4]
 800c24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c24e:	b15b      	cbz	r3, 800c268 <__smakebuf_r+0x70>
 800c250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c254:	4630      	mov	r0, r6
 800c256:	f000 f837 	bl	800c2c8 <_isatty_r>
 800c25a:	b128      	cbz	r0, 800c268 <__smakebuf_r+0x70>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f023 0303 	bic.w	r3, r3, #3
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	431d      	orrs	r5, r3
 800c26c:	81a5      	strh	r5, [r4, #12]
 800c26e:	e7cf      	b.n	800c210 <__smakebuf_r+0x18>

0800c270 <memmove>:
 800c270:	4288      	cmp	r0, r1
 800c272:	b510      	push	{r4, lr}
 800c274:	eb01 0402 	add.w	r4, r1, r2
 800c278:	d902      	bls.n	800c280 <memmove+0x10>
 800c27a:	4284      	cmp	r4, r0
 800c27c:	4623      	mov	r3, r4
 800c27e:	d807      	bhi.n	800c290 <memmove+0x20>
 800c280:	1e43      	subs	r3, r0, #1
 800c282:	42a1      	cmp	r1, r4
 800c284:	d008      	beq.n	800c298 <memmove+0x28>
 800c286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c28a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c28e:	e7f8      	b.n	800c282 <memmove+0x12>
 800c290:	4402      	add	r2, r0
 800c292:	4601      	mov	r1, r0
 800c294:	428a      	cmp	r2, r1
 800c296:	d100      	bne.n	800c29a <memmove+0x2a>
 800c298:	bd10      	pop	{r4, pc}
 800c29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2a2:	e7f7      	b.n	800c294 <memmove+0x24>

0800c2a4 <_fstat_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	@ (800c2c4 <_fstat_r+0x20>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	f7f5 fd07 	bl	8001cc4 <_fstat>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	d102      	bne.n	800c2c0 <_fstat_r+0x1c>
 800c2ba:	682b      	ldr	r3, [r5, #0]
 800c2bc:	b103      	cbz	r3, 800c2c0 <_fstat_r+0x1c>
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	bd38      	pop	{r3, r4, r5, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20000688 	.word	0x20000688

0800c2c8 <_isatty_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d06      	ldr	r5, [pc, #24]	@ (800c2e4 <_isatty_r+0x1c>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	f7f5 fd06 	bl	8001ce4 <_isatty>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_isatty_r+0x1a>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_isatty_r+0x1a>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	20000688 	.word	0x20000688

0800c2e8 <_sbrk_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	@ (800c304 <_sbrk_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f5 fd0e 	bl	8001d14 <_sbrk>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_sbrk_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_sbrk_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20000688 	.word	0x20000688

0800c308 <memcpy>:
 800c308:	440a      	add	r2, r1
 800c30a:	4291      	cmp	r1, r2
 800c30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c310:	d100      	bne.n	800c314 <memcpy+0xc>
 800c312:	4770      	bx	lr
 800c314:	b510      	push	{r4, lr}
 800c316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c31e:	4291      	cmp	r1, r2
 800c320:	d1f9      	bne.n	800c316 <memcpy+0xe>
 800c322:	bd10      	pop	{r4, pc}

0800c324 <__assert_func>:
 800c324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c326:	4614      	mov	r4, r2
 800c328:	461a      	mov	r2, r3
 800c32a:	4b09      	ldr	r3, [pc, #36]	@ (800c350 <__assert_func+0x2c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4605      	mov	r5, r0
 800c330:	68d8      	ldr	r0, [r3, #12]
 800c332:	b954      	cbnz	r4, 800c34a <__assert_func+0x26>
 800c334:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <__assert_func+0x30>)
 800c336:	461c      	mov	r4, r3
 800c338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c33c:	9100      	str	r1, [sp, #0]
 800c33e:	462b      	mov	r3, r5
 800c340:	4905      	ldr	r1, [pc, #20]	@ (800c358 <__assert_func+0x34>)
 800c342:	f000 f86f 	bl	800c424 <fiprintf>
 800c346:	f000 f87f 	bl	800c448 <abort>
 800c34a:	4b04      	ldr	r3, [pc, #16]	@ (800c35c <__assert_func+0x38>)
 800c34c:	e7f4      	b.n	800c338 <__assert_func+0x14>
 800c34e:	bf00      	nop
 800c350:	20000018 	.word	0x20000018
 800c354:	0800ccbe 	.word	0x0800ccbe
 800c358:	0800cc90 	.word	0x0800cc90
 800c35c:	0800cc83 	.word	0x0800cc83

0800c360 <_calloc_r>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	fba1 5402 	umull	r5, r4, r1, r2
 800c366:	b93c      	cbnz	r4, 800c378 <_calloc_r+0x18>
 800c368:	4629      	mov	r1, r5
 800c36a:	f7ff f90d 	bl	800b588 <_malloc_r>
 800c36e:	4606      	mov	r6, r0
 800c370:	b928      	cbnz	r0, 800c37e <_calloc_r+0x1e>
 800c372:	2600      	movs	r6, #0
 800c374:	4630      	mov	r0, r6
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	220c      	movs	r2, #12
 800c37a:	6002      	str	r2, [r0, #0]
 800c37c:	e7f9      	b.n	800c372 <_calloc_r+0x12>
 800c37e:	462a      	mov	r2, r5
 800c380:	4621      	mov	r1, r4
 800c382:	f7fe f9ad 	bl	800a6e0 <memset>
 800c386:	e7f5      	b.n	800c374 <_calloc_r+0x14>

0800c388 <__ascii_mbtowc>:
 800c388:	b082      	sub	sp, #8
 800c38a:	b901      	cbnz	r1, 800c38e <__ascii_mbtowc+0x6>
 800c38c:	a901      	add	r1, sp, #4
 800c38e:	b142      	cbz	r2, 800c3a2 <__ascii_mbtowc+0x1a>
 800c390:	b14b      	cbz	r3, 800c3a6 <__ascii_mbtowc+0x1e>
 800c392:	7813      	ldrb	r3, [r2, #0]
 800c394:	600b      	str	r3, [r1, #0]
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	1e10      	subs	r0, r2, #0
 800c39a:	bf18      	it	ne
 800c39c:	2001      	movne	r0, #1
 800c39e:	b002      	add	sp, #8
 800c3a0:	4770      	bx	lr
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	e7fb      	b.n	800c39e <__ascii_mbtowc+0x16>
 800c3a6:	f06f 0001 	mvn.w	r0, #1
 800c3aa:	e7f8      	b.n	800c39e <__ascii_mbtowc+0x16>

0800c3ac <_realloc_r>:
 800c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	4615      	mov	r5, r2
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	b921      	cbnz	r1, 800c3c2 <_realloc_r+0x16>
 800c3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3bc:	4611      	mov	r1, r2
 800c3be:	f7ff b8e3 	b.w	800b588 <_malloc_r>
 800c3c2:	b92a      	cbnz	r2, 800c3d0 <_realloc_r+0x24>
 800c3c4:	f7ff f86c 	bl	800b4a0 <_free_r>
 800c3c8:	2400      	movs	r4, #0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d0:	f000 f841 	bl	800c456 <_malloc_usable_size_r>
 800c3d4:	4285      	cmp	r5, r0
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	d802      	bhi.n	800c3e0 <_realloc_r+0x34>
 800c3da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3de:	d8f4      	bhi.n	800c3ca <_realloc_r+0x1e>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	f7ff f8d0 	bl	800b588 <_malloc_r>
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0ec      	beq.n	800c3c8 <_realloc_r+0x1c>
 800c3ee:	42b5      	cmp	r5, r6
 800c3f0:	462a      	mov	r2, r5
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	bf28      	it	cs
 800c3f6:	4632      	movcs	r2, r6
 800c3f8:	f7ff ff86 	bl	800c308 <memcpy>
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	4640      	mov	r0, r8
 800c400:	f7ff f84e 	bl	800b4a0 <_free_r>
 800c404:	463c      	mov	r4, r7
 800c406:	e7e0      	b.n	800c3ca <_realloc_r+0x1e>

0800c408 <__ascii_wctomb>:
 800c408:	4603      	mov	r3, r0
 800c40a:	4608      	mov	r0, r1
 800c40c:	b141      	cbz	r1, 800c420 <__ascii_wctomb+0x18>
 800c40e:	2aff      	cmp	r2, #255	@ 0xff
 800c410:	d904      	bls.n	800c41c <__ascii_wctomb+0x14>
 800c412:	228a      	movs	r2, #138	@ 0x8a
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	f04f 30ff 	mov.w	r0, #4294967295
 800c41a:	4770      	bx	lr
 800c41c:	700a      	strb	r2, [r1, #0]
 800c41e:	2001      	movs	r0, #1
 800c420:	4770      	bx	lr
	...

0800c424 <fiprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	b503      	push	{r0, r1, lr}
 800c428:	4601      	mov	r1, r0
 800c42a:	ab03      	add	r3, sp, #12
 800c42c:	4805      	ldr	r0, [pc, #20]	@ (800c444 <fiprintf+0x20>)
 800c42e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c432:	6800      	ldr	r0, [r0, #0]
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	f000 f83f 	bl	800c4b8 <_vfiprintf_r>
 800c43a:	b002      	add	sp, #8
 800c43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c440:	b003      	add	sp, #12
 800c442:	4770      	bx	lr
 800c444:	20000018 	.word	0x20000018

0800c448 <abort>:
 800c448:	b508      	push	{r3, lr}
 800c44a:	2006      	movs	r0, #6
 800c44c:	f000 f974 	bl	800c738 <raise>
 800c450:	2001      	movs	r0, #1
 800c452:	f7f5 fbe7 	bl	8001c24 <_exit>

0800c456 <_malloc_usable_size_r>:
 800c456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c45a:	1f18      	subs	r0, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bfbc      	itt	lt
 800c460:	580b      	ldrlt	r3, [r1, r0]
 800c462:	18c0      	addlt	r0, r0, r3
 800c464:	4770      	bx	lr

0800c466 <__sfputc_r>:
 800c466:	6893      	ldr	r3, [r2, #8]
 800c468:	3b01      	subs	r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	b410      	push	{r4}
 800c46e:	6093      	str	r3, [r2, #8]
 800c470:	da08      	bge.n	800c484 <__sfputc_r+0x1e>
 800c472:	6994      	ldr	r4, [r2, #24]
 800c474:	42a3      	cmp	r3, r4
 800c476:	db01      	blt.n	800c47c <__sfputc_r+0x16>
 800c478:	290a      	cmp	r1, #10
 800c47a:	d103      	bne.n	800c484 <__sfputc_r+0x1e>
 800c47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c480:	f7fe b899 	b.w	800a5b6 <__swbuf_r>
 800c484:	6813      	ldr	r3, [r2, #0]
 800c486:	1c58      	adds	r0, r3, #1
 800c488:	6010      	str	r0, [r2, #0]
 800c48a:	7019      	strb	r1, [r3, #0]
 800c48c:	4608      	mov	r0, r1
 800c48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <__sfputs_r>:
 800c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	4614      	mov	r4, r2
 800c49c:	18d5      	adds	r5, r2, r3
 800c49e:	42ac      	cmp	r4, r5
 800c4a0:	d101      	bne.n	800c4a6 <__sfputs_r+0x12>
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	e007      	b.n	800c4b6 <__sfputs_r+0x22>
 800c4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4aa:	463a      	mov	r2, r7
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff ffda 	bl	800c466 <__sfputc_r>
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d1f3      	bne.n	800c49e <__sfputs_r+0xa>
 800c4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4b8 <_vfiprintf_r>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	460d      	mov	r5, r1
 800c4be:	b09d      	sub	sp, #116	@ 0x74
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	4698      	mov	r8, r3
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	b118      	cbz	r0, 800c4d0 <_vfiprintf_r+0x18>
 800c4c8:	6a03      	ldr	r3, [r0, #32]
 800c4ca:	b90b      	cbnz	r3, 800c4d0 <_vfiprintf_r+0x18>
 800c4cc:	f7fd ff68 	bl	800a3a0 <__sinit>
 800c4d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4d2:	07d9      	lsls	r1, r3, #31
 800c4d4:	d405      	bmi.n	800c4e2 <_vfiprintf_r+0x2a>
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	059a      	lsls	r2, r3, #22
 800c4da:	d402      	bmi.n	800c4e2 <_vfiprintf_r+0x2a>
 800c4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4de:	f7fe f98e 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	071b      	lsls	r3, r3, #28
 800c4e6:	d501      	bpl.n	800c4ec <_vfiprintf_r+0x34>
 800c4e8:	692b      	ldr	r3, [r5, #16]
 800c4ea:	b99b      	cbnz	r3, 800c514 <_vfiprintf_r+0x5c>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7fe f8a0 	bl	800a634 <__swsetup_r>
 800c4f4:	b170      	cbz	r0, 800c514 <_vfiprintf_r+0x5c>
 800c4f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4f8:	07dc      	lsls	r4, r3, #31
 800c4fa:	d504      	bpl.n	800c506 <_vfiprintf_r+0x4e>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	b01d      	add	sp, #116	@ 0x74
 800c502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	0598      	lsls	r0, r3, #22
 800c50a:	d4f7      	bmi.n	800c4fc <_vfiprintf_r+0x44>
 800c50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c50e:	f7fe f977 	bl	800a800 <__retarget_lock_release_recursive>
 800c512:	e7f3      	b.n	800c4fc <_vfiprintf_r+0x44>
 800c514:	2300      	movs	r3, #0
 800c516:	9309      	str	r3, [sp, #36]	@ 0x24
 800c518:	2320      	movs	r3, #32
 800c51a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c51e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c522:	2330      	movs	r3, #48	@ 0x30
 800c524:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6d4 <_vfiprintf_r+0x21c>
 800c528:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c52c:	f04f 0901 	mov.w	r9, #1
 800c530:	4623      	mov	r3, r4
 800c532:	469a      	mov	sl, r3
 800c534:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c538:	b10a      	cbz	r2, 800c53e <_vfiprintf_r+0x86>
 800c53a:	2a25      	cmp	r2, #37	@ 0x25
 800c53c:	d1f9      	bne.n	800c532 <_vfiprintf_r+0x7a>
 800c53e:	ebba 0b04 	subs.w	fp, sl, r4
 800c542:	d00b      	beq.n	800c55c <_vfiprintf_r+0xa4>
 800c544:	465b      	mov	r3, fp
 800c546:	4622      	mov	r2, r4
 800c548:	4629      	mov	r1, r5
 800c54a:	4630      	mov	r0, r6
 800c54c:	f7ff ffa2 	bl	800c494 <__sfputs_r>
 800c550:	3001      	adds	r0, #1
 800c552:	f000 80a7 	beq.w	800c6a4 <_vfiprintf_r+0x1ec>
 800c556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c558:	445a      	add	r2, fp
 800c55a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c55c:	f89a 3000 	ldrb.w	r3, [sl]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 809f 	beq.w	800c6a4 <_vfiprintf_r+0x1ec>
 800c566:	2300      	movs	r3, #0
 800c568:	f04f 32ff 	mov.w	r2, #4294967295
 800c56c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c570:	f10a 0a01 	add.w	sl, sl, #1
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	9307      	str	r3, [sp, #28]
 800c578:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c57c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c57e:	4654      	mov	r4, sl
 800c580:	2205      	movs	r2, #5
 800c582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c586:	4853      	ldr	r0, [pc, #332]	@ (800c6d4 <_vfiprintf_r+0x21c>)
 800c588:	f7f3 fe5a 	bl	8000240 <memchr>
 800c58c:	9a04      	ldr	r2, [sp, #16]
 800c58e:	b9d8      	cbnz	r0, 800c5c8 <_vfiprintf_r+0x110>
 800c590:	06d1      	lsls	r1, r2, #27
 800c592:	bf44      	itt	mi
 800c594:	2320      	movmi	r3, #32
 800c596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c59a:	0713      	lsls	r3, r2, #28
 800c59c:	bf44      	itt	mi
 800c59e:	232b      	movmi	r3, #43	@ 0x2b
 800c5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5aa:	d015      	beq.n	800c5d8 <_vfiprintf_r+0x120>
 800c5ac:	9a07      	ldr	r2, [sp, #28]
 800c5ae:	4654      	mov	r4, sl
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	f04f 0c0a 	mov.w	ip, #10
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5bc:	3b30      	subs	r3, #48	@ 0x30
 800c5be:	2b09      	cmp	r3, #9
 800c5c0:	d94b      	bls.n	800c65a <_vfiprintf_r+0x1a2>
 800c5c2:	b1b0      	cbz	r0, 800c5f2 <_vfiprintf_r+0x13a>
 800c5c4:	9207      	str	r2, [sp, #28]
 800c5c6:	e014      	b.n	800c5f2 <_vfiprintf_r+0x13a>
 800c5c8:	eba0 0308 	sub.w	r3, r0, r8
 800c5cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	46a2      	mov	sl, r4
 800c5d6:	e7d2      	b.n	800c57e <_vfiprintf_r+0xc6>
 800c5d8:	9b03      	ldr	r3, [sp, #12]
 800c5da:	1d19      	adds	r1, r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	9103      	str	r1, [sp, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bfbb      	ittet	lt
 800c5e4:	425b      	neglt	r3, r3
 800c5e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5ea:	9307      	strge	r3, [sp, #28]
 800c5ec:	9307      	strlt	r3, [sp, #28]
 800c5ee:	bfb8      	it	lt
 800c5f0:	9204      	strlt	r2, [sp, #16]
 800c5f2:	7823      	ldrb	r3, [r4, #0]
 800c5f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5f6:	d10a      	bne.n	800c60e <_vfiprintf_r+0x156>
 800c5f8:	7863      	ldrb	r3, [r4, #1]
 800c5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5fc:	d132      	bne.n	800c664 <_vfiprintf_r+0x1ac>
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	1d1a      	adds	r2, r3, #4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	9203      	str	r2, [sp, #12]
 800c606:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c60a:	3402      	adds	r4, #2
 800c60c:	9305      	str	r3, [sp, #20]
 800c60e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6e4 <_vfiprintf_r+0x22c>
 800c612:	7821      	ldrb	r1, [r4, #0]
 800c614:	2203      	movs	r2, #3
 800c616:	4650      	mov	r0, sl
 800c618:	f7f3 fe12 	bl	8000240 <memchr>
 800c61c:	b138      	cbz	r0, 800c62e <_vfiprintf_r+0x176>
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	eba0 000a 	sub.w	r0, r0, sl
 800c624:	2240      	movs	r2, #64	@ 0x40
 800c626:	4082      	lsls	r2, r0
 800c628:	4313      	orrs	r3, r2
 800c62a:	3401      	adds	r4, #1
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c632:	4829      	ldr	r0, [pc, #164]	@ (800c6d8 <_vfiprintf_r+0x220>)
 800c634:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c638:	2206      	movs	r2, #6
 800c63a:	f7f3 fe01 	bl	8000240 <memchr>
 800c63e:	2800      	cmp	r0, #0
 800c640:	d03f      	beq.n	800c6c2 <_vfiprintf_r+0x20a>
 800c642:	4b26      	ldr	r3, [pc, #152]	@ (800c6dc <_vfiprintf_r+0x224>)
 800c644:	bb1b      	cbnz	r3, 800c68e <_vfiprintf_r+0x1d6>
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	3307      	adds	r3, #7
 800c64a:	f023 0307 	bic.w	r3, r3, #7
 800c64e:	3308      	adds	r3, #8
 800c650:	9303      	str	r3, [sp, #12]
 800c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c654:	443b      	add	r3, r7
 800c656:	9309      	str	r3, [sp, #36]	@ 0x24
 800c658:	e76a      	b.n	800c530 <_vfiprintf_r+0x78>
 800c65a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c65e:	460c      	mov	r4, r1
 800c660:	2001      	movs	r0, #1
 800c662:	e7a8      	b.n	800c5b6 <_vfiprintf_r+0xfe>
 800c664:	2300      	movs	r3, #0
 800c666:	3401      	adds	r4, #1
 800c668:	9305      	str	r3, [sp, #20]
 800c66a:	4619      	mov	r1, r3
 800c66c:	f04f 0c0a 	mov.w	ip, #10
 800c670:	4620      	mov	r0, r4
 800c672:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c676:	3a30      	subs	r2, #48	@ 0x30
 800c678:	2a09      	cmp	r2, #9
 800c67a:	d903      	bls.n	800c684 <_vfiprintf_r+0x1cc>
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0c6      	beq.n	800c60e <_vfiprintf_r+0x156>
 800c680:	9105      	str	r1, [sp, #20]
 800c682:	e7c4      	b.n	800c60e <_vfiprintf_r+0x156>
 800c684:	fb0c 2101 	mla	r1, ip, r1, r2
 800c688:	4604      	mov	r4, r0
 800c68a:	2301      	movs	r3, #1
 800c68c:	e7f0      	b.n	800c670 <_vfiprintf_r+0x1b8>
 800c68e:	ab03      	add	r3, sp, #12
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	462a      	mov	r2, r5
 800c694:	4b12      	ldr	r3, [pc, #72]	@ (800c6e0 <_vfiprintf_r+0x228>)
 800c696:	a904      	add	r1, sp, #16
 800c698:	4630      	mov	r0, r6
 800c69a:	f7fd fa3d 	bl	8009b18 <_printf_float>
 800c69e:	4607      	mov	r7, r0
 800c6a0:	1c78      	adds	r0, r7, #1
 800c6a2:	d1d6      	bne.n	800c652 <_vfiprintf_r+0x19a>
 800c6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d405      	bmi.n	800c6b6 <_vfiprintf_r+0x1fe>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	059a      	lsls	r2, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_vfiprintf_r+0x1fe>
 800c6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6b2:	f7fe f8a5 	bl	800a800 <__retarget_lock_release_recursive>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	065b      	lsls	r3, r3, #25
 800c6ba:	f53f af1f 	bmi.w	800c4fc <_vfiprintf_r+0x44>
 800c6be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6c0:	e71e      	b.n	800c500 <_vfiprintf_r+0x48>
 800c6c2:	ab03      	add	r3, sp, #12
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	462a      	mov	r2, r5
 800c6c8:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <_vfiprintf_r+0x228>)
 800c6ca:	a904      	add	r1, sp, #16
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7fd fcbb 	bl	800a048 <_printf_i>
 800c6d2:	e7e4      	b.n	800c69e <_vfiprintf_r+0x1e6>
 800c6d4:	0800cc68 	.word	0x0800cc68
 800c6d8:	0800cc72 	.word	0x0800cc72
 800c6dc:	08009b19 	.word	0x08009b19
 800c6e0:	0800c495 	.word	0x0800c495
 800c6e4:	0800cc6e 	.word	0x0800cc6e

0800c6e8 <_raise_r>:
 800c6e8:	291f      	cmp	r1, #31
 800c6ea:	b538      	push	{r3, r4, r5, lr}
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	d904      	bls.n	800c6fc <_raise_r+0x14>
 800c6f2:	2316      	movs	r3, #22
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6fe:	b112      	cbz	r2, 800c706 <_raise_r+0x1e>
 800c700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c704:	b94b      	cbnz	r3, 800c71a <_raise_r+0x32>
 800c706:	4628      	mov	r0, r5
 800c708:	f000 f830 	bl	800c76c <_getpid_r>
 800c70c:	4622      	mov	r2, r4
 800c70e:	4601      	mov	r1, r0
 800c710:	4628      	mov	r0, r5
 800c712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c716:	f000 b817 	b.w	800c748 <_kill_r>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d00a      	beq.n	800c734 <_raise_r+0x4c>
 800c71e:	1c59      	adds	r1, r3, #1
 800c720:	d103      	bne.n	800c72a <_raise_r+0x42>
 800c722:	2316      	movs	r3, #22
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	2001      	movs	r0, #1
 800c728:	e7e7      	b.n	800c6fa <_raise_r+0x12>
 800c72a:	2100      	movs	r1, #0
 800c72c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c730:	4620      	mov	r0, r4
 800c732:	4798      	blx	r3
 800c734:	2000      	movs	r0, #0
 800c736:	e7e0      	b.n	800c6fa <_raise_r+0x12>

0800c738 <raise>:
 800c738:	4b02      	ldr	r3, [pc, #8]	@ (800c744 <raise+0xc>)
 800c73a:	4601      	mov	r1, r0
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f7ff bfd3 	b.w	800c6e8 <_raise_r>
 800c742:	bf00      	nop
 800c744:	20000018 	.word	0x20000018

0800c748 <_kill_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d07      	ldr	r5, [pc, #28]	@ (800c768 <_kill_r+0x20>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	4611      	mov	r1, r2
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	f7f5 fa55 	bl	8001c04 <_kill>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d102      	bne.n	800c764 <_kill_r+0x1c>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	b103      	cbz	r3, 800c764 <_kill_r+0x1c>
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop
 800c768:	20000688 	.word	0x20000688

0800c76c <_getpid_r>:
 800c76c:	f7f5 ba42 	b.w	8001bf4 <_getpid>

0800c770 <_init>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr

0800c77c <_fini>:
 800c77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77e:	bf00      	nop
 800c780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c782:	bc08      	pop	{r3}
 800c784:	469e      	mov	lr, r3
 800c786:	4770      	bx	lr
